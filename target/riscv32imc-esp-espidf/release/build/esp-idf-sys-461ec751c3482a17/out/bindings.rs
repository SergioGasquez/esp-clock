/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6usize] = b"3.3.0\0";
pub const __NEWLIB__: u32 = 3;
pub const __NEWLIB_MINOR__: u32 = 3;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const _POSIX_THREADS: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 1;
pub const _POSIX_TIMERS: u32 = 1;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: u32 = 200112;
pub const _UNIX98_THREAD_MUTEX_ATTRIBUTES: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3usize] = b"hh\0";
pub const __INT16: &[u8; 2usize] = b"h\0";
pub const __INT64: &[u8; 3usize] = b"ll\0";
pub const __FAST8: &[u8; 3usize] = b"hh\0";
pub const __FAST16: &[u8; 2usize] = b"h\0";
pub const __FAST64: &[u8; 3usize] = b"ll\0";
pub const __LEAST8: &[u8; 3usize] = b"hh\0";
pub const __LEAST16: &[u8; 2usize] = b"h\0";
pub const __LEAST64: &[u8; 3usize] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __NEWLIB_H__: u32 = 1;
pub const _WANT_IO_C99_FORMATS: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_IO_POS_ARGS: u32 = 1;
pub const _WANT_REENT_SMALL: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const _ICONV_ENABLED: u32 = 1;
pub const HAVE_INITFINI_ARRAY: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _RETARGETABLE_LOCKING: u32 = 1;
pub const _WANT_USE_LONG_TIME_T: u32 = 1;
pub const __OBSOLETE_MATH_DEFAULT: u32 = 1;
pub const __OBSOLETE_MATH: u32 = 1;
pub const __BUFSIZ__: u32 = 128;
pub const __RAND_MAX: u32 = 2147483647;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _NULL: u32 = 0;
pub const _ATEXIT_SIZE: u32 = 32;
pub const _RAND48_SEED_0: u32 = 13070;
pub const _RAND48_SEED_1: u32 = 43981;
pub const _RAND48_SEED_2: u32 = 4660;
pub const _RAND48_MULT_0: u32 = 58989;
pub const _RAND48_MULT_1: u32 = 57068;
pub const _RAND48_MULT_2: u32 = 5;
pub const _RAND48_ADD: u32 = 11;
pub const _REENT_EMERGENCY_SIZE: u32 = 25;
pub const _REENT_ASCTIME_SIZE: u32 = 26;
pub const _REENT_SIGNAL_SIZE: u32 = 24;
pub const CONFIG_IDF_CMAKE: u32 = 1;
pub const CONFIG_IDF_TARGET_ARCH_RISCV: u32 = 1;
pub const CONFIG_IDF_TARGET: &[u8; 8usize] = b"esp32c3\0";
pub const CONFIG_IDF_TARGET_ESP32C3: u32 = 1;
pub const CONFIG_IDF_FIRMWARE_CHIP_ID: u32 = 5;
pub const CONFIG_SDK_TOOLPREFIX: &[u8; 17usize] = b"riscv32-esp-elf-\0";
pub const CONFIG_APP_BUILD_TYPE_APP_2NDBOOT: u32 = 1;
pub const CONFIG_APP_BUILD_GENERATE_BINARIES: u32 = 1;
pub const CONFIG_APP_BUILD_BOOTLOADER: u32 = 1;
pub const CONFIG_APP_BUILD_USE_FLASH_SECTIONS: u32 = 1;
pub const CONFIG_APP_COMPILE_TIME_DATE: u32 = 1;
pub const CONFIG_APP_RETRIEVE_LEN_ELF_SHA: u32 = 16;
pub const CONFIG_BOOTLOADER_OFFSET_IN_FLASH: u32 = 0;
pub const CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE: u32 = 1;
pub const CONFIG_BOOTLOADER_LOG_LEVEL_INFO: u32 = 1;
pub const CONFIG_BOOTLOADER_LOG_LEVEL: u32 = 3;
pub const CONFIG_BOOTLOADER_VDDSDIO_BOOST_1_9V: u32 = 1;
pub const CONFIG_BOOTLOADER_REGION_PROTECTION_ENABLE: u32 = 1;
pub const CONFIG_BOOTLOADER_WDT_ENABLE: u32 = 1;
pub const CONFIG_BOOTLOADER_WDT_TIME_MS: u32 = 9000;
pub const CONFIG_BOOTLOADER_RESERVE_RTC_SIZE: u32 = 0;
pub const CONFIG_BOOTLOADER_FLASH_XMC_SUPPORT: u32 = 1;
pub const CONFIG_SECURE_BOOT_SUPPORTS_RSA: u32 = 1;
pub const CONFIG_SECURE_TARGET_HAS_SECURE_ROM_DL_MODE: u32 = 1;
pub const CONFIG_BOOT_ROM_LOG_ALWAYS_ON: u32 = 1;
pub const CONFIG_ESPTOOLPY_BAUD_OTHER_VAL: u32 = 115200;
pub const CONFIG_ESPTOOLPY_FLASHMODE_DIO: u32 = 1;
pub const CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_STR: u32 = 1;
pub const CONFIG_ESPTOOLPY_FLASHMODE: &[u8; 4usize] = b"dio\0";
pub const CONFIG_ESPTOOLPY_FLASHFREQ_80M: u32 = 1;
pub const CONFIG_ESPTOOLPY_FLASHFREQ: &[u8; 4usize] = b"80m\0";
pub const CONFIG_ESPTOOLPY_FLASHSIZE_2MB: u32 = 1;
pub const CONFIG_ESPTOOLPY_FLASHSIZE: &[u8; 4usize] = b"2MB\0";
pub const CONFIG_ESPTOOLPY_FLASHSIZE_DETECT: u32 = 1;
pub const CONFIG_ESPTOOLPY_BEFORE_RESET: u32 = 1;
pub const CONFIG_ESPTOOLPY_BEFORE: &[u8; 14usize] = b"default_reset\0";
pub const CONFIG_ESPTOOLPY_AFTER_RESET: u32 = 1;
pub const CONFIG_ESPTOOLPY_AFTER: &[u8; 11usize] = b"hard_reset\0";
pub const CONFIG_ESPTOOLPY_MONITOR_BAUD_115200B: u32 = 1;
pub const CONFIG_ESPTOOLPY_MONITOR_BAUD_OTHER_VAL: u32 = 115200;
pub const CONFIG_ESPTOOLPY_MONITOR_BAUD: u32 = 115200;
pub const CONFIG_PARTITION_TABLE_SINGLE_APP: u32 = 1;
pub const CONFIG_PARTITION_TABLE_CUSTOM_FILENAME: &[u8; 15usize] = b"partitions.csv\0";
pub const CONFIG_PARTITION_TABLE_FILENAME: &[u8; 25usize] = b"partitions_singleapp.csv\0";
pub const CONFIG_PARTITION_TABLE_OFFSET: u32 = 32768;
pub const CONFIG_PARTITION_TABLE_MD5: u32 = 1;
pub const CONFIG_COMPILER_OPTIMIZATION_PERF: u32 = 1;
pub const CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE: u32 = 1;
pub const CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL: u32 = 2;
pub const CONFIG_COMPILER_HIDE_PATHS_MACROS: u32 = 1;
pub const CONFIG_COMPILER_STACK_CHECK_MODE_NONE: u32 = 1;
pub const CONFIG_APPTRACE_DEST_NONE: u32 = 1;
pub const CONFIG_APPTRACE_LOCK_ENABLE: u32 = 1;
pub const CONFIG_COAP_MBEDTLS_PSK: u32 = 1;
pub const CONFIG_COAP_LOG_DEFAULT_LEVEL: u32 = 0;
pub const CONFIG_ADC_DISABLE_DAC: u32 = 1;
pub const CONFIG_SPI_MASTER_ISR_IN_IRAM: u32 = 1;
pub const CONFIG_SPI_SLAVE_ISR_IN_IRAM: u32 = 1;
pub const CONFIG_EFUSE_MAX_BLK_LEN: u32 = 256;
pub const CONFIG_ESP_TLS_USING_MBEDTLS: u32 = 1;
pub const CONFIG_ESP_TLS_USE_DS_PERIPHERAL: u32 = 1;
pub const CONFIG_ESP32C3_DEFAULT_CPU_FREQ_160: u32 = 1;
pub const CONFIG_ESP32C3_DEFAULT_CPU_FREQ_MHZ: u32 = 160;
pub const CONFIG_ESP32C3_REV_MIN_3: u32 = 1;
pub const CONFIG_ESP32C3_REV_MIN: u32 = 3;
pub const CONFIG_ESP32C3_DEBUG_OCDAWARE: u32 = 1;
pub const CONFIG_ESP32C3_BROWNOUT_DET: u32 = 1;
pub const CONFIG_ESP32C3_BROWNOUT_DET_LVL_SEL_7: u32 = 1;
pub const CONFIG_ESP32C3_BROWNOUT_DET_LVL: u32 = 7;
pub const CONFIG_ESP32C3_TIME_SYSCALL_USE_RTC_SYSTIMER: u32 = 1;
pub const CONFIG_ESP32C3_RTC_CLK_SRC_INT_RC: u32 = 1;
pub const CONFIG_ESP32C3_RTC_CLK_CAL_CYCLES: u32 = 1024;
pub const CONFIG_ESP_ERR_TO_NAME_LOOKUP: u32 = 1;
pub const CONFIG_ETH_ENABLED: u32 = 1;
pub const CONFIG_ETH_USE_SPI_ETHERNET: u32 = 1;
pub const CONFIG_ESP_EVENT_POST_FROM_ISR: u32 = 1;
pub const CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR: u32 = 1;
pub const CONFIG_ESP_HTTP_CLIENT_ENABLE_HTTPS: u32 = 1;
pub const CONFIG_ESP_HTTP_CLIENT_ENABLE_DIGEST_AUTH: u32 = 1;
pub const CONFIG_HTTPD_MAX_REQ_HDR_LEN: u32 = 512;
pub const CONFIG_HTTPD_MAX_URI_LEN: u32 = 512;
pub const CONFIG_HTTPD_ERR_RESP_NO_DELAY: u32 = 1;
pub const CONFIG_HTTPD_PURGE_BUF_LEN: u32 = 32;
pub const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_STA: u32 = 1;
pub const CONFIG_ESP_MAC_ADDR_UNIVERSE_WIFI_AP: u32 = 1;
pub const CONFIG_ESP_MAC_ADDR_UNIVERSE_BT: u32 = 1;
pub const CONFIG_ESP_MAC_ADDR_UNIVERSE_ETH: u32 = 1;
pub const CONFIG_ESP32C3_UNIVERSAL_MAC_ADDRESSES_FOUR: u32 = 1;
pub const CONFIG_ESP32C3_UNIVERSAL_MAC_ADDRESSES: u32 = 4;
pub const CONFIG_ESP_SLEEP_POWER_DOWN_FLASH: u32 = 1;
pub const CONFIG_ESP_SLEEP_GPIO_RESET_WORKAROUND: u32 = 1;
pub const CONFIG_RTC_CLOCK_BBPLL_POWER_ON_WITH_USB: u32 = 1;
pub const CONFIG_ESP_IPC_TASK_STACK_SIZE: u32 = 1536;
pub const CONFIG_LCD_PANEL_IO_FORMAT_BUF_SIZE: u32 = 32;
pub const CONFIG_ESP_NETIF_IP_LOST_TIMER_INTERVAL: u32 = 120;
pub const CONFIG_ESP_NETIF_TCPIP_LWIP: u32 = 1;
pub const CONFIG_ESP_NETIF_TCPIP_ADAPTER_COMPATIBLE_LAYER: u32 = 1;
pub const CONFIG_ESP_PHY_CALIBRATION_AND_DATA_STORAGE: u32 = 1;
pub const CONFIG_ESP_PHY_MAX_WIFI_TX_POWER: u32 = 20;
pub const CONFIG_ESP_PHY_MAX_TX_POWER: u32 = 20;
pub const CONFIG_ESP_PHY_ENABLE_USB: u32 = 1;
pub const CONFIG_PM_POWER_DOWN_CPU_IN_LIGHT_SLEEP: u32 = 1;
pub const CONFIG_ESP_SYSTEM_PANIC_PRINT_REBOOT: u32 = 1;
pub const CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE: u32 = 1;
pub const CONFIG_ESP_SYSTEM_RTC_FAST_MEM_AS_HEAP_DEPCHECK: u32 = 1;
pub const CONFIG_ESP_SYSTEM_ALLOW_RTC_FAST_MEM_AS_HEAP: u32 = 1;
pub const CONFIG_ESP_SYSTEM_MEMPROT_DEPCHECK: u32 = 1;
pub const CONFIG_ESP_SYSTEM_MEMPROT_FEATURE: u32 = 1;
pub const CONFIG_ESP_SYSTEM_MEMPROT_FEATURE_LOCK: u32 = 1;
pub const CONFIG_ESP_SYSTEM_MEMPROT_CPU_PREFETCH_PAD_SIZE: u32 = 16;
pub const CONFIG_ESP_SYSTEM_MEMPROT_MEM_ALIGN_SIZE: u32 = 512;
pub const CONFIG_ESP_SYSTEM_EVENT_QUEUE_SIZE: u32 = 32;
pub const CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE: u32 = 2304;
pub const CONFIG_ESP_MAIN_TASK_STACK_SIZE: u32 = 7000;
pub const CONFIG_ESP_MAIN_TASK_AFFINITY_CPU0: u32 = 1;
pub const CONFIG_ESP_MAIN_TASK_AFFINITY: u32 = 0;
pub const CONFIG_ESP_MINIMAL_SHARED_STACK_SIZE: u32 = 2048;
pub const CONFIG_ESP_CONSOLE_UART_DEFAULT: u32 = 1;
pub const CONFIG_ESP_CONSOLE_SECONDARY_USB_SERIAL_JTAG: u32 = 1;
pub const CONFIG_ESP_CONSOLE_UART: u32 = 1;
pub const CONFIG_ESP_CONSOLE_UART_NUM: u32 = 0;
pub const CONFIG_ESP_CONSOLE_UART_BAUDRATE: u32 = 115200;
pub const CONFIG_ESP_INT_WDT: u32 = 1;
pub const CONFIG_ESP_INT_WDT_TIMEOUT_MS: u32 = 300;
pub const CONFIG_ESP_TASK_WDT: u32 = 1;
pub const CONFIG_ESP_TASK_WDT_TIMEOUT_S: u32 = 5;
pub const CONFIG_ESP_TASK_WDT_CHECK_IDLE_TASK_CPU0: u32 = 1;
pub const CONFIG_ESP_SYSTEM_CHECK_INT_LEVEL_4: u32 = 1;
pub const CONFIG_ESP_TIME_FUNCS_USE_RTC_TIMER: u32 = 1;
pub const CONFIG_ESP_TIME_FUNCS_USE_ESP_TIMER: u32 = 1;
pub const CONFIG_ESP_TIMER_TASK_STACK_SIZE: u32 = 3584;
pub const CONFIG_ESP_TIMER_INTERRUPT_LEVEL: u32 = 1;
pub const CONFIG_ESP_TIMER_IMPL_SYSTIMER: u32 = 1;
pub const CONFIG_ESP32_WIFI_ENABLED: u32 = 1;
pub const CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM: u32 = 10;
pub const CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM: u32 = 32;
pub const CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER: u32 = 1;
pub const CONFIG_ESP32_WIFI_TX_BUFFER_TYPE: u32 = 1;
pub const CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM: u32 = 32;
pub const CONFIG_ESP32_WIFI_AMPDU_TX_ENABLED: u32 = 1;
pub const CONFIG_ESP32_WIFI_TX_BA_WIN: u32 = 6;
pub const CONFIG_ESP32_WIFI_AMPDU_RX_ENABLED: u32 = 1;
pub const CONFIG_ESP32_WIFI_RX_BA_WIN: u32 = 6;
pub const CONFIG_ESP32_WIFI_NVS_ENABLED: u32 = 1;
pub const CONFIG_ESP32_WIFI_SOFTAP_BEACON_MAX_LEN: u32 = 752;
pub const CONFIG_ESP32_WIFI_MGMT_SBUF_NUM: u32 = 32;
pub const CONFIG_ESP32_WIFI_IRAM_OPT: u32 = 1;
pub const CONFIG_ESP32_WIFI_RX_IRAM_OPT: u32 = 1;
pub const CONFIG_ESP32_WIFI_ENABLE_WPA3_SAE: u32 = 1;
pub const CONFIG_ESP_WIFI_SOFTAP_SUPPORT: u32 = 1;
pub const CONFIG_ESP_COREDUMP_ENABLE_TO_NONE: u32 = 1;
pub const CONFIG_FATFS_CODEPAGE_437: u32 = 1;
pub const CONFIG_FATFS_CODEPAGE: u32 = 437;
pub const CONFIG_FATFS_LFN_NONE: u32 = 1;
pub const CONFIG_FATFS_FS_LOCK: u32 = 0;
pub const CONFIG_FATFS_TIMEOUT_MS: u32 = 10000;
pub const CONFIG_FATFS_PER_FILE_CACHE: u32 = 1;
pub const CONFIG_FMB_COMM_MODE_TCP_EN: u32 = 1;
pub const CONFIG_FMB_TCP_PORT_DEFAULT: u32 = 502;
pub const CONFIG_FMB_TCP_PORT_MAX_CONN: u32 = 5;
pub const CONFIG_FMB_TCP_CONNECTION_TOUT_SEC: u32 = 20;
pub const CONFIG_FMB_COMM_MODE_RTU_EN: u32 = 1;
pub const CONFIG_FMB_COMM_MODE_ASCII_EN: u32 = 1;
pub const CONFIG_FMB_MASTER_TIMEOUT_MS_RESPOND: u32 = 150;
pub const CONFIG_FMB_MASTER_DELAY_MS_CONVERT: u32 = 200;
pub const CONFIG_FMB_QUEUE_LENGTH: u32 = 20;
pub const CONFIG_FMB_PORT_TASK_STACK_SIZE: u32 = 4096;
pub const CONFIG_FMB_SERIAL_BUF_SIZE: u32 = 256;
pub const CONFIG_FMB_SERIAL_ASCII_BITS_PER_SYMB: u32 = 8;
pub const CONFIG_FMB_SERIAL_ASCII_TIMEOUT_RESPOND_MS: u32 = 1000;
pub const CONFIG_FMB_PORT_TASK_PRIO: u32 = 10;
pub const CONFIG_FMB_PORT_TASK_AFFINITY: u32 = 2147483647;
pub const CONFIG_FMB_CONTROLLER_SLAVE_ID_SUPPORT: u32 = 1;
pub const CONFIG_FMB_CONTROLLER_SLAVE_ID: u32 = 1122867;
pub const CONFIG_FMB_CONTROLLER_NOTIFY_TIMEOUT: u32 = 20;
pub const CONFIG_FMB_CONTROLLER_NOTIFY_QUEUE_SIZE: u32 = 20;
pub const CONFIG_FMB_CONTROLLER_STACK_SIZE: u32 = 4096;
pub const CONFIG_FMB_EVENT_QUEUE_TIMEOUT: u32 = 20;
pub const CONFIG_FMB_TIMER_GROUP: u32 = 0;
pub const CONFIG_FMB_TIMER_INDEX: u32 = 0;
pub const CONFIG_FMB_MASTER_TIMER_GROUP: u32 = 0;
pub const CONFIG_FMB_MASTER_TIMER_INDEX: u32 = 0;
pub const CONFIG_FREERTOS_UNICORE: u32 = 1;
pub const CONFIG_FREERTOS_NO_AFFINITY: u32 = 2147483647;
pub const CONFIG_FREERTOS_TICK_SUPPORT_SYSTIMER: u32 = 1;
pub const CONFIG_FREERTOS_CORETIMER_SYSTIMER_LVL1: u32 = 1;
pub const CONFIG_FREERTOS_SYSTICK_USES_SYSTIMER: u32 = 1;
pub const CONFIG_FREERTOS_OPTIMIZED_SCHEDULER: u32 = 1;
pub const CONFIG_FREERTOS_HZ: u32 = 100;
pub const CONFIG_FREERTOS_ASSERT_ON_UNTESTED_FUNCTION: u32 = 1;
pub const CONFIG_FREERTOS_CHECK_STACKOVERFLOW_CANARY: u32 = 1;
pub const CONFIG_FREERTOS_INTERRUPT_BACKTRACE: u32 = 1;
pub const CONFIG_FREERTOS_THREAD_LOCAL_STORAGE_POINTERS: u32 = 1;
pub const CONFIG_FREERTOS_ASSERT_FAIL_ABORT: u32 = 1;
pub const CONFIG_FREERTOS_IDLE_TASK_STACKSIZE: u32 = 1536;
pub const CONFIG_FREERTOS_ISR_STACKSIZE: u32 = 1536;
pub const CONFIG_FREERTOS_MAX_TASK_NAME_LEN: u32 = 16;
pub const CONFIG_FREERTOS_SUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const CONFIG_FREERTOS_TIMER_TASK_PRIORITY: u32 = 1;
pub const CONFIG_FREERTOS_TIMER_TASK_STACK_DEPTH: u32 = 2048;
pub const CONFIG_FREERTOS_TIMER_QUEUE_LENGTH: u32 = 10;
pub const CONFIG_FREERTOS_QUEUE_REGISTRY_SIZE: u32 = 0;
pub const CONFIG_FREERTOS_CHECK_MUTEX_GIVEN_BY_OWNER: u32 = 1;
pub const CONFIG_FREERTOS_DEBUG_OCDAWARE: u32 = 1;
pub const CONFIG_FREERTOS_ENABLE_TASK_SNAPSHOT: u32 = 1;
pub const CONFIG_HAL_ASSERTION_EQUALS_SYSTEM: u32 = 1;
pub const CONFIG_HAL_DEFAULT_ASSERTION_LEVEL: u32 = 2;
pub const CONFIG_HEAP_POISONING_DISABLED: u32 = 1;
pub const CONFIG_HEAP_TRACING_OFF: u32 = 1;
pub const CONFIG_LOG_DEFAULT_LEVEL_INFO: u32 = 1;
pub const CONFIG_LOG_DEFAULT_LEVEL: u32 = 3;
pub const CONFIG_LOG_MAXIMUM_EQUALS_DEFAULT: u32 = 1;
pub const CONFIG_LOG_MAXIMUM_LEVEL: u32 = 3;
pub const CONFIG_LOG_COLORS: u32 = 1;
pub const CONFIG_LOG_TIMESTAMP_SOURCE_RTOS: u32 = 1;
pub const CONFIG_LWIP_LOCAL_HOSTNAME: &[u8; 10usize] = b"espressif\0";
pub const CONFIG_LWIP_DNS_SUPPORT_MDNS_QUERIES: u32 = 1;
pub const CONFIG_LWIP_TIMERS_ONDEMAND: u32 = 1;
pub const CONFIG_LWIP_MAX_SOCKETS: u32 = 10;
pub const CONFIG_LWIP_SO_REUSE: u32 = 1;
pub const CONFIG_LWIP_SO_REUSE_RXTOALL: u32 = 1;
pub const CONFIG_LWIP_IP4_FRAG: u32 = 1;
pub const CONFIG_LWIP_IP6_FRAG: u32 = 1;
pub const CONFIG_LWIP_ESP_GRATUITOUS_ARP: u32 = 1;
pub const CONFIG_LWIP_GARP_TMR_INTERVAL: u32 = 60;
pub const CONFIG_LWIP_TCPIP_RECVMBOX_SIZE: u32 = 32;
pub const CONFIG_LWIP_DHCP_DOES_ARP_CHECK: u32 = 1;
pub const CONFIG_LWIP_DHCP_DISABLE_VENDOR_CLASS_ID: u32 = 1;
pub const CONFIG_LWIP_DHCP_OPTIONS_LEN: u32 = 68;
pub const CONFIG_LWIP_DHCPS: u32 = 1;
pub const CONFIG_LWIP_DHCPS_LEASE_UNIT: u32 = 60;
pub const CONFIG_LWIP_DHCPS_MAX_STATION_NUM: u32 = 8;
pub const CONFIG_LWIP_IPV6: u32 = 1;
pub const CONFIG_LWIP_IPV6_NUM_ADDRESSES: u32 = 3;
pub const CONFIG_LWIP_NETIF_LOOPBACK: u32 = 1;
pub const CONFIG_LWIP_LOOPBACK_MAX_PBUFS: u32 = 8;
pub const CONFIG_LWIP_MAX_ACTIVE_TCP: u32 = 16;
pub const CONFIG_LWIP_MAX_LISTENING_TCP: u32 = 16;
pub const CONFIG_LWIP_TCP_HIGH_SPEED_RETRANSMISSION: u32 = 1;
pub const CONFIG_LWIP_TCP_MAXRTX: u32 = 12;
pub const CONFIG_LWIP_TCP_SYNMAXRTX: u32 = 12;
pub const CONFIG_LWIP_TCP_MSS: u32 = 1440;
pub const CONFIG_LWIP_TCP_TMR_INTERVAL: u32 = 250;
pub const CONFIG_LWIP_TCP_MSL: u32 = 60000;
pub const CONFIG_LWIP_TCP_SND_BUF_DEFAULT: u32 = 5744;
pub const CONFIG_LWIP_TCP_WND_DEFAULT: u32 = 5744;
pub const CONFIG_LWIP_TCP_RECVMBOX_SIZE: u32 = 6;
pub const CONFIG_LWIP_TCP_QUEUE_OOSEQ: u32 = 1;
pub const CONFIG_LWIP_TCP_OVERSIZE_MSS: u32 = 1;
pub const CONFIG_LWIP_TCP_RTO_TIME: u32 = 1500;
pub const CONFIG_LWIP_MAX_UDP_PCBS: u32 = 16;
pub const CONFIG_LWIP_UDP_RECVMBOX_SIZE: u32 = 6;
pub const CONFIG_LWIP_CHECKSUM_CHECK_ICMP: u32 = 1;
pub const CONFIG_LWIP_TCPIP_TASK_STACK_SIZE: u32 = 3072;
pub const CONFIG_LWIP_TCPIP_TASK_AFFINITY_NO_AFFINITY: u32 = 1;
pub const CONFIG_LWIP_TCPIP_TASK_AFFINITY: u32 = 2147483647;
pub const CONFIG_LWIP_IPV6_MEMP_NUM_ND6_QUEUE: u32 = 3;
pub const CONFIG_LWIP_IPV6_ND6_NUM_NEIGHBORS: u32 = 5;
pub const CONFIG_LWIP_ICMP: u32 = 1;
pub const CONFIG_LWIP_MAX_RAW_PCBS: u32 = 16;
pub const CONFIG_LWIP_SNTP_MAX_SERVERS: u32 = 1;
pub const CONFIG_LWIP_SNTP_UPDATE_DELAY: u32 = 3600000;
pub const CONFIG_LWIP_ESP_LWIP_ASSERT: u32 = 1;
pub const CONFIG_LWIP_HOOK_TCP_ISN_DEFAULT: u32 = 1;
pub const CONFIG_LWIP_HOOK_IP6_ROUTE_NONE: u32 = 1;
pub const CONFIG_LWIP_HOOK_ND6_GET_GW_NONE: u32 = 1;
pub const CONFIG_LWIP_HOOK_NETCONN_EXT_RESOLVE_NONE: u32 = 1;
pub const CONFIG_MBEDTLS_INTERNAL_MEM_ALLOC: u32 = 1;
pub const CONFIG_MBEDTLS_ASYMMETRIC_CONTENT_LEN: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN: u32 = 16384;
pub const CONFIG_MBEDTLS_SSL_OUT_CONTENT_LEN: u32 = 4096;
pub const CONFIG_MBEDTLS_SSL_KEEP_PEER_CERTIFICATE: u32 = 1;
pub const CONFIG_MBEDTLS_HARDWARE_AES: u32 = 1;
pub const CONFIG_MBEDTLS_AES_USE_INTERRUPT: u32 = 1;
pub const CONFIG_MBEDTLS_HARDWARE_MPI: u32 = 1;
pub const CONFIG_MBEDTLS_HARDWARE_SHA: u32 = 1;
pub const CONFIG_MBEDTLS_ROM_MD5: u32 = 1;
pub const CONFIG_MBEDTLS_HAVE_TIME: u32 = 1;
pub const CONFIG_MBEDTLS_ECDSA_DETERMINISTIC: u32 = 1;
pub const CONFIG_MBEDTLS_SHA512_C: u32 = 1;
pub const CONFIG_MBEDTLS_TLS_SERVER_AND_CLIENT: u32 = 1;
pub const CONFIG_MBEDTLS_TLS_SERVER: u32 = 1;
pub const CONFIG_MBEDTLS_TLS_CLIENT: u32 = 1;
pub const CONFIG_MBEDTLS_TLS_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_RSA: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_DHE_RSA: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_ELLIPTIC_CURVE: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA: u32 = 1;
pub const CONFIG_MBEDTLS_KEY_EXCHANGE_ECDH_RSA: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_RENEGOTIATION: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_PROTO_TLS1: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_PROTO_TLS1_1: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_PROTO_TLS1_2: u32 = 1;
pub const CONFIG_MBEDTLS_SSL_ALPN: u32 = 1;
pub const CONFIG_MBEDTLS_CLIENT_SSL_SESSION_TICKETS: u32 = 1;
pub const CONFIG_MBEDTLS_X509_CHECK_KEY_USAGE: u32 = 1;
pub const CONFIG_MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE: u32 = 1;
pub const CONFIG_MBEDTLS_SERVER_SSL_SESSION_TICKETS: u32 = 1;
pub const CONFIG_MBEDTLS_AES_C: u32 = 1;
pub const CONFIG_MBEDTLS_RC4_DISABLED: u32 = 1;
pub const CONFIG_MBEDTLS_CCM_C: u32 = 1;
pub const CONFIG_MBEDTLS_GCM_C: u32 = 1;
pub const CONFIG_MBEDTLS_PEM_PARSE_C: u32 = 1;
pub const CONFIG_MBEDTLS_PEM_WRITE_C: u32 = 1;
pub const CONFIG_MBEDTLS_X509_CRL_PARSE_C: u32 = 1;
pub const CONFIG_MBEDTLS_X509_CSR_PARSE_C: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_C: u32 = 1;
pub const CONFIG_MBEDTLS_ECDH_C: u32 = 1;
pub const CONFIG_MBEDTLS_ECDSA_C: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP192R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP224R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP256R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP384R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP521R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP192K1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP224K1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_SECP256K1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_BP256R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_BP384R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_BP512R1_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_DP_CURVE25519_ENABLED: u32 = 1;
pub const CONFIG_MBEDTLS_ECP_NIST_OPTIM: u32 = 1;
pub const CONFIG_MBEDTLS_LARGE_KEY_SOFTWARE_MPI: u32 = 1;
pub const CONFIG_MDNS_MAX_SERVICES: u32 = 10;
pub const CONFIG_MDNS_TASK_PRIORITY: u32 = 1;
pub const CONFIG_MDNS_TASK_STACK_SIZE: u32 = 4096;
pub const CONFIG_MDNS_TASK_AFFINITY_CPU0: u32 = 1;
pub const CONFIG_MDNS_TASK_AFFINITY: u32 = 0;
pub const CONFIG_MDNS_SERVICE_ADD_TIMEOUT_MS: u32 = 2000;
pub const CONFIG_MDNS_TIMER_PERIOD_MS: u32 = 100;
pub const CONFIG_MDNS_MULTIPLE_INSTANCE: u32 = 1;
pub const CONFIG_MQTT_PROTOCOL_311: u32 = 1;
pub const CONFIG_MQTT_TRANSPORT_SSL: u32 = 1;
pub const CONFIG_MQTT_TRANSPORT_WEBSOCKET: u32 = 1;
pub const CONFIG_MQTT_TRANSPORT_WEBSOCKET_SECURE: u32 = 1;
pub const CONFIG_NEWLIB_STDOUT_LINE_ENDING_CRLF: u32 = 1;
pub const CONFIG_NEWLIB_STDIN_LINE_ENDING_CR: u32 = 1;
pub const CONFIG_OPENSSL_ERROR_STACK: u32 = 1;
pub const CONFIG_OPENSSL_ASSERT_EXIT: u32 = 1;
pub const CONFIG_PTHREAD_TASK_PRIO_DEFAULT: u32 = 5;
pub const CONFIG_PTHREAD_TASK_STACK_SIZE_DEFAULT: u32 = 3072;
pub const CONFIG_PTHREAD_STACK_MIN: u32 = 768;
pub const CONFIG_PTHREAD_TASK_CORE_DEFAULT: i32 = -1;
pub const CONFIG_PTHREAD_TASK_NAME_DEFAULT: &[u8; 8usize] = b"pthread\0";
pub const CONFIG_SPI_FLASH_ROM_DRIVER_PATCH: u32 = 1;
pub const CONFIG_SPI_FLASH_DANGEROUS_WRITE_ABORTS: u32 = 1;
pub const CONFIG_SPI_FLASH_YIELD_DURING_ERASE: u32 = 1;
pub const CONFIG_SPI_FLASH_ERASE_YIELD_DURATION_MS: u32 = 20;
pub const CONFIG_SPI_FLASH_ERASE_YIELD_TICKS: u32 = 1;
pub const CONFIG_SPI_FLASH_WRITE_CHUNK_SIZE: u32 = 8192;
pub const CONFIG_SPI_FLASH_SUPPORT_ISSI_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_SUPPORT_MXIC_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_SUPPORT_GD_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_SUPPORT_WINBOND_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_SUPPORT_BOYA_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_SUPPORT_TH_CHIP: u32 = 1;
pub const CONFIG_SPI_FLASH_ENABLE_ENCRYPTED_READ_WRITE: u32 = 1;
pub const CONFIG_SPIFFS_MAX_PARTITIONS: u32 = 3;
pub const CONFIG_SPIFFS_CACHE: u32 = 1;
pub const CONFIG_SPIFFS_CACHE_WR: u32 = 1;
pub const CONFIG_SPIFFS_PAGE_CHECK: u32 = 1;
pub const CONFIG_SPIFFS_GC_MAX_RUNS: u32 = 10;
pub const CONFIG_SPIFFS_PAGE_SIZE: u32 = 256;
pub const CONFIG_SPIFFS_OBJ_NAME_LEN: u32 = 32;
pub const CONFIG_SPIFFS_USE_MAGIC: u32 = 1;
pub const CONFIG_SPIFFS_USE_MAGIC_LENGTH: u32 = 1;
pub const CONFIG_SPIFFS_META_LENGTH: u32 = 4;
pub const CONFIG_SPIFFS_USE_MTIME: u32 = 1;
pub const CONFIG_WS_TRANSPORT: u32 = 1;
pub const CONFIG_WS_BUFFER_SIZE: u32 = 1024;
pub const CONFIG_UNITY_ENABLE_FLOAT: u32 = 1;
pub const CONFIG_UNITY_ENABLE_DOUBLE: u32 = 1;
pub const CONFIG_UNITY_ENABLE_IDF_TEST_RUNNER: u32 = 1;
pub const CONFIG_VFS_SUPPORT_IO: u32 = 1;
pub const CONFIG_VFS_SUPPORT_DIR: u32 = 1;
pub const CONFIG_VFS_SUPPORT_SELECT: u32 = 1;
pub const CONFIG_VFS_SUPPRESS_SELECT_DEBUG_OUTPUT: u32 = 1;
pub const CONFIG_VFS_SUPPORT_TERMIOS: u32 = 1;
pub const CONFIG_VFS_SEMIHOSTFS_MAX_MOUNT_POINTS: u32 = 1;
pub const CONFIG_VFS_SEMIHOSTFS_HOST_PATH_MAX_LEN: u32 = 128;
pub const CONFIG_WL_SECTOR_SIZE_4096: u32 = 1;
pub const CONFIG_WL_SECTOR_SIZE: u32 = 4096;
pub const CONFIG_WIFI_PROV_SCAN_MAX_ENTRIES: u32 = 16;
pub const CONFIG_WIFI_PROV_AUTOSTOP_TIMEOUT: u32 = 30;
pub const CONFIG_WPA_MBEDTLS_CRYPTO: u32 = 1;
pub const CONFIG_ADC2_DISABLE_DAC: u32 = 1;
pub const CONFIG_CONSOLE_UART_DEFAULT: u32 = 1;
pub const CONFIG_ESP32C3_LIGHTSLEEP_GPIO_RESET_WORKAROUND: u32 = 1;
pub const CONFIG_ESP32C3_MEMPROT_FEATURE: u32 = 1;
pub const CONFIG_ESP32C3_MEMPROT_FEATURE_LOCK: u32 = 1;
pub const CONFIG_ESP32H2_MEMPROT_FEATURE: u32 = 1;
pub const CONFIG_ESP32H2_MEMPROT_FEATURE_LOCK: u32 = 1;
pub const CONFIG_ESP32S2_ALLOW_RTC_FAST_MEM_AS_HEAP: u32 = 1;
pub const CONFIG_ESP32S2_MEMPROT_FEATURE: u32 = 1;
pub const CONFIG_ESP32S2_MEMPROT_FEATURE_LOCK: u32 = 1;
pub const CONFIG_ESP32S2_PANIC_PRINT_REBOOT: u32 = 1;
pub const CONFIG_ESP32_ALLOW_RTC_FAST_MEM_AS_HEAP: u32 = 1;
pub const CONFIG_ESP32_APPTRACE_DEST_NONE: u32 = 1;
pub const CONFIG_ESP32_ENABLE_COREDUMP_TO_NONE: u32 = 1;
pub const CONFIG_ESP32_PANIC_PRINT_REBOOT: u32 = 1;
pub const CONFIG_ESP32_PHY_CALIBRATION_AND_DATA_STORAGE: u32 = 1;
pub const CONFIG_ESP32_PHY_MAX_WIFI_TX_POWER: u32 = 20;
pub const CONFIG_ESP32_PTHREAD_STACK_MIN: u32 = 768;
pub const CONFIG_ESP32_PTHREAD_TASK_NAME_DEFAULT: &[u8; 8usize] = b"pthread\0";
pub const CONFIG_ESP32_PTHREAD_TASK_PRIO_DEFAULT: u32 = 5;
pub const CONFIG_ESP32_PTHREAD_TASK_STACK_SIZE_DEFAULT: u32 = 3072;
pub const CONFIG_ESP_GRATUITOUS_ARP: u32 = 1;
pub const CONFIG_ESP_SYSTEM_PD_FLASH: u32 = 1;
pub const CONFIG_ESP_SYSTEM_PM_POWER_DOWN_CPU: u32 = 1;
pub const CONFIG_FLASHMODE_DIO: u32 = 1;
pub const CONFIG_GARP_TMR_INTERVAL: u32 = 60;
pub const CONFIG_INT_WDT: u32 = 1;
pub const CONFIG_INT_WDT_TIMEOUT_MS: u32 = 300;
pub const CONFIG_IPC_TASK_STACK_SIZE: u32 = 1536;
pub const CONFIG_LOG_BOOTLOADER_LEVEL_INFO: u32 = 1;
pub const CONFIG_MAIN_TASK_STACK_SIZE: u32 = 7000;
pub const CONFIG_MB_CONTROLLER_NOTIFY_QUEUE_SIZE: u32 = 20;
pub const CONFIG_MB_CONTROLLER_NOTIFY_TIMEOUT: u32 = 20;
pub const CONFIG_MB_CONTROLLER_SLAVE_ID: u32 = 1122867;
pub const CONFIG_MB_CONTROLLER_SLAVE_ID_SUPPORT: u32 = 1;
pub const CONFIG_MB_CONTROLLER_STACK_SIZE: u32 = 4096;
pub const CONFIG_MB_EVENT_QUEUE_TIMEOUT: u32 = 20;
pub const CONFIG_MB_MASTER_DELAY_MS_CONVERT: u32 = 200;
pub const CONFIG_MB_MASTER_TIMEOUT_MS_RESPOND: u32 = 150;
pub const CONFIG_MB_QUEUE_LENGTH: u32 = 20;
pub const CONFIG_MB_SERIAL_BUF_SIZE: u32 = 256;
pub const CONFIG_MB_SERIAL_TASK_PRIO: u32 = 10;
pub const CONFIG_MB_SERIAL_TASK_STACK_SIZE: u32 = 4096;
pub const CONFIG_MB_TIMER_GROUP: u32 = 0;
pub const CONFIG_MB_TIMER_INDEX: u32 = 0;
pub const CONFIG_MONITOR_BAUD_115200B: u32 = 1;
pub const CONFIG_OPTIMIZATION_ASSERTIONS_ENABLED: u32 = 1;
pub const CONFIG_POST_EVENTS_FROM_IRAM_ISR: u32 = 1;
pub const CONFIG_POST_EVENTS_FROM_ISR: u32 = 1;
pub const CONFIG_SEMIHOSTFS_HOST_PATH_MAX_LEN: u32 = 128;
pub const CONFIG_SEMIHOSTFS_MAX_MOUNT_POINTS: u32 = 1;
pub const CONFIG_SPI_FLASH_WRITING_DANGEROUS_REGIONS_ABORTS: u32 = 1;
pub const CONFIG_STACK_CHECK_NONE: u32 = 1;
pub const CONFIG_SUPPORT_TERMIOS: u32 = 1;
pub const CONFIG_SUPPRESS_SELECT_DEBUG_OUTPUT: u32 = 1;
pub const CONFIG_SYSTEM_EVENT_QUEUE_SIZE: u32 = 32;
pub const CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE: u32 = 2304;
pub const CONFIG_TASK_WDT: u32 = 1;
pub const CONFIG_TASK_WDT_CHECK_IDLE_TASK_CPU0: u32 = 1;
pub const CONFIG_TASK_WDT_TIMEOUT_S: u32 = 5;
pub const CONFIG_TCPIP_RECVMBOX_SIZE: u32 = 32;
pub const CONFIG_TCPIP_TASK_AFFINITY_NO_AFFINITY: u32 = 1;
pub const CONFIG_TCPIP_TASK_STACK_SIZE: u32 = 3072;
pub const CONFIG_TCP_MAXRTX: u32 = 12;
pub const CONFIG_TCP_MSL: u32 = 60000;
pub const CONFIG_TCP_MSS: u32 = 1440;
pub const CONFIG_TCP_OVERSIZE_MSS: u32 = 1;
pub const CONFIG_TCP_QUEUE_OOSEQ: u32 = 1;
pub const CONFIG_TCP_RECVMBOX_SIZE: u32 = 6;
pub const CONFIG_TCP_SND_BUF_DEFAULT: u32 = 5744;
pub const CONFIG_TCP_SYNMAXRTX: u32 = 12;
pub const CONFIG_TCP_WND_DEFAULT: u32 = 5744;
pub const CONFIG_TIMER_QUEUE_LENGTH: u32 = 10;
pub const CONFIG_TIMER_TASK_PRIORITY: u32 = 1;
pub const CONFIG_TIMER_TASK_STACK_DEPTH: u32 = 2048;
pub const CONFIG_TIMER_TASK_STACK_SIZE: u32 = 3584;
pub const CONFIG_TOOLPREFIX: &[u8; 17usize] = b"riscv32-esp-elf-\0";
pub const CONFIG_UDP_RECVMBOX_SIZE: u32 = 6;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _LITTLE_ENDIAN: u32 = 1234;
pub const _BIG_ENDIAN: u32 = 4321;
pub const _PDP_ENDIAN: u32 = 3412;
pub const _BYTE_ORDER: u32 = 1234;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 64;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const PTHREAD_SCOPE_PROCESS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CREATE_DETACHED: u32 = 0;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 3;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SORD: u32 = 8192;
pub const __SL64: u32 = 32768;
pub const __SNLK: u32 = 1;
pub const __SWID: u32 = 8192;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const EOF: i32 = -1;
pub const BUFSIZ: u32 = 128;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const L_tmpnam: u32 = 1024;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const TMP_MAX: u32 = 26;
pub const L_ctermid: u32 = 16;
pub const ESP_OK: i32 = 0;
pub const ESP_FAIL: i32 = -1;
pub const ESP_ERR_NO_MEM: i32 = 257;
pub const ESP_ERR_INVALID_ARG: i32 = 258;
pub const ESP_ERR_INVALID_STATE: i32 = 259;
pub const ESP_ERR_INVALID_SIZE: i32 = 260;
pub const ESP_ERR_NOT_FOUND: i32 = 261;
pub const ESP_ERR_NOT_SUPPORTED: i32 = 262;
pub const ESP_ERR_TIMEOUT: i32 = 263;
pub const ESP_ERR_INVALID_RESPONSE: i32 = 264;
pub const ESP_ERR_INVALID_CRC: i32 = 265;
pub const ESP_ERR_INVALID_VERSION: i32 = 266;
pub const ESP_ERR_INVALID_MAC: i32 = 267;
pub const ESP_ERR_NOT_FINISHED: i32 = 268;
pub const ESP_ERR_WIFI_BASE: i32 = 12288;
pub const ESP_ERR_MESH_BASE: i32 = 16384;
pub const ESP_ERR_FLASH_BASE: i32 = 24576;
pub const ESP_ERR_HW_CRYPTO_BASE: i32 = 49152;
pub const ESP_ERR_MEMPROT_BASE: i32 = 53248;
pub const BIT31: u32 = 2147483648;
pub const BIT30: u32 = 1073741824;
pub const BIT29: u32 = 536870912;
pub const BIT28: u32 = 268435456;
pub const BIT27: u32 = 134217728;
pub const BIT26: u32 = 67108864;
pub const BIT25: u32 = 33554432;
pub const BIT24: u32 = 16777216;
pub const BIT23: u32 = 8388608;
pub const BIT22: u32 = 4194304;
pub const BIT21: u32 = 2097152;
pub const BIT20: u32 = 1048576;
pub const BIT19: u32 = 524288;
pub const BIT18: u32 = 262144;
pub const BIT17: u32 = 131072;
pub const BIT16: u32 = 65536;
pub const BIT15: u32 = 32768;
pub const BIT14: u32 = 16384;
pub const BIT13: u32 = 8192;
pub const BIT12: u32 = 4096;
pub const BIT11: u32 = 2048;
pub const BIT10: u32 = 1024;
pub const BIT9: u32 = 512;
pub const BIT8: u32 = 256;
pub const BIT7: u32 = 128;
pub const BIT6: u32 = 64;
pub const BIT5: u32 = 32;
pub const BIT4: u32 = 16;
pub const BIT3: u32 = 8;
pub const BIT2: u32 = 4;
pub const BIT1: u32 = 2;
pub const BIT0: u32 = 1;
pub const BIT63: i64 = -9223372036854775808;
pub const BIT62: u64 = 4611686018427387904;
pub const BIT61: u64 = 2305843009213693952;
pub const BIT60: u64 = 1152921504606846976;
pub const BIT59: u64 = 576460752303423488;
pub const BIT58: u64 = 288230376151711744;
pub const BIT57: u64 = 144115188075855872;
pub const BIT56: u64 = 72057594037927936;
pub const BIT55: u64 = 36028797018963968;
pub const BIT54: u64 = 18014398509481984;
pub const BIT53: u64 = 9007199254740992;
pub const BIT52: u64 = 4503599627370496;
pub const BIT51: u64 = 2251799813685248;
pub const BIT50: u64 = 1125899906842624;
pub const BIT49: u64 = 562949953421312;
pub const BIT48: u64 = 281474976710656;
pub const BIT47: u64 = 140737488355328;
pub const BIT46: u64 = 70368744177664;
pub const BIT45: u64 = 35184372088832;
pub const BIT44: u64 = 17592186044416;
pub const BIT43: u64 = 8796093022208;
pub const BIT42: u64 = 4398046511104;
pub const BIT41: u64 = 2199023255552;
pub const BIT40: u64 = 1099511627776;
pub const BIT39: u64 = 549755813888;
pub const BIT38: u64 = 274877906944;
pub const BIT37: u64 = 137438953472;
pub const BIT36: u64 = 68719476736;
pub const BIT35: u64 = 34359738368;
pub const BIT34: u64 = 17179869184;
pub const BIT33: u64 = 8589934592;
pub const BIT32: u64 = 4294967296;
pub const ESP_IDF_VERSION_MAJOR: u32 = 4;
pub const ESP_IDF_VERSION_MINOR: u32 = 4;
pub const ESP_IDF_VERSION_PATCH: u32 = 1;
pub const TWO_UNIVERSAL_MAC_ADDR: u32 = 2;
pub const FOUR_UNIVERSAL_MAC_ADDR: u32 = 4;
pub const UNIVERSAL_MAC_ADDR_NUM: u32 = 4;
pub const MACSTR: &[u8; 30usize] = b"%02x:%02x:%02x:%02x:%02x:%02x\0";
pub const LOG_LOCAL_LEVEL: u32 = 3;
pub const LOG_COLOR_BLACK: &[u8; 3usize] = b"30\0";
pub const LOG_COLOR_RED: &[u8; 3usize] = b"31\0";
pub const LOG_COLOR_GREEN: &[u8; 3usize] = b"32\0";
pub const LOG_COLOR_BROWN: &[u8; 3usize] = b"33\0";
pub const LOG_COLOR_BLUE: &[u8; 3usize] = b"34\0";
pub const LOG_COLOR_PURPLE: &[u8; 3usize] = b"35\0";
pub const LOG_COLOR_CYAN: &[u8; 3usize] = b"36\0";
pub const LOG_RESET_COLOR: &[u8; 5usize] = b"\x1B[0m\0";
pub const PRO_CPU_NUM: u32 = 0;
pub const DR_REG_SYSTEM_BASE: u32 = 1611399168;
pub const DR_REG_SENSITIVE_BASE: u32 = 1611403264;
pub const DR_REG_INTERRUPT_BASE: u32 = 1611407360;
pub const DR_REG_EXTMEM_BASE: u32 = 1611415552;
pub const DR_REG_MMU_TABLE: u32 = 1611419648;
pub const DR_REG_AES_BASE: u32 = 1610850304;
pub const DR_REG_SHA_BASE: u32 = 1610854400;
pub const DR_REG_RSA_BASE: u32 = 1610858496;
pub const DR_REG_HMAC_BASE: u32 = 1610866688;
pub const DR_REG_DIGITAL_SIGNATURE_BASE: u32 = 1610862592;
pub const DR_REG_GDMA_BASE: u32 = 1610870784;
pub const DR_REG_ASSIST_DEBUG_BASE: u32 = 1611456512;
pub const DR_REG_DEDICATED_GPIO_BASE: u32 = 1611460608;
pub const DR_REG_WORLD_CNTL_BASE: u32 = 1611464704;
pub const DR_REG_DPORT_END: u32 = 1611481084;
pub const DR_REG_UART_BASE: u32 = 1610612736;
pub const DR_REG_SPI1_BASE: u32 = 1610620928;
pub const DR_REG_SPI0_BASE: u32 = 1610625024;
pub const DR_REG_GPIO_BASE: u32 = 1610629120;
pub const DR_REG_FE2_BASE: u32 = 1610633216;
pub const DR_REG_FE_BASE: u32 = 1610637312;
pub const DR_REG_RTCCNTL_BASE: u32 = 1610645504;
pub const DR_REG_IO_MUX_BASE: u32 = 1610649600;
pub const DR_REG_RTC_I2C_BASE: u32 = 1610670080;
pub const DR_REG_UART1_BASE: u32 = 1610678272;
pub const DR_REG_I2C_EXT_BASE: u32 = 1610690560;
pub const DR_REG_UHCI0_BASE: u32 = 1610694656;
pub const DR_REG_RMT_BASE: u32 = 1610702848;
pub const DR_REG_LEDC_BASE: u32 = 1610715136;
pub const DR_REG_EFUSE_BASE: u32 = 1610647552;
pub const DR_REG_NRX_BASE: u32 = 1610730496;
pub const DR_REG_BB_BASE: u32 = 1610731520;
pub const DR_REG_TIMERGROUP0_BASE: u32 = 1610739712;
pub const DR_REG_TIMERGROUP1_BASE: u32 = 1610743808;
pub const DR_REG_SYSTIMER_BASE: u32 = 1610756096;
pub const DR_REG_SPI2_BASE: u32 = 1610760192;
pub const DR_REG_SYSCON_BASE: u32 = 1610768384;
pub const DR_REG_APB_CTRL_BASE: u32 = 1610768384;
pub const DR_REG_TWAI_BASE: u32 = 1610788864;
pub const DR_REG_I2S0_BASE: u32 = 1610797056;
pub const DR_REG_APB_SARADC_BASE: u32 = 1610874880;
pub const DR_REG_USB_SERIAL_JTAG_BASE: u32 = 1610887168;
pub const DR_REG_AES_XTS_BASE: u32 = 1611448320;
pub const APB_CLK_FREQ_ROM: u32 = 40000000;
pub const CPU_CLK_FREQ_ROM: u32 = 40000000;
pub const UART_CLK_FREQ_ROM: u32 = 40000000;
pub const EFUSE_CLK_FREQ_ROM: u32 = 20000000;
pub const APB_CLK_FREQ: u32 = 80000000;
pub const REF_CLK_FREQ: u32 = 1000000;
pub const RTC_CLK_FREQ: u32 = 20000000;
pub const XTAL_CLK_FREQ: u32 = 40000000;
pub const UART_CLK_FREQ: u32 = 80000000;
pub const WDT_CLK_FREQ: u32 = 80000000;
pub const TIMER_CLK_FREQ: u32 = 5000000;
pub const SPI_CLK_DIV: u32 = 4;
pub const TICKS_PER_US_ROM: u32 = 40;
pub const GPIO_MATRIX_DELAY_NS: u32 = 0;
pub const SOC_DROM_LOW: u32 = 1006632960;
pub const SOC_DROM_HIGH: u32 = 1015021568;
pub const SOC_IROM_LOW: u32 = 1107296256;
pub const SOC_IROM_HIGH: u32 = 1115684864;
pub const SOC_IROM_MASK_LOW: u32 = 1073741824;
pub const SOC_IROM_MASK_HIGH: u32 = 1074135040;
pub const SOC_DROM_MASK_LOW: u32 = 1072693248;
pub const SOC_DROM_MASK_HIGH: u32 = 1072824320;
pub const SOC_IRAM_LOW: u32 = 1077395456;
pub const SOC_IRAM_HIGH: u32 = 1077805056;
pub const SOC_DRAM_LOW: u32 = 1070071808;
pub const SOC_DRAM_HIGH: u32 = 1070465024;
pub const SOC_RTC_IRAM_LOW: u32 = 1342177280;
pub const SOC_RTC_IRAM_HIGH: u32 = 1342185472;
pub const SOC_RTC_DRAM_LOW: u32 = 1342177280;
pub const SOC_RTC_DRAM_HIGH: u32 = 1342185472;
pub const SOC_RTC_DATA_LOW: u32 = 1342177280;
pub const SOC_RTC_DATA_HIGH: u32 = 1342185472;
pub const SOC_DIRAM_IRAM_LOW: u32 = 1077411840;
pub const SOC_DIRAM_IRAM_HIGH: u32 = 1077805056;
pub const SOC_DIRAM_DRAM_LOW: u32 = 1070071808;
pub const SOC_DIRAM_DRAM_HIGH: u32 = 1070465024;
pub const SOC_DMA_LOW: u32 = 1070104576;
pub const SOC_DMA_HIGH: u32 = 1070596096;
pub const SOC_BYTE_ACCESSIBLE_LOW: u32 = 1070104576;
pub const SOC_BYTE_ACCESSIBLE_HIGH: u32 = 1070596096;
pub const SOC_MEM_INTERNAL_LOW: u32 = 1070071808;
pub const SOC_MEM_INTERNAL_HIGH: u32 = 1070465024;
pub const SOC_MEM_INTERNAL_LOW1: u32 = 1077346304;
pub const SOC_MEM_INTERNAL_HIGH1: u32 = 1077805056;
pub const SOC_MEM_INTERNAL_LOW2: u32 = 1611653120;
pub const SOC_MEM_INTERNAL_HIGH2: u32 = 1611661312;
pub const SOC_MAX_CONTIGUOUS_RAM_SIZE: u32 = 409600;
pub const SOC_PERIPHERAL_LOW: u32 = 1610612736;
pub const SOC_PERIPHERAL_HIGH: u32 = 1611661312;
pub const SOC_DEBUG_LOW: u32 = 536870912;
pub const SOC_DEBUG_HIGH: u32 = 671088640;
pub const SOC_ROM_STACK_START: u32 = 1070513936;
pub const ETS_T1_WDT_INUM: u32 = 24;
pub const ETS_CACHEERR_INUM: u32 = 25;
pub const ETS_MEMPROT_ERR_INUM: u32 = 26;
pub const ETS_MAX_INUM: u32 = 31;
pub const ETS_SLC_INUM: u32 = 1;
pub const ETS_UART0_INUM: u32 = 5;
pub const ETS_UART1_INUM: u32 = 5;
pub const ETS_SPI2_INUM: u32 = 1;
pub const ETS_GPIO_INUM: u32 = 4;
pub const ETS_INVALID_INUM: u32 = 0;
pub const SOC_INTERRUPT_LEVEL_MEDIUM: u32 = 4;
pub const SOC_CPU_CORES_NUM: u32 = 1;
pub const SOC_ADC_SUPPORTED: u32 = 1;
pub const SOC_DEDICATED_GPIO_SUPPORTED: u32 = 1;
pub const SOC_GDMA_SUPPORTED: u32 = 1;
pub const SOC_TWAI_SUPPORTED: u32 = 1;
pub const SOC_BT_SUPPORTED: u32 = 1;
pub const SOC_DIG_SIGN_SUPPORTED: u32 = 1;
pub const SOC_HMAC_SUPPORTED: u32 = 1;
pub const SOC_ASYNC_MEMCPY_SUPPORTED: u32 = 1;
pub const SOC_USB_SERIAL_JTAG_SUPPORTED: u32 = 1;
pub const SOC_TEMP_SENSOR_SUPPORTED: u32 = 1;
pub const SOC_FLASH_ENCRYPTION_XTS_AES: u32 = 1;
pub const SOC_XT_WDT_SUPPORTED: u32 = 1;
pub const SOC_SUPPORTS_SECURE_DL_MODE: u32 = 1;
pub const SOC_EFUSE_SECURE_BOOT_KEY_DIGESTS: u32 = 3;
pub const SOC_EFUSE_REVOKE_BOOT_KEY_DIGESTS: u32 = 1;
pub const SOC_AES_SUPPORT_DMA: u32 = 1;
pub const SOC_AES_GDMA: u32 = 1;
pub const SOC_AES_SUPPORT_AES_128: u32 = 1;
pub const SOC_AES_SUPPORT_AES_256: u32 = 1;
pub const SOC_ADC_DIG_CTRL_SUPPORTED: u32 = 1;
pub const SOC_ADC_ARBITER_SUPPORTED: u32 = 1;
pub const SOC_ADC_FILTER_SUPPORTED: u32 = 1;
pub const SOC_ADC_MONITOR_SUPPORTED: u32 = 1;
pub const SOC_ADC_PERIPH_NUM: u32 = 2;
pub const SOC_ADC_MAX_CHANNEL_NUM: u32 = 5;
pub const SOC_ADC_DIGI_CONTROLLER_NUM: u32 = 1;
pub const SOC_ADC_PATT_LEN_MAX: u32 = 8;
pub const SOC_ADC_DIGI_MAX_BITWIDTH: u32 = 12;
pub const SOC_ADC_DIGI_FILTER_NUM: u32 = 2;
pub const SOC_ADC_DIGI_MONITOR_NUM: u32 = 2;
pub const SOC_ADC_SAMPLE_FREQ_THRES_HIGH: u32 = 83333;
pub const SOC_ADC_SAMPLE_FREQ_THRES_LOW: u32 = 611;
pub const SOC_ADC_MAX_BITWIDTH: u32 = 12;
pub const SOC_ADC_CALIBRATION_V1_SUPPORTED: u32 = 1;
pub const SOC_APB_BACKUP_DMA: u32 = 1;
pub const SOC_BROWNOUT_RESET_SUPPORTED: u32 = 1;
pub const SOC_CPU_BREAKPOINTS_NUM: u32 = 8;
pub const SOC_CPU_WATCHPOINTS_NUM: u32 = 8;
pub const SOC_CPU_HAS_FLEXIBLE_INTC: u32 = 1;
pub const SOC_CPU_WATCHPOINT_SIZE: u32 = 2147483648;
pub const SOC_DS_SIGNATURE_MAX_BIT_LEN: u32 = 3072;
pub const SOC_DS_KEY_PARAM_MD_IV_LENGTH: u32 = 16;
pub const SOC_DS_KEY_CHECK_MAX_WAIT_US: u32 = 1100;
pub const SOC_GDMA_GROUPS: u32 = 1;
pub const SOC_GDMA_PAIRS_PER_GROUP: u32 = 3;
pub const SOC_GDMA_TX_RX_SHARE_INTERRUPT: u32 = 1;
pub const SOC_GPIO_PORT: u32 = 1;
pub const SOC_GPIO_PIN_COUNT: u32 = 22;
pub const GPIO_SUPPORTS_RTC_INDEPENDENT: u32 = 1;
pub const SOC_GPIO_SUPPORT_FORCE_HOLD: u32 = 1;
pub const SOC_GPIO_SUPPORT_DEEPSLEEP_WAKEUP: u32 = 1;
pub const SOC_GPIO_VALID_GPIO_MASK: u32 = 4194303;
pub const SOC_GPIO_VALID_OUTPUT_GPIO_MASK: u32 = 4194303;
pub const SOC_GPIO_DEEP_SLEEP_WAKEUP_VALID_GPIO_MASK: u32 = 63;
pub const SOC_GPIO_SUPPORT_SLP_SWITCH: u32 = 1;
pub const SOC_DEDIC_GPIO_OUT_CHANNELS_NUM: u32 = 8;
pub const SOC_DEDIC_GPIO_IN_CHANNELS_NUM: u32 = 8;
pub const SOC_DEDIC_PERIPH_AUTO_ENABLE: u32 = 1;
pub const SOC_I2C_NUM: u32 = 1;
pub const SOC_I2C_FIFO_LEN: u32 = 32;
pub const SOC_I2C_SUPPORT_HW_FSM_RST: u32 = 1;
pub const SOC_I2C_SUPPORT_HW_CLR_BUS: u32 = 1;
pub const SOC_I2C_SUPPORT_XTAL: u32 = 1;
pub const SOC_I2C_SUPPORT_RTC: u32 = 1;
pub const SOC_I2S_NUM: u32 = 1;
pub const SOC_I2S_SUPPORTS_PCM: u32 = 1;
pub const SOC_I2S_SUPPORTS_PDM_TX: u32 = 1;
pub const SOC_I2S_SUPPORTS_PDM_CODEC: u32 = 1;
pub const SOC_I2S_SUPPORTS_TDM: u32 = 1;
pub const SOC_LEDC_SUPPORT_XTAL_CLOCK: u32 = 1;
pub const SOC_LEDC_CHANNEL_NUM: u32 = 6;
pub const SOC_LEDC_TIMER_BIT_WIDE_NUM: u32 = 14;
pub const SOC_MPU_CONFIGURABLE_REGIONS_SUPPORTED: u32 = 0;
pub const SOC_MPU_MIN_REGION_SIZE: u32 = 536870912;
pub const SOC_MPU_REGIONS_MAX_NUM: u32 = 8;
pub const SOC_MPU_REGION_RO_SUPPORTED: u32 = 0;
pub const SOC_MPU_REGION_WO_SUPPORTED: u32 = 0;
pub const SOC_RMT_GROUPS: u32 = 1;
pub const SOC_RMT_TX_CANDIDATES_PER_GROUP: u32 = 2;
pub const SOC_RMT_RX_CANDIDATES_PER_GROUP: u32 = 2;
pub const SOC_RMT_CHANNELS_PER_GROUP: u32 = 4;
pub const SOC_RMT_MEM_WORDS_PER_CHANNEL: u32 = 48;
pub const SOC_RMT_SUPPORT_RX_PINGPONG: u32 = 1;
pub const SOC_RMT_SUPPORT_RX_DEMODULATION: u32 = 1;
pub const SOC_RMT_SUPPORT_TX_LOOP_COUNT: u32 = 1;
pub const SOC_RMT_SUPPORT_TX_SYNCHRO: u32 = 1;
pub const SOC_RMT_SUPPORT_XTAL: u32 = 1;
pub const SOC_RTC_CNTL_CPU_PD_DMA_BUS_WIDTH: u32 = 128;
pub const SOC_RTC_CNTL_CPU_PD_REG_FILE_NUM: u32 = 108;
pub const SOC_RTC_CNTL_CPU_PD_DMA_ADDR_ALIGN: u32 = 16;
pub const SOC_RTC_CNTL_CPU_PD_DMA_BLOCK_SIZE: u32 = 16;
pub const SOC_RTC_CNTL_CPU_PD_RETENTION_MEM_SIZE: u32 = 1728;
pub const SOC_RTCIO_PIN_COUNT: u32 = 0;
pub const SOC_RSA_MAX_BIT_LEN: u32 = 3072;
pub const SOC_SHA_DMA_MAX_BUFFER_SIZE: u32 = 3968;
pub const SOC_SHA_SUPPORT_DMA: u32 = 1;
pub const SOC_SHA_SUPPORT_RESUME: u32 = 1;
pub const SOC_SHA_GDMA: u32 = 1;
pub const SOC_SHA_SUPPORT_SHA1: u32 = 1;
pub const SOC_SHA_SUPPORT_SHA224: u32 = 1;
pub const SOC_SHA_SUPPORT_SHA256: u32 = 1;
pub const SOC_SIGMADELTA_NUM: u32 = 1;
pub const SOC_SIGMADELTA_CHANNEL_NUM: u32 = 4;
pub const SOC_SPI_PERIPH_NUM: u32 = 2;
pub const SOC_SPI_MAXIMUM_BUFFER_SIZE: u32 = 64;
pub const SOC_SPI_SUPPORT_DDRCLK: u32 = 1;
pub const SOC_SPI_SLAVE_SUPPORT_SEG_TRANS: u32 = 1;
pub const SOC_SPI_SUPPORT_CD_SIG: u32 = 1;
pub const SOC_SPI_SUPPORT_CONTINUOUS_TRANS: u32 = 1;
pub const SOC_SPI_SUPPORT_SLAVE_HD_VER2: u32 = 1;
pub const SOC_SPI_PERIPH_SUPPORT_CONTROL_DUMMY_OUTPUT: u32 = 1;
pub const SOC_MEMSPI_IS_INDEPENDENT: u32 = 1;
pub const SOC_SPI_MAX_PRE_DIVIDER: u32 = 16;
pub const SOC_SPI_MEM_SUPPORT_AUTO_WAIT_IDLE: u32 = 1;
pub const SOC_SPI_MEM_SUPPORT_AUTO_SUSPEND: u32 = 1;
pub const SOC_SPI_MEM_SUPPORT_AUTO_RESUME: u32 = 1;
pub const SOC_SPI_MEM_SUPPORT_IDLE_INTR: u32 = 1;
pub const SOC_SPI_MEM_SUPPORT_SW_SUSPEND: u32 = 1;
pub const SOC_SPI_MEM_SUPPORT_CHECK_SUS: u32 = 1;
pub const SOC_SYSTIMER_COUNTER_NUM: u32 = 2;
pub const SOC_SYSTIMER_ALARM_NUM: u32 = 3;
pub const SOC_SYSTIMER_BIT_WIDTH_LO: u32 = 32;
pub const SOC_SYSTIMER_BIT_WIDTH_HI: u32 = 20;
pub const SOC_SYSTIMER_FIXED_TICKS_US: u32 = 16;
pub const SOC_SYSTIMER_INT_LEVEL: u32 = 1;
pub const SOC_SYSTIMER_ALARM_MISS_COMPENSATE: u32 = 1;
pub const SOC_TIMER_GROUPS: u32 = 2;
pub const SOC_TIMER_GROUP_TIMERS_PER_GROUP: u32 = 1;
pub const SOC_TIMER_GROUP_COUNTER_BIT_WIDTH: u32 = 54;
pub const SOC_TIMER_GROUP_SUPPORT_XTAL: u32 = 1;
pub const SOC_TIMER_GROUP_TOTAL_TIMERS: u32 = 2;
pub const SOC_TOUCH_SENSOR_NUM: u32 = 0;
pub const SOC_TWAI_BRP_MIN: u32 = 2;
pub const SOC_TWAI_BRP_MAX: u32 = 16384;
pub const SOC_TWAI_SUPPORTS_RX_STATUS: u32 = 1;
pub const SOC_FLASH_ENCRYPTED_XTS_AES_BLOCK_MAX: u32 = 32;
pub const SOC_UART_NUM: u32 = 2;
pub const SOC_UART_FIFO_LEN: u32 = 128;
pub const SOC_UART_BITRATE_MAX: u32 = 5000000;
pub const SOC_UART_SUPPORT_RTC_CLK: u32 = 1;
pub const SOC_UART_SUPPORT_XTAL_CLK: u32 = 1;
pub const SOC_UART_REQUIRE_CORE_RESET: u32 = 1;
pub const SOC_UART_SUPPORT_FSM_TX_WAIT_SEND: u32 = 1;
pub const SOC_WIFI_HW_TSF: u32 = 1;
pub const SOC_COEX_HW_PTI: u32 = 1;
pub const SOC_PHY_DIG_REGS_MEM_SIZE: u32 = 84;
pub const SOC_MAC_BB_PD_MEM_SIZE: u32 = 768;
pub const SOC_WIFI_LIGHT_SLEEP_CLK_WIDTH: u32 = 12;
pub const SOC_PM_SUPPORT_WIFI_WAKEUP: u32 = 1;
pub const SOC_PM_SUPPORT_BT_WAKEUP: u32 = 1;
pub const SOC_PM_SUPPORT_CPU_PD: u32 = 1;
pub const SOC_PM_SUPPORT_WIFI_PD: u32 = 1;
pub const SOC_PM_SUPPORT_BT_PD: u32 = 1;
pub const UART_RXFIFO_RD_BYTE: u32 = 255;
pub const UART_RXFIFO_RD_BYTE_V: u32 = 255;
pub const UART_RXFIFO_RD_BYTE_S: u32 = 0;
pub const UART_WAKEUP_INT_RAW_V: u32 = 1;
pub const UART_WAKEUP_INT_RAW_S: u32 = 19;
pub const UART_AT_CMD_CHAR_DET_INT_RAW_V: u32 = 1;
pub const UART_AT_CMD_CHAR_DET_INT_RAW_S: u32 = 18;
pub const UART_RS485_CLASH_INT_RAW_V: u32 = 1;
pub const UART_RS485_CLASH_INT_RAW_S: u32 = 17;
pub const UART_RS485_FRM_ERR_INT_RAW_V: u32 = 1;
pub const UART_RS485_FRM_ERR_INT_RAW_S: u32 = 16;
pub const UART_RS485_PARITY_ERR_INT_RAW_V: u32 = 1;
pub const UART_RS485_PARITY_ERR_INT_RAW_S: u32 = 15;
pub const UART_TX_DONE_INT_RAW_V: u32 = 1;
pub const UART_TX_DONE_INT_RAW_S: u32 = 14;
pub const UART_TX_BRK_IDLE_DONE_INT_RAW_V: u32 = 1;
pub const UART_TX_BRK_IDLE_DONE_INT_RAW_S: u32 = 13;
pub const UART_TX_BRK_DONE_INT_RAW_V: u32 = 1;
pub const UART_TX_BRK_DONE_INT_RAW_S: u32 = 12;
pub const UART_GLITCH_DET_INT_RAW_V: u32 = 1;
pub const UART_GLITCH_DET_INT_RAW_S: u32 = 11;
pub const UART_SW_XOFF_INT_RAW_V: u32 = 1;
pub const UART_SW_XOFF_INT_RAW_S: u32 = 10;
pub const UART_SW_XON_INT_RAW_V: u32 = 1;
pub const UART_SW_XON_INT_RAW_S: u32 = 9;
pub const UART_RXFIFO_TOUT_INT_RAW_V: u32 = 1;
pub const UART_RXFIFO_TOUT_INT_RAW_S: u32 = 8;
pub const UART_BRK_DET_INT_RAW_V: u32 = 1;
pub const UART_BRK_DET_INT_RAW_S: u32 = 7;
pub const UART_CTS_CHG_INT_RAW_V: u32 = 1;
pub const UART_CTS_CHG_INT_RAW_S: u32 = 6;
pub const UART_DSR_CHG_INT_RAW_V: u32 = 1;
pub const UART_DSR_CHG_INT_RAW_S: u32 = 5;
pub const UART_RXFIFO_OVF_INT_RAW_V: u32 = 1;
pub const UART_RXFIFO_OVF_INT_RAW_S: u32 = 4;
pub const UART_FRM_ERR_INT_RAW_V: u32 = 1;
pub const UART_FRM_ERR_INT_RAW_S: u32 = 3;
pub const UART_PARITY_ERR_INT_RAW_V: u32 = 1;
pub const UART_PARITY_ERR_INT_RAW_S: u32 = 2;
pub const UART_TXFIFO_EMPTY_INT_RAW_V: u32 = 1;
pub const UART_TXFIFO_EMPTY_INT_RAW_S: u32 = 1;
pub const UART_RXFIFO_FULL_INT_RAW_V: u32 = 1;
pub const UART_RXFIFO_FULL_INT_RAW_S: u32 = 0;
pub const UART_WAKEUP_INT_ST_V: u32 = 1;
pub const UART_WAKEUP_INT_ST_S: u32 = 19;
pub const UART_AT_CMD_CHAR_DET_INT_ST_V: u32 = 1;
pub const UART_AT_CMD_CHAR_DET_INT_ST_S: u32 = 18;
pub const UART_RS485_CLASH_INT_ST_V: u32 = 1;
pub const UART_RS485_CLASH_INT_ST_S: u32 = 17;
pub const UART_RS485_FRM_ERR_INT_ST_V: u32 = 1;
pub const UART_RS485_FRM_ERR_INT_ST_S: u32 = 16;
pub const UART_RS485_PARITY_ERR_INT_ST_V: u32 = 1;
pub const UART_RS485_PARITY_ERR_INT_ST_S: u32 = 15;
pub const UART_TX_DONE_INT_ST_V: u32 = 1;
pub const UART_TX_DONE_INT_ST_S: u32 = 14;
pub const UART_TX_BRK_IDLE_DONE_INT_ST_V: u32 = 1;
pub const UART_TX_BRK_IDLE_DONE_INT_ST_S: u32 = 13;
pub const UART_TX_BRK_DONE_INT_ST_V: u32 = 1;
pub const UART_TX_BRK_DONE_INT_ST_S: u32 = 12;
pub const UART_GLITCH_DET_INT_ST_V: u32 = 1;
pub const UART_GLITCH_DET_INT_ST_S: u32 = 11;
pub const UART_SW_XOFF_INT_ST_V: u32 = 1;
pub const UART_SW_XOFF_INT_ST_S: u32 = 10;
pub const UART_SW_XON_INT_ST_V: u32 = 1;
pub const UART_SW_XON_INT_ST_S: u32 = 9;
pub const UART_RXFIFO_TOUT_INT_ST_V: u32 = 1;
pub const UART_RXFIFO_TOUT_INT_ST_S: u32 = 8;
pub const UART_BRK_DET_INT_ST_V: u32 = 1;
pub const UART_BRK_DET_INT_ST_S: u32 = 7;
pub const UART_CTS_CHG_INT_ST_V: u32 = 1;
pub const UART_CTS_CHG_INT_ST_S: u32 = 6;
pub const UART_DSR_CHG_INT_ST_V: u32 = 1;
pub const UART_DSR_CHG_INT_ST_S: u32 = 5;
pub const UART_RXFIFO_OVF_INT_ST_V: u32 = 1;
pub const UART_RXFIFO_OVF_INT_ST_S: u32 = 4;
pub const UART_FRM_ERR_INT_ST_V: u32 = 1;
pub const UART_FRM_ERR_INT_ST_S: u32 = 3;
pub const UART_PARITY_ERR_INT_ST_V: u32 = 1;
pub const UART_PARITY_ERR_INT_ST_S: u32 = 2;
pub const UART_TXFIFO_EMPTY_INT_ST_V: u32 = 1;
pub const UART_TXFIFO_EMPTY_INT_ST_S: u32 = 1;
pub const UART_RXFIFO_FULL_INT_ST_V: u32 = 1;
pub const UART_RXFIFO_FULL_INT_ST_S: u32 = 0;
pub const UART_WAKEUP_INT_ENA_V: u32 = 1;
pub const UART_WAKEUP_INT_ENA_S: u32 = 19;
pub const UART_AT_CMD_CHAR_DET_INT_ENA_V: u32 = 1;
pub const UART_AT_CMD_CHAR_DET_INT_ENA_S: u32 = 18;
pub const UART_RS485_CLASH_INT_ENA_V: u32 = 1;
pub const UART_RS485_CLASH_INT_ENA_S: u32 = 17;
pub const UART_RS485_FRM_ERR_INT_ENA_V: u32 = 1;
pub const UART_RS485_FRM_ERR_INT_ENA_S: u32 = 16;
pub const UART_RS485_PARITY_ERR_INT_ENA_V: u32 = 1;
pub const UART_RS485_PARITY_ERR_INT_ENA_S: u32 = 15;
pub const UART_TX_DONE_INT_ENA_V: u32 = 1;
pub const UART_TX_DONE_INT_ENA_S: u32 = 14;
pub const UART_TX_BRK_IDLE_DONE_INT_ENA_V: u32 = 1;
pub const UART_TX_BRK_IDLE_DONE_INT_ENA_S: u32 = 13;
pub const UART_TX_BRK_DONE_INT_ENA_V: u32 = 1;
pub const UART_TX_BRK_DONE_INT_ENA_S: u32 = 12;
pub const UART_GLITCH_DET_INT_ENA_V: u32 = 1;
pub const UART_GLITCH_DET_INT_ENA_S: u32 = 11;
pub const UART_SW_XOFF_INT_ENA_V: u32 = 1;
pub const UART_SW_XOFF_INT_ENA_S: u32 = 10;
pub const UART_SW_XON_INT_ENA_V: u32 = 1;
pub const UART_SW_XON_INT_ENA_S: u32 = 9;
pub const UART_RXFIFO_TOUT_INT_ENA_V: u32 = 1;
pub const UART_RXFIFO_TOUT_INT_ENA_S: u32 = 8;
pub const UART_BRK_DET_INT_ENA_V: u32 = 1;
pub const UART_BRK_DET_INT_ENA_S: u32 = 7;
pub const UART_CTS_CHG_INT_ENA_V: u32 = 1;
pub const UART_CTS_CHG_INT_ENA_S: u32 = 6;
pub const UART_DSR_CHG_INT_ENA_V: u32 = 1;
pub const UART_DSR_CHG_INT_ENA_S: u32 = 5;
pub const UART_RXFIFO_OVF_INT_ENA_V: u32 = 1;
pub const UART_RXFIFO_OVF_INT_ENA_S: u32 = 4;
pub const UART_FRM_ERR_INT_ENA_V: u32 = 1;
pub const UART_FRM_ERR_INT_ENA_S: u32 = 3;
pub const UART_PARITY_ERR_INT_ENA_V: u32 = 1;
pub const UART_PARITY_ERR_INT_ENA_S: u32 = 2;
pub const UART_TXFIFO_EMPTY_INT_ENA_V: u32 = 1;
pub const UART_TXFIFO_EMPTY_INT_ENA_S: u32 = 1;
pub const UART_RXFIFO_FULL_INT_ENA_V: u32 = 1;
pub const UART_RXFIFO_FULL_INT_ENA_S: u32 = 0;
pub const UART_WAKEUP_INT_CLR_V: u32 = 1;
pub const UART_WAKEUP_INT_CLR_S: u32 = 19;
pub const UART_AT_CMD_CHAR_DET_INT_CLR_V: u32 = 1;
pub const UART_AT_CMD_CHAR_DET_INT_CLR_S: u32 = 18;
pub const UART_RS485_CLASH_INT_CLR_V: u32 = 1;
pub const UART_RS485_CLASH_INT_CLR_S: u32 = 17;
pub const UART_RS485_FRM_ERR_INT_CLR_V: u32 = 1;
pub const UART_RS485_FRM_ERR_INT_CLR_S: u32 = 16;
pub const UART_RS485_PARITY_ERR_INT_CLR_V: u32 = 1;
pub const UART_RS485_PARITY_ERR_INT_CLR_S: u32 = 15;
pub const UART_TX_DONE_INT_CLR_V: u32 = 1;
pub const UART_TX_DONE_INT_CLR_S: u32 = 14;
pub const UART_TX_BRK_IDLE_DONE_INT_CLR_V: u32 = 1;
pub const UART_TX_BRK_IDLE_DONE_INT_CLR_S: u32 = 13;
pub const UART_TX_BRK_DONE_INT_CLR_V: u32 = 1;
pub const UART_TX_BRK_DONE_INT_CLR_S: u32 = 12;
pub const UART_GLITCH_DET_INT_CLR_V: u32 = 1;
pub const UART_GLITCH_DET_INT_CLR_S: u32 = 11;
pub const UART_SW_XOFF_INT_CLR_V: u32 = 1;
pub const UART_SW_XOFF_INT_CLR_S: u32 = 10;
pub const UART_SW_XON_INT_CLR_V: u32 = 1;
pub const UART_SW_XON_INT_CLR_S: u32 = 9;
pub const UART_RXFIFO_TOUT_INT_CLR_V: u32 = 1;
pub const UART_RXFIFO_TOUT_INT_CLR_S: u32 = 8;
pub const UART_BRK_DET_INT_CLR_V: u32 = 1;
pub const UART_BRK_DET_INT_CLR_S: u32 = 7;
pub const UART_CTS_CHG_INT_CLR_V: u32 = 1;
pub const UART_CTS_CHG_INT_CLR_S: u32 = 6;
pub const UART_DSR_CHG_INT_CLR_V: u32 = 1;
pub const UART_DSR_CHG_INT_CLR_S: u32 = 5;
pub const UART_RXFIFO_OVF_INT_CLR_V: u32 = 1;
pub const UART_RXFIFO_OVF_INT_CLR_S: u32 = 4;
pub const UART_FRM_ERR_INT_CLR_V: u32 = 1;
pub const UART_FRM_ERR_INT_CLR_S: u32 = 3;
pub const UART_PARITY_ERR_INT_CLR_V: u32 = 1;
pub const UART_PARITY_ERR_INT_CLR_S: u32 = 2;
pub const UART_TXFIFO_EMPTY_INT_CLR_V: u32 = 1;
pub const UART_TXFIFO_EMPTY_INT_CLR_S: u32 = 1;
pub const UART_RXFIFO_FULL_INT_CLR_V: u32 = 1;
pub const UART_RXFIFO_FULL_INT_CLR_S: u32 = 0;
pub const UART_CLKDIV_FRAG: u32 = 15;
pub const UART_CLKDIV_FRAG_V: u32 = 15;
pub const UART_CLKDIV_FRAG_S: u32 = 20;
pub const UART_CLKDIV: u32 = 4095;
pub const UART_CLKDIV_V: u32 = 4095;
pub const UART_CLKDIV_S: u32 = 0;
pub const UART_GLITCH_FILT_EN_V: u32 = 1;
pub const UART_GLITCH_FILT_EN_S: u32 = 8;
pub const UART_GLITCH_FILT: u32 = 255;
pub const UART_GLITCH_FILT_V: u32 = 255;
pub const UART_GLITCH_FILT_S: u32 = 0;
pub const UART_TXD_V: u32 = 1;
pub const UART_TXD_S: u32 = 31;
pub const UART_RTSN_V: u32 = 1;
pub const UART_RTSN_S: u32 = 30;
pub const UART_DTRN_V: u32 = 1;
pub const UART_DTRN_S: u32 = 29;
pub const UART_TXFIFO_CNT: u32 = 1023;
pub const UART_TXFIFO_CNT_V: u32 = 1023;
pub const UART_TXFIFO_CNT_S: u32 = 16;
pub const UART_RXD_V: u32 = 1;
pub const UART_RXD_S: u32 = 15;
pub const UART_CTSN_V: u32 = 1;
pub const UART_CTSN_S: u32 = 14;
pub const UART_DSRN_V: u32 = 1;
pub const UART_DSRN_S: u32 = 13;
pub const UART_RXFIFO_CNT: u32 = 1023;
pub const UART_RXFIFO_CNT_V: u32 = 1023;
pub const UART_RXFIFO_CNT_S: u32 = 0;
pub const UART_MEM_CLK_EN_V: u32 = 1;
pub const UART_MEM_CLK_EN_S: u32 = 28;
pub const UART_AUTOBAUD_EN_V: u32 = 1;
pub const UART_AUTOBAUD_EN_S: u32 = 27;
pub const UART_ERR_WR_MASK_V: u32 = 1;
pub const UART_ERR_WR_MASK_S: u32 = 26;
pub const UART_CLK_EN_V: u32 = 1;
pub const UART_CLK_EN_S: u32 = 25;
pub const UART_DTR_INV_V: u32 = 1;
pub const UART_DTR_INV_S: u32 = 24;
pub const UART_RTS_INV_V: u32 = 1;
pub const UART_RTS_INV_S: u32 = 23;
pub const UART_TXD_INV_V: u32 = 1;
pub const UART_TXD_INV_S: u32 = 22;
pub const UART_DSR_INV_V: u32 = 1;
pub const UART_DSR_INV_S: u32 = 21;
pub const UART_CTS_INV_V: u32 = 1;
pub const UART_CTS_INV_S: u32 = 20;
pub const UART_RXD_INV_V: u32 = 1;
pub const UART_RXD_INV_S: u32 = 19;
pub const UART_TXFIFO_RST_V: u32 = 1;
pub const UART_TXFIFO_RST_S: u32 = 18;
pub const UART_RXFIFO_RST_V: u32 = 1;
pub const UART_RXFIFO_RST_S: u32 = 17;
pub const UART_IRDA_EN_V: u32 = 1;
pub const UART_IRDA_EN_S: u32 = 16;
pub const UART_TX_FLOW_EN_V: u32 = 1;
pub const UART_TX_FLOW_EN_S: u32 = 15;
pub const UART_LOOPBACK_V: u32 = 1;
pub const UART_LOOPBACK_S: u32 = 14;
pub const UART_IRDA_RX_INV_V: u32 = 1;
pub const UART_IRDA_RX_INV_S: u32 = 13;
pub const UART_IRDA_TX_INV_V: u32 = 1;
pub const UART_IRDA_TX_INV_S: u32 = 12;
pub const UART_IRDA_WCTL_V: u32 = 1;
pub const UART_IRDA_WCTL_S: u32 = 11;
pub const UART_IRDA_TX_EN_V: u32 = 1;
pub const UART_IRDA_TX_EN_S: u32 = 10;
pub const UART_IRDA_DPLX_V: u32 = 1;
pub const UART_IRDA_DPLX_S: u32 = 9;
pub const UART_TXD_BRK_V: u32 = 1;
pub const UART_TXD_BRK_S: u32 = 8;
pub const UART_SW_DTR_V: u32 = 1;
pub const UART_SW_DTR_S: u32 = 7;
pub const UART_SW_RTS_V: u32 = 1;
pub const UART_SW_RTS_S: u32 = 6;
pub const UART_STOP_BIT_NUM: u32 = 3;
pub const UART_STOP_BIT_NUM_V: u32 = 3;
pub const UART_STOP_BIT_NUM_S: u32 = 4;
pub const UART_BIT_NUM: u32 = 3;
pub const UART_BIT_NUM_V: u32 = 3;
pub const UART_BIT_NUM_S: u32 = 2;
pub const UART_PARITY_EN_V: u32 = 1;
pub const UART_PARITY_EN_S: u32 = 1;
pub const UART_PARITY_V: u32 = 1;
pub const UART_PARITY_S: u32 = 0;
pub const UART_RX_TOUT_EN_V: u32 = 1;
pub const UART_RX_TOUT_EN_S: u32 = 21;
pub const UART_RX_FLOW_EN_V: u32 = 1;
pub const UART_RX_FLOW_EN_S: u32 = 20;
pub const UART_RX_TOUT_FLOW_DIS_V: u32 = 1;
pub const UART_RX_TOUT_FLOW_DIS_S: u32 = 19;
pub const UART_DIS_RX_DAT_OVF_V: u32 = 1;
pub const UART_DIS_RX_DAT_OVF_S: u32 = 18;
pub const UART_TXFIFO_EMPTY_THRHD: u32 = 511;
pub const UART_TXFIFO_EMPTY_THRHD_V: u32 = 511;
pub const UART_TXFIFO_EMPTY_THRHD_S: u32 = 9;
pub const UART_RXFIFO_FULL_THRHD: u32 = 511;
pub const UART_RXFIFO_FULL_THRHD_V: u32 = 511;
pub const UART_RXFIFO_FULL_THRHD_S: u32 = 0;
pub const UART_LOWPULSE_MIN_CNT: u32 = 4095;
pub const UART_LOWPULSE_MIN_CNT_V: u32 = 4095;
pub const UART_LOWPULSE_MIN_CNT_S: u32 = 0;
pub const UART_HIGHPULSE_MIN_CNT: u32 = 4095;
pub const UART_HIGHPULSE_MIN_CNT_V: u32 = 4095;
pub const UART_HIGHPULSE_MIN_CNT_S: u32 = 0;
pub const UART_RXD_EDGE_CNT: u32 = 1023;
pub const UART_RXD_EDGE_CNT_V: u32 = 1023;
pub const UART_RXD_EDGE_CNT_S: u32 = 0;
pub const UART_SEND_XOFF_V: u32 = 1;
pub const UART_SEND_XOFF_S: u32 = 5;
pub const UART_SEND_XON_V: u32 = 1;
pub const UART_SEND_XON_S: u32 = 4;
pub const UART_FORCE_XOFF_V: u32 = 1;
pub const UART_FORCE_XOFF_S: u32 = 3;
pub const UART_FORCE_XON_V: u32 = 1;
pub const UART_FORCE_XON_S: u32 = 2;
pub const UART_XONOFF_DEL_V: u32 = 1;
pub const UART_XONOFF_DEL_S: u32 = 1;
pub const UART_SW_FLOW_CON_EN_V: u32 = 1;
pub const UART_SW_FLOW_CON_EN_S: u32 = 0;
pub const UART_ACTIVE_THRESHOLD: u32 = 1023;
pub const UART_ACTIVE_THRESHOLD_V: u32 = 1023;
pub const UART_ACTIVE_THRESHOLD_S: u32 = 0;
pub const UART_XOFF_CHAR: u32 = 255;
pub const UART_XOFF_CHAR_V: u32 = 255;
pub const UART_XOFF_CHAR_S: u32 = 9;
pub const UART_XOFF_THRESHOLD: u32 = 511;
pub const UART_XOFF_THRESHOLD_V: u32 = 511;
pub const UART_XOFF_THRESHOLD_S: u32 = 0;
pub const UART_XON_CHAR: u32 = 255;
pub const UART_XON_CHAR_V: u32 = 255;
pub const UART_XON_CHAR_S: u32 = 9;
pub const UART_XON_THRESHOLD: u32 = 511;
pub const UART_XON_THRESHOLD_V: u32 = 511;
pub const UART_XON_THRESHOLD_S: u32 = 0;
pub const UART_TX_BRK_NUM: u32 = 255;
pub const UART_TX_BRK_NUM_V: u32 = 255;
pub const UART_TX_BRK_NUM_S: u32 = 0;
pub const UART_TX_IDLE_NUM: u32 = 1023;
pub const UART_TX_IDLE_NUM_V: u32 = 1023;
pub const UART_TX_IDLE_NUM_S: u32 = 10;
pub const UART_RX_IDLE_THRHD: u32 = 1023;
pub const UART_RX_IDLE_THRHD_V: u32 = 1023;
pub const UART_RX_IDLE_THRHD_S: u32 = 0;
pub const UART_RS485_TX_DLY_NUM: u32 = 15;
pub const UART_RS485_TX_DLY_NUM_V: u32 = 15;
pub const UART_RS485_TX_DLY_NUM_S: u32 = 6;
pub const UART_RS485_RX_DLY_NUM_V: u32 = 1;
pub const UART_RS485_RX_DLY_NUM_S: u32 = 5;
pub const UART_RS485RXBY_TX_EN_V: u32 = 1;
pub const UART_RS485RXBY_TX_EN_S: u32 = 4;
pub const UART_RS485TX_RX_EN_V: u32 = 1;
pub const UART_RS485TX_RX_EN_S: u32 = 3;
pub const UART_DL1_EN_V: u32 = 1;
pub const UART_DL1_EN_S: u32 = 2;
pub const UART_DL0_EN_V: u32 = 1;
pub const UART_DL0_EN_S: u32 = 1;
pub const UART_RS485_EN_V: u32 = 1;
pub const UART_RS485_EN_S: u32 = 0;
pub const UART_PRE_IDLE_NUM: u32 = 65535;
pub const UART_PRE_IDLE_NUM_V: u32 = 65535;
pub const UART_PRE_IDLE_NUM_S: u32 = 0;
pub const UART_POST_IDLE_NUM: u32 = 65535;
pub const UART_POST_IDLE_NUM_V: u32 = 65535;
pub const UART_POST_IDLE_NUM_S: u32 = 0;
pub const UART_RX_GAP_TOUT: u32 = 65535;
pub const UART_RX_GAP_TOUT_V: u32 = 65535;
pub const UART_RX_GAP_TOUT_S: u32 = 0;
pub const UART_CHAR_NUM: u32 = 255;
pub const UART_CHAR_NUM_V: u32 = 255;
pub const UART_CHAR_NUM_S: u32 = 8;
pub const UART_AT_CMD_CHAR: u32 = 255;
pub const UART_AT_CMD_CHAR_V: u32 = 255;
pub const UART_AT_CMD_CHAR_S: u32 = 0;
pub const UART_MEM_FORCE_PU_V: u32 = 1;
pub const UART_MEM_FORCE_PU_S: u32 = 27;
pub const UART_MEM_FORCE_PD_V: u32 = 1;
pub const UART_MEM_FORCE_PD_S: u32 = 26;
pub const UART_RX_TOUT_THRHD: u32 = 1023;
pub const UART_RX_TOUT_THRHD_V: u32 = 1023;
pub const UART_RX_TOUT_THRHD_S: u32 = 16;
pub const UART_RX_FLOW_THRHD: u32 = 511;
pub const UART_RX_FLOW_THRHD_V: u32 = 511;
pub const UART_RX_FLOW_THRHD_S: u32 = 7;
pub const UART_TX_SIZE: u32 = 7;
pub const UART_TX_SIZE_V: u32 = 7;
pub const UART_TX_SIZE_S: u32 = 4;
pub const UART_RX_SIZE: u32 = 7;
pub const UART_RX_SIZE_V: u32 = 7;
pub const UART_RX_SIZE_S: u32 = 1;
pub const UART_TX_RADDR: u32 = 1023;
pub const UART_TX_RADDR_V: u32 = 1023;
pub const UART_TX_RADDR_S: u32 = 11;
pub const UART_APB_TX_WADDR: u32 = 1023;
pub const UART_APB_TX_WADDR_V: u32 = 1023;
pub const UART_APB_TX_WADDR_S: u32 = 0;
pub const UART_RX_WADDR: u32 = 1023;
pub const UART_RX_WADDR_V: u32 = 1023;
pub const UART_RX_WADDR_S: u32 = 11;
pub const UART_APB_RX_RADDR: u32 = 1023;
pub const UART_APB_RX_RADDR_V: u32 = 1023;
pub const UART_APB_RX_RADDR_S: u32 = 0;
pub const UART_ST_UTX_OUT: u32 = 15;
pub const UART_ST_UTX_OUT_V: u32 = 15;
pub const UART_ST_UTX_OUT_S: u32 = 4;
pub const UART_ST_URX_OUT: u32 = 15;
pub const UART_ST_URX_OUT_V: u32 = 15;
pub const UART_ST_URX_OUT_S: u32 = 0;
pub const UART_POSEDGE_MIN_CNT: u32 = 4095;
pub const UART_POSEDGE_MIN_CNT_V: u32 = 4095;
pub const UART_POSEDGE_MIN_CNT_S: u32 = 0;
pub const UART_NEGEDGE_MIN_CNT: u32 = 4095;
pub const UART_NEGEDGE_MIN_CNT_V: u32 = 4095;
pub const UART_NEGEDGE_MIN_CNT_S: u32 = 0;
pub const UART_RX_RST_CORE_V: u32 = 1;
pub const UART_RX_RST_CORE_S: u32 = 27;
pub const UART_TX_RST_CORE_V: u32 = 1;
pub const UART_TX_RST_CORE_S: u32 = 26;
pub const UART_RX_SCLK_EN_V: u32 = 1;
pub const UART_RX_SCLK_EN_S: u32 = 25;
pub const UART_TX_SCLK_EN_V: u32 = 1;
pub const UART_TX_SCLK_EN_S: u32 = 24;
pub const UART_RST_CORE_V: u32 = 1;
pub const UART_RST_CORE_S: u32 = 23;
pub const UART_SCLK_EN_V: u32 = 1;
pub const UART_SCLK_EN_S: u32 = 22;
pub const UART_SCLK_SEL: u32 = 3;
pub const UART_SCLK_SEL_V: u32 = 3;
pub const UART_SCLK_SEL_S: u32 = 20;
pub const UART_SCLK_DIV_NUM: u32 = 255;
pub const UART_SCLK_DIV_NUM_V: u32 = 255;
pub const UART_SCLK_DIV_NUM_S: u32 = 12;
pub const UART_SCLK_DIV_A: u32 = 63;
pub const UART_SCLK_DIV_A_V: u32 = 63;
pub const UART_SCLK_DIV_A_S: u32 = 6;
pub const UART_SCLK_DIV_B: u32 = 63;
pub const UART_SCLK_DIV_B_V: u32 = 63;
pub const UART_SCLK_DIV_B_S: u32 = 0;
pub const UART_DATE: u32 = 4294967295;
pub const UART_DATE_V: u32 = 4294967295;
pub const UART_DATE_S: u32 = 0;
pub const UART_UPDATE_V: u32 = 1;
pub const UART_UPDATE_S: u32 = 31;
pub const UART_HIGH_SPEED_V: u32 = 1;
pub const UART_HIGH_SPEED_S: u32 = 30;
pub const UART_ID: u32 = 1073741823;
pub const UART_ID_V: u32 = 1073741823;
pub const UART_ID_S: u32 = 0;
pub const SYSTEM_CPU_PERI_CLK_EN_REG: u32 = 1611399168;
pub const SYSTEM_CLK_EN_DEDICATED_GPIO_V: u32 = 1;
pub const SYSTEM_CLK_EN_DEDICATED_GPIO_S: u32 = 7;
pub const SYSTEM_CLK_EN_ASSIST_DEBUG_V: u32 = 1;
pub const SYSTEM_CLK_EN_ASSIST_DEBUG_S: u32 = 6;
pub const SYSTEM_CPU_PERI_RST_EN_REG: u32 = 1611399172;
pub const SYSTEM_RST_EN_DEDICATED_GPIO_V: u32 = 1;
pub const SYSTEM_RST_EN_DEDICATED_GPIO_S: u32 = 7;
pub const SYSTEM_RST_EN_ASSIST_DEBUG_V: u32 = 1;
pub const SYSTEM_RST_EN_ASSIST_DEBUG_S: u32 = 6;
pub const SYSTEM_CPU_PER_CONF_REG: u32 = 1611399176;
pub const SYSTEM_CPU_WAITI_DELAY_NUM: u32 = 15;
pub const SYSTEM_CPU_WAITI_DELAY_NUM_V: u32 = 15;
pub const SYSTEM_CPU_WAITI_DELAY_NUM_S: u32 = 4;
pub const SYSTEM_CPU_WAIT_MODE_FORCE_ON_V: u32 = 1;
pub const SYSTEM_CPU_WAIT_MODE_FORCE_ON_S: u32 = 3;
pub const SYSTEM_PLL_FREQ_SEL_V: u32 = 1;
pub const SYSTEM_PLL_FREQ_SEL_S: u32 = 2;
pub const SYSTEM_CPUPERIOD_SEL: u32 = 3;
pub const SYSTEM_CPUPERIOD_SEL_V: u32 = 3;
pub const SYSTEM_CPUPERIOD_SEL_S: u32 = 0;
pub const SYSTEM_MEM_PD_MASK_REG: u32 = 1611399180;
pub const SYSTEM_LSLP_MEM_PD_MASK_V: u32 = 1;
pub const SYSTEM_LSLP_MEM_PD_MASK_S: u32 = 0;
pub const SYSTEM_PERIP_CLK_EN0_REG: u32 = 1611399184;
pub const SYSTEM_SPI4_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI4_CLK_EN_S: u32 = 31;
pub const SYSTEM_ADC2_ARB_CLK_EN_V: u32 = 1;
pub const SYSTEM_ADC2_ARB_CLK_EN_S: u32 = 30;
pub const SYSTEM_SYSTIMER_CLK_EN_V: u32 = 1;
pub const SYSTEM_SYSTIMER_CLK_EN_S: u32 = 29;
pub const SYSTEM_APB_SARADC_CLK_EN_V: u32 = 1;
pub const SYSTEM_APB_SARADC_CLK_EN_S: u32 = 28;
pub const SYSTEM_SPI3_DMA_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI3_DMA_CLK_EN_S: u32 = 27;
pub const SYSTEM_PWM3_CLK_EN_V: u32 = 1;
pub const SYSTEM_PWM3_CLK_EN_S: u32 = 26;
pub const SYSTEM_PWM2_CLK_EN_V: u32 = 1;
pub const SYSTEM_PWM2_CLK_EN_S: u32 = 25;
pub const SYSTEM_UART_MEM_CLK_EN_V: u32 = 1;
pub const SYSTEM_UART_MEM_CLK_EN_S: u32 = 24;
pub const SYSTEM_USB_DEVICE_CLK_EN_V: u32 = 1;
pub const SYSTEM_USB_DEVICE_CLK_EN_S: u32 = 23;
pub const SYSTEM_SPI2_DMA_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI2_DMA_CLK_EN_S: u32 = 22;
pub const SYSTEM_I2S1_CLK_EN_V: u32 = 1;
pub const SYSTEM_I2S1_CLK_EN_S: u32 = 21;
pub const SYSTEM_PWM1_CLK_EN_V: u32 = 1;
pub const SYSTEM_PWM1_CLK_EN_S: u32 = 20;
pub const SYSTEM_TWAI_CLK_EN_V: u32 = 1;
pub const SYSTEM_TWAI_CLK_EN_S: u32 = 19;
pub const SYSTEM_I2C_EXT1_CLK_EN_V: u32 = 1;
pub const SYSTEM_I2C_EXT1_CLK_EN_S: u32 = 18;
pub const SYSTEM_PWM0_CLK_EN_V: u32 = 1;
pub const SYSTEM_PWM0_CLK_EN_S: u32 = 17;
pub const SYSTEM_SPI3_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI3_CLK_EN_S: u32 = 16;
pub const SYSTEM_TIMERGROUP1_CLK_EN_V: u32 = 1;
pub const SYSTEM_TIMERGROUP1_CLK_EN_S: u32 = 15;
pub const SYSTEM_EFUSE_CLK_EN_V: u32 = 1;
pub const SYSTEM_EFUSE_CLK_EN_S: u32 = 14;
pub const SYSTEM_TIMERGROUP_CLK_EN_V: u32 = 1;
pub const SYSTEM_TIMERGROUP_CLK_EN_S: u32 = 13;
pub const SYSTEM_UHCI1_CLK_EN_V: u32 = 1;
pub const SYSTEM_UHCI1_CLK_EN_S: u32 = 12;
pub const SYSTEM_LEDC_CLK_EN_V: u32 = 1;
pub const SYSTEM_LEDC_CLK_EN_S: u32 = 11;
pub const SYSTEM_PCNT_CLK_EN_V: u32 = 1;
pub const SYSTEM_PCNT_CLK_EN_S: u32 = 10;
pub const SYSTEM_RMT_CLK_EN_V: u32 = 1;
pub const SYSTEM_RMT_CLK_EN_S: u32 = 9;
pub const SYSTEM_UHCI0_CLK_EN_V: u32 = 1;
pub const SYSTEM_UHCI0_CLK_EN_S: u32 = 8;
pub const SYSTEM_I2C_EXT0_CLK_EN_V: u32 = 1;
pub const SYSTEM_I2C_EXT0_CLK_EN_S: u32 = 7;
pub const SYSTEM_SPI2_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI2_CLK_EN_S: u32 = 6;
pub const SYSTEM_UART1_CLK_EN_V: u32 = 1;
pub const SYSTEM_UART1_CLK_EN_S: u32 = 5;
pub const SYSTEM_I2S0_CLK_EN_V: u32 = 1;
pub const SYSTEM_I2S0_CLK_EN_S: u32 = 4;
pub const SYSTEM_WDG_CLK_EN_V: u32 = 1;
pub const SYSTEM_WDG_CLK_EN_S: u32 = 3;
pub const SYSTEM_UART_CLK_EN_V: u32 = 1;
pub const SYSTEM_UART_CLK_EN_S: u32 = 2;
pub const SYSTEM_SPI01_CLK_EN_V: u32 = 1;
pub const SYSTEM_SPI01_CLK_EN_S: u32 = 1;
pub const SYSTEM_TIMERS_CLK_EN_V: u32 = 1;
pub const SYSTEM_TIMERS_CLK_EN_S: u32 = 0;
pub const SYSTEM_PERIP_CLK_EN1_REG: u32 = 1611399188;
pub const SYSTEM_TSENS_CLK_EN_V: u32 = 1;
pub const SYSTEM_TSENS_CLK_EN_S: u32 = 10;
pub const SYSTEM_UART2_CLK_EN_V: u32 = 1;
pub const SYSTEM_UART2_CLK_EN_S: u32 = 9;
pub const SYSTEM_LCD_CAM_CLK_EN_V: u32 = 1;
pub const SYSTEM_LCD_CAM_CLK_EN_S: u32 = 8;
pub const SYSTEM_SDIO_HOST_CLK_EN_V: u32 = 1;
pub const SYSTEM_SDIO_HOST_CLK_EN_S: u32 = 7;
pub const SYSTEM_DMA_CLK_EN_V: u32 = 1;
pub const SYSTEM_DMA_CLK_EN_S: u32 = 6;
pub const SYSTEM_CRYPTO_HMAC_CLK_EN_V: u32 = 1;
pub const SYSTEM_CRYPTO_HMAC_CLK_EN_S: u32 = 5;
pub const SYSTEM_CRYPTO_DS_CLK_EN_V: u32 = 1;
pub const SYSTEM_CRYPTO_DS_CLK_EN_S: u32 = 4;
pub const SYSTEM_CRYPTO_RSA_CLK_EN_V: u32 = 1;
pub const SYSTEM_CRYPTO_RSA_CLK_EN_S: u32 = 3;
pub const SYSTEM_CRYPTO_SHA_CLK_EN_V: u32 = 1;
pub const SYSTEM_CRYPTO_SHA_CLK_EN_S: u32 = 2;
pub const SYSTEM_CRYPTO_AES_CLK_EN_V: u32 = 1;
pub const SYSTEM_CRYPTO_AES_CLK_EN_S: u32 = 1;
pub const SYSTEM_PERIP_RST_EN0_REG: u32 = 1611399192;
pub const SYSTEM_SPI4_RST_V: u32 = 1;
pub const SYSTEM_SPI4_RST_S: u32 = 31;
pub const SYSTEM_ADC2_ARB_RST_V: u32 = 1;
pub const SYSTEM_ADC2_ARB_RST_S: u32 = 30;
pub const SYSTEM_SYSTIMER_RST_V: u32 = 1;
pub const SYSTEM_SYSTIMER_RST_S: u32 = 29;
pub const SYSTEM_APB_SARADC_RST_V: u32 = 1;
pub const SYSTEM_APB_SARADC_RST_S: u32 = 28;
pub const SYSTEM_SPI3_DMA_RST_V: u32 = 1;
pub const SYSTEM_SPI3_DMA_RST_S: u32 = 27;
pub const SYSTEM_PWM3_RST_V: u32 = 1;
pub const SYSTEM_PWM3_RST_S: u32 = 26;
pub const SYSTEM_PWM2_RST_V: u32 = 1;
pub const SYSTEM_PWM2_RST_S: u32 = 25;
pub const SYSTEM_UART_MEM_RST_V: u32 = 1;
pub const SYSTEM_UART_MEM_RST_S: u32 = 24;
pub const SYSTEM_USB_DEVICE_RST_V: u32 = 1;
pub const SYSTEM_USB_DEVICE_RST_S: u32 = 23;
pub const SYSTEM_SPI2_DMA_RST_V: u32 = 1;
pub const SYSTEM_SPI2_DMA_RST_S: u32 = 22;
pub const SYSTEM_I2S1_RST_V: u32 = 1;
pub const SYSTEM_I2S1_RST_S: u32 = 21;
pub const SYSTEM_PWM1_RST_V: u32 = 1;
pub const SYSTEM_PWM1_RST_S: u32 = 20;
pub const SYSTEM_TWAI_RST_V: u32 = 1;
pub const SYSTEM_TWAI_RST_S: u32 = 19;
pub const SYSTEM_I2C_EXT1_RST_V: u32 = 1;
pub const SYSTEM_I2C_EXT1_RST_S: u32 = 18;
pub const SYSTEM_PWM0_RST_V: u32 = 1;
pub const SYSTEM_PWM0_RST_S: u32 = 17;
pub const SYSTEM_SPI3_RST_V: u32 = 1;
pub const SYSTEM_SPI3_RST_S: u32 = 16;
pub const SYSTEM_TIMERGROUP1_RST_V: u32 = 1;
pub const SYSTEM_TIMERGROUP1_RST_S: u32 = 15;
pub const SYSTEM_EFUSE_RST_V: u32 = 1;
pub const SYSTEM_EFUSE_RST_S: u32 = 14;
pub const SYSTEM_TIMERGROUP_RST_V: u32 = 1;
pub const SYSTEM_TIMERGROUP_RST_S: u32 = 13;
pub const SYSTEM_UHCI1_RST_V: u32 = 1;
pub const SYSTEM_UHCI1_RST_S: u32 = 12;
pub const SYSTEM_LEDC_RST_V: u32 = 1;
pub const SYSTEM_LEDC_RST_S: u32 = 11;
pub const SYSTEM_PCNT_RST_V: u32 = 1;
pub const SYSTEM_PCNT_RST_S: u32 = 10;
pub const SYSTEM_RMT_RST_V: u32 = 1;
pub const SYSTEM_RMT_RST_S: u32 = 9;
pub const SYSTEM_UHCI0_RST_V: u32 = 1;
pub const SYSTEM_UHCI0_RST_S: u32 = 8;
pub const SYSTEM_I2C_EXT0_RST_V: u32 = 1;
pub const SYSTEM_I2C_EXT0_RST_S: u32 = 7;
pub const SYSTEM_SPI2_RST_V: u32 = 1;
pub const SYSTEM_SPI2_RST_S: u32 = 6;
pub const SYSTEM_UART1_RST_V: u32 = 1;
pub const SYSTEM_UART1_RST_S: u32 = 5;
pub const SYSTEM_I2S0_RST_V: u32 = 1;
pub const SYSTEM_I2S0_RST_S: u32 = 4;
pub const SYSTEM_WDG_RST_V: u32 = 1;
pub const SYSTEM_WDG_RST_S: u32 = 3;
pub const SYSTEM_UART_RST_V: u32 = 1;
pub const SYSTEM_UART_RST_S: u32 = 2;
pub const SYSTEM_SPI01_RST_V: u32 = 1;
pub const SYSTEM_SPI01_RST_S: u32 = 1;
pub const SYSTEM_TIMERS_RST_V: u32 = 1;
pub const SYSTEM_TIMERS_RST_S: u32 = 0;
pub const SYSTEM_PERIP_RST_EN1_REG: u32 = 1611399196;
pub const SYSTEM_TSENS_RST_V: u32 = 1;
pub const SYSTEM_TSENS_RST_S: u32 = 10;
pub const SYSTEM_UART2_RST_V: u32 = 1;
pub const SYSTEM_UART2_RST_S: u32 = 9;
pub const SYSTEM_LCD_CAM_RST_V: u32 = 1;
pub const SYSTEM_LCD_CAM_RST_S: u32 = 8;
pub const SYSTEM_SDIO_HOST_RST_V: u32 = 1;
pub const SYSTEM_SDIO_HOST_RST_S: u32 = 7;
pub const SYSTEM_DMA_RST_V: u32 = 1;
pub const SYSTEM_DMA_RST_S: u32 = 6;
pub const SYSTEM_CRYPTO_HMAC_RST_V: u32 = 1;
pub const SYSTEM_CRYPTO_HMAC_RST_S: u32 = 5;
pub const SYSTEM_CRYPTO_DS_RST_V: u32 = 1;
pub const SYSTEM_CRYPTO_DS_RST_S: u32 = 4;
pub const SYSTEM_CRYPTO_RSA_RST_V: u32 = 1;
pub const SYSTEM_CRYPTO_RSA_RST_S: u32 = 3;
pub const SYSTEM_CRYPTO_SHA_RST_V: u32 = 1;
pub const SYSTEM_CRYPTO_SHA_RST_S: u32 = 2;
pub const SYSTEM_CRYPTO_AES_RST_V: u32 = 1;
pub const SYSTEM_CRYPTO_AES_RST_S: u32 = 1;
pub const SYSTEM_BT_LPCK_DIV_INT_REG: u32 = 1611399200;
pub const SYSTEM_BT_LPCK_DIV_NUM: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_NUM_V: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_NUM_S: u32 = 0;
pub const SYSTEM_BT_LPCK_DIV_FRAC_REG: u32 = 1611399204;
pub const SYSTEM_LPCLK_RTC_EN_V: u32 = 1;
pub const SYSTEM_LPCLK_RTC_EN_S: u32 = 28;
pub const SYSTEM_LPCLK_SEL_XTAL32K_V: u32 = 1;
pub const SYSTEM_LPCLK_SEL_XTAL32K_S: u32 = 27;
pub const SYSTEM_LPCLK_SEL_XTAL_V: u32 = 1;
pub const SYSTEM_LPCLK_SEL_XTAL_S: u32 = 26;
pub const SYSTEM_LPCLK_SEL_8M_V: u32 = 1;
pub const SYSTEM_LPCLK_SEL_8M_S: u32 = 25;
pub const SYSTEM_LPCLK_SEL_RTC_SLOW_V: u32 = 1;
pub const SYSTEM_LPCLK_SEL_RTC_SLOW_S: u32 = 24;
pub const SYSTEM_BT_LPCK_DIV_A: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_A_V: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_A_S: u32 = 12;
pub const SYSTEM_BT_LPCK_DIV_B: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_B_V: u32 = 4095;
pub const SYSTEM_BT_LPCK_DIV_B_S: u32 = 0;
pub const SYSTEM_CPU_INTR_FROM_CPU_0_REG: u32 = 1611399208;
pub const SYSTEM_CPU_INTR_FROM_CPU_0_V: u32 = 1;
pub const SYSTEM_CPU_INTR_FROM_CPU_0_S: u32 = 0;
pub const SYSTEM_CPU_INTR_FROM_CPU_1_REG: u32 = 1611399212;
pub const SYSTEM_CPU_INTR_FROM_CPU_1_V: u32 = 1;
pub const SYSTEM_CPU_INTR_FROM_CPU_1_S: u32 = 0;
pub const SYSTEM_CPU_INTR_FROM_CPU_2_REG: u32 = 1611399216;
pub const SYSTEM_CPU_INTR_FROM_CPU_2_V: u32 = 1;
pub const SYSTEM_CPU_INTR_FROM_CPU_2_S: u32 = 0;
pub const SYSTEM_CPU_INTR_FROM_CPU_3_REG: u32 = 1611399220;
pub const SYSTEM_CPU_INTR_FROM_CPU_3_V: u32 = 1;
pub const SYSTEM_CPU_INTR_FROM_CPU_3_S: u32 = 0;
pub const SYSTEM_RSA_PD_CTRL_REG: u32 = 1611399224;
pub const SYSTEM_RSA_MEM_FORCE_PD_V: u32 = 1;
pub const SYSTEM_RSA_MEM_FORCE_PD_S: u32 = 2;
pub const SYSTEM_RSA_MEM_FORCE_PU_V: u32 = 1;
pub const SYSTEM_RSA_MEM_FORCE_PU_S: u32 = 1;
pub const SYSTEM_RSA_MEM_PD_V: u32 = 1;
pub const SYSTEM_RSA_MEM_PD_S: u32 = 0;
pub const SYSTEM_EDMA_CTRL_REG: u32 = 1611399228;
pub const SYSTEM_EDMA_RESET_V: u32 = 1;
pub const SYSTEM_EDMA_RESET_S: u32 = 1;
pub const SYSTEM_EDMA_CLK_ON_V: u32 = 1;
pub const SYSTEM_EDMA_CLK_ON_S: u32 = 0;
pub const SYSTEM_CACHE_CONTROL_REG: u32 = 1611399232;
pub const SYSTEM_DCACHE_RESET_V: u32 = 1;
pub const SYSTEM_DCACHE_RESET_S: u32 = 3;
pub const SYSTEM_DCACHE_CLK_ON_V: u32 = 1;
pub const SYSTEM_DCACHE_CLK_ON_S: u32 = 2;
pub const SYSTEM_ICACHE_RESET_V: u32 = 1;
pub const SYSTEM_ICACHE_RESET_S: u32 = 1;
pub const SYSTEM_ICACHE_CLK_ON_V: u32 = 1;
pub const SYSTEM_ICACHE_CLK_ON_S: u32 = 0;
pub const SYSTEM_EXTERNAL_DEVICE_ENCRYPT_DECRYPT_CONTROL_REG: u32 = 1611399236;
pub const SYSTEM_ENABLE_DOWNLOAD_MANUAL_ENCRYPT_V: u32 = 1;
pub const SYSTEM_ENABLE_DOWNLOAD_MANUAL_ENCRYPT_S: u32 = 3;
pub const SYSTEM_ENABLE_DOWNLOAD_G0CB_DECRYPT_V: u32 = 1;
pub const SYSTEM_ENABLE_DOWNLOAD_G0CB_DECRYPT_S: u32 = 2;
pub const SYSTEM_ENABLE_DOWNLOAD_DB_ENCRYPT_V: u32 = 1;
pub const SYSTEM_ENABLE_DOWNLOAD_DB_ENCRYPT_S: u32 = 1;
pub const SYSTEM_ENABLE_SPI_MANUAL_ENCRYPT_V: u32 = 1;
pub const SYSTEM_ENABLE_SPI_MANUAL_ENCRYPT_S: u32 = 0;
pub const SYSTEM_RTC_FASTMEM_CONFIG_REG: u32 = 1611399240;
pub const SYSTEM_RTC_MEM_CRC_FINISH_V: u32 = 1;
pub const SYSTEM_RTC_MEM_CRC_FINISH_S: u32 = 31;
pub const SYSTEM_RTC_MEM_CRC_LEN: u32 = 2047;
pub const SYSTEM_RTC_MEM_CRC_LEN_V: u32 = 2047;
pub const SYSTEM_RTC_MEM_CRC_LEN_S: u32 = 20;
pub const SYSTEM_RTC_MEM_CRC_ADDR: u32 = 2047;
pub const SYSTEM_RTC_MEM_CRC_ADDR_V: u32 = 2047;
pub const SYSTEM_RTC_MEM_CRC_ADDR_S: u32 = 9;
pub const SYSTEM_RTC_MEM_CRC_START_V: u32 = 1;
pub const SYSTEM_RTC_MEM_CRC_START_S: u32 = 8;
pub const SYSTEM_RTC_FASTMEM_CRC_REG: u32 = 1611399244;
pub const SYSTEM_RTC_MEM_CRC_RES: u32 = 4294967295;
pub const SYSTEM_RTC_MEM_CRC_RES_V: u32 = 4294967295;
pub const SYSTEM_RTC_MEM_CRC_RES_S: u32 = 0;
pub const SYSTEM_REDUNDANT_ECO_CTRL_REG: u32 = 1611399248;
pub const SYSTEM_REDUNDANT_ECO_RESULT_V: u32 = 1;
pub const SYSTEM_REDUNDANT_ECO_RESULT_S: u32 = 1;
pub const SYSTEM_REDUNDANT_ECO_DRIVE_V: u32 = 1;
pub const SYSTEM_REDUNDANT_ECO_DRIVE_S: u32 = 0;
pub const SYSTEM_CLOCK_GATE_REG: u32 = 1611399252;
pub const SYSTEM_CLK_EN_V: u32 = 1;
pub const SYSTEM_CLK_EN_S: u32 = 0;
pub const SYSTEM_SYSCLK_CONF_REG: u32 = 1611399256;
pub const SYSTEM_CLK_DIV_EN_V: u32 = 1;
pub const SYSTEM_CLK_DIV_EN_S: u32 = 19;
pub const SYSTEM_CLK_XTAL_FREQ: u32 = 127;
pub const SYSTEM_CLK_XTAL_FREQ_V: u32 = 127;
pub const SYSTEM_CLK_XTAL_FREQ_S: u32 = 12;
pub const SYSTEM_SOC_CLK_SEL: u32 = 3;
pub const SYSTEM_SOC_CLK_SEL_V: u32 = 3;
pub const SYSTEM_SOC_CLK_SEL_S: u32 = 10;
pub const SYSTEM_PRE_DIV_CNT: u32 = 1023;
pub const SYSTEM_PRE_DIV_CNT_V: u32 = 1023;
pub const SYSTEM_PRE_DIV_CNT_S: u32 = 0;
pub const SYSTEM_MEM_PVT_REG: u32 = 1611399260;
pub const SYSTEM_MEM_VT_SEL: u32 = 3;
pub const SYSTEM_MEM_VT_SEL_V: u32 = 3;
pub const SYSTEM_MEM_VT_SEL_S: u32 = 22;
pub const SYSTEM_MEM_TIMING_ERR_CNT: u32 = 65535;
pub const SYSTEM_MEM_TIMING_ERR_CNT_V: u32 = 65535;
pub const SYSTEM_MEM_TIMING_ERR_CNT_S: u32 = 6;
pub const SYSTEM_MEM_PVT_MONITOR_EN_V: u32 = 1;
pub const SYSTEM_MEM_PVT_MONITOR_EN_S: u32 = 5;
pub const SYSTEM_MEM_ERR_CNT_CLR_V: u32 = 1;
pub const SYSTEM_MEM_ERR_CNT_CLR_S: u32 = 4;
pub const SYSTEM_MEM_PATH_LEN: u32 = 15;
pub const SYSTEM_MEM_PATH_LEN_V: u32 = 15;
pub const SYSTEM_MEM_PATH_LEN_S: u32 = 0;
pub const SYSTEM_COMB_PVT_LVT_CONF_REG: u32 = 1611399264;
pub const SYSTEM_COMB_PVT_MONITOR_EN_LVT_V: u32 = 1;
pub const SYSTEM_COMB_PVT_MONITOR_EN_LVT_S: u32 = 6;
pub const SYSTEM_COMB_ERR_CNT_CLR_LVT_V: u32 = 1;
pub const SYSTEM_COMB_ERR_CNT_CLR_LVT_S: u32 = 5;
pub const SYSTEM_COMB_PATH_LEN_LVT: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_LVT_V: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_LVT_S: u32 = 0;
pub const SYSTEM_COMB_PVT_NVT_CONF_REG: u32 = 1611399268;
pub const SYSTEM_COMB_PVT_MONITOR_EN_NVT_V: u32 = 1;
pub const SYSTEM_COMB_PVT_MONITOR_EN_NVT_S: u32 = 6;
pub const SYSTEM_COMB_ERR_CNT_CLR_NVT_V: u32 = 1;
pub const SYSTEM_COMB_ERR_CNT_CLR_NVT_S: u32 = 5;
pub const SYSTEM_COMB_PATH_LEN_NVT: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_NVT_V: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_NVT_S: u32 = 0;
pub const SYSTEM_COMB_PVT_HVT_CONF_REG: u32 = 1611399272;
pub const SYSTEM_COMB_PVT_MONITOR_EN_HVT_V: u32 = 1;
pub const SYSTEM_COMB_PVT_MONITOR_EN_HVT_S: u32 = 6;
pub const SYSTEM_COMB_ERR_CNT_CLR_HVT_V: u32 = 1;
pub const SYSTEM_COMB_ERR_CNT_CLR_HVT_S: u32 = 5;
pub const SYSTEM_COMB_PATH_LEN_HVT: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_HVT_V: u32 = 31;
pub const SYSTEM_COMB_PATH_LEN_HVT_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_LVT_SITE0_REG: u32 = 1611399276;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE0: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE0_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE0_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_NVT_SITE0_REG: u32 = 1611399280;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE0: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE0_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE0_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_HVT_SITE0_REG: u32 = 1611399284;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE0: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE0_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE0_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_LVT_SITE1_REG: u32 = 1611399288;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE1: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE1_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE1_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_NVT_SITE1_REG: u32 = 1611399292;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE1: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE1_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE1_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_HVT_SITE1_REG: u32 = 1611399296;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE1: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE1_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE1_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_LVT_SITE2_REG: u32 = 1611399300;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE2: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE2_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE2_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_NVT_SITE2_REG: u32 = 1611399304;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE2: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE2_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE2_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_HVT_SITE2_REG: u32 = 1611399308;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE2: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE2_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE2_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_LVT_SITE3_REG: u32 = 1611399312;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE3: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE3_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_LVT_SITE3_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_NVT_SITE3_REG: u32 = 1611399316;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE3: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE3_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_NVT_SITE3_S: u32 = 0;
pub const SYSTEM_COMB_PVT_ERR_HVT_SITE3_REG: u32 = 1611399320;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE3: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE3_V: u32 = 65535;
pub const SYSTEM_COMB_TIMING_ERR_CNT_HVT_SITE3_S: u32 = 0;
pub const SYSTEM_DATE_REG: u32 = 1611403260;
pub const SYSTEM_DATE: u32 = 268435455;
pub const SYSTEM_DATE_V: u32 = 268435455;
pub const SYSTEM_DATE_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_INTR_ENA_REG: u32 = 1611456512;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_ENA_S: u32 = 11;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_ENA_S: u32 = 10;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_ENA_S: u32 = 9;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_ENA_S: u32 = 8;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_ENA_S: u32 = 7;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_ENA_S: u32 = 6;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_ENA_S: u32 = 5;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_ENA_S: u32 = 4;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_ENA_S: u32 = 3;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_ENA_S: u32 = 2;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_ENA_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_ENA_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_ENA_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_INTR_RAW_REG: u32 = 1611456516;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RAW_S: u32 = 11;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RAW_S: u32 = 10;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RAW_S: u32 = 9;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RAW_S: u32 = 8;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RAW_S: u32 = 7;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RAW_S: u32 = 6;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RAW_S: u32 = 5;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RAW_S: u32 = 4;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RAW_S: u32 = 3;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RAW_S: u32 = 2;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RAW_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RAW_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RAW_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_INTR_RLS_REG: u32 = 1611456520;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_RLS_S: u32 = 11;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_RLS_S: u32 = 10;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_RLS_S: u32 = 9;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_RLS_S: u32 = 8;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_RLS_S: u32 = 7;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_RLS_S: u32 = 6;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_RLS_S: u32 = 5;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_RLS_S: u32 = 4;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_RLS_S: u32 = 3;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_RLS_S: u32 = 2;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_RLS_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RLS_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_RLS_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_INTR_CLR_REG: u32 = 1611456524;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_CLR_S: u32 = 11;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_CLR_S: u32 = 10;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MAX_CLR_S: u32 = 9;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_SP_SPILL_MIN_CLR_S: u32 = 8;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_WR_CLR_S: u32 = 7;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_RD_CLR_S: u32 = 6;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_WR_CLR_S: u32 = 5;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_RD_CLR_S: u32 = 4;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_WR_CLR_S: u32 = 3;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_RD_CLR_S: u32 = 2;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_WR_CLR_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_CLR_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_RD_CLR_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN_REG: u32 = 1611456528;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX_REG: u32 = 1611456532;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_0_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN_REG: u32 = 1611456536;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX_REG: u32 = 1611456540;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_DRAM0_1_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN_REG: u32 = 1611456544;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX_REG: u32 = 1611456548;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_0_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN_REG: u32 = 1611456552;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX_REG: u32 = 1611456556;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PIF_1_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_PC_REG: u32 = 1611456560;
pub const ASSIST_DEBUG_CORE_0_AREA_PC: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PC_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_PC_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_AREA_SP_REG: u32 = 1611456564;
pub const ASSIST_DEBUG_CORE_0_AREA_SP: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_SP_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_AREA_SP_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_SP_MIN_REG: u32 = 1611456568;
pub const ASSIST_DEBUG_CORE_0_SP_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_SP_MAX_REG: u32 = 1611456572;
pub const ASSIST_DEBUG_CORE_0_SP_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_SP_PC_REG: u32 = 1611456576;
pub const ASSIST_DEBUG_CORE_0_SP_PC: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_PC_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_SP_PC_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_RCD_EN_REG: u32 = 1611456580;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGEN_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGEN_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_RCD_RECORDEN_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_RCD_RECORDEN_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_REG: u32 = 1611456584;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGPC_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_REG: u32 = 1611456588;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_RCD_PDEBUGSP_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_0_REG: u32 = 1611456592;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_0_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_0_S: u32 = 25;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_0_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_0_S: u32 = 24;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_0: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_0_V: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_0_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_IRAM0_EXCEPTION_MONITOR_1_REG: u32 = 1611456596;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_1_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_LOADSTORE_1_S: u32 = 25;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_1_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_WR_1_S: u32 = 24;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_1: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_1_V: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_IRAM0_RECORDING_ADDR_1_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_0_REG: u32 = 1611456600;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_0: u32 = 15;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_0_V: u32 = 15;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_0_S: u32 = 25;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_0_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_0_S: u32 = 24;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_0: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_0_V: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_0_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_1_REG: u32 = 1611456604;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_0: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_0_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_0_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_2_REG: u32 = 1611456608;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_1: u32 = 15;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_1_V: u32 = 15;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_BYTEEN_1_S: u32 = 25;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_1_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_WR_1_S: u32 = 24;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_1: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_1_V: u32 = 16777215;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_ADDR_1_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_DRAM0_EXCEPTION_MONITOR_3_REG: u32 = 1611456612;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_1: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_1_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_DRAM0_RECORDING_PC_1_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_EXCEPTION_MONITOR_0_REG: u32 = 1611456616;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_0: u32 = 1048575;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_0_V: u32 = 1048575;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_0_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_EXCEPTION_MONITOR_1_REG: u32 = 1611456620;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_1: u32 = 1048575;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_1_V: u32 = 1048575;
pub const ASSIST_DEBUG_CORE_X_IRAM0_DRAM0_LIMIT_CYCLE_1_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_SETTING_REG: u32 = 1611456624;
pub const ASSIST_DEBUG_LOG_MEM_LOOP_ENABLE_V: u32 = 1;
pub const ASSIST_DEBUG_LOG_MEM_LOOP_ENABLE_S: u32 = 7;
pub const ASSIST_DEBUG_LOG_MODE: u32 = 15;
pub const ASSIST_DEBUG_LOG_MODE_V: u32 = 15;
pub const ASSIST_DEBUG_LOG_MODE_S: u32 = 3;
pub const ASSIST_DEBUG_LOG_ENA: u32 = 7;
pub const ASSIST_DEBUG_LOG_ENA_V: u32 = 7;
pub const ASSIST_DEBUG_LOG_ENA_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_DATA_0_REG: u32 = 1611456628;
pub const ASSIST_DEBUG_LOG_DATA_0: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_DATA_0_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_DATA_0_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_DATA_MASK_REG: u32 = 1611456632;
pub const ASSIST_DEBUG_LOG_DATA_SIZE: u32 = 65535;
pub const ASSIST_DEBUG_LOG_DATA_SIZE_V: u32 = 65535;
pub const ASSIST_DEBUG_LOG_DATA_SIZE_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MIN_REG: u32 = 1611456636;
pub const ASSIST_DEBUG_LOG_MIN: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MIN_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MIN_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MAX_REG: u32 = 1611456640;
pub const ASSIST_DEBUG_LOG_MAX: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MAX_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MAX_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MEM_START_REG: u32 = 1611456644;
pub const ASSIST_DEBUG_LOG_MEM_START: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_START_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_START_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MEM_END_REG: u32 = 1611456648;
pub const ASSIST_DEBUG_LOG_MEM_END: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_END_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_END_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MEM_WRITING_ADDR_REG: u32 = 1611456652;
pub const ASSIST_DEBUG_LOG_MEM_WRITING_ADDR: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_WRITING_ADDR_V: u32 = 4294967295;
pub const ASSIST_DEBUG_LOG_MEM_WRITING_ADDR_S: u32 = 0;
pub const ASSIST_DEBUG_LOG_MEM_FULL_FLAG_REG: u32 = 1611456656;
pub const ASSIST_DEBUG_CLR_LOG_MEM_FULL_FLAG_V: u32 = 1;
pub const ASSIST_DEBUG_CLR_LOG_MEM_FULL_FLAG_S: u32 = 1;
pub const ASSIST_DEBUG_LOG_MEM_FULL_FLAG_V: u32 = 1;
pub const ASSIST_DEBUG_LOG_MEM_FULL_FLAG_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXCEPTION_REG: u32 = 1611456660;
pub const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC_V: u32 = 4294967295;
pub const ASSIST_DEBUG_CORE_0_LASTPC_BEFORE_EXC_S: u32 = 0;
pub const ASSIST_DEBUG_CORE_0_DEBUG_MODE_REG: u32 = 1611456664;
pub const ASSIST_DEBUG_CORE_0_DEBUG_MODULE_ACTIVE_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DEBUG_MODULE_ACTIVE_S: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DEBUG_MODE_V: u32 = 1;
pub const ASSIST_DEBUG_CORE_0_DEBUG_MODE_S: u32 = 0;
pub const ASSIST_DEBUG_DATE_REG: u32 = 1611457020;
pub const ASSIST_DEBUG_DATE: u32 = 268435455;
pub const ASSIST_DEBUG_DATE_V: u32 = 268435455;
pub const ASSIST_DEBUG_DATE_S: u32 = 0;
pub const ARG_MAX: u32 = 4096;
pub const CHILD_MAX: u32 = 40;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 0;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NBBY: u32 = 8;
pub const HZ: u32 = 60;
pub const NOFILE: u32 = 60;
pub const PATHSIZE: u32 = 1024;
pub const MAXPATHLEN: u32 = 1024;
pub const MSTATUS_UIE: u32 = 1;
pub const MSTATUS_SIE: u32 = 2;
pub const MSTATUS_HIE: u32 = 4;
pub const MSTATUS_MIE: u32 = 8;
pub const MSTATUS_UPIE: u32 = 16;
pub const MSTATUS_SPIE: u32 = 32;
pub const MSTATUS_HPIE: u32 = 64;
pub const MSTATUS_MPIE: u32 = 128;
pub const MSTATUS_SPP: u32 = 256;
pub const MSTATUS_VS: u32 = 1536;
pub const MSTATUS_MPP: u32 = 6144;
pub const MSTATUS_FS: u32 = 24576;
pub const MSTATUS_XS: u32 = 98304;
pub const MSTATUS_MPRV: u32 = 131072;
pub const MSTATUS_SUM: u32 = 262144;
pub const MSTATUS_MXR: u32 = 524288;
pub const MSTATUS_TVM: u32 = 1048576;
pub const MSTATUS_TW: u32 = 2097152;
pub const MSTATUS_TSR: u32 = 4194304;
pub const MSTATUS32_SD: u32 = 2147483648;
pub const MSTATUS_UXL: u64 = 12884901888;
pub const MSTATUS_SXL: u64 = 51539607552;
pub const MSTATUS64_SD: i64 = -9223372036854775808;
pub const SSTATUS_UIE: u32 = 1;
pub const SSTATUS_SIE: u32 = 2;
pub const SSTATUS_UPIE: u32 = 16;
pub const SSTATUS_SPIE: u32 = 32;
pub const SSTATUS_SPP: u32 = 256;
pub const SSTATUS_VS: u32 = 1536;
pub const SSTATUS_FS: u32 = 24576;
pub const SSTATUS_XS: u32 = 98304;
pub const SSTATUS_SUM: u32 = 262144;
pub const SSTATUS_MXR: u32 = 524288;
pub const SSTATUS32_SD: u32 = 2147483648;
pub const SSTATUS_UXL: u64 = 12884901888;
pub const SSTATUS64_SD: i64 = -9223372036854775808;
pub const USTATUS_UIE: u32 = 1;
pub const USTATUS_UPIE: u32 = 16;
pub const DCSR_XDEBUGVER: u32 = 3221225472;
pub const DCSR_NDRESET: u32 = 536870912;
pub const DCSR_FULLRESET: u32 = 268435456;
pub const DCSR_EBREAKM: u32 = 32768;
pub const DCSR_EBREAKH: u32 = 16384;
pub const DCSR_EBREAKS: u32 = 8192;
pub const DCSR_EBREAKU: u32 = 4096;
pub const DCSR_STOPCYCLE: u32 = 1024;
pub const DCSR_STOPTIME: u32 = 512;
pub const DCSR_CAUSE: u32 = 448;
pub const DCSR_DEBUGINT: u32 = 32;
pub const DCSR_HALT: u32 = 8;
pub const DCSR_STEP: u32 = 4;
pub const DCSR_PRV: u32 = 3;
pub const DCSR_CAUSE_NONE: u32 = 0;
pub const DCSR_CAUSE_SWBP: u32 = 1;
pub const DCSR_CAUSE_HWBP: u32 = 2;
pub const DCSR_CAUSE_DEBUGINT: u32 = 3;
pub const DCSR_CAUSE_STEP: u32 = 4;
pub const DCSR_CAUSE_HALT: u32 = 5;
pub const DCSR_CAUSE_GROUP: u32 = 6;
pub const MCONTROL_SELECT: u32 = 524288;
pub const MCONTROL_TIMING: u32 = 262144;
pub const MCONTROL_ACTION: u32 = 258048;
pub const MCONTROL_CHAIN: u32 = 2048;
pub const MCONTROL_MATCH: u32 = 1920;
pub const MCONTROL_M: u32 = 64;
pub const MCONTROL_H: u32 = 32;
pub const MCONTROL_S: u32 = 16;
pub const MCONTROL_U: u32 = 8;
pub const MCONTROL_EXECUTE: u32 = 4;
pub const MCONTROL_STORE: u32 = 2;
pub const MCONTROL_LOAD: u32 = 1;
pub const MCONTROL_TYPE_NONE: u32 = 0;
pub const MCONTROL_TYPE_MATCH: u32 = 2;
pub const MCONTROL_ACTION_DEBUG_EXCEPTION: u32 = 0;
pub const MCONTROL_ACTION_DEBUG_MODE: u32 = 1;
pub const MCONTROL_ACTION_TRACE_START: u32 = 2;
pub const MCONTROL_ACTION_TRACE_STOP: u32 = 3;
pub const MCONTROL_ACTION_TRACE_EMIT: u32 = 4;
pub const MCONTROL_MATCH_EQUAL: u32 = 0;
pub const MCONTROL_MATCH_NAPOT: u32 = 1;
pub const MCONTROL_MATCH_GE: u32 = 2;
pub const MCONTROL_MATCH_LT: u32 = 3;
pub const MCONTROL_MATCH_MASK_LOW: u32 = 4;
pub const MCONTROL_MATCH_MASK_HIGH: u32 = 5;
pub const PRV_U: u32 = 0;
pub const PRV_S: u32 = 1;
pub const PRV_H: u32 = 2;
pub const PRV_M: u32 = 3;
pub const SATP32_MODE: u32 = 2147483648;
pub const SATP32_ASID: u32 = 2143289344;
pub const SATP32_PPN: u32 = 4194303;
pub const SATP64_MODE: i64 = -1152921504606846976;
pub const SATP64_ASID: u64 = 1152903912420802560;
pub const SATP64_PPN: u64 = 17592186044415;
pub const SATP_MODE_OFF: u32 = 0;
pub const SATP_MODE_SV32: u32 = 1;
pub const SATP_MODE_SV39: u32 = 8;
pub const SATP_MODE_SV48: u32 = 9;
pub const SATP_MODE_SV57: u32 = 10;
pub const SATP_MODE_SV64: u32 = 11;
pub const PMP_R: u32 = 1;
pub const PMP_W: u32 = 2;
pub const PMP_X: u32 = 4;
pub const PMP_A: u32 = 24;
pub const PMP_L: u32 = 128;
pub const PMP_SHIFT: u32 = 2;
pub const PMP_TOR: u32 = 8;
pub const PMP_NA4: u32 = 16;
pub const PMP_NAPOT: u32 = 24;
pub const IRQ_U_SOFT: u32 = 0;
pub const IRQ_S_SOFT: u32 = 1;
pub const IRQ_H_SOFT: u32 = 2;
pub const IRQ_M_SOFT: u32 = 3;
pub const IRQ_U_TIMER: u32 = 4;
pub const IRQ_S_TIMER: u32 = 5;
pub const IRQ_H_TIMER: u32 = 6;
pub const IRQ_M_TIMER: u32 = 7;
pub const IRQ_U_EXT: u32 = 8;
pub const IRQ_S_EXT: u32 = 9;
pub const IRQ_H_EXT: u32 = 10;
pub const IRQ_M_EXT: u32 = 11;
pub const IRQ_COP: u32 = 12;
pub const IRQ_HOST: u32 = 13;
pub const DEFAULT_RSTVEC: u32 = 4096;
pub const CLINT_BASE: u32 = 33554432;
pub const CLINT_SIZE: u32 = 786432;
pub const EXT_IO_BASE: u32 = 1073741824;
pub const DRAM_BASE: u32 = 2147483648;
pub const PTE_V: u32 = 1;
pub const PTE_R: u32 = 2;
pub const PTE_W: u32 = 4;
pub const PTE_X: u32 = 8;
pub const PTE_U: u32 = 16;
pub const PTE_G: u32 = 32;
pub const PTE_A: u32 = 64;
pub const PTE_D: u32 = 128;
pub const PTE_SOFT: u32 = 768;
pub const PTE_PPN_SHIFT: u32 = 10;
pub const MSTATUS_SD: u32 = 2147483648;
pub const SSTATUS_SD: u32 = 2147483648;
pub const RISCV_PGLEVEL_BITS: u32 = 10;
pub const SATP_MODE: u32 = 2147483648;
pub const RISCV_PGSHIFT: u32 = 12;
pub const RISCV_PGSIZE: u32 = 4096;
pub const CSR_PMPCFG0: u32 = 928;
pub const CSR_PMPADDR0: u32 = 944;
pub const PMPADDR_ALL: u32 = 4294967295;
pub const CSR_TCONTROL: u32 = 1957;
pub const CSR_TDATA1: u32 = 1953;
pub const TCONTROL_MTE: u32 = 8;
pub const TCONTROL_MPTE: u32 = 128;
pub const TDATA1_LOAD: u32 = 1;
pub const TDATA1_STORE: u32 = 2;
pub const TDATA1_EXECUTE: u32 = 4;
pub const TDATA1_USER: u32 = 8;
pub const TDATA1_MACHINE: u32 = 64;
pub const TDATA1_MATCH: u32 = 128;
pub const TDATA1_MATCH_V: u32 = 15;
pub const TDATA1_MATCH_S: u32 = 7;
pub const ESP_SEMIHOSTING_SYS_APPTRACE_INIT: u32 = 100;
pub const ESP_SEMIHOSTING_SYS_DBG_STUBS_INIT: u32 = 101;
pub const ESP_SEMIHOSTING_SYS_BREAKPOINT_SET: u32 = 102;
pub const ESP_SEMIHOSTING_SYS_WATCHPOINT_SET: u32 = 103;
pub const ESP_SEMIHOSTING_WP_FLG_RD: u32 = 1;
pub const ESP_SEMIHOSTING_WP_FLG_WR: u32 = 2;
pub const CSR_PCER_MACHINE: u32 = 2016;
pub const CSR_PCMR_MACHINE: u32 = 2017;
pub const CSR_PCCR_MACHINE: u32 = 2018;
pub const CSR_GPIO_OEN_USER: u32 = 2051;
pub const CSR_GPIO_IN_USER: u32 = 2052;
pub const CSR_GPIO_OUT_USER: u32 = 2053;
pub const ESP_WATCHPOINT_LOAD: u32 = 1073741824;
pub const ESP_WATCHPOINT_STORE: u32 = 2147483648;
pub const ESP_WATCHPOINT_ACCESS: u32 = 3221225472;
pub const TOUCH_PAD_BIT_MASK_ALL: u32 = 0;
pub const TOUCH_PAD_BIT_MASK_MAX: u32 = 0;
pub const TOUCH_PAD_SLEEP_CYCLE_DEFAULT: u32 = 15;
pub const TOUCH_PAD_MEASURE_CYCLE_DEFAULT: u32 = 500;
pub const TOUCH_PROXIMITY_MEAS_NUM_MAX: u32 = 255;
pub const TOUCH_DEBOUNCE_CNT_MAX: u32 = 7;
pub const TOUCH_NOISE_THR_MAX: u32 = 3;
pub const TOUCH_JITTER_STEP_MAX: u32 = 15;
pub const SLP_OE_V: u32 = 1;
pub const SLP_OE_S: u32 = 0;
pub const SLP_SEL_V: u32 = 1;
pub const SLP_SEL_S: u32 = 1;
pub const SLP_PD_V: u32 = 1;
pub const SLP_PD_S: u32 = 2;
pub const SLP_PU_V: u32 = 1;
pub const SLP_PU_S: u32 = 3;
pub const SLP_IE_V: u32 = 1;
pub const SLP_IE_S: u32 = 4;
pub const SLP_DRV: u32 = 3;
pub const SLP_DRV_V: u32 = 3;
pub const SLP_DRV_S: u32 = 5;
pub const FUN_PD_V: u32 = 1;
pub const FUN_PD_S: u32 = 7;
pub const FUN_PU_V: u32 = 1;
pub const FUN_PU_S: u32 = 8;
pub const FUN_IE_V: u32 = 1;
pub const FUN_IE_S: u32 = 9;
pub const FUN_DRV: u32 = 3;
pub const FUN_DRV_V: u32 = 3;
pub const FUN_DRV_S: u32 = 10;
pub const MCU_SEL: u32 = 7;
pub const MCU_SEL_V: u32 = 7;
pub const MCU_SEL_S: u32 = 12;
pub const PIN_FUNC_GPIO: u32 = 1;
pub const SPI_HD_GPIO_NUM: u32 = 12;
pub const SPI_WP_GPIO_NUM: u32 = 13;
pub const SPI_CS0_GPIO_NUM: u32 = 14;
pub const SPI_CLK_GPIO_NUM: u32 = 15;
pub const SPI_D_GPIO_NUM: u32 = 16;
pub const SPI_Q_GPIO_NUM: u32 = 17;
pub const SD_CLK_GPIO_NUM: u32 = 12;
pub const SD_CMD_GPIO_NUM: u32 = 11;
pub const SD_DATA0_GPIO_NUM: u32 = 13;
pub const SD_DATA1_GPIO_NUM: u32 = 14;
pub const SD_DATA2_GPIO_NUM: u32 = 9;
pub const SD_DATA3_GPIO_NUM: u32 = 10;
pub const MAX_RTC_GPIO_NUM: u32 = 5;
pub const MAX_PAD_GPIO_NUM: u32 = 21;
pub const MAX_GPIO_NUM: u32 = 25;
pub const REG_IO_MUX_BASE: u32 = 1610649600;
pub const PIN_CTRL: u32 = 1610649600;
pub const PAD_POWER_SEL_V: u32 = 1;
pub const PAD_POWER_SEL_S: u32 = 15;
pub const PAD_POWER_SWITCH_DELAY: u32 = 7;
pub const PAD_POWER_SWITCH_DELAY_V: u32 = 7;
pub const PAD_POWER_SWITCH_DELAY_S: u32 = 12;
pub const CLK_OUT3: u32 = 15;
pub const CLK_OUT3_V: u32 = 15;
pub const CLK_OUT3_S: u32 = 8;
pub const CLK_OUT3_M: u32 = 3840;
pub const CLK_OUT2: u32 = 15;
pub const CLK_OUT2_V: u32 = 15;
pub const CLK_OUT2_S: u32 = 4;
pub const CLK_OUT2_M: u32 = 240;
pub const CLK_OUT1: u32 = 15;
pub const CLK_OUT1_V: u32 = 15;
pub const CLK_OUT1_S: u32 = 0;
pub const CLK_OUT1_M: u32 = 15;
pub const PERIPHS_IO_MUX_XTAL_32K_P_U: u32 = 1610649604;
pub const FUNC_XTAL_32K_P_GPIO0: u32 = 1;
pub const FUNC_XTAL_32K_P_GPIO0_0: u32 = 0;
pub const PERIPHS_IO_MUX_XTAL_32K_N_U: u32 = 1610649608;
pub const FUNC_XTAL_32K_N_GPIO1: u32 = 1;
pub const FUNC_XTAL_32K_N_GPIO1_0: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO2_U: u32 = 1610649612;
pub const FUNC_GPIO2_FSPIQ: u32 = 2;
pub const FUNC_GPIO2_GPIO2: u32 = 1;
pub const FUNC_GPIO2_GPIO2_0: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO3_U: u32 = 1610649616;
pub const FUNC_GPIO3_GPIO3: u32 = 1;
pub const FUNC_GPIO3_GPIO3_0: u32 = 0;
pub const PERIPHS_IO_MUX_MTMS_U: u32 = 1610649620;
pub const FUNC_MTMS_FSPIHD: u32 = 2;
pub const FUNC_MTMS_GPIO4: u32 = 1;
pub const FUNC_MTMS_MTMS: u32 = 0;
pub const PERIPHS_IO_MUX_MTDI_U: u32 = 1610649624;
pub const FUNC_MTDI_FSPIWP: u32 = 2;
pub const FUNC_MTDI_GPIO5: u32 = 1;
pub const FUNC_MTDI_MTDI: u32 = 0;
pub const PERIPHS_IO_MUX_MTCK_U: u32 = 1610649628;
pub const FUNC_MTCK_FSPICLK: u32 = 2;
pub const FUNC_MTCK_GPIO6: u32 = 1;
pub const FUNC_MTCK_MTCK: u32 = 0;
pub const PERIPHS_IO_MUX_MTDO_U: u32 = 1610649632;
pub const FUNC_MTDO_FSPID: u32 = 2;
pub const FUNC_MTDO_GPIO7: u32 = 1;
pub const FUNC_MTDO_MTDO: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO8_U: u32 = 1610649636;
pub const FUNC_GPIO8_GPIO8: u32 = 1;
pub const FUNC_GPIO8_GPIO8_0: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO9_U: u32 = 1610649640;
pub const FUNC_GPIO9_GPIO9: u32 = 1;
pub const FUNC_GPIO9_GPIO9_0: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO10_U: u32 = 1610649644;
pub const FUNC_GPIO10_FSPICS0: u32 = 2;
pub const FUNC_GPIO10_GPIO10: u32 = 1;
pub const FUNC_GPIO10_GPIO10_0: u32 = 0;
pub const PERIPHS_IO_MUX_VDD_SPI_U: u32 = 1610649648;
pub const FUNC_VDD_SPI_GPIO11: u32 = 1;
pub const FUNC_VDD_SPI_GPIO11_0: u32 = 0;
pub const PERIPHS_IO_MUX_SPIHD_U: u32 = 1610649652;
pub const FUNC_SPIHD_GPIO12: u32 = 1;
pub const FUNC_SPIHD_SPIHD: u32 = 0;
pub const PERIPHS_IO_MUX_SPIWP_U: u32 = 1610649656;
pub const FUNC_SPIWP_GPIO13: u32 = 1;
pub const FUNC_SPIWP_SPIWP: u32 = 0;
pub const PERIPHS_IO_MUX_SPICS0_U: u32 = 1610649660;
pub const FUNC_SPICS0_GPIO14: u32 = 1;
pub const FUNC_SPICS0_SPICS0: u32 = 0;
pub const PERIPHS_IO_MUX_SPICLK_U: u32 = 1610649664;
pub const FUNC_SPICLK_GPIO15: u32 = 1;
pub const FUNC_SPICLK_SPICLK: u32 = 0;
pub const PERIPHS_IO_MUX_SPID_U: u32 = 1610649668;
pub const FUNC_SPID_GPIO16: u32 = 1;
pub const FUNC_SPID_SPID: u32 = 0;
pub const PERIPHS_IO_MUX_SPIQ_U: u32 = 1610649672;
pub const FUNC_SPIQ_GPIO17: u32 = 1;
pub const FUNC_SPIQ_SPIQ: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO18_U: u32 = 1610649676;
pub const FUNC_GPIO18_GPIO18: u32 = 1;
pub const FUNC_GPIO18_GPIO18_0: u32 = 0;
pub const PERIPHS_IO_MUX_GPIO19_U: u32 = 1610649680;
pub const FUNC_GPIO19_GPIO19: u32 = 1;
pub const FUNC_GPIO19_GPIO19_0: u32 = 0;
pub const PERIPHS_IO_MUX_U0RXD_U: u32 = 1610649684;
pub const FUNC_U0RXD_GPIO20: u32 = 1;
pub const FUNC_U0RXD_U0RXD: u32 = 0;
pub const PERIPHS_IO_MUX_U0TXD_U: u32 = 1610649688;
pub const FUNC_U0TXD_GPIO21: u32 = 1;
pub const FUNC_U0TXD_U0TXD: u32 = 0;
pub const IO_MUX_DATE_REG: u32 = 1610649852;
pub const IO_MUX_DATE: u32 = 4294967295;
pub const IO_MUX_DATE_S: u32 = 0;
pub const IO_MUX_DATE_VERSION: u32 = 33579088;
pub const GPIO_PIN_CONFIG_MSB: u32 = 12;
pub const GPIO_PIN_CONFIG_LSB: u32 = 11;
pub const GPIO_PIN_CONFIG_MASK: u32 = 6144;
pub const GPIO_WAKEUP_ENABLE: u32 = 1;
pub const GPIO_WAKEUP_DISABLE: i32 = -2;
pub const GPIO_PIN_WAKEUP_ENABLE_MSB: u32 = 10;
pub const GPIO_PIN_WAKEUP_ENABLE_LSB: u32 = 10;
pub const GPIO_PIN_WAKEUP_ENABLE_MASK: u32 = 1024;
pub const GPIO_PIN_INT_TYPE_MASK: u32 = 896;
pub const GPIO_PIN_INT_TYPE_MSB: u32 = 9;
pub const GPIO_PIN_INT_TYPE_LSB: u32 = 7;
pub const GPIO_PAD_DRIVER_ENABLE: u32 = 1;
pub const GPIO_PAD_DRIVER_DISABLE: i32 = -2;
pub const GPIO_PIN_PAD_DRIVER_MSB: u32 = 2;
pub const GPIO_PIN_PAD_DRIVER_LSB: u32 = 2;
pub const GPIO_PIN_PAD_DRIVER_MASK: u32 = 4;
pub const GPIO_BT_SELECT_REG: u32 = 1610629120;
pub const GPIO_BT_SEL: u32 = 4294967295;
pub const GPIO_BT_SEL_V: u32 = 4294967295;
pub const GPIO_BT_SEL_S: u32 = 0;
pub const GPIO_OUT_REG: u32 = 1610629124;
pub const GPIO_OUT_DATA: u32 = 67108863;
pub const GPIO_OUT_DATA_V: u32 = 67108863;
pub const GPIO_OUT_DATA_S: u32 = 0;
pub const GPIO_OUT_W1TS_REG: u32 = 1610629128;
pub const GPIO_OUT_W1TS: u32 = 67108863;
pub const GPIO_OUT_W1TS_V: u32 = 67108863;
pub const GPIO_OUT_W1TS_S: u32 = 0;
pub const GPIO_OUT_W1TC_REG: u32 = 1610629132;
pub const GPIO_OUT_W1TC: u32 = 67108863;
pub const GPIO_OUT_W1TC_V: u32 = 67108863;
pub const GPIO_OUT_W1TC_S: u32 = 0;
pub const GPIO_SDIO_SELECT_REG: u32 = 1610629148;
pub const GPIO_SDIO_SEL: u32 = 255;
pub const GPIO_SDIO_SEL_V: u32 = 255;
pub const GPIO_SDIO_SEL_S: u32 = 0;
pub const GPIO_ENABLE_REG: u32 = 1610629152;
pub const GPIO_ENABLE_DATA: u32 = 67108863;
pub const GPIO_ENABLE_DATA_V: u32 = 67108863;
pub const GPIO_ENABLE_DATA_S: u32 = 0;
pub const GPIO_ENABLE_W1TS_REG: u32 = 1610629156;
pub const GPIO_ENABLE_W1TS: u32 = 67108863;
pub const GPIO_ENABLE_W1TS_V: u32 = 67108863;
pub const GPIO_ENABLE_W1TS_S: u32 = 0;
pub const GPIO_ENABLE_W1TC_REG: u32 = 1610629160;
pub const GPIO_ENABLE_W1TC: u32 = 67108863;
pub const GPIO_ENABLE_W1TC_V: u32 = 67108863;
pub const GPIO_ENABLE_W1TC_S: u32 = 0;
pub const GPIO_STRAP_REG: u32 = 1610629176;
pub const GPIO_STRAPPING: u32 = 65535;
pub const GPIO_STRAPPING_V: u32 = 65535;
pub const GPIO_STRAPPING_S: u32 = 0;
pub const GPIO_IN_REG: u32 = 1610629180;
pub const GPIO_IN_DATA: u32 = 67108863;
pub const GPIO_IN_DATA_V: u32 = 67108863;
pub const GPIO_IN_DATA_S: u32 = 0;
pub const GPIO_STATUS_REG: u32 = 1610629188;
pub const GPIO_STATUS_INT: u32 = 67108863;
pub const GPIO_STATUS_INT_V: u32 = 67108863;
pub const GPIO_STATUS_INT_S: u32 = 0;
pub const GPIO_STATUS_W1TS_REG: u32 = 1610629192;
pub const GPIO_STATUS_W1TS: u32 = 67108863;
pub const GPIO_STATUS_W1TS_V: u32 = 67108863;
pub const GPIO_STATUS_W1TS_S: u32 = 0;
pub const GPIO_STATUS_W1TC_REG: u32 = 1610629196;
pub const GPIO_STATUS_W1TC: u32 = 67108863;
pub const GPIO_STATUS_W1TC_V: u32 = 67108863;
pub const GPIO_STATUS_W1TC_S: u32 = 0;
pub const GPIO_PCPU_INT_REG: u32 = 1610629212;
pub const GPIO_PROCPU_INT: u32 = 67108863;
pub const GPIO_PROCPU_INT_V: u32 = 67108863;
pub const GPIO_PROCPU_INT_S: u32 = 0;
pub const GPIO_PCPU_NMI_INT_REG: u32 = 1610629216;
pub const GPIO_PROCPU_NMI_INT: u32 = 67108863;
pub const GPIO_PROCPU_NMI_INT_V: u32 = 67108863;
pub const GPIO_PROCPU_NMI_INT_S: u32 = 0;
pub const GPIO_CPUSDIO_INT_REG: u32 = 1610629220;
pub const GPIO_SDIO_INT: u32 = 67108863;
pub const GPIO_SDIO_INT_V: u32 = 67108863;
pub const GPIO_SDIO_INT_S: u32 = 0;
pub const GPIO_PIN0_REG: u32 = 1610629236;
pub const GPIO_PIN0_INT_ENA: u32 = 31;
pub const GPIO_PIN0_INT_ENA_V: u32 = 31;
pub const GPIO_PIN0_INT_ENA_S: u32 = 13;
pub const GPIO_PIN0_CONFIG: u32 = 3;
pub const GPIO_PIN0_CONFIG_V: u32 = 3;
pub const GPIO_PIN0_CONFIG_S: u32 = 11;
pub const GPIO_PIN0_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN0_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN0_INT_TYPE: u32 = 7;
pub const GPIO_PIN0_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN0_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN0_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN0_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN0_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN0_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN0_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN0_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN0_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN0_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN1_REG: u32 = 1610629240;
pub const GPIO_PIN1_INT_ENA: u32 = 31;
pub const GPIO_PIN1_INT_ENA_V: u32 = 31;
pub const GPIO_PIN1_INT_ENA_S: u32 = 13;
pub const GPIO_PIN1_CONFIG: u32 = 3;
pub const GPIO_PIN1_CONFIG_V: u32 = 3;
pub const GPIO_PIN1_CONFIG_S: u32 = 11;
pub const GPIO_PIN1_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN1_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN1_INT_TYPE: u32 = 7;
pub const GPIO_PIN1_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN1_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN1_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN1_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN1_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN1_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN1_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN1_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN1_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN1_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN2_REG: u32 = 1610629244;
pub const GPIO_PIN2_INT_ENA: u32 = 31;
pub const GPIO_PIN2_INT_ENA_V: u32 = 31;
pub const GPIO_PIN2_INT_ENA_S: u32 = 13;
pub const GPIO_PIN2_CONFIG: u32 = 3;
pub const GPIO_PIN2_CONFIG_V: u32 = 3;
pub const GPIO_PIN2_CONFIG_S: u32 = 11;
pub const GPIO_PIN2_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN2_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN2_INT_TYPE: u32 = 7;
pub const GPIO_PIN2_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN2_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN2_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN2_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN2_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN2_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN2_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN2_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN2_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN2_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN3_REG: u32 = 1610629248;
pub const GPIO_PIN3_INT_ENA: u32 = 31;
pub const GPIO_PIN3_INT_ENA_V: u32 = 31;
pub const GPIO_PIN3_INT_ENA_S: u32 = 13;
pub const GPIO_PIN3_CONFIG: u32 = 3;
pub const GPIO_PIN3_CONFIG_V: u32 = 3;
pub const GPIO_PIN3_CONFIG_S: u32 = 11;
pub const GPIO_PIN3_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN3_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN3_INT_TYPE: u32 = 7;
pub const GPIO_PIN3_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN3_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN3_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN3_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN3_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN3_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN3_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN3_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN3_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN3_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN4_REG: u32 = 1610629252;
pub const GPIO_PIN4_INT_ENA: u32 = 31;
pub const GPIO_PIN4_INT_ENA_V: u32 = 31;
pub const GPIO_PIN4_INT_ENA_S: u32 = 13;
pub const GPIO_PIN4_CONFIG: u32 = 3;
pub const GPIO_PIN4_CONFIG_V: u32 = 3;
pub const GPIO_PIN4_CONFIG_S: u32 = 11;
pub const GPIO_PIN4_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN4_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN4_INT_TYPE: u32 = 7;
pub const GPIO_PIN4_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN4_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN4_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN4_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN4_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN4_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN4_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN4_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN4_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN4_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN5_REG: u32 = 1610629256;
pub const GPIO_PIN5_INT_ENA: u32 = 31;
pub const GPIO_PIN5_INT_ENA_V: u32 = 31;
pub const GPIO_PIN5_INT_ENA_S: u32 = 13;
pub const GPIO_PIN5_CONFIG: u32 = 3;
pub const GPIO_PIN5_CONFIG_V: u32 = 3;
pub const GPIO_PIN5_CONFIG_S: u32 = 11;
pub const GPIO_PIN5_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN5_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN5_INT_TYPE: u32 = 7;
pub const GPIO_PIN5_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN5_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN5_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN5_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN5_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN5_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN5_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN5_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN5_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN5_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN6_REG: u32 = 1610629260;
pub const GPIO_PIN6_INT_ENA: u32 = 31;
pub const GPIO_PIN6_INT_ENA_V: u32 = 31;
pub const GPIO_PIN6_INT_ENA_S: u32 = 13;
pub const GPIO_PIN6_CONFIG: u32 = 3;
pub const GPIO_PIN6_CONFIG_V: u32 = 3;
pub const GPIO_PIN6_CONFIG_S: u32 = 11;
pub const GPIO_PIN6_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN6_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN6_INT_TYPE: u32 = 7;
pub const GPIO_PIN6_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN6_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN6_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN6_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN6_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN6_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN6_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN6_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN6_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN6_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN7_REG: u32 = 1610629264;
pub const GPIO_PIN7_INT_ENA: u32 = 31;
pub const GPIO_PIN7_INT_ENA_V: u32 = 31;
pub const GPIO_PIN7_INT_ENA_S: u32 = 13;
pub const GPIO_PIN7_CONFIG: u32 = 3;
pub const GPIO_PIN7_CONFIG_V: u32 = 3;
pub const GPIO_PIN7_CONFIG_S: u32 = 11;
pub const GPIO_PIN7_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN7_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN7_INT_TYPE: u32 = 7;
pub const GPIO_PIN7_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN7_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN7_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN7_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN7_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN7_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN7_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN7_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN7_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN7_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN8_REG: u32 = 1610629268;
pub const GPIO_PIN8_INT_ENA: u32 = 31;
pub const GPIO_PIN8_INT_ENA_V: u32 = 31;
pub const GPIO_PIN8_INT_ENA_S: u32 = 13;
pub const GPIO_PIN8_CONFIG: u32 = 3;
pub const GPIO_PIN8_CONFIG_V: u32 = 3;
pub const GPIO_PIN8_CONFIG_S: u32 = 11;
pub const GPIO_PIN8_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN8_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN8_INT_TYPE: u32 = 7;
pub const GPIO_PIN8_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN8_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN8_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN8_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN8_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN8_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN8_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN8_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN8_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN8_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN9_REG: u32 = 1610629272;
pub const GPIO_PIN9_INT_ENA: u32 = 31;
pub const GPIO_PIN9_INT_ENA_V: u32 = 31;
pub const GPIO_PIN9_INT_ENA_S: u32 = 13;
pub const GPIO_PIN9_CONFIG: u32 = 3;
pub const GPIO_PIN9_CONFIG_V: u32 = 3;
pub const GPIO_PIN9_CONFIG_S: u32 = 11;
pub const GPIO_PIN9_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN9_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN9_INT_TYPE: u32 = 7;
pub const GPIO_PIN9_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN9_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN9_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN9_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN9_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN9_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN9_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN9_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN9_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN9_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN10_REG: u32 = 1610629276;
pub const GPIO_PIN10_INT_ENA: u32 = 31;
pub const GPIO_PIN10_INT_ENA_V: u32 = 31;
pub const GPIO_PIN10_INT_ENA_S: u32 = 13;
pub const GPIO_PIN10_CONFIG: u32 = 3;
pub const GPIO_PIN10_CONFIG_V: u32 = 3;
pub const GPIO_PIN10_CONFIG_S: u32 = 11;
pub const GPIO_PIN10_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN10_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN10_INT_TYPE: u32 = 7;
pub const GPIO_PIN10_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN10_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN10_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN10_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN10_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN10_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN10_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN10_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN10_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN10_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN11_REG: u32 = 1610629280;
pub const GPIO_PIN11_INT_ENA: u32 = 31;
pub const GPIO_PIN11_INT_ENA_V: u32 = 31;
pub const GPIO_PIN11_INT_ENA_S: u32 = 13;
pub const GPIO_PIN11_CONFIG: u32 = 3;
pub const GPIO_PIN11_CONFIG_V: u32 = 3;
pub const GPIO_PIN11_CONFIG_S: u32 = 11;
pub const GPIO_PIN11_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN11_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN11_INT_TYPE: u32 = 7;
pub const GPIO_PIN11_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN11_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN11_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN11_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN11_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN11_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN11_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN11_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN11_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN11_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN12_REG: u32 = 1610629284;
pub const GPIO_PIN12_INT_ENA: u32 = 31;
pub const GPIO_PIN12_INT_ENA_V: u32 = 31;
pub const GPIO_PIN12_INT_ENA_S: u32 = 13;
pub const GPIO_PIN12_CONFIG: u32 = 3;
pub const GPIO_PIN12_CONFIG_V: u32 = 3;
pub const GPIO_PIN12_CONFIG_S: u32 = 11;
pub const GPIO_PIN12_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN12_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN12_INT_TYPE: u32 = 7;
pub const GPIO_PIN12_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN12_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN12_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN12_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN12_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN12_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN12_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN12_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN12_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN12_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN13_REG: u32 = 1610629288;
pub const GPIO_PIN13_INT_ENA: u32 = 31;
pub const GPIO_PIN13_INT_ENA_V: u32 = 31;
pub const GPIO_PIN13_INT_ENA_S: u32 = 13;
pub const GPIO_PIN13_CONFIG: u32 = 3;
pub const GPIO_PIN13_CONFIG_V: u32 = 3;
pub const GPIO_PIN13_CONFIG_S: u32 = 11;
pub const GPIO_PIN13_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN13_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN13_INT_TYPE: u32 = 7;
pub const GPIO_PIN13_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN13_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN13_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN13_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN13_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN13_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN13_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN13_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN13_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN13_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN14_REG: u32 = 1610629292;
pub const GPIO_PIN14_INT_ENA: u32 = 31;
pub const GPIO_PIN14_INT_ENA_V: u32 = 31;
pub const GPIO_PIN14_INT_ENA_S: u32 = 13;
pub const GPIO_PIN14_CONFIG: u32 = 3;
pub const GPIO_PIN14_CONFIG_V: u32 = 3;
pub const GPIO_PIN14_CONFIG_S: u32 = 11;
pub const GPIO_PIN14_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN14_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN14_INT_TYPE: u32 = 7;
pub const GPIO_PIN14_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN14_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN14_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN14_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN14_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN14_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN14_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN14_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN14_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN14_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN15_REG: u32 = 1610629296;
pub const GPIO_PIN15_INT_ENA: u32 = 31;
pub const GPIO_PIN15_INT_ENA_V: u32 = 31;
pub const GPIO_PIN15_INT_ENA_S: u32 = 13;
pub const GPIO_PIN15_CONFIG: u32 = 3;
pub const GPIO_PIN15_CONFIG_V: u32 = 3;
pub const GPIO_PIN15_CONFIG_S: u32 = 11;
pub const GPIO_PIN15_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN15_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN15_INT_TYPE: u32 = 7;
pub const GPIO_PIN15_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN15_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN15_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN15_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN15_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN15_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN15_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN15_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN15_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN15_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN16_REG: u32 = 1610629300;
pub const GPIO_PIN16_INT_ENA: u32 = 31;
pub const GPIO_PIN16_INT_ENA_V: u32 = 31;
pub const GPIO_PIN16_INT_ENA_S: u32 = 13;
pub const GPIO_PIN16_CONFIG: u32 = 3;
pub const GPIO_PIN16_CONFIG_V: u32 = 3;
pub const GPIO_PIN16_CONFIG_S: u32 = 11;
pub const GPIO_PIN16_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN16_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN16_INT_TYPE: u32 = 7;
pub const GPIO_PIN16_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN16_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN16_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN16_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN16_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN16_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN16_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN16_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN16_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN16_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN17_REG: u32 = 1610629304;
pub const GPIO_PIN17_INT_ENA: u32 = 31;
pub const GPIO_PIN17_INT_ENA_V: u32 = 31;
pub const GPIO_PIN17_INT_ENA_S: u32 = 13;
pub const GPIO_PIN17_CONFIG: u32 = 3;
pub const GPIO_PIN17_CONFIG_V: u32 = 3;
pub const GPIO_PIN17_CONFIG_S: u32 = 11;
pub const GPIO_PIN17_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN17_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN17_INT_TYPE: u32 = 7;
pub const GPIO_PIN17_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN17_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN17_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN17_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN17_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN17_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN17_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN17_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN17_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN17_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN18_REG: u32 = 1610629308;
pub const GPIO_PIN18_INT_ENA: u32 = 31;
pub const GPIO_PIN18_INT_ENA_V: u32 = 31;
pub const GPIO_PIN18_INT_ENA_S: u32 = 13;
pub const GPIO_PIN18_CONFIG: u32 = 3;
pub const GPIO_PIN18_CONFIG_V: u32 = 3;
pub const GPIO_PIN18_CONFIG_S: u32 = 11;
pub const GPIO_PIN18_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN18_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN18_INT_TYPE: u32 = 7;
pub const GPIO_PIN18_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN18_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN18_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN18_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN18_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN18_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN18_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN18_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN18_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN18_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN19_REG: u32 = 1610629312;
pub const GPIO_PIN19_INT_ENA: u32 = 31;
pub const GPIO_PIN19_INT_ENA_V: u32 = 31;
pub const GPIO_PIN19_INT_ENA_S: u32 = 13;
pub const GPIO_PIN19_CONFIG: u32 = 3;
pub const GPIO_PIN19_CONFIG_V: u32 = 3;
pub const GPIO_PIN19_CONFIG_S: u32 = 11;
pub const GPIO_PIN19_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN19_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN19_INT_TYPE: u32 = 7;
pub const GPIO_PIN19_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN19_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN19_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN19_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN19_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN19_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN19_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN19_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN19_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN19_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN20_REG: u32 = 1610629316;
pub const GPIO_PIN20_INT_ENA: u32 = 31;
pub const GPIO_PIN20_INT_ENA_V: u32 = 31;
pub const GPIO_PIN20_INT_ENA_S: u32 = 13;
pub const GPIO_PIN20_CONFIG: u32 = 3;
pub const GPIO_PIN20_CONFIG_V: u32 = 3;
pub const GPIO_PIN20_CONFIG_S: u32 = 11;
pub const GPIO_PIN20_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN20_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN20_INT_TYPE: u32 = 7;
pub const GPIO_PIN20_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN20_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN20_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN20_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN20_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN20_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN20_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN20_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN20_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN20_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN21_REG: u32 = 1610629320;
pub const GPIO_PIN21_INT_ENA: u32 = 31;
pub const GPIO_PIN21_INT_ENA_V: u32 = 31;
pub const GPIO_PIN21_INT_ENA_S: u32 = 13;
pub const GPIO_PIN21_CONFIG: u32 = 3;
pub const GPIO_PIN21_CONFIG_V: u32 = 3;
pub const GPIO_PIN21_CONFIG_S: u32 = 11;
pub const GPIO_PIN21_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN21_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN21_INT_TYPE: u32 = 7;
pub const GPIO_PIN21_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN21_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN21_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN21_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN21_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN21_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN21_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN21_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN21_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN21_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN22_REG: u32 = 1610629324;
pub const GPIO_PIN22_INT_ENA: u32 = 31;
pub const GPIO_PIN22_INT_ENA_V: u32 = 31;
pub const GPIO_PIN22_INT_ENA_S: u32 = 13;
pub const GPIO_PIN22_CONFIG: u32 = 3;
pub const GPIO_PIN22_CONFIG_V: u32 = 3;
pub const GPIO_PIN22_CONFIG_S: u32 = 11;
pub const GPIO_PIN22_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN22_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN22_INT_TYPE: u32 = 7;
pub const GPIO_PIN22_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN22_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN22_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN22_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN22_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN22_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN22_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN22_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN22_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN22_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN23_REG: u32 = 1610629328;
pub const GPIO_PIN23_INT_ENA: u32 = 31;
pub const GPIO_PIN23_INT_ENA_V: u32 = 31;
pub const GPIO_PIN23_INT_ENA_S: u32 = 13;
pub const GPIO_PIN23_CONFIG: u32 = 3;
pub const GPIO_PIN23_CONFIG_V: u32 = 3;
pub const GPIO_PIN23_CONFIG_S: u32 = 11;
pub const GPIO_PIN23_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN23_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN23_INT_TYPE: u32 = 7;
pub const GPIO_PIN23_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN23_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN23_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN23_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN23_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN23_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN23_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN23_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN23_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN23_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN24_REG: u32 = 1610629332;
pub const GPIO_PIN24_INT_ENA: u32 = 31;
pub const GPIO_PIN24_INT_ENA_V: u32 = 31;
pub const GPIO_PIN24_INT_ENA_S: u32 = 13;
pub const GPIO_PIN24_CONFIG: u32 = 3;
pub const GPIO_PIN24_CONFIG_V: u32 = 3;
pub const GPIO_PIN24_CONFIG_S: u32 = 11;
pub const GPIO_PIN24_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN24_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN24_INT_TYPE: u32 = 7;
pub const GPIO_PIN24_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN24_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN24_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN24_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN24_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN24_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN24_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN24_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN24_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN24_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_PIN25_REG: u32 = 1610629336;
pub const GPIO_PIN25_INT_ENA: u32 = 31;
pub const GPIO_PIN25_INT_ENA_V: u32 = 31;
pub const GPIO_PIN25_INT_ENA_S: u32 = 13;
pub const GPIO_PIN25_CONFIG: u32 = 3;
pub const GPIO_PIN25_CONFIG_V: u32 = 3;
pub const GPIO_PIN25_CONFIG_S: u32 = 11;
pub const GPIO_PIN25_WAKEUP_ENABLE_V: u32 = 1;
pub const GPIO_PIN25_WAKEUP_ENABLE_S: u32 = 10;
pub const GPIO_PIN25_INT_TYPE: u32 = 7;
pub const GPIO_PIN25_INT_TYPE_V: u32 = 7;
pub const GPIO_PIN25_INT_TYPE_S: u32 = 7;
pub const GPIO_PIN25_SYNC1_BYPASS: u32 = 3;
pub const GPIO_PIN25_SYNC1_BYPASS_V: u32 = 3;
pub const GPIO_PIN25_SYNC1_BYPASS_S: u32 = 3;
pub const GPIO_PIN25_PAD_DRIVER_V: u32 = 1;
pub const GPIO_PIN25_PAD_DRIVER_S: u32 = 2;
pub const GPIO_PIN25_SYNC2_BYPASS: u32 = 3;
pub const GPIO_PIN25_SYNC2_BYPASS_V: u32 = 3;
pub const GPIO_PIN25_SYNC2_BYPASS_S: u32 = 0;
pub const GPIO_STATUS_NEXT_REG: u32 = 1610629452;
pub const GPIO_STATUS_INTERRUPT_NEXT: u32 = 67108863;
pub const GPIO_STATUS_INTERRUPT_NEXT_V: u32 = 67108863;
pub const GPIO_STATUS_INTERRUPT_NEXT_S: u32 = 0;
pub const GPIO_FUNC0_IN_SEL_CFG_REG: u32 = 1610629460;
pub const GPIO_SIG0_IN_SEL_V: u32 = 1;
pub const GPIO_SIG0_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC0_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC0_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC0_IN_SEL: u32 = 31;
pub const GPIO_FUNC0_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC0_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC1_IN_SEL_CFG_REG: u32 = 1610629464;
pub const GPIO_SIG1_IN_SEL_V: u32 = 1;
pub const GPIO_SIG1_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC1_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC1_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC1_IN_SEL: u32 = 31;
pub const GPIO_FUNC1_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC1_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC2_IN_SEL_CFG_REG: u32 = 1610629468;
pub const GPIO_SIG2_IN_SEL_V: u32 = 1;
pub const GPIO_SIG2_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC2_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC2_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC2_IN_SEL: u32 = 31;
pub const GPIO_FUNC2_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC2_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC3_IN_SEL_CFG_REG: u32 = 1610629472;
pub const GPIO_SIG3_IN_SEL_V: u32 = 1;
pub const GPIO_SIG3_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC3_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC3_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC3_IN_SEL: u32 = 31;
pub const GPIO_FUNC3_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC3_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC4_IN_SEL_CFG_REG: u32 = 1610629476;
pub const GPIO_SIG4_IN_SEL_V: u32 = 1;
pub const GPIO_SIG4_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC4_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC4_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC4_IN_SEL: u32 = 31;
pub const GPIO_FUNC4_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC4_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC5_IN_SEL_CFG_REG: u32 = 1610629480;
pub const GPIO_SIG5_IN_SEL_V: u32 = 1;
pub const GPIO_SIG5_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC5_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC5_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC5_IN_SEL: u32 = 31;
pub const GPIO_FUNC5_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC5_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC6_IN_SEL_CFG_REG: u32 = 1610629484;
pub const GPIO_SIG6_IN_SEL_V: u32 = 1;
pub const GPIO_SIG6_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC6_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC6_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC6_IN_SEL: u32 = 31;
pub const GPIO_FUNC6_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC6_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC7_IN_SEL_CFG_REG: u32 = 1610629488;
pub const GPIO_SIG7_IN_SEL_V: u32 = 1;
pub const GPIO_SIG7_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC7_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC7_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC7_IN_SEL: u32 = 31;
pub const GPIO_FUNC7_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC7_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC8_IN_SEL_CFG_REG: u32 = 1610629492;
pub const GPIO_SIG8_IN_SEL_V: u32 = 1;
pub const GPIO_SIG8_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC8_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC8_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC8_IN_SEL: u32 = 31;
pub const GPIO_FUNC8_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC8_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC9_IN_SEL_CFG_REG: u32 = 1610629496;
pub const GPIO_SIG9_IN_SEL_V: u32 = 1;
pub const GPIO_SIG9_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC9_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC9_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC9_IN_SEL: u32 = 31;
pub const GPIO_FUNC9_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC9_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC10_IN_SEL_CFG_REG: u32 = 1610629500;
pub const GPIO_SIG10_IN_SEL_V: u32 = 1;
pub const GPIO_SIG10_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC10_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC10_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC10_IN_SEL: u32 = 31;
pub const GPIO_FUNC10_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC10_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC11_IN_SEL_CFG_REG: u32 = 1610629504;
pub const GPIO_SIG11_IN_SEL_V: u32 = 1;
pub const GPIO_SIG11_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC11_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC11_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC11_IN_SEL: u32 = 31;
pub const GPIO_FUNC11_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC11_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC12_IN_SEL_CFG_REG: u32 = 1610629508;
pub const GPIO_SIG12_IN_SEL_V: u32 = 1;
pub const GPIO_SIG12_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC12_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC12_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC12_IN_SEL: u32 = 31;
pub const GPIO_FUNC12_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC12_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC13_IN_SEL_CFG_REG: u32 = 1610629512;
pub const GPIO_SIG13_IN_SEL_V: u32 = 1;
pub const GPIO_SIG13_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC13_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC13_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC13_IN_SEL: u32 = 31;
pub const GPIO_FUNC13_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC13_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC14_IN_SEL_CFG_REG: u32 = 1610629516;
pub const GPIO_SIG14_IN_SEL_V: u32 = 1;
pub const GPIO_SIG14_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC14_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC14_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC14_IN_SEL: u32 = 31;
pub const GPIO_FUNC14_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC14_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC15_IN_SEL_CFG_REG: u32 = 1610629520;
pub const GPIO_SIG15_IN_SEL_V: u32 = 1;
pub const GPIO_SIG15_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC15_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC15_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC15_IN_SEL: u32 = 31;
pub const GPIO_FUNC15_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC15_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC16_IN_SEL_CFG_REG: u32 = 1610629524;
pub const GPIO_SIG16_IN_SEL_V: u32 = 1;
pub const GPIO_SIG16_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC16_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC16_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC16_IN_SEL: u32 = 31;
pub const GPIO_FUNC16_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC16_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC17_IN_SEL_CFG_REG: u32 = 1610629528;
pub const GPIO_SIG17_IN_SEL_V: u32 = 1;
pub const GPIO_SIG17_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC17_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC17_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC17_IN_SEL: u32 = 31;
pub const GPIO_FUNC17_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC17_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC18_IN_SEL_CFG_REG: u32 = 1610629532;
pub const GPIO_SIG18_IN_SEL_V: u32 = 1;
pub const GPIO_SIG18_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC18_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC18_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC18_IN_SEL: u32 = 31;
pub const GPIO_FUNC18_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC18_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC19_IN_SEL_CFG_REG: u32 = 1610629536;
pub const GPIO_SIG19_IN_SEL_V: u32 = 1;
pub const GPIO_SIG19_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC19_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC19_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC19_IN_SEL: u32 = 31;
pub const GPIO_FUNC19_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC19_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC20_IN_SEL_CFG_REG: u32 = 1610629540;
pub const GPIO_SIG20_IN_SEL_V: u32 = 1;
pub const GPIO_SIG20_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC20_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC20_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC20_IN_SEL: u32 = 31;
pub const GPIO_FUNC20_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC20_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC21_IN_SEL_CFG_REG: u32 = 1610629544;
pub const GPIO_SIG21_IN_SEL_V: u32 = 1;
pub const GPIO_SIG21_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC21_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC21_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC21_IN_SEL: u32 = 31;
pub const GPIO_FUNC21_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC21_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC22_IN_SEL_CFG_REG: u32 = 1610629548;
pub const GPIO_SIG22_IN_SEL_V: u32 = 1;
pub const GPIO_SIG22_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC22_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC22_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC22_IN_SEL: u32 = 31;
pub const GPIO_FUNC22_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC22_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC23_IN_SEL_CFG_REG: u32 = 1610629552;
pub const GPIO_SIG23_IN_SEL_V: u32 = 1;
pub const GPIO_SIG23_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC23_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC23_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC23_IN_SEL: u32 = 31;
pub const GPIO_FUNC23_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC23_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC24_IN_SEL_CFG_REG: u32 = 1610629556;
pub const GPIO_SIG24_IN_SEL_V: u32 = 1;
pub const GPIO_SIG24_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC24_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC24_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC24_IN_SEL: u32 = 31;
pub const GPIO_FUNC24_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC24_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC25_IN_SEL_CFG_REG: u32 = 1610629560;
pub const GPIO_SIG25_IN_SEL_V: u32 = 1;
pub const GPIO_SIG25_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC25_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC25_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC25_IN_SEL: u32 = 31;
pub const GPIO_FUNC25_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC25_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC26_IN_SEL_CFG_REG: u32 = 1610629564;
pub const GPIO_SIG26_IN_SEL_V: u32 = 1;
pub const GPIO_SIG26_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC26_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC26_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC26_IN_SEL: u32 = 31;
pub const GPIO_FUNC26_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC26_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC27_IN_SEL_CFG_REG: u32 = 1610629568;
pub const GPIO_SIG27_IN_SEL_V: u32 = 1;
pub const GPIO_SIG27_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC27_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC27_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC27_IN_SEL: u32 = 31;
pub const GPIO_FUNC27_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC27_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC28_IN_SEL_CFG_REG: u32 = 1610629572;
pub const GPIO_SIG28_IN_SEL_V: u32 = 1;
pub const GPIO_SIG28_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC28_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC28_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC28_IN_SEL: u32 = 31;
pub const GPIO_FUNC28_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC28_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC29_IN_SEL_CFG_REG: u32 = 1610629576;
pub const GPIO_SIG29_IN_SEL_V: u32 = 1;
pub const GPIO_SIG29_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC29_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC29_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC29_IN_SEL: u32 = 31;
pub const GPIO_FUNC29_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC29_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC30_IN_SEL_CFG_REG: u32 = 1610629580;
pub const GPIO_SIG30_IN_SEL_V: u32 = 1;
pub const GPIO_SIG30_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC30_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC30_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC30_IN_SEL: u32 = 31;
pub const GPIO_FUNC30_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC30_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC31_IN_SEL_CFG_REG: u32 = 1610629584;
pub const GPIO_SIG31_IN_SEL_V: u32 = 1;
pub const GPIO_SIG31_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC31_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC31_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC31_IN_SEL: u32 = 31;
pub const GPIO_FUNC31_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC31_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC32_IN_SEL_CFG_REG: u32 = 1610629588;
pub const GPIO_SIG32_IN_SEL_V: u32 = 1;
pub const GPIO_SIG32_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC32_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC32_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC32_IN_SEL: u32 = 31;
pub const GPIO_FUNC32_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC32_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC33_IN_SEL_CFG_REG: u32 = 1610629592;
pub const GPIO_SIG33_IN_SEL_V: u32 = 1;
pub const GPIO_SIG33_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC33_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC33_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC33_IN_SEL: u32 = 31;
pub const GPIO_FUNC33_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC33_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC34_IN_SEL_CFG_REG: u32 = 1610629596;
pub const GPIO_SIG34_IN_SEL_V: u32 = 1;
pub const GPIO_SIG34_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC34_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC34_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC34_IN_SEL: u32 = 31;
pub const GPIO_FUNC34_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC34_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC35_IN_SEL_CFG_REG: u32 = 1610629600;
pub const GPIO_SIG35_IN_SEL_V: u32 = 1;
pub const GPIO_SIG35_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC35_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC35_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC35_IN_SEL: u32 = 31;
pub const GPIO_FUNC35_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC35_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC36_IN_SEL_CFG_REG: u32 = 1610629604;
pub const GPIO_SIG36_IN_SEL_V: u32 = 1;
pub const GPIO_SIG36_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC36_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC36_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC36_IN_SEL: u32 = 31;
pub const GPIO_FUNC36_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC36_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC37_IN_SEL_CFG_REG: u32 = 1610629608;
pub const GPIO_SIG37_IN_SEL_V: u32 = 1;
pub const GPIO_SIG37_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC37_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC37_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC37_IN_SEL: u32 = 31;
pub const GPIO_FUNC37_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC37_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC38_IN_SEL_CFG_REG: u32 = 1610629612;
pub const GPIO_SIG38_IN_SEL_V: u32 = 1;
pub const GPIO_SIG38_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC38_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC38_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC38_IN_SEL: u32 = 31;
pub const GPIO_FUNC38_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC38_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC39_IN_SEL_CFG_REG: u32 = 1610629616;
pub const GPIO_SIG39_IN_SEL_V: u32 = 1;
pub const GPIO_SIG39_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC39_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC39_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC39_IN_SEL: u32 = 31;
pub const GPIO_FUNC39_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC39_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC40_IN_SEL_CFG_REG: u32 = 1610629620;
pub const GPIO_SIG40_IN_SEL_V: u32 = 1;
pub const GPIO_SIG40_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC40_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC40_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC40_IN_SEL: u32 = 31;
pub const GPIO_FUNC40_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC40_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC41_IN_SEL_CFG_REG: u32 = 1610629624;
pub const GPIO_SIG41_IN_SEL_V: u32 = 1;
pub const GPIO_SIG41_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC41_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC41_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC41_IN_SEL: u32 = 31;
pub const GPIO_FUNC41_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC41_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC42_IN_SEL_CFG_REG: u32 = 1610629628;
pub const GPIO_SIG42_IN_SEL_V: u32 = 1;
pub const GPIO_SIG42_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC42_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC42_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC42_IN_SEL: u32 = 31;
pub const GPIO_FUNC42_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC42_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC43_IN_SEL_CFG_REG: u32 = 1610629632;
pub const GPIO_SIG43_IN_SEL_V: u32 = 1;
pub const GPIO_SIG43_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC43_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC43_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC43_IN_SEL: u32 = 31;
pub const GPIO_FUNC43_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC43_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC44_IN_SEL_CFG_REG: u32 = 1610629636;
pub const GPIO_SIG44_IN_SEL_V: u32 = 1;
pub const GPIO_SIG44_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC44_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC44_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC44_IN_SEL: u32 = 31;
pub const GPIO_FUNC44_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC44_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC45_IN_SEL_CFG_REG: u32 = 1610629640;
pub const GPIO_SIG45_IN_SEL_V: u32 = 1;
pub const GPIO_SIG45_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC45_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC45_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC45_IN_SEL: u32 = 31;
pub const GPIO_FUNC45_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC45_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC46_IN_SEL_CFG_REG: u32 = 1610629644;
pub const GPIO_SIG46_IN_SEL_V: u32 = 1;
pub const GPIO_SIG46_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC46_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC46_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC46_IN_SEL: u32 = 31;
pub const GPIO_FUNC46_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC46_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC47_IN_SEL_CFG_REG: u32 = 1610629648;
pub const GPIO_SIG47_IN_SEL_V: u32 = 1;
pub const GPIO_SIG47_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC47_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC47_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC47_IN_SEL: u32 = 31;
pub const GPIO_FUNC47_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC47_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC48_IN_SEL_CFG_REG: u32 = 1610629652;
pub const GPIO_SIG48_IN_SEL_V: u32 = 1;
pub const GPIO_SIG48_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC48_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC48_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC48_IN_SEL: u32 = 31;
pub const GPIO_FUNC48_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC48_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC49_IN_SEL_CFG_REG: u32 = 1610629656;
pub const GPIO_SIG49_IN_SEL_V: u32 = 1;
pub const GPIO_SIG49_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC49_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC49_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC49_IN_SEL: u32 = 31;
pub const GPIO_FUNC49_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC49_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC50_IN_SEL_CFG_REG: u32 = 1610629660;
pub const GPIO_SIG50_IN_SEL_V: u32 = 1;
pub const GPIO_SIG50_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC50_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC50_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC50_IN_SEL: u32 = 31;
pub const GPIO_FUNC50_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC50_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC51_IN_SEL_CFG_REG: u32 = 1610629664;
pub const GPIO_SIG51_IN_SEL_V: u32 = 1;
pub const GPIO_SIG51_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC51_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC51_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC51_IN_SEL: u32 = 31;
pub const GPIO_FUNC51_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC51_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC52_IN_SEL_CFG_REG: u32 = 1610629668;
pub const GPIO_SIG52_IN_SEL_V: u32 = 1;
pub const GPIO_SIG52_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC52_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC52_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC52_IN_SEL: u32 = 31;
pub const GPIO_FUNC52_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC52_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC53_IN_SEL_CFG_REG: u32 = 1610629672;
pub const GPIO_SIG53_IN_SEL_V: u32 = 1;
pub const GPIO_SIG53_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC53_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC53_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC53_IN_SEL: u32 = 31;
pub const GPIO_FUNC53_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC53_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC54_IN_SEL_CFG_REG: u32 = 1610629676;
pub const GPIO_SIG54_IN_SEL_V: u32 = 1;
pub const GPIO_SIG54_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC54_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC54_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC54_IN_SEL: u32 = 31;
pub const GPIO_FUNC54_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC54_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC55_IN_SEL_CFG_REG: u32 = 1610629680;
pub const GPIO_SIG55_IN_SEL_V: u32 = 1;
pub const GPIO_SIG55_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC55_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC55_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC55_IN_SEL: u32 = 31;
pub const GPIO_FUNC55_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC55_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC56_IN_SEL_CFG_REG: u32 = 1610629684;
pub const GPIO_SIG56_IN_SEL_V: u32 = 1;
pub const GPIO_SIG56_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC56_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC56_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC56_IN_SEL: u32 = 31;
pub const GPIO_FUNC56_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC56_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC57_IN_SEL_CFG_REG: u32 = 1610629688;
pub const GPIO_SIG57_IN_SEL_V: u32 = 1;
pub const GPIO_SIG57_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC57_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC57_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC57_IN_SEL: u32 = 31;
pub const GPIO_FUNC57_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC57_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC58_IN_SEL_CFG_REG: u32 = 1610629692;
pub const GPIO_SIG58_IN_SEL_V: u32 = 1;
pub const GPIO_SIG58_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC58_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC58_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC58_IN_SEL: u32 = 31;
pub const GPIO_FUNC58_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC58_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC59_IN_SEL_CFG_REG: u32 = 1610629696;
pub const GPIO_SIG59_IN_SEL_V: u32 = 1;
pub const GPIO_SIG59_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC59_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC59_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC59_IN_SEL: u32 = 31;
pub const GPIO_FUNC59_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC59_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC60_IN_SEL_CFG_REG: u32 = 1610629700;
pub const GPIO_SIG60_IN_SEL_V: u32 = 1;
pub const GPIO_SIG60_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC60_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC60_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC60_IN_SEL: u32 = 31;
pub const GPIO_FUNC60_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC60_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC61_IN_SEL_CFG_REG: u32 = 1610629704;
pub const GPIO_SIG61_IN_SEL_V: u32 = 1;
pub const GPIO_SIG61_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC61_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC61_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC61_IN_SEL: u32 = 31;
pub const GPIO_FUNC61_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC61_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC62_IN_SEL_CFG_REG: u32 = 1610629708;
pub const GPIO_SIG62_IN_SEL_V: u32 = 1;
pub const GPIO_SIG62_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC62_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC62_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC62_IN_SEL: u32 = 31;
pub const GPIO_FUNC62_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC62_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC63_IN_SEL_CFG_REG: u32 = 1610629712;
pub const GPIO_SIG63_IN_SEL_V: u32 = 1;
pub const GPIO_SIG63_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC63_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC63_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC63_IN_SEL: u32 = 31;
pub const GPIO_FUNC63_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC63_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC64_IN_SEL_CFG_REG: u32 = 1610629716;
pub const GPIO_SIG64_IN_SEL_V: u32 = 1;
pub const GPIO_SIG64_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC64_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC64_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC64_IN_SEL: u32 = 31;
pub const GPIO_FUNC64_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC64_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC65_IN_SEL_CFG_REG: u32 = 1610629720;
pub const GPIO_SIG65_IN_SEL_V: u32 = 1;
pub const GPIO_SIG65_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC65_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC65_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC65_IN_SEL: u32 = 31;
pub const GPIO_FUNC65_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC65_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC66_IN_SEL_CFG_REG: u32 = 1610629724;
pub const GPIO_SIG66_IN_SEL_V: u32 = 1;
pub const GPIO_SIG66_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC66_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC66_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC66_IN_SEL: u32 = 31;
pub const GPIO_FUNC66_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC66_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC67_IN_SEL_CFG_REG: u32 = 1610629728;
pub const GPIO_SIG67_IN_SEL_V: u32 = 1;
pub const GPIO_SIG67_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC67_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC67_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC67_IN_SEL: u32 = 31;
pub const GPIO_FUNC67_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC67_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC68_IN_SEL_CFG_REG: u32 = 1610629732;
pub const GPIO_SIG68_IN_SEL_V: u32 = 1;
pub const GPIO_SIG68_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC68_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC68_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC68_IN_SEL: u32 = 31;
pub const GPIO_FUNC68_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC68_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC69_IN_SEL_CFG_REG: u32 = 1610629736;
pub const GPIO_SIG69_IN_SEL_V: u32 = 1;
pub const GPIO_SIG69_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC69_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC69_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC69_IN_SEL: u32 = 31;
pub const GPIO_FUNC69_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC69_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC70_IN_SEL_CFG_REG: u32 = 1610629740;
pub const GPIO_SIG70_IN_SEL_V: u32 = 1;
pub const GPIO_SIG70_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC70_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC70_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC70_IN_SEL: u32 = 31;
pub const GPIO_FUNC70_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC70_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC71_IN_SEL_CFG_REG: u32 = 1610629744;
pub const GPIO_SIG71_IN_SEL_V: u32 = 1;
pub const GPIO_SIG71_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC71_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC71_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC71_IN_SEL: u32 = 31;
pub const GPIO_FUNC71_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC71_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC72_IN_SEL_CFG_REG: u32 = 1610629748;
pub const GPIO_SIG72_IN_SEL_V: u32 = 1;
pub const GPIO_SIG72_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC72_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC72_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC72_IN_SEL: u32 = 31;
pub const GPIO_FUNC72_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC72_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC73_IN_SEL_CFG_REG: u32 = 1610629752;
pub const GPIO_SIG73_IN_SEL_V: u32 = 1;
pub const GPIO_SIG73_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC73_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC73_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC73_IN_SEL: u32 = 31;
pub const GPIO_FUNC73_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC73_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC74_IN_SEL_CFG_REG: u32 = 1610629756;
pub const GPIO_SIG74_IN_SEL_V: u32 = 1;
pub const GPIO_SIG74_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC74_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC74_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC74_IN_SEL: u32 = 31;
pub const GPIO_FUNC74_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC74_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC75_IN_SEL_CFG_REG: u32 = 1610629760;
pub const GPIO_SIG75_IN_SEL_V: u32 = 1;
pub const GPIO_SIG75_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC75_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC75_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC75_IN_SEL: u32 = 31;
pub const GPIO_FUNC75_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC75_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC76_IN_SEL_CFG_REG: u32 = 1610629764;
pub const GPIO_SIG76_IN_SEL_V: u32 = 1;
pub const GPIO_SIG76_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC76_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC76_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC76_IN_SEL: u32 = 31;
pub const GPIO_FUNC76_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC76_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC77_IN_SEL_CFG_REG: u32 = 1610629768;
pub const GPIO_SIG77_IN_SEL_V: u32 = 1;
pub const GPIO_SIG77_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC77_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC77_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC77_IN_SEL: u32 = 31;
pub const GPIO_FUNC77_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC77_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC78_IN_SEL_CFG_REG: u32 = 1610629772;
pub const GPIO_SIG78_IN_SEL_V: u32 = 1;
pub const GPIO_SIG78_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC78_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC78_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC78_IN_SEL: u32 = 31;
pub const GPIO_FUNC78_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC78_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC79_IN_SEL_CFG_REG: u32 = 1610629776;
pub const GPIO_SIG79_IN_SEL_V: u32 = 1;
pub const GPIO_SIG79_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC79_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC79_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC79_IN_SEL: u32 = 31;
pub const GPIO_FUNC79_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC79_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC80_IN_SEL_CFG_REG: u32 = 1610629780;
pub const GPIO_SIG80_IN_SEL_V: u32 = 1;
pub const GPIO_SIG80_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC80_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC80_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC80_IN_SEL: u32 = 31;
pub const GPIO_FUNC80_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC80_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC81_IN_SEL_CFG_REG: u32 = 1610629784;
pub const GPIO_SIG81_IN_SEL_V: u32 = 1;
pub const GPIO_SIG81_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC81_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC81_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC81_IN_SEL: u32 = 31;
pub const GPIO_FUNC81_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC81_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC82_IN_SEL_CFG_REG: u32 = 1610629788;
pub const GPIO_SIG82_IN_SEL_V: u32 = 1;
pub const GPIO_SIG82_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC82_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC82_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC82_IN_SEL: u32 = 31;
pub const GPIO_FUNC82_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC82_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC83_IN_SEL_CFG_REG: u32 = 1610629792;
pub const GPIO_SIG83_IN_SEL_V: u32 = 1;
pub const GPIO_SIG83_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC83_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC83_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC83_IN_SEL: u32 = 31;
pub const GPIO_FUNC83_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC83_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC84_IN_SEL_CFG_REG: u32 = 1610629796;
pub const GPIO_SIG84_IN_SEL_V: u32 = 1;
pub const GPIO_SIG84_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC84_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC84_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC84_IN_SEL: u32 = 31;
pub const GPIO_FUNC84_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC84_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC85_IN_SEL_CFG_REG: u32 = 1610629800;
pub const GPIO_SIG85_IN_SEL_V: u32 = 1;
pub const GPIO_SIG85_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC85_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC85_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC85_IN_SEL: u32 = 31;
pub const GPIO_FUNC85_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC85_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC86_IN_SEL_CFG_REG: u32 = 1610629804;
pub const GPIO_SIG86_IN_SEL_V: u32 = 1;
pub const GPIO_SIG86_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC86_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC86_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC86_IN_SEL: u32 = 31;
pub const GPIO_FUNC86_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC86_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC87_IN_SEL_CFG_REG: u32 = 1610629808;
pub const GPIO_SIG87_IN_SEL_V: u32 = 1;
pub const GPIO_SIG87_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC87_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC87_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC87_IN_SEL: u32 = 31;
pub const GPIO_FUNC87_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC87_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC88_IN_SEL_CFG_REG: u32 = 1610629812;
pub const GPIO_SIG88_IN_SEL_V: u32 = 1;
pub const GPIO_SIG88_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC88_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC88_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC88_IN_SEL: u32 = 31;
pub const GPIO_FUNC88_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC88_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC89_IN_SEL_CFG_REG: u32 = 1610629816;
pub const GPIO_SIG89_IN_SEL_V: u32 = 1;
pub const GPIO_SIG89_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC89_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC89_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC89_IN_SEL: u32 = 31;
pub const GPIO_FUNC89_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC89_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC90_IN_SEL_CFG_REG: u32 = 1610629820;
pub const GPIO_SIG90_IN_SEL_V: u32 = 1;
pub const GPIO_SIG90_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC90_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC90_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC90_IN_SEL: u32 = 31;
pub const GPIO_FUNC90_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC90_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC91_IN_SEL_CFG_REG: u32 = 1610629824;
pub const GPIO_SIG91_IN_SEL_V: u32 = 1;
pub const GPIO_SIG91_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC91_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC91_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC91_IN_SEL: u32 = 31;
pub const GPIO_FUNC91_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC91_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC92_IN_SEL_CFG_REG: u32 = 1610629828;
pub const GPIO_SIG92_IN_SEL_V: u32 = 1;
pub const GPIO_SIG92_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC92_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC92_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC92_IN_SEL: u32 = 31;
pub const GPIO_FUNC92_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC92_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC93_IN_SEL_CFG_REG: u32 = 1610629832;
pub const GPIO_SIG93_IN_SEL_V: u32 = 1;
pub const GPIO_SIG93_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC93_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC93_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC93_IN_SEL: u32 = 31;
pub const GPIO_FUNC93_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC93_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC94_IN_SEL_CFG_REG: u32 = 1610629836;
pub const GPIO_SIG94_IN_SEL_V: u32 = 1;
pub const GPIO_SIG94_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC94_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC94_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC94_IN_SEL: u32 = 31;
pub const GPIO_FUNC94_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC94_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC95_IN_SEL_CFG_REG: u32 = 1610629840;
pub const GPIO_SIG95_IN_SEL_V: u32 = 1;
pub const GPIO_SIG95_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC95_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC95_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC95_IN_SEL: u32 = 31;
pub const GPIO_FUNC95_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC95_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC96_IN_SEL_CFG_REG: u32 = 1610629844;
pub const GPIO_SIG96_IN_SEL_V: u32 = 1;
pub const GPIO_SIG96_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC96_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC96_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC96_IN_SEL: u32 = 31;
pub const GPIO_FUNC96_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC96_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC97_IN_SEL_CFG_REG: u32 = 1610629848;
pub const GPIO_SIG97_IN_SEL_V: u32 = 1;
pub const GPIO_SIG97_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC97_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC97_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC97_IN_SEL: u32 = 31;
pub const GPIO_FUNC97_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC97_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC98_IN_SEL_CFG_REG: u32 = 1610629852;
pub const GPIO_SIG98_IN_SEL_V: u32 = 1;
pub const GPIO_SIG98_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC98_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC98_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC98_IN_SEL: u32 = 31;
pub const GPIO_FUNC98_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC98_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC99_IN_SEL_CFG_REG: u32 = 1610629856;
pub const GPIO_SIG99_IN_SEL_V: u32 = 1;
pub const GPIO_SIG99_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC99_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC99_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC99_IN_SEL: u32 = 31;
pub const GPIO_FUNC99_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC99_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC100_IN_SEL_CFG_REG: u32 = 1610629860;
pub const GPIO_SIG100_IN_SEL_V: u32 = 1;
pub const GPIO_SIG100_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC100_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC100_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC100_IN_SEL: u32 = 31;
pub const GPIO_FUNC100_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC100_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC101_IN_SEL_CFG_REG: u32 = 1610629864;
pub const GPIO_SIG101_IN_SEL_V: u32 = 1;
pub const GPIO_SIG101_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC101_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC101_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC101_IN_SEL: u32 = 31;
pub const GPIO_FUNC101_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC101_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC102_IN_SEL_CFG_REG: u32 = 1610629868;
pub const GPIO_SIG102_IN_SEL_V: u32 = 1;
pub const GPIO_SIG102_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC102_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC102_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC102_IN_SEL: u32 = 31;
pub const GPIO_FUNC102_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC102_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC103_IN_SEL_CFG_REG: u32 = 1610629872;
pub const GPIO_SIG103_IN_SEL_V: u32 = 1;
pub const GPIO_SIG103_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC103_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC103_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC103_IN_SEL: u32 = 31;
pub const GPIO_FUNC103_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC103_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC104_IN_SEL_CFG_REG: u32 = 1610629876;
pub const GPIO_SIG104_IN_SEL_V: u32 = 1;
pub const GPIO_SIG104_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC104_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC104_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC104_IN_SEL: u32 = 31;
pub const GPIO_FUNC104_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC104_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC105_IN_SEL_CFG_REG: u32 = 1610629880;
pub const GPIO_SIG105_IN_SEL_V: u32 = 1;
pub const GPIO_SIG105_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC105_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC105_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC105_IN_SEL: u32 = 31;
pub const GPIO_FUNC105_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC105_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC106_IN_SEL_CFG_REG: u32 = 1610629884;
pub const GPIO_SIG106_IN_SEL_V: u32 = 1;
pub const GPIO_SIG106_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC106_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC106_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC106_IN_SEL: u32 = 31;
pub const GPIO_FUNC106_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC106_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC107_IN_SEL_CFG_REG: u32 = 1610629888;
pub const GPIO_SIG107_IN_SEL_V: u32 = 1;
pub const GPIO_SIG107_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC107_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC107_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC107_IN_SEL: u32 = 31;
pub const GPIO_FUNC107_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC107_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC108_IN_SEL_CFG_REG: u32 = 1610629892;
pub const GPIO_SIG108_IN_SEL_V: u32 = 1;
pub const GPIO_SIG108_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC108_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC108_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC108_IN_SEL: u32 = 31;
pub const GPIO_FUNC108_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC108_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC109_IN_SEL_CFG_REG: u32 = 1610629896;
pub const GPIO_SIG109_IN_SEL_V: u32 = 1;
pub const GPIO_SIG109_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC109_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC109_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC109_IN_SEL: u32 = 31;
pub const GPIO_FUNC109_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC109_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC110_IN_SEL_CFG_REG: u32 = 1610629900;
pub const GPIO_SIG110_IN_SEL_V: u32 = 1;
pub const GPIO_SIG110_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC110_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC110_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC110_IN_SEL: u32 = 31;
pub const GPIO_FUNC110_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC110_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC111_IN_SEL_CFG_REG: u32 = 1610629904;
pub const GPIO_SIG111_IN_SEL_V: u32 = 1;
pub const GPIO_SIG111_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC111_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC111_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC111_IN_SEL: u32 = 31;
pub const GPIO_FUNC111_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC111_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC112_IN_SEL_CFG_REG: u32 = 1610629908;
pub const GPIO_SIG112_IN_SEL_V: u32 = 1;
pub const GPIO_SIG112_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC112_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC112_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC112_IN_SEL: u32 = 31;
pub const GPIO_FUNC112_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC112_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC113_IN_SEL_CFG_REG: u32 = 1610629912;
pub const GPIO_SIG113_IN_SEL_V: u32 = 1;
pub const GPIO_SIG113_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC113_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC113_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC113_IN_SEL: u32 = 31;
pub const GPIO_FUNC113_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC113_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC114_IN_SEL_CFG_REG: u32 = 1610629916;
pub const GPIO_SIG114_IN_SEL_V: u32 = 1;
pub const GPIO_SIG114_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC114_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC114_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC114_IN_SEL: u32 = 31;
pub const GPIO_FUNC114_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC114_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC115_IN_SEL_CFG_REG: u32 = 1610629920;
pub const GPIO_SIG115_IN_SEL_V: u32 = 1;
pub const GPIO_SIG115_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC115_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC115_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC115_IN_SEL: u32 = 31;
pub const GPIO_FUNC115_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC115_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC116_IN_SEL_CFG_REG: u32 = 1610629924;
pub const GPIO_SIG116_IN_SEL_V: u32 = 1;
pub const GPIO_SIG116_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC116_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC116_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC116_IN_SEL: u32 = 31;
pub const GPIO_FUNC116_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC116_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC117_IN_SEL_CFG_REG: u32 = 1610629928;
pub const GPIO_SIG117_IN_SEL_V: u32 = 1;
pub const GPIO_SIG117_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC117_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC117_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC117_IN_SEL: u32 = 31;
pub const GPIO_FUNC117_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC117_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC118_IN_SEL_CFG_REG: u32 = 1610629932;
pub const GPIO_SIG118_IN_SEL_V: u32 = 1;
pub const GPIO_SIG118_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC118_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC118_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC118_IN_SEL: u32 = 31;
pub const GPIO_FUNC118_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC118_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC119_IN_SEL_CFG_REG: u32 = 1610629936;
pub const GPIO_SIG119_IN_SEL_V: u32 = 1;
pub const GPIO_SIG119_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC119_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC119_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC119_IN_SEL: u32 = 31;
pub const GPIO_FUNC119_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC119_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC120_IN_SEL_CFG_REG: u32 = 1610629940;
pub const GPIO_SIG120_IN_SEL_V: u32 = 1;
pub const GPIO_SIG120_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC120_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC120_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC120_IN_SEL: u32 = 31;
pub const GPIO_FUNC120_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC120_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC121_IN_SEL_CFG_REG: u32 = 1610629944;
pub const GPIO_SIG121_IN_SEL_V: u32 = 1;
pub const GPIO_SIG121_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC121_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC121_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC121_IN_SEL: u32 = 31;
pub const GPIO_FUNC121_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC121_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC122_IN_SEL_CFG_REG: u32 = 1610629948;
pub const GPIO_SIG122_IN_SEL_V: u32 = 1;
pub const GPIO_SIG122_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC122_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC122_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC122_IN_SEL: u32 = 31;
pub const GPIO_FUNC122_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC122_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC123_IN_SEL_CFG_REG: u32 = 1610629952;
pub const GPIO_SIG123_IN_SEL_V: u32 = 1;
pub const GPIO_SIG123_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC123_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC123_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC123_IN_SEL: u32 = 31;
pub const GPIO_FUNC123_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC123_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC124_IN_SEL_CFG_REG: u32 = 1610629956;
pub const GPIO_SIG124_IN_SEL_V: u32 = 1;
pub const GPIO_SIG124_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC124_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC124_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC124_IN_SEL: u32 = 31;
pub const GPIO_FUNC124_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC124_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC125_IN_SEL_CFG_REG: u32 = 1610629960;
pub const GPIO_SIG125_IN_SEL_V: u32 = 1;
pub const GPIO_SIG125_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC125_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC125_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC125_IN_SEL: u32 = 31;
pub const GPIO_FUNC125_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC125_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC126_IN_SEL_CFG_REG: u32 = 1610629964;
pub const GPIO_SIG126_IN_SEL_V: u32 = 1;
pub const GPIO_SIG126_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC126_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC126_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC126_IN_SEL: u32 = 31;
pub const GPIO_FUNC126_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC126_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC127_IN_SEL_CFG_REG: u32 = 1610629968;
pub const GPIO_SIG127_IN_SEL_V: u32 = 1;
pub const GPIO_SIG127_IN_SEL_S: u32 = 6;
pub const GPIO_FUNC127_IN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC127_IN_INV_SEL_S: u32 = 5;
pub const GPIO_FUNC127_IN_SEL: u32 = 31;
pub const GPIO_FUNC127_IN_SEL_V: u32 = 31;
pub const GPIO_FUNC127_IN_SEL_S: u32 = 0;
pub const GPIO_FUNC0_OUT_SEL_CFG_REG: u32 = 1610630484;
pub const GPIO_FUNC0_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC0_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC0_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC0_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC0_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC0_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC0_OUT_SEL: u32 = 255;
pub const GPIO_FUNC0_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC0_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC1_OUT_SEL_CFG_REG: u32 = 1610630488;
pub const GPIO_FUNC1_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC1_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC1_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC1_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC1_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC1_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC1_OUT_SEL: u32 = 255;
pub const GPIO_FUNC1_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC1_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC2_OUT_SEL_CFG_REG: u32 = 1610630492;
pub const GPIO_FUNC2_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC2_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC2_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC2_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC2_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC2_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC2_OUT_SEL: u32 = 255;
pub const GPIO_FUNC2_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC2_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC3_OUT_SEL_CFG_REG: u32 = 1610630496;
pub const GPIO_FUNC3_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC3_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC3_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC3_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC3_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC3_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC3_OUT_SEL: u32 = 255;
pub const GPIO_FUNC3_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC3_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC4_OUT_SEL_CFG_REG: u32 = 1610630500;
pub const GPIO_FUNC4_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC4_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC4_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC4_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC4_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC4_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC4_OUT_SEL: u32 = 255;
pub const GPIO_FUNC4_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC4_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC5_OUT_SEL_CFG_REG: u32 = 1610630504;
pub const GPIO_FUNC5_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC5_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC5_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC5_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC5_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC5_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC5_OUT_SEL: u32 = 255;
pub const GPIO_FUNC5_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC5_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC6_OUT_SEL_CFG_REG: u32 = 1610630508;
pub const GPIO_FUNC6_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC6_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC6_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC6_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC6_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC6_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC6_OUT_SEL: u32 = 255;
pub const GPIO_FUNC6_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC6_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC7_OUT_SEL_CFG_REG: u32 = 1610630512;
pub const GPIO_FUNC7_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC7_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC7_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC7_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC7_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC7_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC7_OUT_SEL: u32 = 255;
pub const GPIO_FUNC7_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC7_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC8_OUT_SEL_CFG_REG: u32 = 1610630516;
pub const GPIO_FUNC8_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC8_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC8_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC8_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC8_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC8_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC8_OUT_SEL: u32 = 255;
pub const GPIO_FUNC8_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC8_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC9_OUT_SEL_CFG_REG: u32 = 1610630520;
pub const GPIO_FUNC9_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC9_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC9_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC9_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC9_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC9_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC9_OUT_SEL: u32 = 255;
pub const GPIO_FUNC9_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC9_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC10_OUT_SEL_CFG_REG: u32 = 1610630524;
pub const GPIO_FUNC10_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC10_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC10_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC10_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC10_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC10_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC10_OUT_SEL: u32 = 255;
pub const GPIO_FUNC10_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC10_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC11_OUT_SEL_CFG_REG: u32 = 1610630528;
pub const GPIO_FUNC11_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC11_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC11_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC11_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC11_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC11_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC11_OUT_SEL: u32 = 255;
pub const GPIO_FUNC11_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC11_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC12_OUT_SEL_CFG_REG: u32 = 1610630532;
pub const GPIO_FUNC12_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC12_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC12_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC12_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC12_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC12_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC12_OUT_SEL: u32 = 255;
pub const GPIO_FUNC12_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC12_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC13_OUT_SEL_CFG_REG: u32 = 1610630536;
pub const GPIO_FUNC13_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC13_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC13_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC13_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC13_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC13_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC13_OUT_SEL: u32 = 255;
pub const GPIO_FUNC13_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC13_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC14_OUT_SEL_CFG_REG: u32 = 1610630540;
pub const GPIO_FUNC14_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC14_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC14_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC14_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC14_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC14_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC14_OUT_SEL: u32 = 255;
pub const GPIO_FUNC14_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC14_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC15_OUT_SEL_CFG_REG: u32 = 1610630544;
pub const GPIO_FUNC15_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC15_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC15_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC15_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC15_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC15_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC15_OUT_SEL: u32 = 255;
pub const GPIO_FUNC15_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC15_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC16_OUT_SEL_CFG_REG: u32 = 1610630548;
pub const GPIO_FUNC16_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC16_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC16_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC16_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC16_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC16_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC16_OUT_SEL: u32 = 255;
pub const GPIO_FUNC16_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC16_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC17_OUT_SEL_CFG_REG: u32 = 1610630552;
pub const GPIO_FUNC17_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC17_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC17_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC17_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC17_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC17_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC17_OUT_SEL: u32 = 255;
pub const GPIO_FUNC17_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC17_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC18_OUT_SEL_CFG_REG: u32 = 1610630556;
pub const GPIO_FUNC18_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC18_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC18_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC18_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC18_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC18_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC18_OUT_SEL: u32 = 255;
pub const GPIO_FUNC18_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC18_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC19_OUT_SEL_CFG_REG: u32 = 1610630560;
pub const GPIO_FUNC19_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC19_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC19_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC19_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC19_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC19_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC19_OUT_SEL: u32 = 255;
pub const GPIO_FUNC19_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC19_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC20_OUT_SEL_CFG_REG: u32 = 1610630564;
pub const GPIO_FUNC20_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC20_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC20_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC20_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC20_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC20_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC20_OUT_SEL: u32 = 255;
pub const GPIO_FUNC20_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC20_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC21_OUT_SEL_CFG_REG: u32 = 1610630568;
pub const GPIO_FUNC21_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC21_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC21_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC21_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC21_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC21_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC21_OUT_SEL: u32 = 255;
pub const GPIO_FUNC21_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC21_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC22_OUT_SEL_CFG_REG: u32 = 1610630572;
pub const GPIO_FUNC22_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC22_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC22_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC22_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC22_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC22_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC22_OUT_SEL: u32 = 255;
pub const GPIO_FUNC22_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC22_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC23_OUT_SEL_CFG_REG: u32 = 1610630576;
pub const GPIO_FUNC23_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC23_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC23_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC23_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC23_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC23_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC23_OUT_SEL: u32 = 255;
pub const GPIO_FUNC23_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC23_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC24_OUT_SEL_CFG_REG: u32 = 1610630580;
pub const GPIO_FUNC24_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC24_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC24_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC24_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC24_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC24_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC24_OUT_SEL: u32 = 255;
pub const GPIO_FUNC24_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC24_OUT_SEL_S: u32 = 0;
pub const GPIO_FUNC25_OUT_SEL_CFG_REG: u32 = 1610630584;
pub const GPIO_FUNC25_OEN_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC25_OEN_INV_SEL_S: u32 = 10;
pub const GPIO_FUNC25_OEN_SEL_V: u32 = 1;
pub const GPIO_FUNC25_OEN_SEL_S: u32 = 9;
pub const GPIO_FUNC25_OUT_INV_SEL_V: u32 = 1;
pub const GPIO_FUNC25_OUT_INV_SEL_S: u32 = 8;
pub const GPIO_FUNC25_OUT_SEL: u32 = 255;
pub const GPIO_FUNC25_OUT_SEL_V: u32 = 255;
pub const GPIO_FUNC25_OUT_SEL_S: u32 = 0;
pub const GPIO_CLOCK_GATE_REG: u32 = 1610630700;
pub const GPIO_CLK_EN_V: u32 = 1;
pub const GPIO_CLK_EN_S: u32 = 0;
pub const GPIO_DATE_REG: u32 = 1610630908;
pub const GPIO_DATE: u32 = 268435455;
pub const GPIO_DATE_V: u32 = 268435455;
pub const GPIO_DATE_S: u32 = 0;
pub const SPIQ_IN_IDX: u32 = 0;
pub const SPIQ_OUT_IDX: u32 = 0;
pub const SPID_IN_IDX: u32 = 1;
pub const SPID_OUT_IDX: u32 = 1;
pub const SPIHD_IN_IDX: u32 = 2;
pub const SPIHD_OUT_IDX: u32 = 2;
pub const SPIWP_IN_IDX: u32 = 3;
pub const SPIWP_OUT_IDX: u32 = 3;
pub const SPICLK_OUT_IDX: u32 = 4;
pub const SPICS0_OUT_IDX: u32 = 5;
pub const U0RXD_IN_IDX: u32 = 6;
pub const U0TXD_OUT_IDX: u32 = 6;
pub const U0CTS_IN_IDX: u32 = 7;
pub const U0RTS_OUT_IDX: u32 = 7;
pub const U0DSR_IN_IDX: u32 = 8;
pub const U0DTR_OUT_IDX: u32 = 8;
pub const U1RXD_IN_IDX: u32 = 9;
pub const U1TXD_OUT_IDX: u32 = 9;
pub const U1CTS_IN_IDX: u32 = 10;
pub const U1RTS_OUT_IDX: u32 = 10;
pub const U1DSR_IN_IDX: u32 = 11;
pub const U1DTR_OUT_IDX: u32 = 11;
pub const I2S_MCLK_IN_IDX: u32 = 12;
pub const I2S_MCLK_OUT_IDX: u32 = 12;
pub const I2SO_BCK_IN_IDX: u32 = 13;
pub const I2SO_BCK_OUT_IDX: u32 = 13;
pub const I2SO_WS_IN_IDX: u32 = 14;
pub const I2SO_WS_OUT_IDX: u32 = 14;
pub const I2SI_SD_IN_IDX: u32 = 15;
pub const I2SO_SD_OUT_IDX: u32 = 15;
pub const I2SI_BCK_IN_IDX: u32 = 16;
pub const I2SI_BCK_OUT_IDX: u32 = 16;
pub const I2SI_WS_IN_IDX: u32 = 17;
pub const I2SI_WS_OUT_IDX: u32 = 17;
pub const GPIO_BT_PRIORITY_IDX: u32 = 18;
pub const GPIO_WLAN_PRIO_IDX: u32 = 18;
pub const GPIO_BT_ACTIVE_IDX: u32 = 19;
pub const GPIO_WLAN_ACTIVE_IDX: u32 = 19;
pub const CPU_GPIO_IN0_IDX: u32 = 28;
pub const CPU_GPIO_OUT0_IDX: u32 = 28;
pub const CPU_GPIO_IN1_IDX: u32 = 29;
pub const CPU_GPIO_OUT1_IDX: u32 = 29;
pub const CPU_GPIO_IN2_IDX: u32 = 30;
pub const CPU_GPIO_OUT2_IDX: u32 = 30;
pub const CPU_GPIO_IN3_IDX: u32 = 31;
pub const CPU_GPIO_OUT3_IDX: u32 = 31;
pub const CPU_GPIO_IN4_IDX: u32 = 32;
pub const CPU_GPIO_OUT4_IDX: u32 = 32;
pub const CPU_GPIO_IN5_IDX: u32 = 33;
pub const CPU_GPIO_OUT5_IDX: u32 = 33;
pub const CPU_GPIO_IN6_IDX: u32 = 34;
pub const CPU_GPIO_OUT6_IDX: u32 = 34;
pub const CPU_GPIO_IN7_IDX: u32 = 35;
pub const CPU_GPIO_OUT7_IDX: u32 = 35;
pub const USB_JTAG_TCK_OUT_IDX: u32 = 36;
pub const USB_JTAG_TMS_OUT_IDX: u32 = 37;
pub const USB_JTAG_TDI_OUT_IDX: u32 = 38;
pub const USB_JTAG_TDO_OUT_IDX: u32 = 39;
pub const USB_EXTPHY_VP_IDX: u32 = 40;
pub const USB_EXTPHY_OEN_IDX: u32 = 40;
pub const USB_EXTPHY_VM_IDX: u32 = 41;
pub const USB_EXTPHY_SPEED_IDX: u32 = 41;
pub const USB_EXTPHY_RCV_IDX: u32 = 42;
pub const USB_EXTPHY_VPO_IDX: u32 = 42;
pub const USB_EXTPHY_VMO_IDX: u32 = 43;
pub const USB_EXTPHY_SUSPND_IDX: u32 = 44;
pub const EXT_ADC_START_IDX: u32 = 45;
pub const LEDC_LS_SIG_OUT0_IDX: u32 = 45;
pub const LEDC_LS_SIG_OUT1_IDX: u32 = 46;
pub const LEDC_LS_SIG_OUT2_IDX: u32 = 47;
pub const LEDC_LS_SIG_OUT3_IDX: u32 = 48;
pub const LEDC_LS_SIG_OUT4_IDX: u32 = 49;
pub const LEDC_LS_SIG_OUT5_IDX: u32 = 50;
pub const RMT_SIG_IN0_IDX: u32 = 51;
pub const RMT_SIG_OUT0_IDX: u32 = 51;
pub const RMT_SIG_IN1_IDX: u32 = 52;
pub const RMT_SIG_OUT1_IDX: u32 = 52;
pub const I2CEXT0_SCL_IN_IDX: u32 = 53;
pub const I2CEXT0_SCL_OUT_IDX: u32 = 53;
pub const I2CEXT0_SDA_IN_IDX: u32 = 54;
pub const I2CEXT0_SDA_OUT_IDX: u32 = 54;
pub const GPIO_SD0_OUT_IDX: u32 = 55;
pub const GPIO_SD1_OUT_IDX: u32 = 56;
pub const GPIO_SD2_OUT_IDX: u32 = 57;
pub const GPIO_SD3_OUT_IDX: u32 = 58;
pub const FSPICLK_IN_IDX: u32 = 63;
pub const FSPICLK_OUT_IDX: u32 = 63;
pub const FSPIQ_IN_IDX: u32 = 64;
pub const FSPIQ_OUT_IDX: u32 = 64;
pub const FSPID_IN_IDX: u32 = 65;
pub const FSPID_OUT_IDX: u32 = 65;
pub const FSPIHD_IN_IDX: u32 = 66;
pub const FSPIHD_OUT_IDX: u32 = 66;
pub const FSPIWP_IN_IDX: u32 = 67;
pub const FSPIWP_OUT_IDX: u32 = 67;
pub const FSPICS0_IN_IDX: u32 = 68;
pub const FSPICS0_OUT_IDX: u32 = 68;
pub const FSPICS1_OUT_IDX: u32 = 69;
pub const FSPICS2_OUT_IDX: u32 = 70;
pub const FSPICS3_OUT_IDX: u32 = 71;
pub const FSPICS4_OUT_IDX: u32 = 72;
pub const FSPICS5_OUT_IDX: u32 = 73;
pub const TWAI_RX_IDX: u32 = 74;
pub const TWAI_TX_IDX: u32 = 74;
pub const TWAI_BUS_OFF_ON_IDX: u32 = 75;
pub const TWAI_CLKOUT_IDX: u32 = 76;
pub const PCMFSYNC_IN_IDX: u32 = 77;
pub const BT_AUDIO0_IRQ_IDX: u32 = 77;
pub const PCMCLK_IN_IDX: u32 = 78;
pub const BT_AUDIO1_IRQ_IDX: u32 = 78;
pub const PCMDIN_IDX: u32 = 79;
pub const BT_AUDIO2_IRQ_IDX: u32 = 79;
pub const RW_WAKEUP_REQ_IDX: u32 = 80;
pub const BLE_AUDIO0_IRQ_IDX: u32 = 80;
pub const BLE_AUDIO1_IRQ_IDX: u32 = 81;
pub const BLE_AUDIO2_IRQ_IDX: u32 = 82;
pub const PCMFSYNC_OUT_IDX: u32 = 83;
pub const PCMCLK_OUT_IDX: u32 = 84;
pub const PCMDOUT_IDX: u32 = 85;
pub const BLE_AUDIO_SYNC0_P_IDX: u32 = 86;
pub const BLE_AUDIO_SYNC1_P_IDX: u32 = 87;
pub const BLE_AUDIO_SYNC2_P_IDX: u32 = 88;
pub const ANT_SEL0_IDX: u32 = 89;
pub const ANT_SEL1_IDX: u32 = 90;
pub const ANT_SEL2_IDX: u32 = 91;
pub const ANT_SEL3_IDX: u32 = 92;
pub const ANT_SEL4_IDX: u32 = 93;
pub const ANT_SEL5_IDX: u32 = 94;
pub const ANT_SEL6_IDX: u32 = 95;
pub const ANT_SEL7_IDX: u32 = 96;
pub const SIG_IN_FUNC_97_IDX: u32 = 97;
pub const SIG_IN_FUNC97_IDX: u32 = 97;
pub const SIG_IN_FUNC_98_IDX: u32 = 98;
pub const SIG_IN_FUNC98_IDX: u32 = 98;
pub const SIG_IN_FUNC_99_IDX: u32 = 99;
pub const SIG_IN_FUNC99_IDX: u32 = 99;
pub const SIG_IN_FUNC_100_IDX: u32 = 100;
pub const SIG_IN_FUNC100_IDX: u32 = 100;
pub const SYNCERR_IDX: u32 = 101;
pub const SYNCFOUND_FLAG_IDX: u32 = 102;
pub const EVT_CNTL_IMMEDIATE_ABORT_IDX: u32 = 103;
pub const LINKLBL_IDX: u32 = 104;
pub const DATA_EN_IDX: u32 = 105;
pub const DATA_IDX: u32 = 106;
pub const PKT_TX_ON_IDX: u32 = 107;
pub const PKT_RX_ON_IDX: u32 = 108;
pub const RW_TX_ON_IDX: u32 = 109;
pub const RW_RX_ON_IDX: u32 = 110;
pub const EVT_REQ_P_IDX: u32 = 111;
pub const EVT_STOP_P_IDX: u32 = 112;
pub const BT_MODE_ON_IDX: u32 = 113;
pub const GPIO_LC_DIAG0_IDX: u32 = 114;
pub const GPIO_LC_DIAG1_IDX: u32 = 115;
pub const GPIO_LC_DIAG2_IDX: u32 = 116;
pub const CH_IDX_IDX: u32 = 117;
pub const RX_WINDOW_IDX: u32 = 118;
pub const UPDATE_RX_IDX: u32 = 119;
pub const RX_STATUS_IDX: u32 = 120;
pub const CLK_GPIO_IDX: u32 = 121;
pub const NBT_BLE_IDX: u32 = 122;
pub const CLK_OUT_OUT1_IDX: u32 = 123;
pub const CLK_OUT_OUT2_IDX: u32 = 124;
pub const CLK_OUT_OUT3_IDX: u32 = 125;
pub const SPICS1_OUT_IDX: u32 = 126;
pub const USB_JTAG_TRST_OUT_IDX: u32 = 127;
pub const SIG_GPIO_OUT_IDX: u32 = 128;
pub const GPIO_MAP_DATE_IDX: u32 = 33579312;
pub const GPIO_MODE_DEF_DISABLE: u32 = 0;
pub const GPIO_MODE_DEF_INPUT: u32 = 1;
pub const GPIO_MODE_DEF_OUTPUT: u32 = 2;
pub const GPIO_MODE_DEF_OD: u32 = 4;
pub const configUSE_PORT_OPTIMISED_TASK_SELECTION: u32 = 0;
pub const configMAX_SYSCALL_INTERRUPT_PRIORITY: u32 = 0;
pub const configISR_STACK_SIZE: u32 = 1536;
pub const portNUM_PROCESSORS: u32 = 1;
pub const portUSING_MPU_WRAPPERS: u32 = 0;
pub const configUSE_MUTEX: u32 = 1;
pub const configNUM_THREAD_LOCAL_STORAGE_POINTERS: u32 = 1;
pub const configTHREAD_LOCAL_STORAGE_DELETE_CALLBACKS: u32 = 1;
pub const configUSE_PREEMPTION: u32 = 1;
pub const configUSE_IDLE_HOOK: u32 = 1;
pub const configUSE_TICK_HOOK: u32 = 1;
pub const configRECORD_STACK_HIGH_ADDRESS: u32 = 1;
pub const configTICK_RATE_HZ: u32 = 100;
pub const configMAX_PRIORITIES: u32 = 25;
pub const configSTACK_OVERHEAD_CHECKER: u32 = 0;
pub const configSTACK_OVERHEAD_OPTIMIZATION: u32 = 0;
pub const configSTACK_OVERHEAD_APPTRACE: u32 = 0;
pub const configSTACK_OVERHEAD_WATCHPOINT: u32 = 0;
pub const configSTACK_OVERHEAD_TOTAL: u32 = 0;
pub const configMINIMAL_STACK_SIZE: u32 = 768;
pub const configIDLE_TASK_STACK_SIZE: u32 = 1536;
pub const configAPPLICATION_ALLOCATED_HEAP: u32 = 1;
pub const configMAX_TASK_NAME_LEN: u32 = 16;
pub const configBENCHMARK: u32 = 0;
pub const configUSE_16_BIT_TICKS: u32 = 0;
pub const configIDLE_SHOULD_YIELD: u32 = 0;
pub const configQUEUE_REGISTRY_SIZE: u32 = 0;
pub const configUSE_MUTEXES: u32 = 1;
pub const configUSE_RECURSIVE_MUTEXES: u32 = 1;
pub const configUSE_COUNTING_SEMAPHORES: u32 = 1;
pub const configCHECK_FOR_STACK_OVERFLOW: u32 = 2;
pub const configUSE_CO_ROUTINES: u32 = 0;
pub const configMAX_CO_ROUTINE_PRIORITIES: u32 = 2;
pub const INCLUDE_vTaskPrioritySet: u32 = 1;
pub const INCLUDE_uxTaskPriorityGet: u32 = 1;
pub const INCLUDE_vTaskDelete: u32 = 1;
pub const INCLUDE_vTaskCleanUpResources: u32 = 0;
pub const INCLUDE_vTaskSuspend: u32 = 1;
pub const INCLUDE_vTaskDelayUntil: u32 = 1;
pub const INCLUDE_vTaskDelay: u32 = 1;
pub const INCLUDE_uxTaskGetStackHighWaterMark: u32 = 1;
pub const INCLUDE_pcTaskGetTaskName: u32 = 1;
pub const INCLUDE_xTaskGetIdleTaskHandle: u32 = 1;
pub const INCLUDE_pxTaskGetStackStart: u32 = 1;
pub const INCLUDE_eTaskGetState: u32 = 1;
pub const INCLUDE_xTaskAbortDelay: u32 = 1;
pub const INCLUDE_xTaskGetHandle: u32 = 1;
pub const INCLUDE_xSemaphoreGetMutexHolder: u32 = 1;
pub const INCLUDE_xTimerPendFunctionCall: u32 = 1;
pub const INCLUDE_xTimerGetTimerDaemonTaskHandle: u32 = 0;
pub const configKERNEL_INTERRUPT_PRIORITY: u32 = 1;
pub const configUSE_NEWLIB_REENTRANT: u32 = 1;
pub const configSUPPORT_DYNAMIC_ALLOCATION: u32 = 1;
pub const configSUPPORT_STATIC_ALLOCATION: u32 = 1;
pub const configUSE_TIMERS: u32 = 1;
pub const configTIMER_TASK_PRIORITY: u32 = 1;
pub const configTIMER_QUEUE_LENGTH: u32 = 10;
pub const configTIMER_TASK_STACK_DEPTH: u32 = 2048;
pub const configUSE_QUEUE_SETS: u32 = 1;
pub const configENABLE_TASK_SNAPSHOT: u32 = 1;
pub const configCHECK_MUTEX_GIVEN_BY_OWNER: u32 = 1;
pub const configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H: u32 = 1;
pub const configTASK_NOTIFICATION_ARRAY_ENTRIES: u32 = 1;
pub const configNUM_CORES: u32 = 1;
pub const errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY: i32 = -1;
pub const errQUEUE_BLOCKED: i32 = -4;
pub const errQUEUE_YIELD: i32 = -5;
pub const configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: u32 = 0;
pub const pdINTEGRITY_CHECK_VALUE: u32 = 1515870810;
pub const pdFREERTOS_ERRNO_NONE: u32 = 0;
pub const pdFREERTOS_ERRNO_ENOENT: u32 = 2;
pub const pdFREERTOS_ERRNO_EINTR: u32 = 4;
pub const pdFREERTOS_ERRNO_EIO: u32 = 5;
pub const pdFREERTOS_ERRNO_ENXIO: u32 = 6;
pub const pdFREERTOS_ERRNO_EBADF: u32 = 9;
pub const pdFREERTOS_ERRNO_EAGAIN: u32 = 11;
pub const pdFREERTOS_ERRNO_EWOULDBLOCK: u32 = 11;
pub const pdFREERTOS_ERRNO_ENOMEM: u32 = 12;
pub const pdFREERTOS_ERRNO_EACCES: u32 = 13;
pub const pdFREERTOS_ERRNO_EFAULT: u32 = 14;
pub const pdFREERTOS_ERRNO_EBUSY: u32 = 16;
pub const pdFREERTOS_ERRNO_EEXIST: u32 = 17;
pub const pdFREERTOS_ERRNO_EXDEV: u32 = 18;
pub const pdFREERTOS_ERRNO_ENODEV: u32 = 19;
pub const pdFREERTOS_ERRNO_ENOTDIR: u32 = 20;
pub const pdFREERTOS_ERRNO_EISDIR: u32 = 21;
pub const pdFREERTOS_ERRNO_EINVAL: u32 = 22;
pub const pdFREERTOS_ERRNO_ENOSPC: u32 = 28;
pub const pdFREERTOS_ERRNO_ESPIPE: u32 = 29;
pub const pdFREERTOS_ERRNO_EROFS: u32 = 30;
pub const pdFREERTOS_ERRNO_EUNATCH: u32 = 42;
pub const pdFREERTOS_ERRNO_EBADE: u32 = 50;
pub const pdFREERTOS_ERRNO_EFTYPE: u32 = 79;
pub const pdFREERTOS_ERRNO_ENMFILE: u32 = 89;
pub const pdFREERTOS_ERRNO_ENOTEMPTY: u32 = 90;
pub const pdFREERTOS_ERRNO_ENAMETOOLONG: u32 = 91;
pub const pdFREERTOS_ERRNO_EOPNOTSUPP: u32 = 95;
pub const pdFREERTOS_ERRNO_ENOBUFS: u32 = 105;
pub const pdFREERTOS_ERRNO_ENOPROTOOPT: u32 = 109;
pub const pdFREERTOS_ERRNO_EADDRINUSE: u32 = 112;
pub const pdFREERTOS_ERRNO_ETIMEDOUT: u32 = 116;
pub const pdFREERTOS_ERRNO_EINPROGRESS: u32 = 119;
pub const pdFREERTOS_ERRNO_EALREADY: u32 = 120;
pub const pdFREERTOS_ERRNO_EADDRNOTAVAIL: u32 = 125;
pub const pdFREERTOS_ERRNO_EISCONN: u32 = 127;
pub const pdFREERTOS_ERRNO_ENOTCONN: u32 = 128;
pub const pdFREERTOS_ERRNO_ENOMEDIUM: u32 = 135;
pub const pdFREERTOS_ERRNO_EILSEQ: u32 = 138;
pub const pdFREERTOS_ERRNO_ECANCELED: u32 = 140;
pub const pdFREERTOS_LITTLE_ENDIAN: u32 = 0;
pub const pdFREERTOS_BIG_ENDIAN: u32 = 1;
pub const pdLITTLE_ENDIAN: u32 = 0;
pub const pdBIG_ENDIAN: u32 = 1;
pub const SPINLOCK_FREE: u32 = 3007315967;
pub const SPINLOCK_WAIT_FOREVER: i32 = -1;
pub const SPINLOCK_NO_WAIT: u32 = 0;
pub const CORE_ID_REGVAL_XOR_SWAP: u32 = 26214;
pub const DR_REG_INTERRUPT_CORE0_BASE: u32 = 1611407360;
pub const INTERRUPT_CORE0_MAC_INTR_MAP_REG: u32 = 1611407360;
pub const INTERRUPT_CORE0_MAC_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_MAC_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_MAC_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_MAC_NMI_MAP_REG: u32 = 1611407364;
pub const INTERRUPT_CORE0_MAC_NMI_MAP: u32 = 31;
pub const INTERRUPT_CORE0_MAC_NMI_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_MAC_NMI_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_PWR_INTR_MAP_REG: u32 = 1611407368;
pub const INTERRUPT_CORE0_PWR_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_PWR_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_PWR_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_BB_INT_MAP_REG: u32 = 1611407372;
pub const INTERRUPT_CORE0_BB_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_BB_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_BB_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_BT_MAC_INT_MAP_REG: u32 = 1611407376;
pub const INTERRUPT_CORE0_BT_MAC_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_BT_MAC_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_BT_MAC_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_BT_BB_INT_MAP_REG: u32 = 1611407380;
pub const INTERRUPT_CORE0_BT_BB_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_BT_BB_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_BT_BB_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_BT_BB_NMI_MAP_REG: u32 = 1611407384;
pub const INTERRUPT_CORE0_BT_BB_NMI_MAP: u32 = 31;
pub const INTERRUPT_CORE0_BT_BB_NMI_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_BT_BB_NMI_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RWBT_IRQ_MAP_REG: u32 = 1611407388;
pub const INTERRUPT_CORE0_RWBT_IRQ_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RWBT_IRQ_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RWBT_IRQ_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RWBLE_IRQ_MAP_REG: u32 = 1611407392;
pub const INTERRUPT_CORE0_RWBLE_IRQ_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RWBLE_IRQ_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RWBLE_IRQ_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RWBT_NMI_MAP_REG: u32 = 1611407396;
pub const INTERRUPT_CORE0_RWBT_NMI_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RWBT_NMI_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RWBT_NMI_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RWBLE_NMI_MAP_REG: u32 = 1611407400;
pub const INTERRUPT_CORE0_RWBLE_NMI_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RWBLE_NMI_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RWBLE_NMI_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_I2C_MST_INT_MAP_REG: u32 = 1611407404;
pub const INTERRUPT_CORE0_I2C_MST_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_I2C_MST_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_I2C_MST_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SLC0_INTR_MAP_REG: u32 = 1611407408;
pub const INTERRUPT_CORE0_SLC0_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SLC0_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SLC0_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SLC1_INTR_MAP_REG: u32 = 1611407412;
pub const INTERRUPT_CORE0_SLC1_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SLC1_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SLC1_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_APB_CTRL_INTR_MAP_REG: u32 = 1611407416;
pub const INTERRUPT_CORE0_APB_CTRL_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_APB_CTRL_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_APB_CTRL_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_UHCI0_INTR_MAP_REG: u32 = 1611407420;
pub const INTERRUPT_CORE0_UHCI0_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_UHCI0_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_UHCI0_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_MAP_REG: u32 = 1611407424;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_MAP: u32 = 31;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_REG: u32 = 1611407428;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP: u32 = 31;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_GPIO_INTERRUPT_PRO_NMI_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SPI_INTR_1_MAP_REG: u32 = 1611407432;
pub const INTERRUPT_CORE0_SPI_INTR_1_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SPI_INTR_1_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SPI_INTR_1_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SPI_INTR_2_MAP_REG: u32 = 1611407436;
pub const INTERRUPT_CORE0_SPI_INTR_2_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SPI_INTR_2_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SPI_INTR_2_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_I2S1_INT_MAP_REG: u32 = 1611407440;
pub const INTERRUPT_CORE0_I2S1_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_I2S1_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_I2S1_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_UART_INTR_MAP_REG: u32 = 1611407444;
pub const INTERRUPT_CORE0_UART_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_UART_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_UART_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_UART1_INTR_MAP_REG: u32 = 1611407448;
pub const INTERRUPT_CORE0_UART1_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_UART1_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_UART1_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_LEDC_INT_MAP_REG: u32 = 1611407452;
pub const INTERRUPT_CORE0_LEDC_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_LEDC_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_LEDC_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_EFUSE_INT_MAP_REG: u32 = 1611407456;
pub const INTERRUPT_CORE0_EFUSE_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_EFUSE_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_EFUSE_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CAN_INT_MAP_REG: u32 = 1611407460;
pub const INTERRUPT_CORE0_CAN_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CAN_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CAN_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_USB_INTR_MAP_REG: u32 = 1611407464;
pub const INTERRUPT_CORE0_USB_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_USB_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_USB_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RTC_CORE_INTR_MAP_REG: u32 = 1611407468;
pub const INTERRUPT_CORE0_RTC_CORE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RTC_CORE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RTC_CORE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RMT_INTR_MAP_REG: u32 = 1611407472;
pub const INTERRUPT_CORE0_RMT_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RMT_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RMT_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_I2C_EXT0_INTR_MAP_REG: u32 = 1611407476;
pub const INTERRUPT_CORE0_I2C_EXT0_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_I2C_EXT0_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_I2C_EXT0_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TIMER_INT1_MAP_REG: u32 = 1611407480;
pub const INTERRUPT_CORE0_TIMER_INT1_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TIMER_INT1_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TIMER_INT1_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TIMER_INT2_MAP_REG: u32 = 1611407484;
pub const INTERRUPT_CORE0_TIMER_INT2_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TIMER_INT2_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TIMER_INT2_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TG_T0_INT_MAP_REG: u32 = 1611407488;
pub const INTERRUPT_CORE0_TG_T0_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TG_T0_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TG_T0_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TG_WDT_INT_MAP_REG: u32 = 1611407492;
pub const INTERRUPT_CORE0_TG_WDT_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TG_WDT_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TG_WDT_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TG1_T0_INT_MAP_REG: u32 = 1611407496;
pub const INTERRUPT_CORE0_TG1_T0_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TG1_T0_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TG1_T0_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_TG1_WDT_INT_MAP_REG: u32 = 1611407500;
pub const INTERRUPT_CORE0_TG1_WDT_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_TG1_WDT_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_TG1_WDT_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CACHE_IA_INT_MAP_REG: u32 = 1611407504;
pub const INTERRUPT_CORE0_CACHE_IA_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CACHE_IA_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CACHE_IA_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET0_INT_MAP_REG: u32 = 1611407508;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET0_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET0_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET0_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET1_INT_MAP_REG: u32 = 1611407512;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET1_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET1_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET1_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET2_INT_MAP_REG: u32 = 1611407516;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET2_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET2_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SYSTIMER_TARGET2_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SPI_MEM_REJECT_INTR_MAP_REG: u32 = 1611407520;
pub const INTERRUPT_CORE0_SPI_MEM_REJECT_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SPI_MEM_REJECT_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SPI_MEM_REJECT_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_ICACHE_PRELOAD_INT_MAP_REG: u32 = 1611407524;
pub const INTERRUPT_CORE0_ICACHE_PRELOAD_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_ICACHE_PRELOAD_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_ICACHE_PRELOAD_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_ICACHE_SYNC_INT_MAP_REG: u32 = 1611407528;
pub const INTERRUPT_CORE0_ICACHE_SYNC_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_ICACHE_SYNC_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_ICACHE_SYNC_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_APB_ADC_INT_MAP_REG: u32 = 1611407532;
pub const INTERRUPT_CORE0_APB_ADC_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_APB_ADC_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_APB_ADC_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_DMA_CH0_INT_MAP_REG: u32 = 1611407536;
pub const INTERRUPT_CORE0_DMA_CH0_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH0_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH0_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_DMA_CH1_INT_MAP_REG: u32 = 1611407540;
pub const INTERRUPT_CORE0_DMA_CH1_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH1_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH1_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_DMA_CH2_INT_MAP_REG: u32 = 1611407544;
pub const INTERRUPT_CORE0_DMA_CH2_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH2_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_DMA_CH2_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_RSA_INT_MAP_REG: u32 = 1611407548;
pub const INTERRUPT_CORE0_RSA_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_RSA_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_RSA_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_AES_INT_MAP_REG: u32 = 1611407552;
pub const INTERRUPT_CORE0_AES_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_AES_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_AES_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_SHA_INT_MAP_REG: u32 = 1611407556;
pub const INTERRUPT_CORE0_SHA_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_SHA_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_SHA_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_0_MAP_REG: u32 = 1611407560;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_0_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_0_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_0_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_1_MAP_REG: u32 = 1611407564;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_1_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_1_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_1_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_2_MAP_REG: u32 = 1611407568;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_2_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_2_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_2_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_3_MAP_REG: u32 = 1611407572;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_3_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_3_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CPU_INTR_FROM_CPU_3_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_ASSIST_DEBUG_INTR_MAP_REG: u32 = 1611407576;
pub const INTERRUPT_CORE0_ASSIST_DEBUG_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_ASSIST_DEBUG_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_ASSIST_DEBUG_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_DMA_APBPERI_PMS_MONITOR_VIOLATE_INTR_MAP_REG: u32 = 1611407580;
pub const INTERRUPT_CORE0_DMA_APBPERI_PMS_MONITOR_VIOLATE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_DMA_APBPERI_PMS_MONITOR_VIOLATE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_DMA_APBPERI_PMS_MONITOR_VIOLATE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CORE_0_IRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_REG: u32 = 1611407584;
pub const INTERRUPT_CORE0_CORE_0_IRAM0_PMS_MONITOR_VIOLATE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_IRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_IRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CORE_0_DRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_REG: u32 = 1611407588;
pub const INTERRUPT_CORE0_CORE_0_DRAM0_PMS_MONITOR_VIOLATE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_DRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_DRAM0_PMS_MONITOR_VIOLATE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_INTR_MAP_REG: u32 = 1611407592;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_SIZE_INTR_MAP_REG: u32 = 1611407596;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_SIZE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_SIZE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CORE_0_PIF_PMS_MONITOR_VIOLATE_SIZE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_BACKUP_PMS_VIOLATE_INTR_MAP_REG: u32 = 1611407600;
pub const INTERRUPT_CORE0_BACKUP_PMS_VIOLATE_INTR_MAP: u32 = 31;
pub const INTERRUPT_CORE0_BACKUP_PMS_VIOLATE_INTR_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_BACKUP_PMS_VIOLATE_INTR_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CACHE_CORE0_ACS_INT_MAP_REG: u32 = 1611407604;
pub const INTERRUPT_CORE0_CACHE_CORE0_ACS_INT_MAP: u32 = 31;
pub const INTERRUPT_CORE0_CACHE_CORE0_ACS_INT_MAP_V: u32 = 31;
pub const INTERRUPT_CORE0_CACHE_CORE0_ACS_INT_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_INTR_STATUS_0_REG: u32 = 1611407608;
pub const INTERRUPT_CORE0_INTR_STATUS_0: u32 = 4294967295;
pub const INTERRUPT_CORE0_INTR_STATUS_0_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_INTR_STATUS_0_S: u32 = 0;
pub const INTERRUPT_CORE0_INTR_STATUS_1_REG: u32 = 1611407612;
pub const INTERRUPT_CORE0_INTR_STATUS_1: u32 = 4294967295;
pub const INTERRUPT_CORE0_INTR_STATUS_1_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_INTR_STATUS_1_S: u32 = 0;
pub const INTERRUPT_CORE0_CLOCK_GATE_REG: u32 = 1611407616;
pub const INTERRUPT_CORE0_CLK_EN_V: u32 = 1;
pub const INTERRUPT_CORE0_CLK_EN_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_ENABLE_REG: u32 = 1611407620;
pub const INTERRUPT_CORE0_CPU_INT_ENABLE: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_ENABLE_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_ENABLE_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_TYPE_REG: u32 = 1611407624;
pub const INTERRUPT_CORE0_CPU_INT_TYPE: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_TYPE_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_TYPE_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_CLEAR_REG: u32 = 1611407628;
pub const INTERRUPT_CORE0_CPU_INT_CLEAR: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_CLEAR_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_CLEAR_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_EIP_STATUS_REG: u32 = 1611407632;
pub const INTERRUPT_CORE0_CPU_INT_EIP_STATUS: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_EIP_STATUS_V: u32 = 4294967295;
pub const INTERRUPT_CORE0_CPU_INT_EIP_STATUS_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_0_REG: u32 = 1611407636;
pub const INTERRUPT_CORE0_CPU_PRI_0_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_0_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_0_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_1_REG: u32 = 1611407640;
pub const INTERRUPT_CORE0_CPU_PRI_1_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_1_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_1_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_2_REG: u32 = 1611407644;
pub const INTERRUPT_CORE0_CPU_PRI_2_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_2_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_2_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_3_REG: u32 = 1611407648;
pub const INTERRUPT_CORE0_CPU_PRI_3_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_3_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_3_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_4_REG: u32 = 1611407652;
pub const INTERRUPT_CORE0_CPU_PRI_4_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_4_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_4_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_5_REG: u32 = 1611407656;
pub const INTERRUPT_CORE0_CPU_PRI_5_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_5_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_5_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_6_REG: u32 = 1611407660;
pub const INTERRUPT_CORE0_CPU_PRI_6_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_6_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_6_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_7_REG: u32 = 1611407664;
pub const INTERRUPT_CORE0_CPU_PRI_7_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_7_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_7_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_8_REG: u32 = 1611407668;
pub const INTERRUPT_CORE0_CPU_PRI_8_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_8_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_8_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_9_REG: u32 = 1611407672;
pub const INTERRUPT_CORE0_CPU_PRI_9_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_9_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_9_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_10_REG: u32 = 1611407676;
pub const INTERRUPT_CORE0_CPU_PRI_10_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_10_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_10_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_11_REG: u32 = 1611407680;
pub const INTERRUPT_CORE0_CPU_PRI_11_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_11_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_11_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_12_REG: u32 = 1611407684;
pub const INTERRUPT_CORE0_CPU_PRI_12_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_12_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_12_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_13_REG: u32 = 1611407688;
pub const INTERRUPT_CORE0_CPU_PRI_13_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_13_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_13_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_14_REG: u32 = 1611407692;
pub const INTERRUPT_CORE0_CPU_PRI_14_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_14_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_14_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_15_REG: u32 = 1611407696;
pub const INTERRUPT_CORE0_CPU_PRI_15_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_15_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_15_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_16_REG: u32 = 1611407700;
pub const INTERRUPT_CORE0_CPU_PRI_16_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_16_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_16_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_17_REG: u32 = 1611407704;
pub const INTERRUPT_CORE0_CPU_PRI_17_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_17_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_17_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_18_REG: u32 = 1611407708;
pub const INTERRUPT_CORE0_CPU_PRI_18_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_18_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_18_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_19_REG: u32 = 1611407712;
pub const INTERRUPT_CORE0_CPU_PRI_19_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_19_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_19_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_20_REG: u32 = 1611407716;
pub const INTERRUPT_CORE0_CPU_PRI_20_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_20_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_20_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_21_REG: u32 = 1611407720;
pub const INTERRUPT_CORE0_CPU_PRI_21_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_21_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_21_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_22_REG: u32 = 1611407724;
pub const INTERRUPT_CORE0_CPU_PRI_22_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_22_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_22_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_23_REG: u32 = 1611407728;
pub const INTERRUPT_CORE0_CPU_PRI_23_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_23_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_23_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_24_REG: u32 = 1611407732;
pub const INTERRUPT_CORE0_CPU_PRI_24_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_24_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_24_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_25_REG: u32 = 1611407736;
pub const INTERRUPT_CORE0_CPU_PRI_25_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_25_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_25_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_26_REG: u32 = 1611407740;
pub const INTERRUPT_CORE0_CPU_PRI_26_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_26_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_26_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_27_REG: u32 = 1611407744;
pub const INTERRUPT_CORE0_CPU_PRI_27_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_27_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_27_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_28_REG: u32 = 1611407748;
pub const INTERRUPT_CORE0_CPU_PRI_28_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_28_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_28_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_29_REG: u32 = 1611407752;
pub const INTERRUPT_CORE0_CPU_PRI_29_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_29_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_29_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_30_REG: u32 = 1611407756;
pub const INTERRUPT_CORE0_CPU_PRI_30_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_30_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_30_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_PRI_31_REG: u32 = 1611407760;
pub const INTERRUPT_CORE0_CPU_PRI_31_MAP: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_31_MAP_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_PRI_31_MAP_S: u32 = 0;
pub const INTERRUPT_CORE0_CPU_INT_THRESH_REG: u32 = 1611407764;
pub const INTERRUPT_CORE0_CPU_INT_THRESH: u32 = 15;
pub const INTERRUPT_CORE0_CPU_INT_THRESH_V: u32 = 15;
pub const INTERRUPT_CORE0_CPU_INT_THRESH_S: u32 = 0;
pub const INTERRUPT_CORE0_INTERRUPT_DATE_REG: u32 = 1611409404;
pub const INTERRUPT_CORE0_INTERRUPT_DATE: u32 = 268435455;
pub const INTERRUPT_CORE0_INTERRUPT_DATE_V: u32 = 268435455;
pub const INTERRUPT_CORE0_INTERRUPT_DATE_S: u32 = 0;
pub const MALLOC_CAP_EXEC: u32 = 1;
pub const MALLOC_CAP_32BIT: u32 = 2;
pub const MALLOC_CAP_8BIT: u32 = 4;
pub const MALLOC_CAP_DMA: u32 = 8;
pub const MALLOC_CAP_PID2: u32 = 16;
pub const MALLOC_CAP_PID3: u32 = 32;
pub const MALLOC_CAP_PID4: u32 = 64;
pub const MALLOC_CAP_PID5: u32 = 128;
pub const MALLOC_CAP_PID6: u32 = 256;
pub const MALLOC_CAP_PID7: u32 = 512;
pub const MALLOC_CAP_SPIRAM: u32 = 1024;
pub const MALLOC_CAP_INTERNAL: u32 = 2048;
pub const MALLOC_CAP_DEFAULT: u32 = 4096;
pub const MALLOC_CAP_IRAM_8BIT: u32 = 8192;
pub const MALLOC_CAP_RETENTION: u32 = 16384;
pub const MALLOC_CAP_RTCRAM: u32 = 32768;
pub const MALLOC_CAP_INVALID: u32 = 2147483648;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 1;
pub const NL_ARGMAX: u32 = 32;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const CHAR_MIN: u32 = 0;
pub const RVHAL_EXCM_LEVEL: u32 = 4;
pub const portCRITICAL_NESTING_IN_TCB: u32 = 0;
pub const portSTACK_GROWTH: i32 = -1;
pub const portBYTE_ALIGNMENT: u32 = 16;
pub const portMUX_FREE_VAL: u32 = 3007315967;
pub const portMUX_NO_TIMEOUT: i32 = -1;
pub const portMUX_TRY_LOCK: u32 = 0;
pub const portTcbMemoryCaps: u32 = 2052;
pub const portStackMemoryCaps: u32 = 2052;
pub const portBYTE_ALIGNMENT_MASK: u32 = 15;
pub const portNUM_CONFIGURABLE_REGIONS: u32 = 1;
pub const portHAS_STACK_OVERFLOW_CHECKING: u32 = 0;
pub const INCLUDE_xTaskDelayUntil: u32 = 1;
pub const INCLUDE_xQueueGetMutexHolder: u32 = 0;
pub const INCLUDE_uxTaskGetStackHighWaterMark2: u32 = 0;
pub const INCLUDE_xTaskResumeFromISR: u32 = 1;
pub const INCLUDE_xTaskGetSchedulerState: u32 = 0;
pub const INCLUDE_xTaskGetCurrentTaskHandle: u32 = 0;
pub const configUSE_DAEMON_TASK_STARTUP_HOOK: u32 = 0;
pub const configUSE_APPLICATION_TASK_TAG: u32 = 0;
pub const configUSE_ALTERNATIVE_API: u32 = 0;
pub const configASSERT_DEFINED: u32 = 1;
pub const configPRECONDITION_DEFINED: u32 = 0;
pub const configGENERATE_RUN_TIME_STATS: u32 = 0;
pub const configUSE_MALLOC_FAILED_HOOK: u32 = 0;
pub const configEXPECTED_IDLE_TIME_BEFORE_SLEEP: u32 = 2;
pub const configUSE_TIME_SLICING: u32 = 1;
pub const configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS: u32 = 0;
pub const configUSE_STATS_FORMATTING_FUNCTIONS: u32 = 0;
pub const configUSE_TRACE_FACILITY: u32 = 0;
pub const configUSE_TASK_NOTIFICATIONS: u32 = 1;
pub const configUSE_POSIX_ERRNO: u32 = 0;
pub const portTICK_TYPE_IS_ATOMIC: u32 = 0;
pub const configSTACK_ALLOCATION_FROM_SEPARATE_HEAP: u32 = 0;
pub const configINITIAL_TICK_COUNT: u32 = 0;
pub const configENABLE_BACKWARD_COMPATIBILITY: u32 = 1;
pub const configUSE_TASK_FPU_SUPPORT: u32 = 1;
pub const configENABLE_MPU: u32 = 0;
pub const configENABLE_FPU: u32 = 1;
pub const configENABLE_TRUSTZONE: u32 = 1;
pub const configRUN_FREERTOS_SECURE_ONLY: u32 = 0;
pub const ESP_TASK_PRIO_MAX: u32 = 25;
pub const ESP_TASK_PRIO_MIN: u32 = 0;
pub const ESP_TASK_BT_CONTROLLER_PRIO: u32 = 23;
pub const TASK_EXTRA_STACK_SIZE: u32 = 512;
pub const BT_TASK_EXTRA_STACK_SIZE: u32 = 512;
pub const ESP_TASK_BT_CONTROLLER_STACK: u32 = 4096;
pub const ESP_TASK_TIMER_PRIO: u32 = 22;
pub const ESP_TASK_TIMER_STACK: u32 = 4096;
pub const ESP_TASKD_EVENT_PRIO: u32 = 20;
pub const ESP_TASKD_EVENT_STACK: u32 = 2816;
pub const ESP_TASK_TCPIP_PRIO: u32 = 18;
pub const ESP_TASK_TCPIP_STACK: u32 = 3584;
pub const ESP_TASK_MAIN_PRIO: u32 = 1;
pub const ESP_TASK_MAIN_STACK: u32 = 7512;
pub const ESP_TASK_MAIN_CORE: u32 = 0;
pub const tskKERNEL_VERSION_NUMBER: &[u8; 8usize] = b"V10.4.3\0";
pub const tskKERNEL_VERSION_MAJOR: u32 = 10;
pub const tskKERNEL_VERSION_MINOR: u32 = 4;
pub const tskKERNEL_VERSION_BUILD: u32 = 3;
pub const tskMPU_REGION_READ_ONLY: u32 = 1;
pub const tskMPU_REGION_READ_WRITE: u32 = 2;
pub const tskMPU_REGION_EXECUTE_NEVER: u32 = 4;
pub const tskMPU_REGION_NORMAL_MEMORY: u32 = 8;
pub const tskMPU_REGION_DEVICE_MEMORY: u32 = 16;
pub const tskDEFAULT_INDEX_TO_NOTIFY: u32 = 0;
pub const tskNO_AFFINITY: u32 = 2147483647;
pub const _CLOCKS_PER_SEC_: u32 = 1000000;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const CLK_TCK: u32 = 1000000;
pub const SIGEV_NONE: u32 = 1;
pub const SIGEV_SIGNAL: u32 = 2;
pub const SIGEV_THREAD: u32 = 3;
pub const SI_USER: u32 = 1;
pub const SI_QUEUE: u32 = 2;
pub const SI_TIMER: u32 = 3;
pub const SI_ASYNCIO: u32 = 4;
pub const SI_MESGQ: u32 = 5;
pub const SA_NOCLDSTOP: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 2;
pub const SIG_SETMASK: u32 = 0;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGIOT: u32 = 6;
pub const SIGABRT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGCLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGLOST: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const NSIG: u32 = 32;
pub const CLOCK_ENABLED: u32 = 1;
pub const CLOCK_DISABLED: u32 = 0;
pub const CLOCK_ALLOWED: u32 = 1;
pub const CLOCK_DISALLOWED: u32 = 0;
pub const TIMER_ABSTIME: u32 = 4;
pub const ARG_REX_ICASE: u32 = 1;
pub const ETS_SIG_LEN: u32 = 384;
pub const ETS_DIGEST_LEN: u32 = 32;
pub const CRC_SIGN_BLOCK_LEN: u32 = 1196;
pub const SIG_BLOCK_PADDING: u32 = 4096;
pub const ETS_SECURE_BOOT_V2_SIGNATURE_MAGIC: u32 = 231;
pub const SECURE_BOOT_NUM_BLOCKS: u32 = 3;
pub const MAX_KEY_DIGESTS: u32 = 3;
pub const ESP_ERR_EFUSE: i32 = 5632;
pub const ESP_OK_EFUSE_CNT: u32 = 5633;
pub const ESP_ERR_EFUSE_CNT_IS_FULL: i32 = 5634;
pub const ESP_ERR_EFUSE_REPEATED_PROG: i32 = 5635;
pub const ESP_ERR_CODING: i32 = 5636;
pub const ESP_ERR_NOT_ENOUGH_UNUSED_KEY_BLOCKS: i32 = 5637;
pub const ESP_ERR_DAMAGED_READING: i32 = 5638;
pub const MHZ: u32 = 1000000;
pub const RTC_SLOW_CLK_FREQ_150K: u32 = 150000;
pub const RTC_SLOW_CLK_FREQ_32K: u32 = 32768;
pub const OTHER_BLOCKS_POWERUP: u32 = 1;
pub const OTHER_BLOCKS_WAIT: u32 = 1;
pub const RTC_CNTL_DBIAS_SLP: u32 = 5;
pub const RTC_CNTL_DBIAS_0V90: u32 = 13;
pub const RTC_CNTL_DBIAS_0V95: u32 = 16;
pub const RTC_CNTL_DBIAS_1V00: u32 = 18;
pub const RTC_CNTL_DBIAS_1V05: u32 = 20;
pub const RTC_CNTL_DBIAS_1V10: u32 = 23;
pub const RTC_CNTL_DBIAS_1V15: u32 = 25;
pub const RTC_CNTL_DBIAS_1V20: u32 = 28;
pub const RTC_CNTL_DBIAS_1V25: u32 = 30;
pub const RTC_CNTL_DBIAS_1V30: u32 = 31;
pub const DELAY_FAST_CLK_SWITCH: u32 = 3;
pub const DELAY_SLOW_CLK_SWITCH: u32 = 300;
pub const DELAY_8M_ENABLE: u32 = 50;
pub const XTAL_FREQ_EST_CYCLES: u32 = 10;
pub const DIG_DBIAS_80M: u32 = 28;
pub const DIG_DBIAS_160M: u32 = 28;
pub const DIG_DBIAS_XTAL: u32 = 23;
pub const DIG_DBIAS_2M: u32 = 18;
pub const RTC_CNTL_PLL_BUF_WAIT_DEFAULT: u32 = 20;
pub const RTC_CNTL_XTL_BUF_WAIT_DEFAULT: u32 = 100;
pub const RTC_CNTL_CK8M_WAIT_DEFAULT: u32 = 20;
pub const RTC_CK8M_ENABLE_WAIT_DEFAULT: u32 = 5;
pub const RTC_CNTL_CK8M_DFREQ_DEFAULT: u32 = 100;
pub const RTC_CNTL_SCK_DCAP_DEFAULT: u32 = 255;
pub const RTC_CNTL_XTL_BUF_WAIT_SLP_US: u32 = 250;
pub const RTC_CNTL_PLL_BUF_WAIT_SLP_CYCLES: u32 = 1;
pub const RTC_CNTL_CK8M_WAIT_SLP_CYCLES: u32 = 4;
pub const RTC_CNTL_WAKEUP_DELAY_CYCLES: u32 = 5;
pub const RTC_CNTL_OTHER_BLOCKS_POWERUP_CYCLES: u32 = 1;
pub const RTC_CNTL_OTHER_BLOCKS_WAIT_CYCLES: u32 = 1;
pub const RTC_CNTL_DBG_ATTEN_LIGHTSLEEP_DEFAULT: u32 = 5;
pub const RTC_CNTL_DBG_ATTEN_LIGHTSLEEP_NODROP: u32 = 0;
pub const RTC_CNTL_DBG_ATTEN_DEEPSLEEP_DEFAULT: u32 = 15;
pub const RTC_CNTL_DBG_ATTEN_MONITOR_DEFAULT: u32 = 0;
pub const RTC_CNTL_BIASSLP_MONITOR_DEFAULT: u32 = 0;
pub const RTC_CNTL_BIASSLP_SLEEP_ON: u32 = 0;
pub const RTC_CNTL_BIASSLP_SLEEP_DEFAULT: u32 = 1;
pub const RTC_CNTL_PD_CUR_MONITOR_DEFAULT: u32 = 0;
pub const RTC_CNTL_PD_CUR_SLEEP_ON: u32 = 0;
pub const RTC_CNTL_PD_CUR_SLEEP_DEFAULT: u32 = 1;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP_DEFAULT: u32 = 254;
pub const K_RTC_MID_MUL10000: u32 = 215;
pub const K_DIG_MID_MUL10000: u32 = 213;
pub const V_RTC_MID_MUL10000: u32 = 10800;
pub const V_DIG_MID_MUL10000: u32 = 10860;
pub const RTC_FAST_CLK_FREQ_APPROX: u32 = 8500000;
pub const RTC_CLK_CAL_FRACT: u32 = 19;
pub const RTC_VDDSDIO_TIEH_1_8V: u32 = 0;
pub const RTC_VDDSDIO_TIEH_3_3V: u32 = 1;
pub const ESP_ERR_FLASH_OP_FAIL: i32 = 24577;
pub const ESP_ERR_FLASH_OP_TIMEOUT: i32 = 24578;
pub const SPI_FLASH_SEC_SIZE: u32 = 4096;
pub const SPI_FLASH_MMU_PAGE_SIZE: u32 = 65536;
pub const ESP_ERR_FLASH_NOT_INITIALISED: i32 = 24579;
pub const ESP_ERR_FLASH_UNSUPPORTED_HOST: i32 = 24580;
pub const ESP_ERR_FLASH_UNSUPPORTED_CHIP: i32 = 24581;
pub const ESP_ERR_FLASH_PROTECTED: i32 = 24582;
pub const SPI_FLASH_OPI_FLAG: u32 = 16;
pub const ESP_INTR_FLAG_LEVEL1: u32 = 2;
pub const ESP_INTR_FLAG_LEVEL2: u32 = 4;
pub const ESP_INTR_FLAG_LEVEL3: u32 = 8;
pub const ESP_INTR_FLAG_LEVEL4: u32 = 16;
pub const ESP_INTR_FLAG_LEVEL5: u32 = 32;
pub const ESP_INTR_FLAG_LEVEL6: u32 = 64;
pub const ESP_INTR_FLAG_NMI: u32 = 128;
pub const ESP_INTR_FLAG_SHARED: u32 = 256;
pub const ESP_INTR_FLAG_EDGE: u32 = 512;
pub const ESP_INTR_FLAG_IRAM: u32 = 1024;
pub const ESP_INTR_FLAG_INTRDISABLED: u32 = 2048;
pub const ESP_INTR_FLAG_LOWMED: u32 = 14;
pub const ESP_INTR_FLAG_HIGH: u32 = 240;
pub const ESP_INTR_FLAG_LEVELMASK: u32 = 254;
pub const ETS_INTERNAL_TIMER0_INTR_SOURCE: i32 = -1;
pub const ETS_INTERNAL_TIMER1_INTR_SOURCE: i32 = -2;
pub const ETS_INTERNAL_TIMER2_INTR_SOURCE: i32 = -3;
pub const ETS_INTERNAL_SW0_INTR_SOURCE: i32 = -4;
pub const ETS_INTERNAL_SW1_INTR_SOURCE: i32 = -5;
pub const ETS_INTERNAL_PROFILING_INTR_SOURCE: i32 = -6;
pub const ETS_INTERNAL_INTR_SOURCE_OFF: u32 = 6;
pub const GPIO_ID_PIN0: u32 = 0;
pub const GPIO_FUNC_IN_HIGH: u32 = 56;
pub const GPIO_FUNC_IN_LOW: u32 = 60;
pub const GPIO_PIN_COUNT: u32 = 22;
pub const ESP_EVENT_ANY_ID: i32 = -1;
pub const WIFI_OFFCHAN_TX_REQ: u32 = 1;
pub const WIFI_OFFCHAN_TX_CANCEL: u32 = 0;
pub const WIFI_ROC_REQ: u32 = 1;
pub const WIFI_ROC_CANCEL: u32 = 0;
pub const WIFI_PROTOCOL_11B: u32 = 1;
pub const WIFI_PROTOCOL_11G: u32 = 2;
pub const WIFI_PROTOCOL_11N: u32 = 4;
pub const WIFI_PROTOCOL_LR: u32 = 8;
pub const ESP_WIFI_MAX_CONN_NUM: u32 = 10;
pub const WIFI_VENDOR_IE_ELEMENT_ID: u32 = 221;
pub const WIFI_PROMIS_FILTER_MASK_ALL: u32 = 4294967295;
pub const WIFI_PROMIS_FILTER_MASK_MGMT: u32 = 1;
pub const WIFI_PROMIS_FILTER_MASK_CTRL: u32 = 2;
pub const WIFI_PROMIS_FILTER_MASK_DATA: u32 = 4;
pub const WIFI_PROMIS_FILTER_MASK_MISC: u32 = 8;
pub const WIFI_PROMIS_FILTER_MASK_DATA_MPDU: u32 = 16;
pub const WIFI_PROMIS_FILTER_MASK_DATA_AMPDU: u32 = 32;
pub const WIFI_PROMIS_FILTER_MASK_FCSFAIL: u32 = 64;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_ALL: u32 = 4286578688;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_WRAPPER: u32 = 8388608;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_BAR: u32 = 16777216;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_BA: u32 = 33554432;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_PSPOLL: u32 = 67108864;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_RTS: u32 = 134217728;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_CTS: u32 = 268435456;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_ACK: u32 = 536870912;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_CFEND: u32 = 1073741824;
pub const WIFI_PROMIS_CTRL_FILTER_MASK_CFENDACK: u32 = 2147483648;
pub const WIFI_EVENT_MASK_ALL: u32 = 4294967295;
pub const WIFI_EVENT_MASK_NONE: u32 = 0;
pub const MAX_SSID_LEN: u32 = 32;
pub const MAX_PASSPHRASE_LEN: u32 = 64;
pub const MAX_WPS_AP_CRED: u32 = 3;
pub const WIFI_STATIS_BUFFER: u32 = 1;
pub const WIFI_STATIS_RXTX: u32 = 2;
pub const WIFI_STATIS_HW: u32 = 4;
pub const WIFI_STATIS_DIAG: u32 = 8;
pub const WIFI_STATIS_PS: u32 = 16;
pub const WIFI_STATIS_ALL: i32 = -1;
pub const IPSTR: &[u8; 12usize] = b"%d.%d.%d.%d\0";
pub const IPV6STR: &[u8; 40usize] = b"%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\0";
pub const ESP_IPADDR_TYPE_V4: u32 = 0;
pub const ESP_IPADDR_TYPE_V6: u32 = 6;
pub const ESP_IPADDR_TYPE_ANY: u32 = 46;
pub const ESP_ERR_ESP_NETIF_BASE: i32 = 20480;
pub const ESP_ERR_ESP_NETIF_INVALID_PARAMS: i32 = 20481;
pub const ESP_ERR_ESP_NETIF_IF_NOT_READY: i32 = 20482;
pub const ESP_ERR_ESP_NETIF_DHCPC_START_FAILED: i32 = 20483;
pub const ESP_ERR_ESP_NETIF_DHCP_ALREADY_STARTED: i32 = 20484;
pub const ESP_ERR_ESP_NETIF_DHCP_ALREADY_STOPPED: i32 = 20485;
pub const ESP_ERR_ESP_NETIF_NO_MEM: i32 = 20486;
pub const ESP_ERR_ESP_NETIF_DHCP_NOT_STOPPED: i32 = 20487;
pub const ESP_ERR_ESP_NETIF_DRIVER_ATTACH_FAILED: i32 = 20488;
pub const ESP_ERR_ESP_NETIF_INIT_FAILED: i32 = 20489;
pub const ESP_ERR_ESP_NETIF_DNS_NOT_CONFIGURED: i32 = 20490;
pub const ESP_ERR_ESP_NETIF_MLD6_FAILED: i32 = 20491;
pub const ESP_ERR_ESP_NETIF_IP6_ADDR_FAILED: i32 = 20492;
pub const ETH_CRC_LEN: u32 = 4;
pub const ETH_MAX_PAYLOAD_LEN: u32 = 1500;
pub const ETH_MIN_PAYLOAD_LEN: u32 = 46;
pub const ETH_HEADER_LEN: u32 = 14;
pub const ETH_VLAN_TAG_LEN: u32 = 4;
pub const ETH_JUMBO_FRAME_PAYLOAD_LEN: u32 = 9000;
pub const ETH_MAX_PACKET_SIZE: u32 = 1522;
pub const ETH_MIN_PACKET_SIZE: u32 = 64;
pub const ETH_MAC_FLAG_WORK_WITH_CACHE_DISABLE: u32 = 1;
pub const ETH_MAC_FLAG_PIN_TO_CORE: u32 = 2;
pub const ESP_ETH_PHY_ADDR_AUTO: i32 = -1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const F_OK: u32 = 0;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _SC_ARG_MAX: u32 = 0;
pub const _SC_CHILD_MAX: u32 = 1;
pub const _SC_CLK_TCK: u32 = 2;
pub const _SC_NGROUPS_MAX: u32 = 3;
pub const _SC_OPEN_MAX: u32 = 4;
pub const _SC_JOB_CONTROL: u32 = 5;
pub const _SC_SAVED_IDS: u32 = 6;
pub const _SC_VERSION: u32 = 7;
pub const _SC_PAGESIZE: u32 = 8;
pub const _SC_PAGE_SIZE: u32 = 8;
pub const _SC_NPROCESSORS_CONF: u32 = 9;
pub const _SC_NPROCESSORS_ONLN: u32 = 10;
pub const _SC_PHYS_PAGES: u32 = 11;
pub const _SC_AVPHYS_PAGES: u32 = 12;
pub const _SC_MQ_OPEN_MAX: u32 = 13;
pub const _SC_MQ_PRIO_MAX: u32 = 14;
pub const _SC_RTSIG_MAX: u32 = 15;
pub const _SC_SEM_NSEMS_MAX: u32 = 16;
pub const _SC_SEM_VALUE_MAX: u32 = 17;
pub const _SC_SIGQUEUE_MAX: u32 = 18;
pub const _SC_TIMER_MAX: u32 = 19;
pub const _SC_TZNAME_MAX: u32 = 20;
pub const _SC_ASYNCHRONOUS_IO: u32 = 21;
pub const _SC_FSYNC: u32 = 22;
pub const _SC_MAPPED_FILES: u32 = 23;
pub const _SC_MEMLOCK: u32 = 24;
pub const _SC_MEMLOCK_RANGE: u32 = 25;
pub const _SC_MEMORY_PROTECTION: u32 = 26;
pub const _SC_MESSAGE_PASSING: u32 = 27;
pub const _SC_PRIORITIZED_IO: u32 = 28;
pub const _SC_REALTIME_SIGNALS: u32 = 29;
pub const _SC_SEMAPHORES: u32 = 30;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 31;
pub const _SC_SYNCHRONIZED_IO: u32 = 32;
pub const _SC_TIMERS: u32 = 33;
pub const _SC_AIO_LISTIO_MAX: u32 = 34;
pub const _SC_AIO_MAX: u32 = 35;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 36;
pub const _SC_DELAYTIMER_MAX: u32 = 37;
pub const _SC_THREAD_KEYS_MAX: u32 = 38;
pub const _SC_THREAD_STACK_MIN: u32 = 39;
pub const _SC_THREAD_THREADS_MAX: u32 = 40;
pub const _SC_TTY_NAME_MAX: u32 = 41;
pub const _SC_THREADS: u32 = 42;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 43;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 44;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 45;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 46;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 47;
pub const _SC_THREAD_PRIO_CEILING: u32 = 47;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 48;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 49;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 50;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 51;
pub const _SC_LOGIN_NAME_MAX: u32 = 52;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 53;
pub const _SC_ADVISORY_INFO: u32 = 54;
pub const _SC_ATEXIT_MAX: u32 = 55;
pub const _SC_BARRIERS: u32 = 56;
pub const _SC_BC_BASE_MAX: u32 = 57;
pub const _SC_BC_DIM_MAX: u32 = 58;
pub const _SC_BC_SCALE_MAX: u32 = 59;
pub const _SC_BC_STRING_MAX: u32 = 60;
pub const _SC_CLOCK_SELECTION: u32 = 61;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 62;
pub const _SC_CPUTIME: u32 = 63;
pub const _SC_EXPR_NEST_MAX: u32 = 64;
pub const _SC_HOST_NAME_MAX: u32 = 65;
pub const _SC_IOV_MAX: u32 = 66;
pub const _SC_IPV6: u32 = 67;
pub const _SC_LINE_MAX: u32 = 68;
pub const _SC_MONOTONIC_CLOCK: u32 = 69;
pub const _SC_RAW_SOCKETS: u32 = 70;
pub const _SC_READER_WRITER_LOCKS: u32 = 71;
pub const _SC_REGEXP: u32 = 72;
pub const _SC_RE_DUP_MAX: u32 = 73;
pub const _SC_SHELL: u32 = 74;
pub const _SC_SPAWN: u32 = 75;
pub const _SC_SPIN_LOCKS: u32 = 76;
pub const _SC_SPORADIC_SERVER: u32 = 77;
pub const _SC_SS_REPL_MAX: u32 = 78;
pub const _SC_SYMLOOP_MAX: u32 = 79;
pub const _SC_THREAD_CPUTIME: u32 = 80;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 81;
pub const _SC_TIMEOUTS: u32 = 82;
pub const _SC_TRACE: u32 = 83;
pub const _SC_TRACE_EVENT_FILTER: u32 = 84;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 85;
pub const _SC_TRACE_INHERIT: u32 = 86;
pub const _SC_TRACE_LOG: u32 = 87;
pub const _SC_TRACE_NAME_MAX: u32 = 88;
pub const _SC_TRACE_SYS_MAX: u32 = 89;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 90;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 91;
pub const _SC_V7_ILP32_OFF32: u32 = 92;
pub const _SC_V6_ILP32_OFF32: u32 = 92;
pub const _SC_XBS5_ILP32_OFF32: u32 = 92;
pub const _SC_V7_ILP32_OFFBIG: u32 = 93;
pub const _SC_V6_ILP32_OFFBIG: u32 = 93;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 93;
pub const _SC_V7_LP64_OFF64: u32 = 94;
pub const _SC_V6_LP64_OFF64: u32 = 94;
pub const _SC_XBS5_LP64_OFF64: u32 = 94;
pub const _SC_V7_LPBIG_OFFBIG: u32 = 95;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 95;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 95;
pub const _SC_XOPEN_CRYPT: u32 = 96;
pub const _SC_XOPEN_ENH_I18N: u32 = 97;
pub const _SC_XOPEN_LEGACY: u32 = 98;
pub const _SC_XOPEN_REALTIME: u32 = 99;
pub const _SC_STREAM_MAX: u32 = 100;
pub const _SC_PRIORITY_SCHEDULING: u32 = 101;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 102;
pub const _SC_XOPEN_SHM: u32 = 103;
pub const _SC_XOPEN_STREAMS: u32 = 104;
pub const _SC_XOPEN_UNIX: u32 = 105;
pub const _SC_XOPEN_VERSION: u32 = 106;
pub const _SC_2_CHAR_TERM: u32 = 107;
pub const _SC_2_C_BIND: u32 = 108;
pub const _SC_2_C_DEV: u32 = 109;
pub const _SC_2_FORT_DEV: u32 = 110;
pub const _SC_2_FORT_RUN: u32 = 111;
pub const _SC_2_LOCALEDEF: u32 = 112;
pub const _SC_2_PBS: u32 = 113;
pub const _SC_2_PBS_ACCOUNTING: u32 = 114;
pub const _SC_2_PBS_CHECKPOINT: u32 = 115;
pub const _SC_2_PBS_LOCATE: u32 = 116;
pub const _SC_2_PBS_MESSAGE: u32 = 117;
pub const _SC_2_PBS_TRACK: u32 = 118;
pub const _SC_2_SW_DEV: u32 = 119;
pub const _SC_2_UPE: u32 = 120;
pub const _SC_2_VERSION: u32 = 121;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: u32 = 122;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: u32 = 123;
pub const _SC_XOPEN_UUCP: u32 = 124;
pub const _SC_LEVEL1_ICACHE_SIZE: u32 = 125;
pub const _SC_LEVEL1_ICACHE_ASSOC: u32 = 126;
pub const _SC_LEVEL1_ICACHE_LINESIZE: u32 = 127;
pub const _SC_LEVEL1_DCACHE_SIZE: u32 = 128;
pub const _SC_LEVEL1_DCACHE_ASSOC: u32 = 129;
pub const _SC_LEVEL1_DCACHE_LINESIZE: u32 = 130;
pub const _SC_LEVEL2_CACHE_SIZE: u32 = 131;
pub const _SC_LEVEL2_CACHE_ASSOC: u32 = 132;
pub const _SC_LEVEL2_CACHE_LINESIZE: u32 = 133;
pub const _SC_LEVEL3_CACHE_SIZE: u32 = 134;
pub const _SC_LEVEL3_CACHE_ASSOC: u32 = 135;
pub const _SC_LEVEL3_CACHE_LINESIZE: u32 = 136;
pub const _SC_LEVEL4_CACHE_SIZE: u32 = 137;
pub const _SC_LEVEL4_CACHE_ASSOC: u32 = 138;
pub const _SC_LEVEL4_CACHE_LINESIZE: u32 = 139;
pub const _SC_POSIX_26_VERSION: u32 = 140;
pub const _PC_LINK_MAX: u32 = 0;
pub const _PC_MAX_CANON: u32 = 1;
pub const _PC_MAX_INPUT: u32 = 2;
pub const _PC_NAME_MAX: u32 = 3;
pub const _PC_PATH_MAX: u32 = 4;
pub const _PC_PIPE_BUF: u32 = 5;
pub const _PC_CHOWN_RESTRICTED: u32 = 6;
pub const _PC_NO_TRUNC: u32 = 7;
pub const _PC_VDISABLE: u32 = 8;
pub const _PC_ASYNC_IO: u32 = 9;
pub const _PC_PRIO_IO: u32 = 10;
pub const _PC_SYNC_IO: u32 = 11;
pub const _PC_FILESIZEBITS: u32 = 12;
pub const _PC_2_SYMLINKS: u32 = 13;
pub const _PC_SYMLINK_MAX: u32 = 14;
pub const _PC_ALLOC_SIZE_MIN: u32 = 15;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 16;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 17;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 18;
pub const _PC_REC_XFER_ALIGN: u32 = 19;
pub const _PC_TIMESTAMP_RESOLUTION: u32 = 20;
pub const _FOPEN: i32 = -1;
pub const _FREAD: u32 = 1;
pub const _FWRITE: u32 = 2;
pub const _FAPPEND: u32 = 8;
pub const _FMARK: u32 = 16;
pub const _FDEFER: u32 = 32;
pub const _FASYNC: u32 = 64;
pub const _FSHLOCK: u32 = 128;
pub const _FEXLOCK: u32 = 256;
pub const _FCREAT: u32 = 512;
pub const _FTRUNC: u32 = 1024;
pub const _FEXCL: u32 = 2048;
pub const _FNBIO: u32 = 4096;
pub const _FSYNC: u32 = 8192;
pub const _FNONBLOCK: u32 = 16384;
pub const _FNDELAY: u32 = 16384;
pub const _FNOCTTY: u32 = 32768;
pub const _FNOINHERIT: u32 = 262144;
pub const _FDIRECT: u32 = 524288;
pub const _FNOFOLLOW: u32 = 1048576;
pub const _FDIRECTORY: u32 = 2097152;
pub const _FEXECSRCH: u32 = 4194304;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_APPEND: u32 = 8;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_SYNC: u32 = 8192;
pub const O_NONBLOCK: u32 = 16384;
pub const O_NOCTTY: u32 = 32768;
pub const O_CLOEXEC: u32 = 262144;
pub const O_NOFOLLOW: u32 = 1048576;
pub const O_DIRECTORY: u32 = 2097152;
pub const O_EXEC: u32 = 4194304;
pub const O_SEARCH: u32 = 4194304;
pub const O_DIRECT: u32 = 524288;
pub const FAPPEND: u32 = 8;
pub const FSYNC: u32 = 8192;
pub const FASYNC: u32 = 64;
pub const FNBIO: u32 = 4096;
pub const FNONBIO: u32 = 16384;
pub const FNDELAY: u32 = 16384;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const FMARK: u32 = 16;
pub const FDEFER: u32 = 32;
pub const FSHLOCK: u32 = 128;
pub const FEXLOCK: u32 = 256;
pub const FOPEN: i32 = -1;
pub const FCREAT: u32 = 512;
pub const FTRUNC: u32 = 1024;
pub const FEXCL: u32 = 2048;
pub const FNOCTTY: u32 = 32768;
pub const FNONBLOCK: u32 = 16384;
pub const FD_CLOEXEC: u32 = 1;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_RGETLK: u32 = 10;
pub const F_RSETLK: u32 = 11;
pub const F_CNVT: u32 = 12;
pub const F_RSETLKW: u32 = 13;
pub const F_DUPFD_CLOEXEC: u32 = 14;
pub const F_RDLCK: u32 = 1;
pub const F_WRLCK: u32 = 2;
pub const F_UNLCK: u32 = 3;
pub const F_UNLKSYS: u32 = 4;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 1;
pub const AT_SYMLINK_NOFOLLOW: u32 = 2;
pub const AT_SYMLINK_FOLLOW: u32 = 4;
pub const AT_REMOVEDIR: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const _IFMT: u32 = 61440;
pub const _IFDIR: u32 = 16384;
pub const _IFCHR: u32 = 8192;
pub const _IFBLK: u32 = 24576;
pub const _IFREG: u32 = 32768;
pub const _IFLNK: u32 = 40960;
pub const _IFSOCK: u32 = 49152;
pub const _IFIFO: u32 = 4096;
pub const S_BLKSIZE: u32 = 1024;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_ENFMT: u32 = 1024;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFIFO: u32 = 4096;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const DEFFILEMODE: u32 = 438;
pub const SYS_LIGHTWEIGHT_PROT: u32 = 1;
pub const MEM_LIBC_MALLOC: u32 = 1;
pub const MEMP_MEM_MALLOC: u32 = 1;
pub const MEM_ALIGNMENT: u32 = 4;
pub const MEMP_NUM_NETCONN: u32 = 10;
pub const MEMP_NUM_RAW_PCB: u32 = 16;
pub const MEMP_NUM_TCP_PCB: u32 = 16;
pub const MEMP_NUM_TCP_PCB_LISTEN: u32 = 16;
pub const MEMP_NUM_UDP_PCB: u32 = 16;
pub const ARP_QUEUEING: u32 = 1;
pub const IP_FRAG: u32 = 1;
pub const LWIP_IPV6_FRAG: u32 = 1;
pub const IP_REASS_MAXAGE: u32 = 3;
pub const IP_REASS_MAX_PBUFS: u32 = 10;
pub const LWIP_ICMP: u32 = 1;
pub const LWIP_RAW: u32 = 1;
pub const LWIP_DHCP: u32 = 1;
pub const DHCP_MAXRTX: u32 = 0;
pub const DHCP_DOES_ARP_CHECK: u32 = 1;
pub const DHCP_OPTIONS_LEN: u32 = 68;
pub const ESP_DHCP_DISABLE_VENDOR_CLASS_IDENTIFIER: u32 = 1;
pub const LWIP_IGMP: u32 = 1;
pub const LWIP_DNS: u32 = 1;
pub const DNS_MAX_SERVERS: u32 = 3;
pub const DNS_FALLBACK_SERVER_INDEX: u32 = 2;
pub const TCP_QUEUE_OOSEQ: u32 = 1;
pub const TCP_MSS: u32 = 1440;
pub const TCP_TMR_INTERVAL: u32 = 250;
pub const TCP_MSL: u32 = 60000;
pub const TCP_MAXRTX: u32 = 12;
pub const TCP_SYNMAXRTX: u32 = 12;
pub const TCP_LISTEN_BACKLOG: u32 = 1;
pub const TCP_OVERSIZE: u32 = 1440;
pub const LWIP_TCP_RTO_TIME: u32 = 1500;
pub const LWIP_NETIF_HOSTNAME: u32 = 1;
pub const LWIP_NETIF_TX_SINGLE_PBUF: u32 = 1;
pub const LWIP_NETIF_LOOPBACK: u32 = 1;
pub const LWIP_LOOPBACK_MAX_PBUFS: u32 = 8;
pub const TCPIP_THREAD_NAME: &[u8; 4usize] = b"tiT\0";
pub const TCPIP_THREAD_STACKSIZE: u32 = 3584;
pub const TCPIP_THREAD_PRIO: u32 = 18;
pub const TCPIP_MBOX_SIZE: u32 = 32;
pub const DEFAULT_UDP_RECVMBOX_SIZE: u32 = 6;
pub const DEFAULT_TCP_RECVMBOX_SIZE: u32 = 6;
pub const DEFAULT_ACCEPTMBOX_SIZE: u32 = 6;
pub const DEFAULT_THREAD_STACKSIZE: u32 = 3584;
pub const DEFAULT_THREAD_PRIO: u32 = 18;
pub const DEFAULT_RAW_RECVMBOX_SIZE: u32 = 6;
pub const LWIP_SO_SNDTIMEO: u32 = 1;
pub const LWIP_SO_RCVTIMEO: u32 = 1;
pub const LWIP_TCP_KEEPALIVE: u32 = 1;
pub const SO_REUSE: u32 = 1;
pub const LWIP_DNS_SUPPORT_MDNS_QUERIES: u32 = 1;
pub const SO_REUSE_RXTOALL: u32 = 1;
pub const LWIP_IPV6: u32 = 1;
pub const MEMP_NUM_ND6_QUEUE: u32 = 3;
pub const LWIP_ND6_NUM_NEIGHBORS: u32 = 5;
pub const LWIP_HOOK_FILENAME: &[u8; 21usize] = b"lwip_default_hooks.h\0";
pub const LWIP_POSIX_SOCKETS_IO_NAMES: u32 = 0;
pub const LWIP_SOCKET_OFFSET: u32 = 54;
pub const LWIP_IPV6_NUM_ADDRESSES: u32 = 3;
pub const ESP_LWIP: u32 = 1;
pub const ESP_LWIP_ARP: u32 = 1;
pub const ESP_PER_SOC_TCP_WND: u32 = 0;
pub const ESP_THREAD_SAFE: u32 = 1;
pub const ESP_DHCP: u32 = 1;
pub const ESP_DNS: u32 = 1;
pub const ESP_PERF: u32 = 0;
pub const ESP_RANDOM_TCP_PORT: u32 = 1;
pub const ESP_IP4_ATON: u32 = 1;
pub const ESP_LIGHT_SLEEP: u32 = 1;
pub const ESP_STATS_TCP: u32 = 0;
pub const ESP_DHCPS: u32 = 1;
pub const ESP_DHCPS_TIMER: u32 = 1;
pub const ESP_PING: u32 = 1;
pub const ESP_HAS_SELECT: u32 = 1;
pub const ESP_AUTO_RECV: u32 = 1;
pub const ESP_GRATUITOUS_ARP: u32 = 1;
pub const ESP_IP4_ROUTE: u32 = 1;
pub const ESP_AUTO_IP: u32 = 1;
pub const ESP_PBUF: u32 = 1;
pub const ESP_PPP: u32 = 1;
pub const ESP_IPV6: u32 = 1;
pub const ESP_SOCKET: u32 = 1;
pub const ESP_LWIP_SELECT: u32 = 1;
pub const ESP_LWIP_LOCK: u32 = 1;
pub const ESP_THREAD_PROTECTION: u32 = 1;
pub const ESP_IP_FORWARD: u32 = 1;
pub const ESP_LWIP_IGMP_TIMERS_ONDEMAND: u32 = 1;
pub const ESP_LWIP_MLD6_TIMERS_ONDEMAND: u32 = 1;
pub const TCP_SND_BUF: u32 = 5744;
pub const TCP_WND: u32 = 5744;
pub const CHECKSUM_CHECK_ICMP: u32 = 1;
pub const LWIP_NETCONN_FULLDUPLEX: u32 = 1;
pub const LWIP_NETCONN_SEM_PER_THREAD: u32 = 1;
pub const LWIP_TIMEVAL_PRIVATE: u32 = 0;
pub const SNTP_MAX_SERVERS: u32 = 1;
pub const SNTP_SERVER_DNS: u32 = 1;
pub const __error_t_defined: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const ENOMSG: u32 = 35;
pub const EIDRM: u32 = 36;
pub const EDEADLK: u32 = 45;
pub const ENOLCK: u32 = 46;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENOLINK: u32 = 67;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 74;
pub const EBADMSG: u32 = 77;
pub const EFTYPE: u32 = 79;
pub const ENOSYS: u32 = 88;
pub const ENOTEMPTY: u32 = 90;
pub const ENAMETOOLONG: u32 = 91;
pub const ELOOP: u32 = 92;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EAFNOSUPPORT: u32 = 106;
pub const EPROTOTYPE: u32 = 107;
pub const ENOTSOCK: u32 = 108;
pub const ENOPROTOOPT: u32 = 109;
pub const ECONNREFUSED: u32 = 111;
pub const EADDRINUSE: u32 = 112;
pub const ECONNABORTED: u32 = 113;
pub const ENETUNREACH: u32 = 114;
pub const ENETDOWN: u32 = 115;
pub const ETIMEDOUT: u32 = 116;
pub const EHOSTDOWN: u32 = 117;
pub const EHOSTUNREACH: u32 = 118;
pub const EINPROGRESS: u32 = 119;
pub const EALREADY: u32 = 120;
pub const EDESTADDRREQ: u32 = 121;
pub const EMSGSIZE: u32 = 122;
pub const EPROTONOSUPPORT: u32 = 123;
pub const EADDRNOTAVAIL: u32 = 125;
pub const ENETRESET: u32 = 126;
pub const EISCONN: u32 = 127;
pub const ENOTCONN: u32 = 128;
pub const ETOOMANYREFS: u32 = 129;
pub const EDQUOT: u32 = 132;
pub const ESTALE: u32 = 133;
pub const ENOTSUP: u32 = 134;
pub const EILSEQ: u32 = 138;
pub const EOVERFLOW: u32 = 139;
pub const ECANCELED: u32 = 140;
pub const ENOTRECOVERABLE: u32 = 141;
pub const EOWNERDEAD: u32 = 142;
pub const EWOULDBLOCK: u32 = 11;
pub const __ELASTERROR: u32 = 2000;
pub const ESHUTDOWN: u32 = 110;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const ERR_NEED_SCHED: u32 = 123;
pub const LWIP_COMPAT_MUTEX: u32 = 0;
pub const S16_F: &[u8; 2usize] = b"d\0";
pub const U16_F: &[u8; 2usize] = b"d\0";
pub const X16_F: &[u8; 2usize] = b"x\0";
pub const S32_F: &[u8; 2usize] = b"d\0";
pub const U32_F: &[u8; 2usize] = b"u\0";
pub const X32_F: &[u8; 2usize] = b"x\0";
pub const LWIP_NO_STDDEF_H: u32 = 0;
pub const LWIP_NO_STDINT_H: u32 = 0;
pub const LWIP_HAVE_INT64: u32 = 1;
pub const LWIP_NO_INTTYPES_H: u32 = 0;
pub const X8_F: &[u8; 3usize] = b"02\0";
pub const LWIP_NO_LIMITS_H: u32 = 0;
pub const LWIP_UINT32_MAX: u32 = 4294967295;
pub const LWIP_NO_CTYPE_H: u32 = 0;
pub const _U: u32 = 1;
pub const _L: u32 = 2;
pub const _N: u32 = 4;
pub const _S: u32 = 8;
pub const _P: u32 = 16;
pub const _C: u32 = 32;
pub const _X: u32 = 64;
pub const _B: u32 = 128;
pub const LWIP_DBG_LEVEL_ALL: u32 = 0;
pub const LWIP_DBG_LEVEL_WARNING: u32 = 1;
pub const LWIP_DBG_LEVEL_SERIOUS: u32 = 2;
pub const LWIP_DBG_LEVEL_SEVERE: u32 = 3;
pub const LWIP_DBG_MASK_LEVEL: u32 = 3;
pub const LWIP_DBG_LEVEL_OFF: u32 = 0;
pub const LWIP_DBG_ON: u32 = 128;
pub const LWIP_DBG_OFF: u32 = 0;
pub const LWIP_DBG_TRACE: u32 = 64;
pub const LWIP_DBG_STATE: u32 = 32;
pub const LWIP_DBG_FRESH: u32 = 16;
pub const LWIP_DBG_HALT: u32 = 8;
pub const NO_SYS: u32 = 0;
pub const LWIP_TIMERS: u32 = 1;
pub const LWIP_TIMERS_CUSTOM: u32 = 0;
pub const LWIP_MPU_COMPATIBLE: u32 = 0;
pub const LWIP_TCPIP_CORE_LOCKING_INPUT: u32 = 0;
pub const MEMP_MEM_INIT: u32 = 0;
pub const MEM_SIZE: u32 = 1600;
pub const MEMP_OVERFLOW_CHECK: u32 = 0;
pub const MEMP_SANITY_CHECK: u32 = 0;
pub const MEM_OVERFLOW_CHECK: u32 = 0;
pub const MEM_SANITY_CHECK: u32 = 0;
pub const MEM_USE_POOLS: u32 = 0;
pub const MEM_USE_POOLS_TRY_BIGGER_POOL: u32 = 0;
pub const MEMP_USE_CUSTOM_POOLS: u32 = 0;
pub const LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT: u32 = 0;
pub const MEMP_NUM_PBUF: u32 = 16;
pub const MEMP_NUM_TCP_SEG: u32 = 16;
pub const MEMP_NUM_ALTCP_PCB: u32 = 16;
pub const MEMP_NUM_REASSDATA: u32 = 5;
pub const MEMP_NUM_FRAG_PBUF: u32 = 15;
pub const MEMP_NUM_ARP_QUEUE: u32 = 30;
pub const MEMP_NUM_IGMP_GROUP: u32 = 8;
pub const MEMP_NUM_NETBUF: u32 = 2;
pub const MEMP_NUM_SELECT_CB: u32 = 4;
pub const MEMP_NUM_TCPIP_MSG_API: u32 = 8;
pub const MEMP_NUM_TCPIP_MSG_INPKT: u32 = 8;
pub const MEMP_NUM_NETDB: u32 = 1;
pub const MEMP_NUM_LOCALHOSTLIST: u32 = 1;
pub const PBUF_POOL_SIZE: u32 = 16;
pub const MEMP_NUM_API_MSG: u32 = 8;
pub const MEMP_NUM_DNS_API_MSG: u32 = 8;
pub const MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA: u32 = 8;
pub const MEMP_NUM_NETIFAPI_MSG: u32 = 8;
pub const LWIP_ARP: u32 = 1;
pub const ARP_TABLE_SIZE: u32 = 10;
pub const ARP_MAXAGE: u32 = 300;
pub const ARP_QUEUE_LEN: u32 = 3;
pub const ETHARP_SUPPORT_VLAN: u32 = 0;
pub const LWIP_ETHERNET: u32 = 1;
pub const ETH_PAD_SIZE: u32 = 0;
pub const ETHARP_SUPPORT_STATIC_ENTRIES: u32 = 0;
pub const LWIP_IPV4: u32 = 1;
pub const IP_OPTIONS_ALLOWED: u32 = 1;
pub const IP_DEFAULT_TTL: u32 = 255;
pub const IP_SOF_BROADCAST: u32 = 0;
pub const IP_SOF_BROADCAST_RECV: u32 = 0;
pub const IP_FORWARD_ALLOW_TX_ON_RX_NETIF: u32 = 0;
pub const ICMP_TTL: u32 = 255;
pub const RAW_TTL: u32 = 255;
pub const LWIP_DHCP_BOOTP_FILE: u32 = 0;
pub const LWIP_DHCP_GET_NTP_SRV: u32 = 0;
pub const LWIP_DHCP_MAX_DNS_SERVERS: u32 = 3;
pub const LWIP_AUTOIP: u32 = 0;
pub const LWIP_DHCP_AUTOIP_COOP: u32 = 0;
pub const ESP_IPV6_AUTOCONFIG: u32 = 0;
pub const LWIP_DHCP_AUTOIP_COOP_TRIES: u32 = 9;
pub const LWIP_MIB2_CALLBACKS: u32 = 0;
pub const DNS_TABLE_SIZE: u32 = 4;
pub const DNS_MAX_NAME_LENGTH: u32 = 256;
pub const DNS_MAX_RETRIES: u32 = 4;
pub const DNS_DOES_NAME_CHECK: u32 = 1;
pub const LWIP_DNS_SECURE_RAND_XID: u32 = 1;
pub const LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING: u32 = 2;
pub const LWIP_DNS_SECURE_RAND_SRC_PORT: u32 = 4;
pub const DNS_LOCAL_HOSTLIST: u32 = 0;
pub const DNS_LOCAL_HOSTLIST_IS_DYNAMIC: u32 = 0;
pub const LWIP_UDP: u32 = 1;
pub const LWIP_UDPLITE: u32 = 0;
pub const UDP_TTL: u32 = 255;
pub const LWIP_TCP: u32 = 1;
pub const TCP_TTL: u32 = 255;
pub const LWIP_TCP_MAX_SACK_NUM: u32 = 4;
pub const TCP_CALCULATE_EFF_SEND_MSS: u32 = 1;
pub const TCP_SND_QUEUELEN: u32 = 16;
pub const TCP_OOSEQ_MAX_BYTES: u32 = 0;
pub const TCP_OOSEQ_MAX_PBUFS: u32 = 0;
pub const TCP_DEFAULT_LISTEN_BACKLOG: u32 = 255;
pub const LWIP_TCP_TIMESTAMPS: u32 = 0;
pub const LWIP_EVENT_API: u32 = 0;
pub const LWIP_CALLBACK_API: u32 = 1;
pub const LWIP_WND_SCALE: u32 = 0;
pub const TCP_RCV_SCALE: u32 = 0;
pub const LWIP_TCP_PCB_NUM_EXT_ARGS: u32 = 0;
pub const LWIP_ALTCP: u32 = 0;
pub const LWIP_ALTCP_TLS: u32 = 0;
pub const PBUF_LINK_HLEN: u32 = 14;
pub const PBUF_LINK_ENCAPSULATION_HLEN: u32 = 0;
pub const LWIP_SINGLE_NETIF: u32 = 0;
pub const LWIP_NETIF_EXT_STATUS_CALLBACK: u32 = 0;
pub const LWIP_NETIF_LINK_CALLBACK: u32 = 0;
pub const LWIP_NETIF_REMOVE_CALLBACK: u32 = 0;
pub const LWIP_NETIF_HWADDRHINT: u32 = 0;
pub const LWIP_NUM_NETIF_CLIENT_DATA: u32 = 0;
pub const LWIP_LOOPIF_MULTICAST: u32 = 0;
pub const SLIPIF_THREAD_NAME: &[u8; 12usize] = b"slipif_loop\0";
pub const SLIPIF_THREAD_STACKSIZE: u32 = 0;
pub const SLIPIF_THREAD_PRIO: u32 = 1;
pub const DEFAULT_THREAD_NAME: &[u8; 5usize] = b"lwIP\0";
pub const LWIP_NETCONN: u32 = 1;
pub const LWIP_TCPIP_TIMEOUT: u32 = 0;
pub const LWIP_SOCKET: u32 = 1;
pub const LWIP_COMPAT_SOCKETS: u32 = 1;
pub const LWIP_SO_SNDRCVTIMEO_NONSTANDARD: u32 = 0;
pub const LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT: u32 = 20000;
pub const LWIP_FIONREAD_LINUXMODE: u32 = 0;
pub const LWIP_SOCKET_SELECT: u32 = 1;
pub const LWIP_SOCKET_POLL: u32 = 1;
pub const LINK_STATS: u32 = 0;
pub const ETHARP_STATS: u32 = 0;
pub const IP_STATS: u32 = 0;
pub const IPFRAG_STATS: u32 = 0;
pub const ICMP_STATS: u32 = 0;
pub const IGMP_STATS: u32 = 0;
pub const UDP_STATS: u32 = 0;
pub const TCP_STATS: u32 = 0;
pub const MEM_STATS: u32 = 0;
pub const MEMP_STATS: u32 = 0;
pub const SYS_STATS: u32 = 0;
pub const LWIP_STATS_DISPLAY: u32 = 0;
pub const IP6_STATS: u32 = 0;
pub const ICMP6_STATS: u32 = 0;
pub const IP6_FRAG_STATS: u32 = 0;
pub const MLD6_STATS: u32 = 0;
pub const ND6_STATS: u32 = 0;
pub const MIB2_STATS: u32 = 0;
pub const LWIP_CHECKSUM_CTRL_PER_NETIF: u32 = 0;
pub const CHECKSUM_GEN_IP: u32 = 1;
pub const CHECKSUM_GEN_UDP: u32 = 1;
pub const CHECKSUM_GEN_TCP: u32 = 1;
pub const CHECKSUM_GEN_ICMP: u32 = 1;
pub const CHECKSUM_GEN_ICMP6: u32 = 1;
pub const CHECKSUM_CHECK_TCP: u32 = 1;
pub const CHECKSUM_CHECK_ICMP6: u32 = 1;
pub const LWIP_CHECKSUM_ON_COPY: u32 = 0;
pub const IPV6_REASS_MAXAGE: u32 = 60;
pub const LWIP_IPV6_SCOPES_DEBUG: u32 = 0;
pub const LWIP_IPV6_SEND_ROUTER_SOLICIT: u32 = 1;
pub const LWIP_IPV6_AUTOCONFIG: u32 = 1;
pub const LWIP_IPV6_ADDRESS_LIFETIMES: u32 = 1;
pub const LWIP_IPV6_DUP_DETECT_ATTEMPTS: u32 = 1;
pub const LWIP_ICMP6: u32 = 1;
pub const LWIP_ICMP6_DATASIZE: u32 = 0;
pub const LWIP_ICMP6_HL: u32 = 255;
pub const LWIP_IPV6_MLD: u32 = 1;
pub const MEMP_NUM_MLD6_GROUP: u32 = 4;
pub const LWIP_ND6_QUEUEING: u32 = 1;
pub const ESP_ND6_QUEUEING: u32 = 1;
pub const LWIP_ND6_NUM_DESTINATIONS: u32 = 10;
pub const LWIP_ND6_NUM_PREFIXES: u32 = 5;
pub const LWIP_ND6_NUM_ROUTERS: u32 = 3;
pub const LWIP_ND6_MAX_MULTICAST_SOLICIT: u32 = 3;
pub const LWIP_ND6_MAX_UNICAST_SOLICIT: u32 = 3;
pub const LWIP_ND6_MAX_ANYCAST_DELAY_TIME: u32 = 1000;
pub const LWIP_ND6_MAX_NEIGHBOR_ADVERTISEMENT: u32 = 3;
pub const LWIP_ND6_REACHABLE_TIME: u32 = 30000;
pub const LWIP_ND6_RETRANS_TIMER: u32 = 1000;
pub const LWIP_ND6_DELAY_FIRST_PROBE_TIME: u32 = 5000;
pub const LWIP_ND6_ALLOW_RA_UPDATES: u32 = 1;
pub const LWIP_ND6_TCP_REACHABILITY_HINTS: u32 = 1;
pub const LWIP_IPV6_DHCP6_STATEFUL: u32 = 0;
pub const LWIP_DHCP6_GET_NTP_SRV: u32 = 0;
pub const LWIP_DHCP6_MAX_NTP_SERVERS: u32 = 1;
pub const LWIP_DHCP6_MAX_DNS_SERVERS: u32 = 3;
pub const LWIP_DBG_MIN_LEVEL: u32 = 0;
pub const LWIP_DBG_TYPES_ON: u32 = 128;
pub const API_MSG_DEBUG: u32 = 0;
pub const IGMP_DEBUG: u32 = 0;
pub const INET_DEBUG: u32 = 0;
pub const IP_REASS_DEBUG: u32 = 0;
pub const RAW_DEBUG: u32 = 0;
pub const MEM_DEBUG: u32 = 0;
pub const SYS_DEBUG: u32 = 0;
pub const TIMERS_DEBUG: u32 = 0;
pub const TCP_FR_DEBUG: u32 = 0;
pub const TCP_RTO_DEBUG: u32 = 0;
pub const TCP_CWND_DEBUG: u32 = 0;
pub const TCP_WND_DEBUG: u32 = 0;
pub const TCP_RST_DEBUG: u32 = 0;
pub const TCP_QLEN_DEBUG: u32 = 0;
pub const UDP_DEBUG: u32 = 0;
pub const SLIP_DEBUG: u32 = 0;
pub const AUTOIP_DEBUG: u32 = 0;
pub const DNS_DEBUG: u32 = 0;
pub const DHCP6_DEBUG: u32 = 0;
pub const LWIP_TESTMODE: u32 = 0;
pub const NAPT_DEBUG: u32 = 0;
pub const LWIP_PERF: u32 = 0;
pub const IP_CLASSA_NET: u32 = 4278190080;
pub const IP_CLASSA_NSHIFT: u32 = 24;
pub const IP_CLASSA_HOST: u32 = 16777215;
pub const IP_CLASSA_MAX: u32 = 128;
pub const IP_CLASSB_NET: u32 = 4294901760;
pub const IP_CLASSB_NSHIFT: u32 = 16;
pub const IP_CLASSB_HOST: u32 = 65535;
pub const IP_CLASSB_MAX: u32 = 65536;
pub const IP_CLASSC_NET: u32 = 4294967040;
pub const IP_CLASSC_NSHIFT: u32 = 8;
pub const IP_CLASSC_HOST: u32 = 255;
pub const IP_CLASSD_NET: u32 = 4026531840;
pub const IP_CLASSD_NSHIFT: u32 = 28;
pub const IP_CLASSD_HOST: u32 = 268435455;
pub const IP_LOOPBACKNET: u32 = 127;
pub const IP4ADDR_STRLEN_MAX: u32 = 16;
pub const IP6_NO_ZONE: u32 = 0;
pub const IPV6_CUSTOM_SCOPES: u32 = 0;
pub const IP6_MULTICAST_SCOPE_RESERVED: u32 = 0;
pub const IP6_MULTICAST_SCOPE_RESERVED0: u32 = 0;
pub const IP6_MULTICAST_SCOPE_INTERFACE_LOCAL: u32 = 1;
pub const IP6_MULTICAST_SCOPE_LINK_LOCAL: u32 = 2;
pub const IP6_MULTICAST_SCOPE_RESERVED3: u32 = 3;
pub const IP6_MULTICAST_SCOPE_ADMIN_LOCAL: u32 = 4;
pub const IP6_MULTICAST_SCOPE_SITE_LOCAL: u32 = 5;
pub const IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL: u32 = 8;
pub const IP6_MULTICAST_SCOPE_GLOBAL: u32 = 14;
pub const IP6_MULTICAST_SCOPE_RESERVEDF: u32 = 15;
pub const IP6_ADDR_INVALID: u32 = 0;
pub const IP6_ADDR_TENTATIVE: u32 = 8;
pub const IP6_ADDR_TENTATIVE_1: u32 = 9;
pub const IP6_ADDR_TENTATIVE_2: u32 = 10;
pub const IP6_ADDR_TENTATIVE_3: u32 = 11;
pub const IP6_ADDR_TENTATIVE_4: u32 = 12;
pub const IP6_ADDR_TENTATIVE_5: u32 = 13;
pub const IP6_ADDR_TENTATIVE_6: u32 = 14;
pub const IP6_ADDR_TENTATIVE_7: u32 = 15;
pub const IP6_ADDR_VALID: u32 = 16;
pub const IP6_ADDR_PREFERRED: u32 = 48;
pub const IP6_ADDR_DEPRECATED: u32 = 16;
pub const IP6_ADDR_DUPLICATED: u32 = 64;
pub const IP6_ADDR_TENTATIVE_COUNT_MASK: u32 = 7;
pub const IP6_ADDR_LIFE_STATIC: u32 = 0;
pub const IP6_ADDR_LIFE_INFINITE: u32 = 4294967295;
pub const IP6ADDR_STRLEN_MAX: u32 = 46;
pub const IPADDR_STRLEN_MAX: u32 = 46;
pub const DHCPS_COARSE_TIMER_SECS: u32 = 1;
pub const DHCPS_MAX_LEASE: u32 = 100;
pub const DHCPS_LEASE_TIME_DEF: u32 = 120;
pub const DHCPS_LEASE_UNIT: u32 = 60;
pub const ESP_ERR_TCPIP_ADAPTER_INVALID_PARAMS: i32 = 20481;
pub const ESP_ERR_TCPIP_ADAPTER_IF_NOT_READY: i32 = 20482;
pub const ESP_ERR_TCPIP_ADAPTER_DHCPC_START_FAILED: i32 = 20483;
pub const ESP_ERR_TCPIP_ADAPTER_DHCP_ALREADY_STARTED: i32 = 20484;
pub const ESP_ERR_TCPIP_ADAPTER_DHCP_ALREADY_STOPPED: i32 = 20485;
pub const ESP_ERR_TCPIP_ADAPTER_NO_MEM: i32 = 20486;
pub const ESP_ERR_TCPIP_ADAPTER_DHCP_NOT_STOPPED: i32 = 20487;
pub const ESP_WIFI_CRYPTO_VERSION: u32 = 1;
pub const ESP_WIFI_OS_ADAPTER_VERSION: u32 = 8;
pub const ESP_WIFI_OS_ADAPTER_MAGIC: u32 = 3735928495;
pub const OSI_FUNCS_TIME_BLOCKING: u32 = 4294967295;
pub const OSI_QUEUE_SEND_FRONT: u32 = 0;
pub const OSI_QUEUE_SEND_BACK: u32 = 1;
pub const OSI_QUEUE_SEND_OVERWRITE: u32 = 2;
pub const ESP_ERR_WIFI_NOT_INIT: i32 = 12289;
pub const ESP_ERR_WIFI_NOT_STARTED: i32 = 12290;
pub const ESP_ERR_WIFI_NOT_STOPPED: i32 = 12291;
pub const ESP_ERR_WIFI_IF: i32 = 12292;
pub const ESP_ERR_WIFI_MODE: i32 = 12293;
pub const ESP_ERR_WIFI_STATE: i32 = 12294;
pub const ESP_ERR_WIFI_CONN: i32 = 12295;
pub const ESP_ERR_WIFI_NVS: i32 = 12296;
pub const ESP_ERR_WIFI_MAC: i32 = 12297;
pub const ESP_ERR_WIFI_SSID: i32 = 12298;
pub const ESP_ERR_WIFI_PASSWORD: i32 = 12299;
pub const ESP_ERR_WIFI_TIMEOUT: i32 = 12300;
pub const ESP_ERR_WIFI_WAKE_FAIL: i32 = 12301;
pub const ESP_ERR_WIFI_WOULD_BLOCK: i32 = 12302;
pub const ESP_ERR_WIFI_NOT_CONNECT: i32 = 12303;
pub const ESP_ERR_WIFI_POST: i32 = 12306;
pub const ESP_ERR_WIFI_INIT_STATE: i32 = 12307;
pub const ESP_ERR_WIFI_STOP_STATE: i32 = 12308;
pub const ESP_ERR_WIFI_NOT_ASSOC: i32 = 12309;
pub const ESP_ERR_WIFI_TX_DISALLOW: i32 = 12310;
pub const WIFI_STATIC_TX_BUFFER_NUM: u32 = 0;
pub const WIFI_CACHE_TX_BUFFER_NUM: u32 = 0;
pub const WIFI_DYNAMIC_TX_BUFFER_NUM: u32 = 32;
pub const WIFI_CSI_ENABLED: u32 = 0;
pub const WIFI_AMPDU_RX_ENABLED: u32 = 1;
pub const WIFI_AMPDU_TX_ENABLED: u32 = 1;
pub const WIFI_AMSDU_TX_ENABLED: u32 = 0;
pub const WIFI_NVS_ENABLED: u32 = 1;
pub const WIFI_NANO_FORMAT_ENABLED: u32 = 0;
pub const WIFI_INIT_CONFIG_MAGIC: u32 = 523190095;
pub const WIFI_DEFAULT_RX_BA_WIN: u32 = 6;
pub const WIFI_TASK_CORE_ID: u32 = 0;
pub const WIFI_SOFTAP_BEACON_MAX_LEN: u32 = 752;
pub const WIFI_MGMT_SBUF_NUM: u32 = 32;
pub const WIFI_STA_DISCONNECTED_PM_ENABLED: u32 = 0;
pub const CONFIG_FEATURE_WPA3_SAE_BIT: u32 = 1;
pub const CONFIG_FEATURE_CACHE_TX_BUF_BIT: u32 = 2;
pub const CONFIG_FEATURE_FTM_INITIATOR_BIT: u32 = 4;
pub const CONFIG_FEATURE_FTM_RESPONDER_BIT: u32 = 8;
pub const MAX_WIFI_IFS: u32 = 2;
pub const ESP_ERR_ESPNOW_BASE: i32 = 12388;
pub const ESP_ERR_ESPNOW_NOT_INIT: i32 = 12389;
pub const ESP_ERR_ESPNOW_ARG: i32 = 12390;
pub const ESP_ERR_ESPNOW_NO_MEM: i32 = 12391;
pub const ESP_ERR_ESPNOW_FULL: i32 = 12392;
pub const ESP_ERR_ESPNOW_NOT_FOUND: i32 = 12393;
pub const ESP_ERR_ESPNOW_INTERNAL: i32 = 12394;
pub const ESP_ERR_ESPNOW_EXIST: i32 = 12395;
pub const ESP_ERR_ESPNOW_IF: i32 = 12396;
pub const ESP_NOW_ETH_ALEN: u32 = 6;
pub const ESP_NOW_KEY_LEN: u32 = 16;
pub const ESP_NOW_MAX_TOTAL_PEER_NUM: u32 = 20;
pub const ESP_NOW_MAX_ENCRYPT_PEER_NUM: u32 = 6;
pub const ESP_NOW_MAX_DATA_LEN: u32 = 250;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const SBT_MAX: u64 = 9223372036854775807;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const VEOF: u32 = 0;
pub const VEOL: u32 = 1;
pub const VERASE: u32 = 2;
pub const VINTR: u32 = 3;
pub const VKILL: u32 = 4;
pub const VMIN: u32 = 5;
pub const VQUIT: u32 = 6;
pub const VSTART: u32 = 7;
pub const VSTOP: u32 = 8;
pub const VSUSP: u32 = 9;
pub const VTIME: u32 = 10;
pub const NCCS: u32 = 11;
pub const BRKINT: u32 = 1;
pub const ICRNL: u32 = 2;
pub const IGNBRK: u32 = 4;
pub const IGNCR: u32 = 8;
pub const IGNPAR: u32 = 16;
pub const INLCR: u32 = 32;
pub const INPCK: u32 = 64;
pub const ISTRIP: u32 = 128;
pub const IUCLC: u32 = 256;
pub const IXANY: u32 = 512;
pub const IXOFF: u32 = 1024;
pub const IXON: u32 = 2048;
pub const PARMRK: u32 = 4096;
pub const OPOST: u32 = 1;
pub const OLCUC: u32 = 2;
pub const ONLCR: u32 = 4;
pub const OCRNL: u32 = 8;
pub const ONOCR: u32 = 16;
pub const ONLRET: u32 = 32;
pub const OFILL: u32 = 64;
pub const NLDLY: u32 = 128;
pub const NL0: u32 = 0;
pub const NL1: u32 = 128;
pub const CRDLY: u32 = 768;
pub const CR0: u32 = 0;
pub const CR1: u32 = 256;
pub const CR2: u32 = 512;
pub const CR3: u32 = 768;
pub const TABDLY: u32 = 3072;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 1024;
pub const TAB2: u32 = 2048;
pub const TAB3: u32 = 3072;
pub const BSDLY: u32 = 4096;
pub const BS0: u32 = 0;
pub const BS1: u32 = 4096;
pub const VTDLY: u32 = 8192;
pub const VT0: u32 = 0;
pub const VT1: u32 = 8192;
pub const FFDLY: u32 = 16384;
pub const FF0: u32 = 0;
pub const FF1: u32 = 16384;
pub const B0: u32 = 0;
pub const B50: u32 = 1;
pub const B75: u32 = 2;
pub const B110: u32 = 3;
pub const B134: u32 = 4;
pub const B150: u32 = 5;
pub const B200: u32 = 6;
pub const B300: u32 = 7;
pub const B600: u32 = 8;
pub const B1200: u32 = 9;
pub const B1800: u32 = 10;
pub const B2400: u32 = 11;
pub const B4800: u32 = 12;
pub const B9600: u32 = 13;
pub const B19200: u32 = 14;
pub const B38400: u32 = 15;
pub const B57600: u32 = 16;
pub const B115200: u32 = 17;
pub const B230400: u32 = 18;
pub const B460800: u32 = 19;
pub const B500000: u32 = 20;
pub const B576000: u32 = 21;
pub const B921600: u32 = 22;
pub const B1000000: u32 = 23;
pub const B1152000: u32 = 24;
pub const B1500000: u32 = 25;
pub const B2000000: u32 = 26;
pub const B2500000: u32 = 27;
pub const B3000000: u32 = 28;
pub const B3500000: u32 = 29;
pub const B4000000: u32 = 30;
pub const CSIZE: u32 = 3;
pub const CS5: u32 = 0;
pub const CS6: u32 = 1;
pub const CS7: u32 = 2;
pub const CS8: u32 = 3;
pub const CSTOPB: u32 = 4;
pub const CREAD: u32 = 8;
pub const PARENB: u32 = 16;
pub const PARODD: u32 = 32;
pub const HUPCL: u32 = 64;
pub const CLOCAL: u32 = 128;
pub const CBAUD: u32 = 256;
pub const CBAUDEX: u32 = 512;
pub const BOTHER: u32 = 1024;
pub const ECHO: u32 = 1;
pub const ECHOE: u32 = 2;
pub const ECHOK: u32 = 4;
pub const ECHONL: u32 = 8;
pub const ICANON: u32 = 16;
pub const IEXTEN: u32 = 32;
pub const ISIG: u32 = 64;
pub const NOFLSH: u32 = 128;
pub const TOSTOP: u32 = 256;
pub const XCASE: u32 = 512;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TCIFLUSH: u32 = 0;
pub const TCIOFLUSH: u32 = 1;
pub const TCOFLUSH: u32 = 2;
pub const TCIOFF: u32 = 0;
pub const TCION: u32 = 1;
pub const TCOOFF: u32 = 2;
pub const TCOON: u32 = 3;
pub const POLLIN: u32 = 1;
pub const POLLRDNORM: u32 = 2;
pub const POLLRDBAND: u32 = 4;
pub const POLLPRI: u32 = 4;
pub const POLLOUT: u32 = 8;
pub const POLLWRNORM: u32 = 8;
pub const POLLWRBAND: u32 = 16;
pub const POLLERR: u32 = 32;
pub const POLLHUP: u32 = 64;
pub const POLLNVAL: u32 = 128;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_REG: u32 = 1;
pub const DT_DIR: u32 = 2;
pub const MAXNAMLEN: u32 = 255;
pub const MAX_FDS: u32 = 64;
pub const ESP_VFS_PATH_MAX: u32 = 15;
pub const ESP_VFS_FLAG_DEFAULT: u32 = 0;
pub const ESP_VFS_FLAG_CONTEXT_PTR: u32 = 1;
pub const EFD_SUPPORT_ISR: u32 = 16;
pub const SCF_ITSDONE: u32 = 1;
pub const SCF_CMD_AC: u32 = 0;
pub const SCF_CMD_ADTC: u32 = 16;
pub const SCF_CMD_BC: u32 = 32;
pub const SCF_CMD_BCR: u32 = 48;
pub const SCF_CMD_READ: u32 = 64;
pub const SCF_RSP_BSY: u32 = 256;
pub const SCF_RSP_136: u32 = 512;
pub const SCF_RSP_CRC: u32 = 1024;
pub const SCF_RSP_IDX: u32 = 2048;
pub const SCF_RSP_PRESENT: u32 = 4096;
pub const SCF_RSP_R0: u32 = 0;
pub const SCF_RSP_R1: u32 = 7168;
pub const SCF_RSP_R1B: u32 = 7424;
pub const SCF_RSP_R2: u32 = 5632;
pub const SCF_RSP_R3: u32 = 4096;
pub const SCF_RSP_R4: u32 = 4096;
pub const SCF_RSP_R5: u32 = 7168;
pub const SCF_RSP_R5B: u32 = 7424;
pub const SCF_RSP_R6: u32 = 7168;
pub const SCF_RSP_R7: u32 = 7168;
pub const SCF_WAIT_BUSY: u32 = 8192;
pub const SDMMC_FREQ_DEFAULT: u32 = 20000;
pub const SDMMC_FREQ_HIGHSPEED: u32 = 40000;
pub const SDMMC_FREQ_PROBING: u32 = 400;
pub const SDMMC_FREQ_52M: u32 = 52000;
pub const SDMMC_FREQ_26M: u32 = 26000;
pub const LLDESC_TX_MBLK_SIZE: u32 = 268;
pub const LLDESC_RX_SMBLK_SIZE: u32 = 64;
pub const LLDESC_RX_MBLK_SIZE: u32 = 524;
pub const LLDESC_RX_AMPDU_ENTRY_MBLK_SIZE: u32 = 64;
pub const LLDESC_RX_AMPDU_LEN_MBLK_SIZE: u32 = 256;
pub const LLDESC_TX_MBLK_NUM: u32 = 10;
pub const LLDESC_RX_MBLK_NUM: u32 = 10;
pub const LLDESC_RX_AMPDU_ENTRY_MBLK_NUM: u32 = 4;
pub const LLDESC_RX_AMPDU_LEN_MLBK_NUM: u32 = 8;
pub const LLDESC_OWNER_MASK: u32 = 2147483648;
pub const LLDESC_OWNER_SHIFT: u32 = 31;
pub const LLDESC_SW_OWNED: u32 = 0;
pub const LLDESC_HW_OWNED: u32 = 1;
pub const LLDESC_EOF_MASK: u32 = 1073741824;
pub const LLDESC_EOF_SHIFT: u32 = 30;
pub const LLDESC_SOSF_MASK: u32 = 536870912;
pub const LLDESC_SOSF_SHIFT: u32 = 29;
pub const LLDESC_LENGTH_MASK: u32 = 16773120;
pub const LLDESC_LENGTH_SHIFT: u32 = 12;
pub const LLDESC_SIZE_MASK: u32 = 4095;
pub const LLDESC_SIZE_SHIFT: u32 = 0;
pub const LLDESC_ADDR_MASK: u32 = 1048575;
pub const LLDESC_MAX_NUM_PER_DESC: u32 = 4092;
pub const LLDESC_MAX_NUM_PER_DESC_16B_ALIGNED: u32 = 4080;
pub const LLDESC_MAX_NUM_PER_DESC_32B_ALIGNED: u32 = 4064;
pub const GPIO_MATRIX_CONST_ONE_INPUT: u32 = 30;
pub const GPIO_MATRIX_CONST_ZERO_INPUT: u32 = 31;
pub const SPI_FUNC_NUM: u32 = 0;
pub const SPI_IOMUX_PIN_NUM_HD: u32 = 12;
pub const SPI_IOMUX_PIN_NUM_CS: u32 = 14;
pub const SPI_IOMUX_PIN_NUM_MOSI: u32 = 16;
pub const SPI_IOMUX_PIN_NUM_CLK: u32 = 15;
pub const SPI_IOMUX_PIN_NUM_MISO: u32 = 17;
pub const SPI_IOMUX_PIN_NUM_WP: u32 = 13;
pub const SPI2_FUNC_NUM: u32 = 2;
pub const SPI2_IOMUX_PIN_NUM_MISO: u32 = 2;
pub const SPI2_IOMUX_PIN_NUM_HD: u32 = 4;
pub const SPI2_IOMUX_PIN_NUM_WP: u32 = 5;
pub const SPI2_IOMUX_PIN_NUM_CLK: u32 = 6;
pub const SPI2_IOMUX_PIN_NUM_MOSI: u32 = 7;
pub const SPI2_IOMUX_PIN_NUM_CS: u32 = 10;
pub const SPI_USR_V: u32 = 1;
pub const SPI_USR_S: u32 = 24;
pub const SPI_UPDATE_V: u32 = 1;
pub const SPI_UPDATE_S: u32 = 23;
pub const SPI_CONF_BITLEN: u32 = 262143;
pub const SPI_CONF_BITLEN_V: u32 = 262143;
pub const SPI_CONF_BITLEN_S: u32 = 0;
pub const SPI_USR_ADDR_VALUE: u32 = 4294967295;
pub const SPI_USR_ADDR_VALUE_V: u32 = 4294967295;
pub const SPI_USR_ADDR_VALUE_S: u32 = 0;
pub const SPI_WR_BIT_ORDER_V: u32 = 1;
pub const SPI_WR_BIT_ORDER_S: u32 = 26;
pub const SPI_RD_BIT_ORDER_V: u32 = 1;
pub const SPI_RD_BIT_ORDER_S: u32 = 25;
pub const SPI_WP_POL_V: u32 = 1;
pub const SPI_WP_POL_S: u32 = 21;
pub const SPI_HOLD_POL_V: u32 = 1;
pub const SPI_HOLD_POL_S: u32 = 20;
pub const SPI_D_POL_V: u32 = 1;
pub const SPI_D_POL_S: u32 = 19;
pub const SPI_Q_POL_V: u32 = 1;
pub const SPI_Q_POL_S: u32 = 18;
pub const SPI_FREAD_QUAD_V: u32 = 1;
pub const SPI_FREAD_QUAD_S: u32 = 15;
pub const SPI_FREAD_DUAL_V: u32 = 1;
pub const SPI_FREAD_DUAL_S: u32 = 14;
pub const SPI_FCMD_QUAD_V: u32 = 1;
pub const SPI_FCMD_QUAD_S: u32 = 9;
pub const SPI_FCMD_DUAL_V: u32 = 1;
pub const SPI_FCMD_DUAL_S: u32 = 8;
pub const SPI_FADDR_QUAD_V: u32 = 1;
pub const SPI_FADDR_QUAD_S: u32 = 6;
pub const SPI_FADDR_DUAL_V: u32 = 1;
pub const SPI_FADDR_DUAL_S: u32 = 5;
pub const SPI_DUMMY_OUT_V: u32 = 1;
pub const SPI_DUMMY_OUT_S: u32 = 3;
pub const SPI_CLK_EQU_SYSCLK_V: u32 = 1;
pub const SPI_CLK_EQU_SYSCLK_S: u32 = 31;
pub const SPI_CLKDIV_PRE: u32 = 15;
pub const SPI_CLKDIV_PRE_V: u32 = 15;
pub const SPI_CLKDIV_PRE_S: u32 = 18;
pub const SPI_CLKCNT_N: u32 = 63;
pub const SPI_CLKCNT_N_V: u32 = 63;
pub const SPI_CLKCNT_N_S: u32 = 12;
pub const SPI_CLKCNT_H: u32 = 63;
pub const SPI_CLKCNT_H_V: u32 = 63;
pub const SPI_CLKCNT_H_S: u32 = 6;
pub const SPI_CLKCNT_L: u32 = 63;
pub const SPI_CLKCNT_L_V: u32 = 63;
pub const SPI_CLKCNT_L_S: u32 = 0;
pub const SPI_USR_COMMAND_V: u32 = 1;
pub const SPI_USR_COMMAND_S: u32 = 31;
pub const SPI_USR_ADDR_V: u32 = 1;
pub const SPI_USR_ADDR_S: u32 = 30;
pub const SPI_USR_DUMMY_V: u32 = 1;
pub const SPI_USR_DUMMY_S: u32 = 29;
pub const SPI_USR_MISO_V: u32 = 1;
pub const SPI_USR_MISO_S: u32 = 28;
pub const SPI_USR_MOSI_V: u32 = 1;
pub const SPI_USR_MOSI_S: u32 = 27;
pub const SPI_USR_DUMMY_IDLE_V: u32 = 1;
pub const SPI_USR_DUMMY_IDLE_S: u32 = 26;
pub const SPI_USR_MOSI_HIGHPART_V: u32 = 1;
pub const SPI_USR_MOSI_HIGHPART_S: u32 = 25;
pub const SPI_USR_MISO_HIGHPART_V: u32 = 1;
pub const SPI_USR_MISO_HIGHPART_S: u32 = 24;
pub const SPI_SIO_V: u32 = 1;
pub const SPI_SIO_S: u32 = 17;
pub const SPI_USR_CONF_NXT_V: u32 = 1;
pub const SPI_USR_CONF_NXT_S: u32 = 15;
pub const SPI_FWRITE_QUAD_V: u32 = 1;
pub const SPI_FWRITE_QUAD_S: u32 = 13;
pub const SPI_FWRITE_DUAL_V: u32 = 1;
pub const SPI_FWRITE_DUAL_S: u32 = 12;
pub const SPI_CK_OUT_EDGE_V: u32 = 1;
pub const SPI_CK_OUT_EDGE_S: u32 = 9;
pub const SPI_RSCK_I_EDGE_V: u32 = 1;
pub const SPI_RSCK_I_EDGE_S: u32 = 8;
pub const SPI_CS_SETUP_V: u32 = 1;
pub const SPI_CS_SETUP_S: u32 = 7;
pub const SPI_CS_HOLD_V: u32 = 1;
pub const SPI_CS_HOLD_S: u32 = 6;
pub const SPI_TSCK_I_EDGE_V: u32 = 1;
pub const SPI_TSCK_I_EDGE_S: u32 = 5;
pub const SPI_QPI_MODE_V: u32 = 1;
pub const SPI_QPI_MODE_S: u32 = 3;
pub const SPI_DOUTDIN_V: u32 = 1;
pub const SPI_DOUTDIN_S: u32 = 0;
pub const SPI_USR_ADDR_BITLEN: u32 = 31;
pub const SPI_USR_ADDR_BITLEN_V: u32 = 31;
pub const SPI_USR_ADDR_BITLEN_S: u32 = 27;
pub const SPI_CS_HOLD_TIME: u32 = 31;
pub const SPI_CS_HOLD_TIME_V: u32 = 31;
pub const SPI_CS_HOLD_TIME_S: u32 = 22;
pub const SPI_CS_SETUP_TIME: u32 = 31;
pub const SPI_CS_SETUP_TIME_V: u32 = 31;
pub const SPI_CS_SETUP_TIME_S: u32 = 17;
pub const SPI_MST_WFULL_ERR_END_EN_V: u32 = 1;
pub const SPI_MST_WFULL_ERR_END_EN_S: u32 = 16;
pub const SPI_USR_DUMMY_CYCLELEN: u32 = 255;
pub const SPI_USR_DUMMY_CYCLELEN_V: u32 = 255;
pub const SPI_USR_DUMMY_CYCLELEN_S: u32 = 0;
pub const SPI_USR_COMMAND_BITLEN: u32 = 15;
pub const SPI_USR_COMMAND_BITLEN_V: u32 = 15;
pub const SPI_USR_COMMAND_BITLEN_S: u32 = 28;
pub const SPI_MST_REMPTY_ERR_END_EN_V: u32 = 1;
pub const SPI_MST_REMPTY_ERR_END_EN_S: u32 = 27;
pub const SPI_USR_COMMAND_VALUE: u32 = 65535;
pub const SPI_USR_COMMAND_VALUE_V: u32 = 65535;
pub const SPI_USR_COMMAND_VALUE_S: u32 = 0;
pub const SPI_MS_DATA_BITLEN: u32 = 262143;
pub const SPI_MS_DATA_BITLEN_V: u32 = 262143;
pub const SPI_MS_DATA_BITLEN_S: u32 = 0;
pub const SPI_QUAD_DIN_PIN_SWAP_V: u32 = 1;
pub const SPI_QUAD_DIN_PIN_SWAP_S: u32 = 31;
pub const SPI_CS_KEEP_ACTIVE_V: u32 = 1;
pub const SPI_CS_KEEP_ACTIVE_S: u32 = 30;
pub const SPI_CK_IDLE_EDGE_V: u32 = 1;
pub const SPI_CK_IDLE_EDGE_S: u32 = 29;
pub const SPI_SLAVE_CS_POL_V: u32 = 1;
pub const SPI_SLAVE_CS_POL_S: u32 = 23;
pub const SPI_MASTER_CS_POL: u32 = 63;
pub const SPI_MASTER_CS_POL_V: u32 = 63;
pub const SPI_MASTER_CS_POL_S: u32 = 7;
pub const SPI_CK_DIS_V: u32 = 1;
pub const SPI_CK_DIS_S: u32 = 6;
pub const SPI_CS5_DIS_V: u32 = 1;
pub const SPI_CS5_DIS_S: u32 = 5;
pub const SPI_CS4_DIS_V: u32 = 1;
pub const SPI_CS4_DIS_S: u32 = 4;
pub const SPI_CS3_DIS_V: u32 = 1;
pub const SPI_CS3_DIS_S: u32 = 3;
pub const SPI_CS2_DIS_V: u32 = 1;
pub const SPI_CS2_DIS_S: u32 = 2;
pub const SPI_CS1_DIS_V: u32 = 1;
pub const SPI_CS1_DIS_S: u32 = 1;
pub const SPI_CS0_DIS_V: u32 = 1;
pub const SPI_CS0_DIS_S: u32 = 0;
pub const SPI_TIMING_HCLK_ACTIVE_V: u32 = 1;
pub const SPI_TIMING_HCLK_ACTIVE_S: u32 = 16;
pub const SPI_DIN3_MODE: u32 = 3;
pub const SPI_DIN3_MODE_V: u32 = 3;
pub const SPI_DIN3_MODE_S: u32 = 6;
pub const SPI_DIN2_MODE: u32 = 3;
pub const SPI_DIN2_MODE_V: u32 = 3;
pub const SPI_DIN2_MODE_S: u32 = 4;
pub const SPI_DIN1_MODE: u32 = 3;
pub const SPI_DIN1_MODE_V: u32 = 3;
pub const SPI_DIN1_MODE_S: u32 = 2;
pub const SPI_DIN0_MODE: u32 = 3;
pub const SPI_DIN0_MODE_V: u32 = 3;
pub const SPI_DIN0_MODE_S: u32 = 0;
pub const SPI_DIN3_NUM: u32 = 3;
pub const SPI_DIN3_NUM_V: u32 = 3;
pub const SPI_DIN3_NUM_S: u32 = 6;
pub const SPI_DIN2_NUM: u32 = 3;
pub const SPI_DIN2_NUM_V: u32 = 3;
pub const SPI_DIN2_NUM_S: u32 = 4;
pub const SPI_DIN1_NUM: u32 = 3;
pub const SPI_DIN1_NUM_V: u32 = 3;
pub const SPI_DIN1_NUM_S: u32 = 2;
pub const SPI_DIN0_NUM: u32 = 3;
pub const SPI_DIN0_NUM_V: u32 = 3;
pub const SPI_DIN0_NUM_S: u32 = 0;
pub const SPI_DOUT3_MODE_V: u32 = 1;
pub const SPI_DOUT3_MODE_S: u32 = 3;
pub const SPI_DOUT2_MODE_V: u32 = 1;
pub const SPI_DOUT2_MODE_S: u32 = 2;
pub const SPI_DOUT1_MODE_V: u32 = 1;
pub const SPI_DOUT1_MODE_S: u32 = 1;
pub const SPI_DOUT0_MODE_V: u32 = 1;
pub const SPI_DOUT0_MODE_S: u32 = 0;
pub const SPI_DMA_AFIFO_RST_V: u32 = 1;
pub const SPI_DMA_AFIFO_RST_S: u32 = 31;
pub const SPI_BUF_AFIFO_RST_V: u32 = 1;
pub const SPI_BUF_AFIFO_RST_S: u32 = 30;
pub const SPI_RX_AFIFO_RST_V: u32 = 1;
pub const SPI_RX_AFIFO_RST_S: u32 = 29;
pub const SPI_DMA_TX_ENA_V: u32 = 1;
pub const SPI_DMA_TX_ENA_S: u32 = 28;
pub const SPI_DMA_RX_ENA_V: u32 = 1;
pub const SPI_DMA_RX_ENA_S: u32 = 27;
pub const SPI_RX_EOF_EN_V: u32 = 1;
pub const SPI_RX_EOF_EN_S: u32 = 21;
pub const SPI_SLV_TX_SEG_TRANS_CLR_EN_V: u32 = 1;
pub const SPI_SLV_TX_SEG_TRANS_CLR_EN_S: u32 = 20;
pub const SPI_SLV_RX_SEG_TRANS_CLR_EN_V: u32 = 1;
pub const SPI_SLV_RX_SEG_TRANS_CLR_EN_S: u32 = 19;
pub const SPI_DMA_SLV_SEG_TRANS_EN_V: u32 = 1;
pub const SPI_DMA_SLV_SEG_TRANS_EN_S: u32 = 18;
pub const SPI_APP1_INT_ENA_V: u32 = 1;
pub const SPI_APP1_INT_ENA_S: u32 = 20;
pub const SPI_APP2_INT_ENA_V: u32 = 1;
pub const SPI_APP2_INT_ENA_S: u32 = 19;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_V: u32 = 1;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ENA_S: u32 = 18;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_V: u32 = 1;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ENA_S: u32 = 17;
pub const SPI_SLV_CMD_ERR_INT_ENA_V: u32 = 1;
pub const SPI_SLV_CMD_ERR_INT_ENA_S: u32 = 16;
pub const SPI_SLV_BUF_ADDR_ERR_INT_ENA_V: u32 = 1;
pub const SPI_SLV_BUF_ADDR_ERR_INT_ENA_S: u32 = 15;
pub const SPI_SEG_MAGIC_ERR_INT_ENA_V: u32 = 1;
pub const SPI_SEG_MAGIC_ERR_INT_ENA_S: u32 = 14;
pub const SPI_DMA_SEG_TRANS_DONE_INT_ENA_V: u32 = 1;
pub const SPI_DMA_SEG_TRANS_DONE_INT_ENA_S: u32 = 13;
pub const SPI_TRANS_DONE_INT_ENA_V: u32 = 1;
pub const SPI_TRANS_DONE_INT_ENA_S: u32 = 12;
pub const SPI_SLV_WR_BUF_DONE_INT_ENA_V: u32 = 1;
pub const SPI_SLV_WR_BUF_DONE_INT_ENA_S: u32 = 11;
pub const SPI_SLV_RD_BUF_DONE_INT_ENA_V: u32 = 1;
pub const SPI_SLV_RD_BUF_DONE_INT_ENA_S: u32 = 10;
pub const SPI_SLV_WR_DMA_DONE_INT_ENA_V: u32 = 1;
pub const SPI_SLV_WR_DMA_DONE_INT_ENA_S: u32 = 9;
pub const SPI_SLV_RD_DMA_DONE_INT_ENA_V: u32 = 1;
pub const SPI_SLV_RD_DMA_DONE_INT_ENA_S: u32 = 8;
pub const SPI_SLV_CMDA_INT_ENA_V: u32 = 1;
pub const SPI_SLV_CMDA_INT_ENA_S: u32 = 7;
pub const SPI_SLV_CMD9_INT_ENA_V: u32 = 1;
pub const SPI_SLV_CMD9_INT_ENA_S: u32 = 6;
pub const SPI_SLV_CMD8_INT_ENA_V: u32 = 1;
pub const SPI_SLV_CMD8_INT_ENA_S: u32 = 5;
pub const SPI_SLV_CMD7_INT_ENA_V: u32 = 1;
pub const SPI_SLV_CMD7_INT_ENA_S: u32 = 4;
pub const SPI_SLV_EN_QPI_INT_ENA_V: u32 = 1;
pub const SPI_SLV_EN_QPI_INT_ENA_S: u32 = 3;
pub const SPI_SLV_EX_QPI_INT_ENA_V: u32 = 1;
pub const SPI_SLV_EX_QPI_INT_ENA_S: u32 = 2;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_V: u32 = 1;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ENA_S: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_V: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_ENA_S: u32 = 0;
pub const SPI_APP1_INT_CLR_V: u32 = 1;
pub const SPI_APP1_INT_CLR_S: u32 = 20;
pub const SPI_APP2_INT_CLR_V: u32 = 1;
pub const SPI_APP2_INT_CLR_S: u32 = 19;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_V: u32 = 1;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_CLR_S: u32 = 18;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_V: u32 = 1;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_CLR_S: u32 = 17;
pub const SPI_SLV_CMD_ERR_INT_CLR_V: u32 = 1;
pub const SPI_SLV_CMD_ERR_INT_CLR_S: u32 = 16;
pub const SPI_SLV_BUF_ADDR_ERR_INT_CLR_V: u32 = 1;
pub const SPI_SLV_BUF_ADDR_ERR_INT_CLR_S: u32 = 15;
pub const SPI_SEG_MAGIC_ERR_INT_CLR_V: u32 = 1;
pub const SPI_SEG_MAGIC_ERR_INT_CLR_S: u32 = 14;
pub const SPI_DMA_SEG_TRANS_DONE_INT_CLR_V: u32 = 1;
pub const SPI_DMA_SEG_TRANS_DONE_INT_CLR_S: u32 = 13;
pub const SPI_TRANS_DONE_INT_CLR_V: u32 = 1;
pub const SPI_TRANS_DONE_INT_CLR_S: u32 = 12;
pub const SPI_SLV_WR_BUF_DONE_INT_CLR_V: u32 = 1;
pub const SPI_SLV_WR_BUF_DONE_INT_CLR_S: u32 = 11;
pub const SPI_SLV_RD_BUF_DONE_INT_CLR_V: u32 = 1;
pub const SPI_SLV_RD_BUF_DONE_INT_CLR_S: u32 = 10;
pub const SPI_SLV_WR_DMA_DONE_INT_CLR_V: u32 = 1;
pub const SPI_SLV_WR_DMA_DONE_INT_CLR_S: u32 = 9;
pub const SPI_SLV_RD_DMA_DONE_INT_CLR_V: u32 = 1;
pub const SPI_SLV_RD_DMA_DONE_INT_CLR_S: u32 = 8;
pub const SPI_SLV_CMDA_INT_CLR_V: u32 = 1;
pub const SPI_SLV_CMDA_INT_CLR_S: u32 = 7;
pub const SPI_SLV_CMD9_INT_CLR_V: u32 = 1;
pub const SPI_SLV_CMD9_INT_CLR_S: u32 = 6;
pub const SPI_SLV_CMD8_INT_CLR_V: u32 = 1;
pub const SPI_SLV_CMD8_INT_CLR_S: u32 = 5;
pub const SPI_SLV_CMD7_INT_CLR_V: u32 = 1;
pub const SPI_SLV_CMD7_INT_CLR_S: u32 = 4;
pub const SPI_SLV_EN_QPI_INT_CLR_V: u32 = 1;
pub const SPI_SLV_EN_QPI_INT_CLR_S: u32 = 3;
pub const SPI_SLV_EX_QPI_INT_CLR_V: u32 = 1;
pub const SPI_SLV_EX_QPI_INT_CLR_S: u32 = 2;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_V: u32 = 1;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_CLR_S: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_V: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_CLR_S: u32 = 0;
pub const SPI_APP1_INT_RAW_V: u32 = 1;
pub const SPI_APP1_INT_RAW_S: u32 = 20;
pub const SPI_APP2_INT_RAW_V: u32 = 1;
pub const SPI_APP2_INT_RAW_S: u32 = 19;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_V: u32 = 1;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_RAW_S: u32 = 18;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_V: u32 = 1;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_RAW_S: u32 = 17;
pub const SPI_SLV_CMD_ERR_INT_RAW_V: u32 = 1;
pub const SPI_SLV_CMD_ERR_INT_RAW_S: u32 = 16;
pub const SPI_SLV_BUF_ADDR_ERR_INT_RAW_V: u32 = 1;
pub const SPI_SLV_BUF_ADDR_ERR_INT_RAW_S: u32 = 15;
pub const SPI_SEG_MAGIC_ERR_INT_RAW_V: u32 = 1;
pub const SPI_SEG_MAGIC_ERR_INT_RAW_S: u32 = 14;
pub const SPI_DMA_SEG_TRANS_DONE_INT_RAW_V: u32 = 1;
pub const SPI_DMA_SEG_TRANS_DONE_INT_RAW_S: u32 = 13;
pub const SPI_TRANS_DONE_INT_RAW_V: u32 = 1;
pub const SPI_TRANS_DONE_INT_RAW_S: u32 = 12;
pub const SPI_SLV_WR_BUF_DONE_INT_RAW_V: u32 = 1;
pub const SPI_SLV_WR_BUF_DONE_INT_RAW_S: u32 = 11;
pub const SPI_SLV_RD_BUF_DONE_INT_RAW_V: u32 = 1;
pub const SPI_SLV_RD_BUF_DONE_INT_RAW_S: u32 = 10;
pub const SPI_SLV_WR_DMA_DONE_INT_RAW_V: u32 = 1;
pub const SPI_SLV_WR_DMA_DONE_INT_RAW_S: u32 = 9;
pub const SPI_SLV_RD_DMA_DONE_INT_RAW_V: u32 = 1;
pub const SPI_SLV_RD_DMA_DONE_INT_RAW_S: u32 = 8;
pub const SPI_SLV_CMDA_INT_RAW_V: u32 = 1;
pub const SPI_SLV_CMDA_INT_RAW_S: u32 = 7;
pub const SPI_SLV_CMD9_INT_RAW_V: u32 = 1;
pub const SPI_SLV_CMD9_INT_RAW_S: u32 = 6;
pub const SPI_SLV_CMD8_INT_RAW_V: u32 = 1;
pub const SPI_SLV_CMD8_INT_RAW_S: u32 = 5;
pub const SPI_SLV_CMD7_INT_RAW_V: u32 = 1;
pub const SPI_SLV_CMD7_INT_RAW_S: u32 = 4;
pub const SPI_SLV_EN_QPI_INT_RAW_V: u32 = 1;
pub const SPI_SLV_EN_QPI_INT_RAW_S: u32 = 3;
pub const SPI_SLV_EX_QPI_INT_RAW_V: u32 = 1;
pub const SPI_SLV_EX_QPI_INT_RAW_S: u32 = 2;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_V: u32 = 1;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_RAW_S: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_V: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_RAW_S: u32 = 0;
pub const SPI_APP1_INT_ST_V: u32 = 1;
pub const SPI_APP1_INT_ST_S: u32 = 20;
pub const SPI_APP2_INT_ST_V: u32 = 1;
pub const SPI_APP2_INT_ST_S: u32 = 19;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_V: u32 = 1;
pub const SPI_MST_TX_AFIFO_REMPTY_ERR_INT_ST_S: u32 = 18;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_V: u32 = 1;
pub const SPI_MST_RX_AFIFO_WFULL_ERR_INT_ST_S: u32 = 17;
pub const SPI_SLV_CMD_ERR_INT_ST_V: u32 = 1;
pub const SPI_SLV_CMD_ERR_INT_ST_S: u32 = 16;
pub const SPI_SLV_BUF_ADDR_ERR_INT_ST_V: u32 = 1;
pub const SPI_SLV_BUF_ADDR_ERR_INT_ST_S: u32 = 15;
pub const SPI_SEG_MAGIC_ERR_INT_ST_V: u32 = 1;
pub const SPI_SEG_MAGIC_ERR_INT_ST_S: u32 = 14;
pub const SPI_DMA_SEG_TRANS_DONE_INT_ST_V: u32 = 1;
pub const SPI_DMA_SEG_TRANS_DONE_INT_ST_S: u32 = 13;
pub const SPI_TRANS_DONE_INT_ST_V: u32 = 1;
pub const SPI_TRANS_DONE_INT_ST_S: u32 = 12;
pub const SPI_SLV_WR_BUF_DONE_INT_ST_V: u32 = 1;
pub const SPI_SLV_WR_BUF_DONE_INT_ST_S: u32 = 11;
pub const SPI_SLV_RD_BUF_DONE_INT_ST_V: u32 = 1;
pub const SPI_SLV_RD_BUF_DONE_INT_ST_S: u32 = 10;
pub const SPI_SLV_WR_DMA_DONE_INT_ST_V: u32 = 1;
pub const SPI_SLV_WR_DMA_DONE_INT_ST_S: u32 = 9;
pub const SPI_SLV_RD_DMA_DONE_INT_ST_V: u32 = 1;
pub const SPI_SLV_RD_DMA_DONE_INT_ST_S: u32 = 8;
pub const SPI_SLV_CMDA_INT_ST_V: u32 = 1;
pub const SPI_SLV_CMDA_INT_ST_S: u32 = 7;
pub const SPI_SLV_CMD9_INT_ST_V: u32 = 1;
pub const SPI_SLV_CMD9_INT_ST_S: u32 = 6;
pub const SPI_SLV_CMD8_INT_ST_V: u32 = 1;
pub const SPI_SLV_CMD8_INT_ST_S: u32 = 5;
pub const SPI_SLV_CMD7_INT_ST_V: u32 = 1;
pub const SPI_SLV_CMD7_INT_ST_S: u32 = 4;
pub const SPI_SLV_EN_QPI_INT_ST_V: u32 = 1;
pub const SPI_SLV_EN_QPI_INT_ST_S: u32 = 3;
pub const SPI_SLV_EX_QPI_INT_ST_V: u32 = 1;
pub const SPI_SLV_EX_QPI_INT_ST_S: u32 = 2;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_V: u32 = 1;
pub const SPI_DMA_OUTFIFO_EMPTY_ERR_INT_ST_S: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_ST_V: u32 = 1;
pub const SPI_DMA_INFIFO_FULL_ERR_INT_ST_S: u32 = 0;
pub const SPI_BUF0: u32 = 4294967295;
pub const SPI_BUF0_V: u32 = 4294967295;
pub const SPI_BUF0_S: u32 = 0;
pub const SPI_BUF1: u32 = 4294967295;
pub const SPI_BUF1_V: u32 = 4294967295;
pub const SPI_BUF1_S: u32 = 0;
pub const SPI_BUF2: u32 = 4294967295;
pub const SPI_BUF2_V: u32 = 4294967295;
pub const SPI_BUF2_S: u32 = 0;
pub const SPI_BUF3: u32 = 4294967295;
pub const SPI_BUF3_V: u32 = 4294967295;
pub const SPI_BUF3_S: u32 = 0;
pub const SPI_BUF4: u32 = 4294967295;
pub const SPI_BUF4_V: u32 = 4294967295;
pub const SPI_BUF4_S: u32 = 0;
pub const SPI_BUF5: u32 = 4294967295;
pub const SPI_BUF5_V: u32 = 4294967295;
pub const SPI_BUF5_S: u32 = 0;
pub const SPI_BUF6: u32 = 4294967295;
pub const SPI_BUF6_V: u32 = 4294967295;
pub const SPI_BUF6_S: u32 = 0;
pub const SPI_BUF7: u32 = 4294967295;
pub const SPI_BUF7_V: u32 = 4294967295;
pub const SPI_BUF7_S: u32 = 0;
pub const SPI_BUF8: u32 = 4294967295;
pub const SPI_BUF8_V: u32 = 4294967295;
pub const SPI_BUF8_S: u32 = 0;
pub const SPI_BUF9: u32 = 4294967295;
pub const SPI_BUF9_V: u32 = 4294967295;
pub const SPI_BUF9_S: u32 = 0;
pub const SPI_BUF10: u32 = 4294967295;
pub const SPI_BUF10_V: u32 = 4294967295;
pub const SPI_BUF10_S: u32 = 0;
pub const SPI_BUF11: u32 = 4294967295;
pub const SPI_BUF11_V: u32 = 4294967295;
pub const SPI_BUF11_S: u32 = 0;
pub const SPI_BUF12: u32 = 4294967295;
pub const SPI_BUF12_V: u32 = 4294967295;
pub const SPI_BUF12_S: u32 = 0;
pub const SPI_BUF13: u32 = 4294967295;
pub const SPI_BUF13_V: u32 = 4294967295;
pub const SPI_BUF13_S: u32 = 0;
pub const SPI_BUF14: u32 = 4294967295;
pub const SPI_BUF14_V: u32 = 4294967295;
pub const SPI_BUF14_S: u32 = 0;
pub const SPI_BUF15: u32 = 4294967295;
pub const SPI_BUF15_V: u32 = 4294967295;
pub const SPI_BUF15_S: u32 = 0;
pub const SPI_USR_CONF_V: u32 = 1;
pub const SPI_USR_CONF_S: u32 = 28;
pub const SPI_SOFT_RESET_V: u32 = 1;
pub const SPI_SOFT_RESET_S: u32 = 27;
pub const SPI_SLAVE_MODE_V: u32 = 1;
pub const SPI_SLAVE_MODE_S: u32 = 26;
pub const SPI_DMA_SEG_MAGIC_VALUE: u32 = 15;
pub const SPI_DMA_SEG_MAGIC_VALUE_V: u32 = 15;
pub const SPI_DMA_SEG_MAGIC_VALUE_S: u32 = 22;
pub const SPI_SLV_WRBUF_BITLEN_EN_V: u32 = 1;
pub const SPI_SLV_WRBUF_BITLEN_EN_S: u32 = 11;
pub const SPI_SLV_RDBUF_BITLEN_EN_V: u32 = 1;
pub const SPI_SLV_RDBUF_BITLEN_EN_S: u32 = 10;
pub const SPI_SLV_WRDMA_BITLEN_EN_V: u32 = 1;
pub const SPI_SLV_WRDMA_BITLEN_EN_S: u32 = 9;
pub const SPI_SLV_RDDMA_BITLEN_EN_V: u32 = 1;
pub const SPI_SLV_RDDMA_BITLEN_EN_S: u32 = 8;
pub const SPI_RSCK_DATA_OUT_V: u32 = 1;
pub const SPI_RSCK_DATA_OUT_S: u32 = 3;
pub const SPI_CLK_MODE_13_V: u32 = 1;
pub const SPI_CLK_MODE_13_S: u32 = 2;
pub const SPI_CLK_MODE: u32 = 3;
pub const SPI_CLK_MODE_V: u32 = 3;
pub const SPI_CLK_MODE_S: u32 = 0;
pub const SPI_SLV_LAST_ADDR: u32 = 63;
pub const SPI_SLV_LAST_ADDR_V: u32 = 63;
pub const SPI_SLV_LAST_ADDR_S: u32 = 26;
pub const SPI_SLV_LAST_COMMAND: u32 = 255;
pub const SPI_SLV_LAST_COMMAND_V: u32 = 255;
pub const SPI_SLV_LAST_COMMAND_S: u32 = 18;
pub const SPI_SLV_DATA_BITLEN: u32 = 262143;
pub const SPI_SLV_DATA_BITLEN_V: u32 = 262143;
pub const SPI_SLV_DATA_BITLEN_S: u32 = 0;
pub const SPI_MST_CLK_SEL_V: u32 = 1;
pub const SPI_MST_CLK_SEL_S: u32 = 2;
pub const SPI_MST_CLK_ACTIVE_V: u32 = 1;
pub const SPI_MST_CLK_ACTIVE_S: u32 = 1;
pub const SPI_CLK_EN_V: u32 = 1;
pub const SPI_CLK_EN_S: u32 = 0;
pub const SPI_DATE: u32 = 268435455;
pub const SPI_DATE_V: u32 = 268435455;
pub const SPI_DATE_S: u32 = 0;
pub const SPI_MEM_FLASH_READ_V: u32 = 1;
pub const SPI_MEM_FLASH_READ_S: u32 = 31;
pub const SPI_MEM_FLASH_WREN_V: u32 = 1;
pub const SPI_MEM_FLASH_WREN_S: u32 = 30;
pub const SPI_MEM_FLASH_WRDI_V: u32 = 1;
pub const SPI_MEM_FLASH_WRDI_S: u32 = 29;
pub const SPI_MEM_FLASH_RDID_V: u32 = 1;
pub const SPI_MEM_FLASH_RDID_S: u32 = 28;
pub const SPI_MEM_FLASH_RDSR_V: u32 = 1;
pub const SPI_MEM_FLASH_RDSR_S: u32 = 27;
pub const SPI_MEM_FLASH_WRSR_V: u32 = 1;
pub const SPI_MEM_FLASH_WRSR_S: u32 = 26;
pub const SPI_MEM_FLASH_PP_V: u32 = 1;
pub const SPI_MEM_FLASH_PP_S: u32 = 25;
pub const SPI_MEM_FLASH_SE_V: u32 = 1;
pub const SPI_MEM_FLASH_SE_S: u32 = 24;
pub const SPI_MEM_FLASH_BE_V: u32 = 1;
pub const SPI_MEM_FLASH_BE_S: u32 = 23;
pub const SPI_MEM_FLASH_CE_V: u32 = 1;
pub const SPI_MEM_FLASH_CE_S: u32 = 22;
pub const SPI_MEM_FLASH_DP_V: u32 = 1;
pub const SPI_MEM_FLASH_DP_S: u32 = 21;
pub const SPI_MEM_FLASH_RES_V: u32 = 1;
pub const SPI_MEM_FLASH_RES_S: u32 = 20;
pub const SPI_MEM_FLASH_HPM_V: u32 = 1;
pub const SPI_MEM_FLASH_HPM_S: u32 = 19;
pub const SPI_MEM_USR_V: u32 = 1;
pub const SPI_MEM_USR_S: u32 = 18;
pub const SPI_MEM_FLASH_PE_V: u32 = 1;
pub const SPI_MEM_FLASH_PE_S: u32 = 17;
pub const SPI_MEM_SLV_ST: u32 = 15;
pub const SPI_MEM_SLV_ST_V: u32 = 15;
pub const SPI_MEM_SLV_ST_S: u32 = 4;
pub const SPI_MEM_MST_ST: u32 = 15;
pub const SPI_MEM_MST_ST_V: u32 = 15;
pub const SPI_MEM_MST_ST_S: u32 = 0;
pub const SPI_MEM_USR_ADDR_VALUE: u32 = 4294967295;
pub const SPI_MEM_USR_ADDR_VALUE_V: u32 = 4294967295;
pub const SPI_MEM_USR_ADDR_VALUE_S: u32 = 0;
pub const SPI_MEM_FREAD_QIO_V: u32 = 1;
pub const SPI_MEM_FREAD_QIO_S: u32 = 24;
pub const SPI_MEM_FREAD_DIO_V: u32 = 1;
pub const SPI_MEM_FREAD_DIO_S: u32 = 23;
pub const SPI_MEM_WRSR_2B_V: u32 = 1;
pub const SPI_MEM_WRSR_2B_S: u32 = 22;
pub const SPI_MEM_WP_REG_V: u32 = 1;
pub const SPI_MEM_WP_REG_S: u32 = 21;
pub const SPI_MEM_FREAD_QUAD_V: u32 = 1;
pub const SPI_MEM_FREAD_QUAD_S: u32 = 20;
pub const SPI_MEM_D_POL_V: u32 = 1;
pub const SPI_MEM_D_POL_S: u32 = 19;
pub const SPI_MEM_Q_POL_V: u32 = 1;
pub const SPI_MEM_Q_POL_S: u32 = 18;
pub const SPI_MEM_RESANDRES_V: u32 = 1;
pub const SPI_MEM_RESANDRES_S: u32 = 15;
pub const SPI_MEM_FREAD_DUAL_V: u32 = 1;
pub const SPI_MEM_FREAD_DUAL_S: u32 = 14;
pub const SPI_MEM_FASTRD_MODE_V: u32 = 1;
pub const SPI_MEM_FASTRD_MODE_S: u32 = 13;
pub const SPI_MEM_TX_CRC_EN_V: u32 = 1;
pub const SPI_MEM_TX_CRC_EN_S: u32 = 11;
pub const SPI_MEM_FCS_CRC_EN_V: u32 = 1;
pub const SPI_MEM_FCS_CRC_EN_S: u32 = 10;
pub const SPI_MEM_FCMD_QUAD_V: u32 = 1;
pub const SPI_MEM_FCMD_QUAD_S: u32 = 8;
pub const SPI_MEM_FCMD_DUAL_V: u32 = 1;
pub const SPI_MEM_FCMD_DUAL_S: u32 = 7;
pub const SPI_MEM_FDUMMY_OUT_V: u32 = 1;
pub const SPI_MEM_FDUMMY_OUT_S: u32 = 3;
pub const SPI_MEM_RXFIFO_WFULL_ERR_V: u32 = 1;
pub const SPI_MEM_RXFIFO_WFULL_ERR_S: u32 = 31;
pub const SPI_MEM_RXFIFO_RST_V: u32 = 1;
pub const SPI_MEM_RXFIFO_RST_S: u32 = 30;
pub const SPI_MEM_CS_HOLD_DLY_RES: u32 = 1023;
pub const SPI_MEM_CS_HOLD_DLY_RES_V: u32 = 1023;
pub const SPI_MEM_CS_HOLD_DLY_RES_S: u32 = 2;
pub const SPI_MEM_CLK_MODE: u32 = 3;
pub const SPI_MEM_CLK_MODE_V: u32 = 3;
pub const SPI_MEM_CLK_MODE_S: u32 = 0;
pub const SPI_MEM_SYNC_RESET_V: u32 = 1;
pub const SPI_MEM_SYNC_RESET_S: u32 = 31;
pub const SPI_MEM_CS_HOLD_DELAY: u32 = 63;
pub const SPI_MEM_CS_HOLD_DELAY_V: u32 = 63;
pub const SPI_MEM_CS_HOLD_DELAY_S: u32 = 25;
pub const SPI_MEM_CS_HOLD_TIME: u32 = 31;
pub const SPI_MEM_CS_HOLD_TIME_V: u32 = 31;
pub const SPI_MEM_CS_HOLD_TIME_S: u32 = 5;
pub const SPI_MEM_CS_SETUP_TIME: u32 = 31;
pub const SPI_MEM_CS_SETUP_TIME_V: u32 = 31;
pub const SPI_MEM_CS_SETUP_TIME_S: u32 = 0;
pub const SPI_MEM_CLK_EQU_SYSCLK_V: u32 = 1;
pub const SPI_MEM_CLK_EQU_SYSCLK_S: u32 = 31;
pub const SPI_MEM_CLKCNT_N: u32 = 255;
pub const SPI_MEM_CLKCNT_N_V: u32 = 255;
pub const SPI_MEM_CLKCNT_N_S: u32 = 16;
pub const SPI_MEM_CLKCNT_H: u32 = 255;
pub const SPI_MEM_CLKCNT_H_V: u32 = 255;
pub const SPI_MEM_CLKCNT_H_S: u32 = 8;
pub const SPI_MEM_CLKCNT_L: u32 = 255;
pub const SPI_MEM_CLKCNT_L_V: u32 = 255;
pub const SPI_MEM_CLKCNT_L_S: u32 = 0;
pub const SPI_MEM_USR_COMMAND_V: u32 = 1;
pub const SPI_MEM_USR_COMMAND_S: u32 = 31;
pub const SPI_MEM_USR_ADDR_V: u32 = 1;
pub const SPI_MEM_USR_ADDR_S: u32 = 30;
pub const SPI_MEM_USR_DUMMY_V: u32 = 1;
pub const SPI_MEM_USR_DUMMY_S: u32 = 29;
pub const SPI_MEM_USR_MISO_V: u32 = 1;
pub const SPI_MEM_USR_MISO_S: u32 = 28;
pub const SPI_MEM_USR_MOSI_V: u32 = 1;
pub const SPI_MEM_USR_MOSI_S: u32 = 27;
pub const SPI_MEM_USR_DUMMY_IDLE_V: u32 = 1;
pub const SPI_MEM_USR_DUMMY_IDLE_S: u32 = 26;
pub const SPI_MEM_USR_MOSI_HIGHPART_V: u32 = 1;
pub const SPI_MEM_USR_MOSI_HIGHPART_S: u32 = 25;
pub const SPI_MEM_USR_MISO_HIGHPART_V: u32 = 1;
pub const SPI_MEM_USR_MISO_HIGHPART_S: u32 = 24;
pub const SPI_MEM_FWRITE_QIO_V: u32 = 1;
pub const SPI_MEM_FWRITE_QIO_S: u32 = 15;
pub const SPI_MEM_FWRITE_DIO_V: u32 = 1;
pub const SPI_MEM_FWRITE_DIO_S: u32 = 14;
pub const SPI_MEM_FWRITE_QUAD_V: u32 = 1;
pub const SPI_MEM_FWRITE_QUAD_S: u32 = 13;
pub const SPI_MEM_FWRITE_DUAL_V: u32 = 1;
pub const SPI_MEM_FWRITE_DUAL_S: u32 = 12;
pub const SPI_MEM_CK_OUT_EDGE_V: u32 = 1;
pub const SPI_MEM_CK_OUT_EDGE_S: u32 = 9;
pub const SPI_MEM_CS_SETUP_V: u32 = 1;
pub const SPI_MEM_CS_SETUP_S: u32 = 7;
pub const SPI_MEM_CS_HOLD_V: u32 = 1;
pub const SPI_MEM_CS_HOLD_S: u32 = 6;
pub const SPI_MEM_USR_ADDR_BITLEN: u32 = 63;
pub const SPI_MEM_USR_ADDR_BITLEN_V: u32 = 63;
pub const SPI_MEM_USR_ADDR_BITLEN_S: u32 = 26;
pub const SPI_MEM_USR_DUMMY_CYCLELEN: u32 = 63;
pub const SPI_MEM_USR_DUMMY_CYCLELEN_V: u32 = 63;
pub const SPI_MEM_USR_DUMMY_CYCLELEN_S: u32 = 0;
pub const SPI_MEM_USR_COMMAND_BITLEN: u32 = 15;
pub const SPI_MEM_USR_COMMAND_BITLEN_V: u32 = 15;
pub const SPI_MEM_USR_COMMAND_BITLEN_S: u32 = 28;
pub const SPI_MEM_USR_COMMAND_VALUE: u32 = 65535;
pub const SPI_MEM_USR_COMMAND_VALUE_V: u32 = 65535;
pub const SPI_MEM_USR_COMMAND_VALUE_S: u32 = 0;
pub const SPI_MEM_USR_MOSI_DBITLEN: u32 = 1023;
pub const SPI_MEM_USR_MOSI_DBITLEN_V: u32 = 1023;
pub const SPI_MEM_USR_MOSI_DBITLEN_S: u32 = 0;
pub const SPI_MEM_USR_MISO_DBITLEN: u32 = 1023;
pub const SPI_MEM_USR_MISO_DBITLEN_V: u32 = 1023;
pub const SPI_MEM_USR_MISO_DBITLEN_S: u32 = 0;
pub const SPI_MEM_WB_MODE: u32 = 255;
pub const SPI_MEM_WB_MODE_V: u32 = 255;
pub const SPI_MEM_WB_MODE_S: u32 = 16;
pub const SPI_MEM_STATUS: u32 = 65535;
pub const SPI_MEM_STATUS_V: u32 = 65535;
pub const SPI_MEM_STATUS_S: u32 = 0;
pub const SPI_MEM_CS_KEEP_ACTIVE_V: u32 = 1;
pub const SPI_MEM_CS_KEEP_ACTIVE_S: u32 = 10;
pub const SPI_MEM_CK_IDLE_EDGE_V: u32 = 1;
pub const SPI_MEM_CK_IDLE_EDGE_S: u32 = 9;
pub const SPI_MEM_SLV_ST_TRANS_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_SLV_ST_TRANS_END_INT_ENA_S: u32 = 6;
pub const SPI_MEM_SLV_ST_TRANS_END_V: u32 = 1;
pub const SPI_MEM_SLV_ST_TRANS_END_S: u32 = 5;
pub const SPI_MEM_CSPI_ST_TRANS_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_CSPI_ST_TRANS_END_INT_ENA_S: u32 = 4;
pub const SPI_MEM_CSPI_ST_TRANS_END_V: u32 = 1;
pub const SPI_MEM_CSPI_ST_TRANS_END_S: u32 = 3;
pub const SPI_MEM_TRANS_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_TRANS_END_INT_ENA_S: u32 = 2;
pub const SPI_MEM_CS1_DIS_V: u32 = 1;
pub const SPI_MEM_CS1_DIS_S: u32 = 1;
pub const SPI_MEM_CS0_DIS_V: u32 = 1;
pub const SPI_MEM_CS0_DIS_S: u32 = 0;
pub const SPI_MEM_TX_CRC_DATA: u32 = 4294967295;
pub const SPI_MEM_TX_CRC_DATA_V: u32 = 4294967295;
pub const SPI_MEM_TX_CRC_DATA_S: u32 = 0;
pub const SPI_MEM_FADDR_QUAD_V: u32 = 1;
pub const SPI_MEM_FADDR_QUAD_S: u32 = 8;
pub const SPI_MEM_FDOUT_QUAD_V: u32 = 1;
pub const SPI_MEM_FDOUT_QUAD_S: u32 = 7;
pub const SPI_MEM_FDIN_QUAD_V: u32 = 1;
pub const SPI_MEM_FDIN_QUAD_S: u32 = 6;
pub const SPI_MEM_FADDR_DUAL_V: u32 = 1;
pub const SPI_MEM_FADDR_DUAL_S: u32 = 5;
pub const SPI_MEM_FDOUT_DUAL_V: u32 = 1;
pub const SPI_MEM_FDOUT_DUAL_S: u32 = 4;
pub const SPI_MEM_FDIN_DUAL_V: u32 = 1;
pub const SPI_MEM_FDIN_DUAL_S: u32 = 3;
pub const SPI_MEM_CACHE_FLASH_USR_CMD_V: u32 = 1;
pub const SPI_MEM_CACHE_FLASH_USR_CMD_S: u32 = 2;
pub const SPI_MEM_CACHE_USR_ADDR_4BYTE_V: u32 = 1;
pub const SPI_MEM_CACHE_USR_ADDR_4BYTE_S: u32 = 1;
pub const SPI_MEM_CACHE_REQ_EN_V: u32 = 1;
pub const SPI_MEM_CACHE_REQ_EN_S: u32 = 0;
pub const SPI_MEM_CSPI_LOCK_DELAY_TIME: u32 = 31;
pub const SPI_MEM_CSPI_LOCK_DELAY_TIME_V: u32 = 31;
pub const SPI_MEM_CSPI_LOCK_DELAY_TIME_S: u32 = 7;
pub const SPI_MEM_EM_ST: u32 = 7;
pub const SPI_MEM_EM_ST_V: u32 = 7;
pub const SPI_MEM_EM_ST_S: u32 = 4;
pub const SPI_MEM_CSPI_ST: u32 = 15;
pub const SPI_MEM_CSPI_ST_V: u32 = 15;
pub const SPI_MEM_CSPI_ST_S: u32 = 0;
pub const SPI_MEM_BUF0: u32 = 4294967295;
pub const SPI_MEM_BUF0_V: u32 = 4294967295;
pub const SPI_MEM_BUF0_S: u32 = 0;
pub const SPI_MEM_BUF1: u32 = 4294967295;
pub const SPI_MEM_BUF1_V: u32 = 4294967295;
pub const SPI_MEM_BUF1_S: u32 = 0;
pub const SPI_MEM_BUF2: u32 = 4294967295;
pub const SPI_MEM_BUF2_V: u32 = 4294967295;
pub const SPI_MEM_BUF2_S: u32 = 0;
pub const SPI_MEM_BUF3: u32 = 4294967295;
pub const SPI_MEM_BUF3_V: u32 = 4294967295;
pub const SPI_MEM_BUF3_S: u32 = 0;
pub const SPI_MEM_BUF4: u32 = 4294967295;
pub const SPI_MEM_BUF4_V: u32 = 4294967295;
pub const SPI_MEM_BUF4_S: u32 = 0;
pub const SPI_MEM_BUF5: u32 = 4294967295;
pub const SPI_MEM_BUF5_V: u32 = 4294967295;
pub const SPI_MEM_BUF5_S: u32 = 0;
pub const SPI_MEM_BUF6: u32 = 4294967295;
pub const SPI_MEM_BUF6_V: u32 = 4294967295;
pub const SPI_MEM_BUF6_S: u32 = 0;
pub const SPI_MEM_BUF7: u32 = 4294967295;
pub const SPI_MEM_BUF7_V: u32 = 4294967295;
pub const SPI_MEM_BUF7_S: u32 = 0;
pub const SPI_MEM_BUF8: u32 = 4294967295;
pub const SPI_MEM_BUF8_V: u32 = 4294967295;
pub const SPI_MEM_BUF8_S: u32 = 0;
pub const SPI_MEM_BUF9: u32 = 4294967295;
pub const SPI_MEM_BUF9_V: u32 = 4294967295;
pub const SPI_MEM_BUF9_S: u32 = 0;
pub const SPI_MEM_BUF10: u32 = 4294967295;
pub const SPI_MEM_BUF10_V: u32 = 4294967295;
pub const SPI_MEM_BUF10_S: u32 = 0;
pub const SPI_MEM_BUF11: u32 = 4294967295;
pub const SPI_MEM_BUF11_V: u32 = 4294967295;
pub const SPI_MEM_BUF11_S: u32 = 0;
pub const SPI_MEM_BUF12: u32 = 4294967295;
pub const SPI_MEM_BUF12_V: u32 = 4294967295;
pub const SPI_MEM_BUF12_S: u32 = 0;
pub const SPI_MEM_BUF13: u32 = 4294967295;
pub const SPI_MEM_BUF13_V: u32 = 4294967295;
pub const SPI_MEM_BUF13_S: u32 = 0;
pub const SPI_MEM_BUF14: u32 = 4294967295;
pub const SPI_MEM_BUF14_V: u32 = 4294967295;
pub const SPI_MEM_BUF14_S: u32 = 0;
pub const SPI_MEM_BUF15: u32 = 4294967295;
pub const SPI_MEM_BUF15_V: u32 = 4294967295;
pub const SPI_MEM_BUF15_S: u32 = 0;
pub const SPI_MEM_WAITI_DUMMY_CYCLELEN: u32 = 63;
pub const SPI_MEM_WAITI_DUMMY_CYCLELEN_V: u32 = 63;
pub const SPI_MEM_WAITI_DUMMY_CYCLELEN_S: u32 = 10;
pub const SPI_MEM_WAITI_CMD: u32 = 255;
pub const SPI_MEM_WAITI_CMD_V: u32 = 255;
pub const SPI_MEM_WAITI_CMD_S: u32 = 2;
pub const SPI_MEM_WAITI_DUMMY_V: u32 = 1;
pub const SPI_MEM_WAITI_DUMMY_S: u32 = 1;
pub const SPI_MEM_SUS_TIMEOUT_CNT: u32 = 127;
pub const SPI_MEM_SUS_TIMEOUT_CNT_V: u32 = 127;
pub const SPI_MEM_SUS_TIMEOUT_CNT_S: u32 = 25;
pub const SPI_MEM_PES_END_EN_V: u32 = 1;
pub const SPI_MEM_PES_END_EN_S: u32 = 24;
pub const SPI_MEM_PER_END_EN_V: u32 = 1;
pub const SPI_MEM_PER_END_EN_S: u32 = 23;
pub const SPI_MEM_FMEM_RD_SUS_2B_V: u32 = 1;
pub const SPI_MEM_FMEM_RD_SUS_2B_S: u32 = 22;
pub const SPI_MEM_PESR_END_MSK: u32 = 65535;
pub const SPI_MEM_PESR_END_MSK_V: u32 = 65535;
pub const SPI_MEM_PESR_END_MSK_S: u32 = 6;
pub const SPI_MEM_FLASH_PES_EN_V: u32 = 1;
pub const SPI_MEM_FLASH_PES_EN_S: u32 = 5;
pub const SPI_MEM_PES_PER_EN_V: u32 = 1;
pub const SPI_MEM_PES_PER_EN_S: u32 = 4;
pub const SPI_MEM_FLASH_PES_WAIT_EN_V: u32 = 1;
pub const SPI_MEM_FLASH_PES_WAIT_EN_S: u32 = 3;
pub const SPI_MEM_FLASH_PER_WAIT_EN_V: u32 = 1;
pub const SPI_MEM_FLASH_PER_WAIT_EN_S: u32 = 2;
pub const SPI_MEM_FLASH_PES_V: u32 = 1;
pub const SPI_MEM_FLASH_PES_S: u32 = 1;
pub const SPI_MEM_FLASH_PER_V: u32 = 1;
pub const SPI_MEM_FLASH_PER_S: u32 = 0;
pub const SPI_MEM_WAIT_PESR_COMMAND: u32 = 65535;
pub const SPI_MEM_WAIT_PESR_COMMAND_V: u32 = 65535;
pub const SPI_MEM_WAIT_PESR_COMMAND_S: u32 = 16;
pub const SPI_MEM_FLASH_PES_COMMAND: u32 = 255;
pub const SPI_MEM_FLASH_PES_COMMAND_V: u32 = 255;
pub const SPI_MEM_FLASH_PES_COMMAND_S: u32 = 8;
pub const SPI_MEM_FLASH_PER_COMMAND: u32 = 255;
pub const SPI_MEM_FLASH_PER_COMMAND_V: u32 = 255;
pub const SPI_MEM_FLASH_PER_COMMAND_S: u32 = 0;
pub const SPI_MEM_SPI0_LOCK_EN_V: u32 = 1;
pub const SPI_MEM_SPI0_LOCK_EN_S: u32 = 7;
pub const SPI_MEM_FLASH_PES_DLY_128_V: u32 = 1;
pub const SPI_MEM_FLASH_PES_DLY_128_S: u32 = 6;
pub const SPI_MEM_FLASH_PER_DLY_128_V: u32 = 1;
pub const SPI_MEM_FLASH_PER_DLY_128_S: u32 = 5;
pub const SPI_MEM_FLASH_DP_DLY_128_V: u32 = 1;
pub const SPI_MEM_FLASH_DP_DLY_128_S: u32 = 4;
pub const SPI_MEM_FLASH_RES_DLY_128_V: u32 = 1;
pub const SPI_MEM_FLASH_RES_DLY_128_S: u32 = 3;
pub const SPI_MEM_FLASH_HPM_DLY_128_V: u32 = 1;
pub const SPI_MEM_FLASH_HPM_DLY_128_S: u32 = 2;
pub const SPI_MEM_WAIT_PESR_CMD_2B_V: u32 = 1;
pub const SPI_MEM_WAIT_PESR_CMD_2B_S: u32 = 1;
pub const SPI_MEM_FLASH_SUS_V: u32 = 1;
pub const SPI_MEM_FLASH_SUS_S: u32 = 0;
pub const SPI_MEM_EXTRA_DUMMY_CYCLELEN: u32 = 7;
pub const SPI_MEM_EXTRA_DUMMY_CYCLELEN_V: u32 = 7;
pub const SPI_MEM_EXTRA_DUMMY_CYCLELEN_S: u32 = 2;
pub const SPI_MEM_TIMING_CALI_V: u32 = 1;
pub const SPI_MEM_TIMING_CALI_S: u32 = 1;
pub const SPI_MEM_TIMING_CLK_ENA_V: u32 = 1;
pub const SPI_MEM_TIMING_CLK_ENA_S: u32 = 0;
pub const SPI_MEM_DIN3_MODE: u32 = 3;
pub const SPI_MEM_DIN3_MODE_V: u32 = 3;
pub const SPI_MEM_DIN3_MODE_S: u32 = 6;
pub const SPI_MEM_DIN2_MODE: u32 = 3;
pub const SPI_MEM_DIN2_MODE_V: u32 = 3;
pub const SPI_MEM_DIN2_MODE_S: u32 = 4;
pub const SPI_MEM_DIN1_MODE: u32 = 3;
pub const SPI_MEM_DIN1_MODE_V: u32 = 3;
pub const SPI_MEM_DIN1_MODE_S: u32 = 2;
pub const SPI_MEM_DIN0_MODE: u32 = 3;
pub const SPI_MEM_DIN0_MODE_V: u32 = 3;
pub const SPI_MEM_DIN0_MODE_S: u32 = 0;
pub const SPI_MEM_DIN3_NUM: u32 = 3;
pub const SPI_MEM_DIN3_NUM_V: u32 = 3;
pub const SPI_MEM_DIN3_NUM_S: u32 = 6;
pub const SPI_MEM_DIN2_NUM: u32 = 3;
pub const SPI_MEM_DIN2_NUM_V: u32 = 3;
pub const SPI_MEM_DIN2_NUM_S: u32 = 4;
pub const SPI_MEM_DIN1_NUM: u32 = 3;
pub const SPI_MEM_DIN1_NUM_V: u32 = 3;
pub const SPI_MEM_DIN1_NUM_S: u32 = 2;
pub const SPI_MEM_DIN0_NUM: u32 = 3;
pub const SPI_MEM_DIN0_NUM_V: u32 = 3;
pub const SPI_MEM_DIN0_NUM_S: u32 = 0;
pub const SPI_MEM_DOUT3_MODE_V: u32 = 1;
pub const SPI_MEM_DOUT3_MODE_S: u32 = 3;
pub const SPI_MEM_DOUT2_MODE_V: u32 = 1;
pub const SPI_MEM_DOUT2_MODE_S: u32 = 2;
pub const SPI_MEM_DOUT1_MODE_V: u32 = 1;
pub const SPI_MEM_DOUT1_MODE_S: u32 = 1;
pub const SPI_MEM_DOUT0_MODE_V: u32 = 1;
pub const SPI_MEM_DOUT0_MODE_S: u32 = 0;
pub const SPI_MEM_MST_ST_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_MST_ST_END_INT_ENA_S: u32 = 4;
pub const SPI_MEM_SLV_ST_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_SLV_ST_END_INT_ENA_S: u32 = 3;
pub const SPI_MEM_WPE_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_WPE_END_INT_ENA_S: u32 = 2;
pub const SPI_MEM_PES_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_PES_END_INT_ENA_S: u32 = 1;
pub const SPI_MEM_PER_END_INT_ENA_V: u32 = 1;
pub const SPI_MEM_PER_END_INT_ENA_S: u32 = 0;
pub const SPI_MEM_MST_ST_END_INT_CLR_V: u32 = 1;
pub const SPI_MEM_MST_ST_END_INT_CLR_S: u32 = 4;
pub const SPI_MEM_SLV_ST_END_INT_CLR_V: u32 = 1;
pub const SPI_MEM_SLV_ST_END_INT_CLR_S: u32 = 3;
pub const SPI_MEM_WPE_END_INT_CLR_V: u32 = 1;
pub const SPI_MEM_WPE_END_INT_CLR_S: u32 = 2;
pub const SPI_MEM_PES_END_INT_CLR_V: u32 = 1;
pub const SPI_MEM_PES_END_INT_CLR_S: u32 = 1;
pub const SPI_MEM_PER_END_INT_CLR_V: u32 = 1;
pub const SPI_MEM_PER_END_INT_CLR_S: u32 = 0;
pub const SPI_MEM_MST_ST_END_INT_RAW_V: u32 = 1;
pub const SPI_MEM_MST_ST_END_INT_RAW_S: u32 = 4;
pub const SPI_MEM_SLV_ST_END_INT_RAW_V: u32 = 1;
pub const SPI_MEM_SLV_ST_END_INT_RAW_S: u32 = 3;
pub const SPI_MEM_WPE_END_INT_RAW_V: u32 = 1;
pub const SPI_MEM_WPE_END_INT_RAW_S: u32 = 2;
pub const SPI_MEM_PES_END_INT_RAW_V: u32 = 1;
pub const SPI_MEM_PES_END_INT_RAW_S: u32 = 1;
pub const SPI_MEM_PER_END_INT_RAW_V: u32 = 1;
pub const SPI_MEM_PER_END_INT_RAW_S: u32 = 0;
pub const SPI_MEM_MST_ST_END_INT_ST_V: u32 = 1;
pub const SPI_MEM_MST_ST_END_INT_ST_S: u32 = 4;
pub const SPI_MEM_SLV_ST_END_INT_ST_V: u32 = 1;
pub const SPI_MEM_SLV_ST_END_INT_ST_S: u32 = 3;
pub const SPI_MEM_WPE_END_INT_ST_V: u32 = 1;
pub const SPI_MEM_WPE_END_INT_ST_S: u32 = 2;
pub const SPI_MEM_PES_END_INT_ST_V: u32 = 1;
pub const SPI_MEM_PES_END_INT_ST_S: u32 = 1;
pub const SPI_MEM_PER_END_INT_ST_V: u32 = 1;
pub const SPI_MEM_PER_END_INT_ST_S: u32 = 0;
pub const SPI_MEM_CLK_EN_V: u32 = 1;
pub const SPI_MEM_CLK_EN_S: u32 = 0;
pub const SPI_MEM_SPI01_CLK_SEL: u32 = 3;
pub const SPI_MEM_SPI01_CLK_SEL_V: u32 = 3;
pub const SPI_MEM_SPI01_CLK_SEL_S: u32 = 0;
pub const SPI_MEM_DATE: u32 = 268435455;
pub const SPI_MEM_DATE_V: u32 = 268435455;
pub const SPI_MEM_DATE_S: u32 = 0;
pub const SPI_MAX_DMA_LEN: u32 = 4092;
pub const SPICOMMON_BUSFLAG_SLAVE: u32 = 0;
pub const SPICOMMON_BUSFLAG_MASTER: u32 = 1;
pub const SPICOMMON_BUSFLAG_IOMUX_PINS: u32 = 2;
pub const SPICOMMON_BUSFLAG_GPIO_PINS: u32 = 4;
pub const SPICOMMON_BUSFLAG_SCLK: u32 = 8;
pub const SPICOMMON_BUSFLAG_MISO: u32 = 16;
pub const SPICOMMON_BUSFLAG_MOSI: u32 = 32;
pub const SPICOMMON_BUSFLAG_DUAL: u32 = 64;
pub const SPICOMMON_BUSFLAG_WPHD: u32 = 128;
pub const SPICOMMON_BUSFLAG_QUAD: u32 = 192;
pub const SPICOMMON_BUSFLAG_IO4_IO7: u32 = 256;
pub const SPICOMMON_BUSFLAG_OCTAL: u32 = 448;
pub const SPICOMMON_BUSFLAG_NATIVE_PINS: u32 = 2;
pub const SPI_MASTER_FREQ_8M: u32 = 8000000;
pub const SPI_MASTER_FREQ_9M: u32 = 8888888;
pub const SPI_MASTER_FREQ_10M: u32 = 10000000;
pub const SPI_MASTER_FREQ_11M: u32 = 11428571;
pub const SPI_MASTER_FREQ_13M: u32 = 13333333;
pub const SPI_MASTER_FREQ_16M: u32 = 16000000;
pub const SPI_MASTER_FREQ_20M: u32 = 20000000;
pub const SPI_MASTER_FREQ_26M: u32 = 26666666;
pub const SPI_MASTER_FREQ_40M: u32 = 40000000;
pub const SPI_MASTER_FREQ_80M: u32 = 80000000;
pub const SPI_DEVICE_TXBIT_LSBFIRST: u32 = 1;
pub const SPI_DEVICE_RXBIT_LSBFIRST: u32 = 2;
pub const SPI_DEVICE_BIT_LSBFIRST: u32 = 3;
pub const SPI_DEVICE_3WIRE: u32 = 4;
pub const SPI_DEVICE_POSITIVE_CS: u32 = 8;
pub const SPI_DEVICE_HALFDUPLEX: u32 = 16;
pub const SPI_DEVICE_CLK_AS_CS: u32 = 32;
pub const SPI_DEVICE_NO_DUMMY: u32 = 64;
pub const SPI_DEVICE_DDRCLK: u32 = 128;
pub const SPI_TRANS_MODE_DIO: u32 = 1;
pub const SPI_TRANS_MODE_QIO: u32 = 2;
pub const SPI_TRANS_USE_RXDATA: u32 = 4;
pub const SPI_TRANS_USE_TXDATA: u32 = 8;
pub const SPI_TRANS_MODE_DIOQIO_ADDR: u32 = 16;
pub const SPI_TRANS_VARIABLE_CMD: u32 = 32;
pub const SPI_TRANS_VARIABLE_ADDR: u32 = 64;
pub const SPI_TRANS_VARIABLE_DUMMY: u32 = 128;
pub const SPI_TRANS_CS_KEEP_ACTIVE: u32 = 256;
pub const SPI_TRANS_MULTILINE_CMD: u32 = 512;
pub const SPI_TRANS_MODE_OCT: u32 = 1024;
pub const SPI_TRANS_MULTILINE_ADDR: u32 = 16;
pub const FF_DEFINED: u32 = 86604;
pub const FFCONF_DEF: u32 = 86604;
pub const FF_FS_READONLY: u32 = 0;
pub const FF_FS_MINIMIZE: u32 = 0;
pub const FF_USE_STRFUNC: u32 = 0;
pub const FF_USE_FIND: u32 = 0;
pub const FF_USE_MKFS: u32 = 1;
pub const FF_USE_EXPAND: u32 = 0;
pub const FF_USE_CHMOD: u32 = 1;
pub const FF_USE_LABEL: u32 = 0;
pub const FF_USE_FORWARD: u32 = 0;
pub const FF_CODE_PAGE: u32 = 437;
pub const FF_USE_LFN: u32 = 0;
pub const FF_LFN_UNICODE: u32 = 0;
pub const FF_LFN_BUF: u32 = 255;
pub const FF_SFN_BUF: u32 = 12;
pub const FF_STRF_ENCODE: u32 = 3;
pub const FF_FS_RPATH: u32 = 0;
pub const FF_VOLUMES: u32 = 2;
pub const FF_STR_VOLUME_ID: u32 = 0;
pub const FF_MULTI_PARTITION: u32 = 1;
pub const FF_SS_SDCARD: u32 = 512;
pub const FF_SS_WL: u32 = 4096;
pub const FF_USE_TRIM: u32 = 0;
pub const FF_FS_NOFSINFO: u32 = 0;
pub const FF_FS_EXFAT: u32 = 0;
pub const FF_FS_NORTC: u32 = 0;
pub const FF_NORTC_MON: u32 = 1;
pub const FF_NORTC_MDAY: u32 = 1;
pub const FF_NORTC_YEAR: u32 = 2018;
pub const FF_FS_LOCK: u32 = 0;
pub const FF_FS_REENTRANT: u32 = 1;
pub const FF_INTDEF: u32 = 2;
pub const FA_READ: u32 = 1;
pub const FA_WRITE: u32 = 2;
pub const FA_OPEN_EXISTING: u32 = 0;
pub const FA_CREATE_NEW: u32 = 4;
pub const FA_CREATE_ALWAYS: u32 = 8;
pub const FA_OPEN_ALWAYS: u32 = 16;
pub const FA_OPEN_APPEND: u32 = 48;
pub const FM_FAT: u32 = 1;
pub const FM_FAT32: u32 = 2;
pub const FM_EXFAT: u32 = 4;
pub const FM_ANY: u32 = 7;
pub const FM_SFD: u32 = 8;
pub const FS_FAT12: u32 = 1;
pub const FS_FAT16: u32 = 2;
pub const FS_FAT32: u32 = 3;
pub const FS_EXFAT: u32 = 4;
pub const AM_RDO: u32 = 1;
pub const AM_HID: u32 = 2;
pub const AM_SYS: u32 = 4;
pub const AM_DIR: u32 = 16;
pub const AM_ARC: u32 = 32;
pub const WL_INVALID_HANDLE: i32 = -1;
pub const FF_DRV_NOT_USED: u32 = 255;
pub const STA_NOINIT: u32 = 1;
pub const STA_NODISK: u32 = 2;
pub const STA_PROTECT: u32 = 4;
pub const CTRL_SYNC: u32 = 0;
pub const GET_SECTOR_COUNT: u32 = 1;
pub const GET_SECTOR_SIZE: u32 = 2;
pub const GET_BLOCK_SIZE: u32 = 3;
pub const CTRL_TRIM: u32 = 4;
pub const CTRL_POWER: u32 = 5;
pub const CTRL_LOCK: u32 = 6;
pub const CTRL_EJECT: u32 = 7;
pub const CTRL_FORMAT: u32 = 8;
pub const MMC_GET_TYPE: u32 = 10;
pub const MMC_GET_CSD: u32 = 11;
pub const MMC_GET_CID: u32 = 12;
pub const MMC_GET_OCR: u32 = 13;
pub const MMC_GET_SDSTAT: u32 = 14;
pub const ISDIO_READ: u32 = 55;
pub const ISDIO_WRITE: u32 = 56;
pub const ISDIO_MRITE: u32 = 57;
pub const ATA_GET_REV: u32 = 20;
pub const ATA_GET_MODEL: u32 = 21;
pub const ATA_GET_SN: u32 = 22;
pub const MMC_GO_IDLE_STATE: u32 = 0;
pub const MMC_SEND_OP_COND: u32 = 1;
pub const MMC_ALL_SEND_CID: u32 = 2;
pub const MMC_SET_RELATIVE_ADDR: u32 = 3;
pub const MMC_SWITCH: u32 = 6;
pub const MMC_SELECT_CARD: u32 = 7;
pub const MMC_SEND_EXT_CSD: u32 = 8;
pub const MMC_SEND_CSD: u32 = 9;
pub const MMC_SEND_CID: u32 = 10;
pub const MMC_READ_DAT_UNTIL_STOP: u32 = 11;
pub const MMC_STOP_TRANSMISSION: u32 = 12;
pub const MMC_SEND_STATUS: u32 = 13;
pub const MMC_SET_BLOCKLEN: u32 = 16;
pub const MMC_READ_BLOCK_SINGLE: u32 = 17;
pub const MMC_READ_BLOCK_MULTIPLE: u32 = 18;
pub const MMC_WRITE_DAT_UNTIL_STOP: u32 = 20;
pub const MMC_SET_BLOCK_COUNT: u32 = 23;
pub const MMC_WRITE_BLOCK_SINGLE: u32 = 24;
pub const MMC_WRITE_BLOCK_MULTIPLE: u32 = 25;
pub const MMC_APP_CMD: u32 = 55;
pub const SD_SEND_RELATIVE_ADDR: u32 = 3;
pub const SD_SEND_SWITCH_FUNC: u32 = 6;
pub const SD_SEND_IF_COND: u32 = 8;
pub const SD_READ_OCR: u32 = 58;
pub const SD_CRC_ON_OFF: u32 = 59;
pub const SD_APP_SET_BUS_WIDTH: u32 = 6;
pub const SD_APP_SD_STATUS: u32 = 13;
pub const SD_APP_OP_COND: u32 = 41;
pub const SD_APP_SEND_SCR: u32 = 51;
pub const SD_IO_SEND_OP_COND: u32 = 5;
pub const SD_IO_RW_DIRECT: u32 = 52;
pub const SD_IO_RW_EXTENDED: u32 = 53;
pub const MMC_OCR_MEM_READY: u32 = 2147483648;
pub const MMC_OCR_ACCESS_MODE_MASK: u32 = 1610612736;
pub const MMC_OCR_SECTOR_MODE: u32 = 1073741824;
pub const MMC_OCR_BYTE_MODE: u32 = 536870912;
pub const MMC_OCR_3_5V_3_6V: u32 = 8388608;
pub const MMC_OCR_3_4V_3_5V: u32 = 4194304;
pub const MMC_OCR_3_3V_3_4V: u32 = 2097152;
pub const MMC_OCR_3_2V_3_3V: u32 = 1048576;
pub const MMC_OCR_3_1V_3_2V: u32 = 524288;
pub const MMC_OCR_3_0V_3_1V: u32 = 262144;
pub const MMC_OCR_2_9V_3_0V: u32 = 131072;
pub const MMC_OCR_2_8V_2_9V: u32 = 65536;
pub const MMC_OCR_2_7V_2_8V: u32 = 32768;
pub const MMC_OCR_2_6V_2_7V: u32 = 16384;
pub const MMC_OCR_2_5V_2_6V: u32 = 8192;
pub const MMC_OCR_2_4V_2_5V: u32 = 4096;
pub const MMC_OCR_2_3V_2_4V: u32 = 2048;
pub const MMC_OCR_2_2V_2_3V: u32 = 1024;
pub const MMC_OCR_2_1V_2_2V: u32 = 512;
pub const MMC_OCR_2_0V_2_1V: u32 = 256;
pub const MMC_OCR_1_65V_1_95V: u32 = 128;
pub const SD_OCR_SDHC_CAP: u32 = 1073741824;
pub const SD_OCR_VOL_MASK: u32 = 16744448;
pub const MMC_R1_READY_FOR_DATA: u32 = 256;
pub const MMC_R1_APP_CMD: u32 = 32;
pub const MMC_R1_SWITCH_ERROR: u32 = 128;
pub const SD_SPI_R1_IDLE_STATE: u32 = 1;
pub const SD_SPI_R1_ERASE_RST: u32 = 2;
pub const SD_SPI_R1_ILLEGAL_CMD: u32 = 4;
pub const SD_SPI_R1_CMD_CRC_ERR: u32 = 8;
pub const SD_SPI_R1_ERASE_SEQ_ERR: u32 = 16;
pub const SD_SPI_R1_ADDR_ERR: u32 = 32;
pub const SD_SPI_R1_PARAM_ERR: u32 = 64;
pub const SD_SPI_R1_NO_RESPONSE: u32 = 128;
pub const SDIO_R1_FUNC_NUM_ERR: u32 = 16;
pub const SD_SPI_DATA_ACCEPTED: u32 = 2;
pub const SD_SPI_DATA_CRC_ERROR: u32 = 5;
pub const SD_SPI_DATA_WR_ERROR: u32 = 6;
pub const SD_ARG_BUS_WIDTH_1: u32 = 0;
pub const SD_ARG_BUS_WIDTH_4: u32 = 2;
pub const EXT_CSD_BUS_WIDTH: u32 = 183;
pub const EXT_CSD_HS_TIMING: u32 = 185;
pub const EXT_CSD_REV: u32 = 192;
pub const EXT_CSD_STRUCTURE: u32 = 194;
pub const EXT_CSD_CARD_TYPE: u32 = 196;
pub const EXT_CSD_SEC_COUNT: u32 = 212;
pub const EXT_CSD_PWR_CL_26_360: u32 = 203;
pub const EXT_CSD_PWR_CL_52_360: u32 = 202;
pub const EXT_CSD_PWR_CL_26_195: u32 = 201;
pub const EXT_CSD_PWR_CL_52_195: u32 = 200;
pub const EXT_CSD_POWER_CLASS: u32 = 187;
pub const EXT_CSD_CMD_SET: u32 = 191;
pub const EXT_CSD_S_CMD_SET: u32 = 504;
pub const EXT_CSD_CMD_SET_NORMAL: u32 = 1;
pub const EXT_CSD_CMD_SET_SECURE: u32 = 2;
pub const EXT_CSD_CMD_SET_CPSECURE: u32 = 4;
pub const EXT_CSD_HS_TIMING_BC: u32 = 0;
pub const EXT_CSD_HS_TIMING_HS: u32 = 1;
pub const EXT_CSD_HS_TIMING_HS200: u32 = 2;
pub const EXT_CSD_HS_TIMING_HS400: u32 = 3;
pub const EXT_CSD_BUS_WIDTH_1: u32 = 0;
pub const EXT_CSD_BUS_WIDTH_4: u32 = 1;
pub const EXT_CSD_BUS_WIDTH_8: u32 = 2;
pub const EXT_CSD_BUS_WIDTH_4_DDR: u32 = 5;
pub const EXT_CSD_BUS_WIDTH_8_DDR: u32 = 6;
pub const EXT_CSD_CARD_TYPE_F_26M: u32 = 1;
pub const EXT_CSD_CARD_TYPE_F_52M: u32 = 2;
pub const EXT_CSD_CARD_TYPE_F_52M_1_8V: u32 = 4;
pub const EXT_CSD_CARD_TYPE_F_52M_1_2V: u32 = 8;
pub const EXT_CSD_CARD_TYPE_26M: u32 = 1;
pub const EXT_CSD_CARD_TYPE_52M: u32 = 3;
pub const EXT_CSD_CARD_TYPE_52M_V18: u32 = 7;
pub const EXT_CSD_CARD_TYPE_52M_V12: u32 = 11;
pub const EXT_CSD_CARD_TYPE_52M_V12_18: u32 = 15;
pub const EXT_CSD_MMC_SIZE: u32 = 512;
pub const MMC_SWITCH_MODE_CMD_SET: u32 = 0;
pub const MMC_SWITCH_MODE_SET_BITS: u32 = 1;
pub const MMC_SWITCH_MODE_CLEAR_BITS: u32 = 2;
pub const MMC_SWITCH_MODE_WRITE_BYTE: u32 = 3;
pub const MMC_CSD_CSDVER_1_0: u32 = 1;
pub const MMC_CSD_CSDVER_2_0: u32 = 2;
pub const MMC_CSD_CSDVER_EXT_CSD: u32 = 3;
pub const MMC_CSD_MMCVER_1_0: u32 = 0;
pub const MMC_CSD_MMCVER_1_4: u32 = 1;
pub const MMC_CSD_MMCVER_2_0: u32 = 2;
pub const MMC_CSD_MMCVER_3_1: u32 = 3;
pub const MMC_CSD_MMCVER_4_0: u32 = 4;
pub const SD_CSD_CSDVER_1_0: u32 = 0;
pub const SD_CSD_CSDVER_2_0: u32 = 1;
pub const SD_CSD_TAAC_1_5_MSEC: u32 = 38;
pub const SD_CSD_SPEED_25_MHZ: u32 = 50;
pub const SD_CSD_SPEED_50_MHZ: u32 = 90;
pub const SD_CSD_CCC_BASIC: u32 = 1;
pub const SD_CSD_CCC_BR: u32 = 4;
pub const SD_CSD_CCC_BW: u32 = 16;
pub const SD_CSD_CCC_ERASE: u32 = 32;
pub const SD_CSD_CCC_WP: u32 = 64;
pub const SD_CSD_CCC_LC: u32 = 128;
pub const SD_CSD_CCC_AS: u32 = 256;
pub const SD_CSD_CCC_IOM: u32 = 512;
pub const SD_CSD_CCC_SWITCH: u32 = 1024;
pub const SD_CSD_V2_BL_LEN: u32 = 9;
pub const SD_CSD_VDD_RW_CURR_100mA: u32 = 7;
pub const SD_CSD_VDD_RW_CURR_80mA: u32 = 6;
pub const SD_CSD_RW_BL_LEN_2G: u32 = 10;
pub const SD_CSD_RW_BL_LEN_1G: u32 = 9;
pub const SCR_STRUCTURE_VER_1_0: u32 = 0;
pub const SCR_SD_SPEC_VER_1_0: u32 = 0;
pub const SCR_SD_SPEC_VER_1_10: u32 = 1;
pub const SCR_SD_SPEC_VER_2: u32 = 2;
pub const SCR_SD_SECURITY_NONE: u32 = 0;
pub const SCR_SD_SECURITY_1_0: u32 = 1;
pub const SCR_SD_SECURITY_1_0_2: u32 = 2;
pub const SCR_SD_BUS_WIDTHS_1BIT: u32 = 1;
pub const SCR_SD_BUS_WIDTHS_4BIT: u32 = 4;
pub const SD_SFUNC_GROUP_MAX: u32 = 6;
pub const SD_SFUNC_FUNC_MAX: u32 = 15;
pub const SD_ACCESS_MODE: u32 = 1;
pub const SD_ACCESS_MODE_SDR12: u32 = 0;
pub const SD_ACCESS_MODE_SDR25: u32 = 1;
pub const SD_ACCESS_MODE_SDR50: u32 = 2;
pub const SD_ACCESS_MODE_SDR104: u32 = 3;
pub const SD_ACCESS_MODE_DDR50: u32 = 4;
pub const SD_IO_OCR_MEM_READY: u32 = 2147483648;
pub const SD_IO_OCR_MEM_PRESENT: u32 = 134217728;
pub const SD_IO_OCR_MASK: u32 = 16777200;
pub const SD_ARG_CMD52_READ: u32 = 0;
pub const SD_ARG_CMD52_WRITE: u32 = 2147483648;
pub const SD_ARG_CMD52_FUNC_SHIFT: u32 = 28;
pub const SD_ARG_CMD52_FUNC_MASK: u32 = 7;
pub const SD_ARG_CMD52_EXCHANGE: u32 = 134217728;
pub const SD_ARG_CMD52_REG_SHIFT: u32 = 9;
pub const SD_ARG_CMD52_REG_MASK: u32 = 131071;
pub const SD_ARG_CMD52_DATA_SHIFT: u32 = 0;
pub const SD_ARG_CMD52_DATA_MASK: u32 = 255;
pub const SD_ARG_CMD53_READ: u32 = 0;
pub const SD_ARG_CMD53_WRITE: u32 = 2147483648;
pub const SD_ARG_CMD53_FUNC_SHIFT: u32 = 28;
pub const SD_ARG_CMD53_FUNC_MASK: u32 = 7;
pub const SD_ARG_CMD53_BLOCK_MODE: u32 = 134217728;
pub const SD_ARG_CMD53_INCREMENT: u32 = 67108864;
pub const SD_ARG_CMD53_REG_SHIFT: u32 = 9;
pub const SD_ARG_CMD53_REG_MASK: u32 = 131071;
pub const SD_ARG_CMD53_LENGTH_SHIFT: u32 = 0;
pub const SD_ARG_CMD53_LENGTH_MASK: u32 = 511;
pub const SD_ARG_CMD53_LENGTH_MAX: u32 = 512;
pub const SD_IO_CCCR_START: u32 = 0;
pub const SD_IO_CCCR_SIZE: u32 = 256;
pub const SD_IO_CCCR_FN_ENABLE: u32 = 2;
pub const SD_IO_CCCR_FN_READY: u32 = 3;
pub const SD_IO_CCCR_INT_ENABLE: u32 = 4;
pub const SD_IO_CCCR_INT_PENDING: u32 = 5;
pub const SD_IO_CCCR_CTL: u32 = 6;
pub const CCCR_CTL_RES: u32 = 8;
pub const SD_IO_CCCR_BUS_WIDTH: u32 = 7;
pub const CCCR_BUS_WIDTH_1: u32 = 0;
pub const CCCR_BUS_WIDTH_4: u32 = 2;
pub const CCCR_BUS_WIDTH_8: u32 = 3;
pub const CCCR_BUS_WIDTH_ECSI: u32 = 32;
pub const SD_IO_CCCR_CARD_CAP: u32 = 8;
pub const SD_IO_CCCR_CISPTR: u32 = 9;
pub const SD_IO_CCCR_BLKSIZEL: u32 = 16;
pub const SD_IO_CCCR_BLKSIZEH: u32 = 17;
pub const SD_IO_CCCR_HIGHSPEED: u32 = 19;
pub const SD_IO_FBR_START: u32 = 256;
pub const SD_IO_FBR_SIZE: u32 = 1792;
pub const SD_IO_CIS_START: u32 = 4096;
pub const SD_IO_CIS_SIZE: u32 = 94208;
pub const CISTPL_CODE_NULL: u32 = 0;
pub const CISTPL_CODE_DEVICE: u32 = 1;
pub const CISTPL_CODE_CHKSUM: u32 = 16;
pub const CISTPL_CODE_VERS1: u32 = 21;
pub const CISTPL_CODE_ALTSTR: u32 = 22;
pub const CISTPL_CODE_CONFIG: u32 = 26;
pub const CISTPL_CODE_CFTABLE_ENTRY: u32 = 27;
pub const CISTPL_CODE_MANFID: u32 = 32;
pub const CISTPL_CODE_FUNCID: u32 = 33;
pub const TPLFID_FUNCTION_SDIO: u32 = 12;
pub const CISTPL_CODE_FUNCE: u32 = 34;
pub const CISTPL_CODE_VENDER_BEGIN: u32 = 128;
pub const CISTPL_CODE_VENDER_END: u32 = 143;
pub const CISTPL_CODE_SDIO_STD: u32 = 145;
pub const CISTPL_CODE_SDIO_EXT: u32 = 146;
pub const CISTPL_CODE_END: u32 = 255;
pub const SDMMC_TIMING_LEGACY: u32 = 0;
pub const SDMMC_TIMING_HIGHSPEED: u32 = 1;
pub const SDMMC_TIMING_MMC_DDR52: u32 = 2;
pub const SNTP_GET_SERVERS_FROM_DHCP: u32 = 0;
pub const SNTP_GET_SERVERS_FROM_DHCPV6: u32 = 0;
pub const SNTP_CHECK_RESPONSE: u32 = 0;
pub const SNTP_COMP_ROUNDTRIP: u32 = 0;
pub const SNTP_STARTUP_DELAY: u32 = 1;
pub const SNTP_RECV_TIMEOUT: u32 = 15000;
pub const SNTP_RETRY_TIMEOUT: u32 = 15000;
pub const SNTP_RETRY_TIMEOUT_MAX: u32 = 150000;
pub const SNTP_RETRY_TIMEOUT_EXP: u32 = 1;
pub const SNTP_MONITOR_SERVER_REACHABILITY: u32 = 1;
pub const SNTP_OPMODE_POLL: u32 = 0;
pub const SNTP_OPMODE_LISTENONLY: u32 = 1;
pub const ESP_PING_COUNT_INFINITE: u32 = 0;
pub const PBUF_TRANSPORT_HLEN: u32 = 20;
pub const PBUF_IP_HLEN: u32 = 40;
pub const PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS: u32 = 128;
pub const PBUF_TYPE_FLAG_DATA_VOLATILE: u32 = 64;
pub const PBUF_TYPE_ALLOC_SRC_MASK: u32 = 15;
pub const PBUF_ALLOC_FLAG_RX: u32 = 256;
pub const PBUF_ALLOC_FLAG_DATA_CONTIGUOUS: u32 = 512;
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP: u32 = 0;
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF: u32 = 1;
pub const PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL: u32 = 2;
pub const PBUF_TYPE_ALLOC_SRC_MASK_APP_MIN: u32 = 3;
pub const PBUF_TYPE_ALLOC_SRC_MASK_APP_MAX: u32 = 15;
pub const PBUF_FLAG_PUSH: u32 = 1;
pub const PBUF_FLAG_IS_CUSTOM: u32 = 2;
pub const PBUF_FLAG_MCASTLOOP: u32 = 4;
pub const PBUF_FLAG_LLBCAST: u32 = 8;
pub const PBUF_FLAG_LLMCAST: u32 = 16;
pub const PBUF_FLAG_TCP_FIN: u32 = 32;
pub const PBUF_POOL_FREE_OOSEQ: u32 = 1;
pub const MEMP_SIZE: u32 = 0;
pub const NETIF_MAX_HWADDR_LEN: u32 = 6;
pub const NETIF_NAMESIZE: u32 = 6;
pub const NETIF_FLAG_UP: u32 = 1;
pub const NETIF_FLAG_BROADCAST: u32 = 2;
pub const NETIF_FLAG_LINK_UP: u32 = 4;
pub const NETIF_FLAG_ETHARP: u32 = 8;
pub const NETIF_FLAG_ETHERNET: u32 = 16;
pub const NETIF_FLAG_IGMP: u32 = 32;
pub const NETIF_FLAG_MLD6: u32 = 64;
pub const NETIF_FLAG_GARP: u32 = 128;
pub const NETIF_ADDR_IDX_MAX: u32 = 127;
pub const LWIP_NETIF_USE_HINTS: u32 = 0;
pub const NETIF_NO_INDEX: u32 = 0;
pub const LWIP_NSC_NONE: u32 = 0;
pub const LWIP_NSC_NETIF_ADDED: u32 = 1;
pub const LWIP_NSC_NETIF_REMOVED: u32 = 2;
pub const LWIP_NSC_LINK_CHANGED: u32 = 4;
pub const LWIP_NSC_STATUS_CHANGED: u32 = 8;
pub const LWIP_NSC_IPV4_ADDRESS_CHANGED: u32 = 16;
pub const LWIP_NSC_IPV4_GATEWAY_CHANGED: u32 = 32;
pub const LWIP_NSC_IPV4_NETMASK_CHANGED: u32 = 64;
pub const LWIP_NSC_IPV4_SETTINGS_CHANGED: u32 = 128;
pub const LWIP_NSC_IPV6_SET: u32 = 256;
pub const LWIP_NSC_IPV6_ADDR_STATE_CHANGED: u32 = 512;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const SIN_ZERO_LEN: u32 = 8;
pub const MSG_TRUNC: u32 = 4;
pub const MSG_CTRUNC: u32 = 8;
pub const IFNAMSIZ: u32 = 6;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_BROADCAST: u32 = 32;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_CONTIMEO: u32 = 4105;
pub const SO_NO_CHECK: u32 = 4106;
pub const SO_BINDTODEVICE: u32 = 4107;
pub const SOL_SOCKET: u32 = 4095;
pub const AF_UNSPEC: u32 = 0;
pub const AF_INET: u32 = 2;
pub const AF_INET6: u32 = 10;
pub const PF_INET: u32 = 2;
pub const PF_INET6: u32 = 10;
pub const PF_UNSPEC: u32 = 0;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_UDPLITE: u32 = 136;
pub const IPPROTO_RAW: u32 = 255;
pub const MSG_PEEK: u32 = 1;
pub const MSG_WAITALL: u32 = 2;
pub const MSG_OOB: u32 = 4;
pub const MSG_DONTWAIT: u32 = 8;
pub const MSG_MORE: u32 = 16;
pub const MSG_NOSIGNAL: u32 = 32;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_PKTINFO: u32 = 8;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_KEEPALIVE: u32 = 2;
pub const TCP_KEEPIDLE: u32 = 3;
pub const TCP_KEEPINTVL: u32 = 4;
pub const TCP_KEEPCNT: u32 = 5;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_V6ONLY: u32 = 27;
pub const IP_MULTICAST_TTL: u32 = 5;
pub const IP_MULTICAST_IF: u32 = 6;
pub const IP_MULTICAST_LOOP: u32 = 7;
pub const IP_ADD_MEMBERSHIP: u32 = 3;
pub const IP_DROP_MEMBERSHIP: u32 = 4;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_ADD_MEMBERSHIP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_DROP_MEMBERSHIP: u32 = 13;
pub const IPV6_MULTICAST_IF: u32 = 768;
pub const IPV6_MULTICAST_HOPS: u32 = 769;
pub const IPV6_MULTICAST_LOOP: u32 = 770;
pub const IPTOS_TOS_MASK: u32 = 30;
pub const IPTOS_LOWDELAY: u32 = 16;
pub const IPTOS_THROUGHPUT: u32 = 8;
pub const IPTOS_RELIABILITY: u32 = 4;
pub const IPTOS_LOWCOST: u32 = 2;
pub const IPTOS_MINCOST: u32 = 2;
pub const IPTOS_PREC_MASK: u32 = 224;
pub const IPTOS_PREC_NETCONTROL: u32 = 224;
pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
pub const IPTOS_PREC_FLASH: u32 = 96;
pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
pub const IPTOS_PREC_PRIORITY: u32 = 32;
pub const IPTOS_PREC_ROUTINE: u32 = 0;
pub const IOCPARM_MASK: u32 = 127;
pub const IOC_VOID: u32 = 536870912;
pub const IOC_OUT: u32 = 1073741824;
pub const IOC_IN: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const O_NDELAY: u32 = 16384;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const LWIP_SELECT_MAXNFDS: u32 = 64;
pub const IF_NAMESIZE: u32 = 6;
pub const MSG_DONTROUTE: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const MSG_EOR: u32 = 8;
pub const SOMAXCONN: u32 = 128;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const ESP_ERR_ESP_TLS_BASE: i32 = 32768;
pub const ESP_ERR_ESP_TLS_CANNOT_RESOLVE_HOSTNAME: i32 = 32769;
pub const ESP_ERR_ESP_TLS_CANNOT_CREATE_SOCKET: i32 = 32770;
pub const ESP_ERR_ESP_TLS_UNSUPPORTED_PROTOCOL_FAMILY: i32 = 32771;
pub const ESP_ERR_ESP_TLS_FAILED_CONNECT_TO_HOST: i32 = 32772;
pub const ESP_ERR_ESP_TLS_SOCKET_SETOPT_FAILED: i32 = 32773;
pub const ESP_ERR_ESP_TLS_CONNECTION_TIMEOUT: i32 = 32774;
pub const ESP_ERR_ESP_TLS_SE_FAILED: i32 = 32775;
pub const ESP_ERR_ESP_TLS_TCP_CLOSED_FIN: i32 = 32776;
pub const ESP_ERR_MBEDTLS_CERT_PARTLY_OK: i32 = 32784;
pub const ESP_ERR_MBEDTLS_CTR_DRBG_SEED_FAILED: i32 = 32785;
pub const ESP_ERR_MBEDTLS_SSL_SET_HOSTNAME_FAILED: i32 = 32786;
pub const ESP_ERR_MBEDTLS_SSL_CONFIG_DEFAULTS_FAILED: i32 = 32787;
pub const ESP_ERR_MBEDTLS_SSL_CONF_ALPN_PROTOCOLS_FAILED: i32 = 32788;
pub const ESP_ERR_MBEDTLS_X509_CRT_PARSE_FAILED: i32 = 32789;
pub const ESP_ERR_MBEDTLS_SSL_CONF_OWN_CERT_FAILED: i32 = 32790;
pub const ESP_ERR_MBEDTLS_SSL_SETUP_FAILED: i32 = 32791;
pub const ESP_ERR_MBEDTLS_SSL_WRITE_FAILED: i32 = 32792;
pub const ESP_ERR_MBEDTLS_PK_PARSE_KEY_FAILED: i32 = 32793;
pub const ESP_ERR_MBEDTLS_SSL_HANDSHAKE_FAILED: i32 = 32794;
pub const ESP_ERR_MBEDTLS_SSL_CONF_PSK_FAILED: i32 = 32795;
pub const ESP_ERR_MBEDTLS_SSL_TICKET_SETUP_FAILED: i32 = 32796;
pub const ESP_ERR_WOLFSSL_SSL_SET_HOSTNAME_FAILED: i32 = 32817;
pub const ESP_ERR_WOLFSSL_SSL_CONF_ALPN_PROTOCOLS_FAILED: i32 = 32818;
pub const ESP_ERR_WOLFSSL_CERT_VERIFY_SETUP_FAILED: i32 = 32819;
pub const ESP_ERR_WOLFSSL_KEY_VERIFY_SETUP_FAILED: i32 = 32820;
pub const ESP_ERR_WOLFSSL_SSL_HANDSHAKE_FAILED: i32 = 32821;
pub const ESP_ERR_WOLFSSL_CTX_SETUP_FAILED: i32 = 32822;
pub const ESP_ERR_WOLFSSL_SSL_SETUP_FAILED: i32 = 32823;
pub const ESP_ERR_WOLFSSL_SSL_WRITE_FAILED: i32 = 32824;
pub const MBEDTLS_SSL_IN_CONTENT_LEN: u32 = 16384;
pub const MBEDTLS_SSL_OUT_CONTENT_LEN: u32 = 4096;
pub const MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED: i32 = -112;
pub const MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED: i32 = -114;
pub const MBEDTLS_PLATFORM_STD_EXIT_SUCCESS: u32 = 0;
pub const MBEDTLS_PLATFORM_STD_EXIT_FAILURE: u32 = 1;
pub const MBEDTLS_PLATFORM_STD_NV_SEED_FILE: &[u8; 9usize] = b"seedfile\0";
pub const MBEDTLS_EXIT_SUCCESS: u32 = 0;
pub const MBEDTLS_EXIT_FAILURE: u32 = 1;
pub const MBEDTLS_ERR_MPI_FILE_IO_ERROR: i32 = -2;
pub const MBEDTLS_ERR_MPI_BAD_INPUT_DATA: i32 = -4;
pub const MBEDTLS_ERR_MPI_INVALID_CHARACTER: i32 = -6;
pub const MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL: i32 = -8;
pub const MBEDTLS_ERR_MPI_NEGATIVE_VALUE: i32 = -10;
pub const MBEDTLS_ERR_MPI_DIVISION_BY_ZERO: i32 = -12;
pub const MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: i32 = -14;
pub const MBEDTLS_ERR_MPI_ALLOC_FAILED: i32 = -16;
pub const MBEDTLS_MPI_MAX_LIMBS: u32 = 10000;
pub const MBEDTLS_MPI_WINDOW_SIZE: u32 = 6;
pub const MBEDTLS_MPI_MAX_SIZE: u32 = 1024;
pub const MBEDTLS_MPI_MAX_BITS: u32 = 8192;
pub const MBEDTLS_MPI_MAX_BITS_SCALE100: u32 = 819200;
pub const MBEDTLS_LN_2_DIV_LN_10_SCALE100: u32 = 332;
pub const MBEDTLS_MPI_RW_BUFFER_SIZE: u32 = 2484;
pub const MBEDTLS_ERR_ECP_BAD_INPUT_DATA: i32 = -20352;
pub const MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL: i32 = -20224;
pub const MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE: i32 = -20096;
pub const MBEDTLS_ERR_ECP_VERIFY_FAILED: i32 = -19968;
pub const MBEDTLS_ERR_ECP_ALLOC_FAILED: i32 = -19840;
pub const MBEDTLS_ERR_ECP_RANDOM_FAILED: i32 = -19712;
pub const MBEDTLS_ERR_ECP_INVALID_KEY: i32 = -19584;
pub const MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH: i32 = -19456;
pub const MBEDTLS_ERR_ECP_HW_ACCEL_FAILED: i32 = -19328;
pub const MBEDTLS_ERR_ECP_IN_PROGRESS: i32 = -19200;
pub const MBEDTLS_ECP_DP_MAX: u32 = 12;
pub const MBEDTLS_ECP_MAX_BITS_MIN: u32 = 521;
pub const MBEDTLS_ECP_MAX_BITS: u32 = 521;
pub const MBEDTLS_ECP_MAX_BYTES: u32 = 66;
pub const MBEDTLS_ECP_MAX_PT_LEN: u32 = 133;
pub const MBEDTLS_ECP_WINDOW_SIZE: u32 = 4;
pub const MBEDTLS_ECP_FIXED_POINT_OPTIM: u32 = 1;
pub const MBEDTLS_ECP_PF_UNCOMPRESSED: u32 = 0;
pub const MBEDTLS_ECP_PF_COMPRESSED: u32 = 1;
pub const MBEDTLS_ECP_TLS_NAMED_CURVE: u32 = 3;
pub const MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE: i32 = -20608;
pub const MBEDTLS_ERR_MD_BAD_INPUT_DATA: i32 = -20736;
pub const MBEDTLS_ERR_MD_ALLOC_FAILED: i32 = -20864;
pub const MBEDTLS_ERR_MD_FILE_IO_ERROR: i32 = -20992;
pub const MBEDTLS_ERR_MD_HW_ACCEL_FAILED: i32 = -21120;
pub const MBEDTLS_MD_MAX_SIZE: u32 = 64;
pub const MBEDTLS_MD_MAX_BLOCK_SIZE: u32 = 128;
pub const MBEDTLS_ERR_RSA_BAD_INPUT_DATA: i32 = -16512;
pub const MBEDTLS_ERR_RSA_INVALID_PADDING: i32 = -16640;
pub const MBEDTLS_ERR_RSA_KEY_GEN_FAILED: i32 = -16768;
pub const MBEDTLS_ERR_RSA_KEY_CHECK_FAILED: i32 = -16896;
pub const MBEDTLS_ERR_RSA_PUBLIC_FAILED: i32 = -17024;
pub const MBEDTLS_ERR_RSA_PRIVATE_FAILED: i32 = -17152;
pub const MBEDTLS_ERR_RSA_VERIFY_FAILED: i32 = -17280;
pub const MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE: i32 = -17408;
pub const MBEDTLS_ERR_RSA_RNG_FAILED: i32 = -17536;
pub const MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION: i32 = -17664;
pub const MBEDTLS_ERR_RSA_HW_ACCEL_FAILED: i32 = -17792;
pub const MBEDTLS_RSA_PUBLIC: u32 = 0;
pub const MBEDTLS_RSA_PRIVATE: u32 = 1;
pub const MBEDTLS_RSA_PKCS_V15: u32 = 0;
pub const MBEDTLS_RSA_PKCS_V21: u32 = 1;
pub const MBEDTLS_RSA_SIGN: u32 = 1;
pub const MBEDTLS_RSA_CRYPT: u32 = 2;
pub const MBEDTLS_RSA_SALT_LEN_ANY: i32 = -1;
pub const MBEDTLS_ERR_PK_ALLOC_FAILED: i32 = -16256;
pub const MBEDTLS_ERR_PK_TYPE_MISMATCH: i32 = -16128;
pub const MBEDTLS_ERR_PK_BAD_INPUT_DATA: i32 = -16000;
pub const MBEDTLS_ERR_PK_FILE_IO_ERROR: i32 = -15872;
pub const MBEDTLS_ERR_PK_KEY_INVALID_VERSION: i32 = -15744;
pub const MBEDTLS_ERR_PK_KEY_INVALID_FORMAT: i32 = -15616;
pub const MBEDTLS_ERR_PK_UNKNOWN_PK_ALG: i32 = -15488;
pub const MBEDTLS_ERR_PK_PASSWORD_REQUIRED: i32 = -15360;
pub const MBEDTLS_ERR_PK_PASSWORD_MISMATCH: i32 = -15232;
pub const MBEDTLS_ERR_PK_INVALID_PUBKEY: i32 = -15104;
pub const MBEDTLS_ERR_PK_INVALID_ALG: i32 = -14976;
pub const MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE: i32 = -14848;
pub const MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE: i32 = -14720;
pub const MBEDTLS_ERR_PK_SIG_LEN_MISMATCH: i32 = -14592;
pub const MBEDTLS_ERR_PK_HW_ACCEL_FAILED: i32 = -14464;
pub const MBEDTLS_PK_SIGNATURE_MAX_SIZE: u32 = 0;
pub const MBEDTLS_PK_DEBUG_MAX_ITEMS: u32 = 3;
pub const MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE: i32 = -24704;
pub const MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA: i32 = -24832;
pub const MBEDTLS_ERR_CIPHER_ALLOC_FAILED: i32 = -24960;
pub const MBEDTLS_ERR_CIPHER_INVALID_PADDING: i32 = -25088;
pub const MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED: i32 = -25216;
pub const MBEDTLS_ERR_CIPHER_AUTH_FAILED: i32 = -25344;
pub const MBEDTLS_ERR_CIPHER_INVALID_CONTEXT: i32 = -25472;
pub const MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED: i32 = -25600;
pub const MBEDTLS_CIPHER_VARIABLE_IV_LEN: u32 = 1;
pub const MBEDTLS_CIPHER_VARIABLE_KEY_LEN: u32 = 2;
pub const MBEDTLS_MAX_IV_LENGTH: u32 = 16;
pub const MBEDTLS_MAX_BLOCK_LENGTH: u32 = 16;
pub const MBEDTLS_MAX_KEY_LENGTH: u32 = 64;
pub const MBEDTLS_TLS_RSA_WITH_NULL_MD5: u32 = 1;
pub const MBEDTLS_TLS_RSA_WITH_NULL_SHA: u32 = 2;
pub const MBEDTLS_TLS_RSA_WITH_RC4_128_MD5: u32 = 4;
pub const MBEDTLS_TLS_RSA_WITH_RC4_128_SHA: u32 = 5;
pub const MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA: u32 = 9;
pub const MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 10;
pub const MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA: u32 = 21;
pub const MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 22;
pub const MBEDTLS_TLS_PSK_WITH_NULL_SHA: u32 = 44;
pub const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA: u32 = 45;
pub const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA: u32 = 46;
pub const MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA: u32 = 47;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: u32 = 51;
pub const MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA: u32 = 53;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: u32 = 57;
pub const MBEDTLS_TLS_RSA_WITH_NULL_SHA256: u32 = 59;
pub const MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256: u32 = 60;
pub const MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256: u32 = 61;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: u32 = 65;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: u32 = 69;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: u32 = 103;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: u32 = 107;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: u32 = 132;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: u32 = 136;
pub const MBEDTLS_TLS_PSK_WITH_RC4_128_SHA: u32 = 138;
pub const MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 139;
pub const MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA: u32 = 140;
pub const MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA: u32 = 141;
pub const MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA: u32 = 142;
pub const MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 143;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA: u32 = 144;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA: u32 = 145;
pub const MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA: u32 = 146;
pub const MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 147;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA: u32 = 148;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA: u32 = 149;
pub const MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256: u32 = 156;
pub const MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384: u32 = 157;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: u32 = 158;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: u32 = 159;
pub const MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256: u32 = 168;
pub const MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384: u32 = 169;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: u32 = 170;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: u32 = 171;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: u32 = 172;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: u32 = 173;
pub const MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256: u32 = 174;
pub const MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384: u32 = 175;
pub const MBEDTLS_TLS_PSK_WITH_NULL_SHA256: u32 = 176;
pub const MBEDTLS_TLS_PSK_WITH_NULL_SHA384: u32 = 177;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: u32 = 178;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: u32 = 179;
pub const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256: u32 = 180;
pub const MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384: u32 = 181;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: u32 = 182;
pub const MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: u32 = 183;
pub const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256: u32 = 184;
pub const MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384: u32 = 185;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 186;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 190;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256: u32 = 192;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256: u32 = 196;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA: u32 = 49153;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA: u32 = 49154;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: u32 = 49155;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: u32 = 49156;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: u32 = 49157;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA: u32 = 49158;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: u32 = 49159;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: u32 = 49160;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: u32 = 49161;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: u32 = 49162;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA: u32 = 49163;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA: u32 = 49164;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 49165;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: u32 = 49166;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: u32 = 49167;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA: u32 = 49168;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA: u32 = 49169;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: u32 = 49170;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: u32 = 49171;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: u32 = 49172;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: u32 = 49187;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: u32 = 49188;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: u32 = 49189;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: u32 = 49190;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: u32 = 49191;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: u32 = 49192;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: u32 = 49193;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: u32 = 49194;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: u32 = 49195;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: u32 = 49196;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: u32 = 49197;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: u32 = 49198;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: u32 = 49199;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: u32 = 49200;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: u32 = 49201;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: u32 = 49202;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA: u32 = 49203;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA: u32 = 49204;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: u32 = 49205;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: u32 = 49206;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256: u32 = 49207;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384: u32 = 49208;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA: u32 = 49209;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256: u32 = 49210;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384: u32 = 49211;
pub const MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256: u32 = 49212;
pub const MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384: u32 = 49213;
pub const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256: u32 = 49220;
pub const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384: u32 = 49221;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256: u32 = 49224;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384: u32 = 49225;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256: u32 = 49226;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384: u32 = 49227;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256: u32 = 49228;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384: u32 = 49229;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256: u32 = 49230;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384: u32 = 49231;
pub const MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256: u32 = 49232;
pub const MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384: u32 = 49233;
pub const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256: u32 = 49234;
pub const MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384: u32 = 49235;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256: u32 = 49244;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384: u32 = 49245;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256: u32 = 49246;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384: u32 = 49247;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256: u32 = 49248;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384: u32 = 49249;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256: u32 = 49250;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384: u32 = 49251;
pub const MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256: u32 = 49252;
pub const MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384: u32 = 49253;
pub const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256: u32 = 49254;
pub const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384: u32 = 49255;
pub const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256: u32 = 49256;
pub const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384: u32 = 49257;
pub const MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256: u32 = 49258;
pub const MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384: u32 = 49259;
pub const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256: u32 = 49260;
pub const MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384: u32 = 49261;
pub const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256: u32 = 49262;
pub const MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384: u32 = 49263;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256: u32 = 49264;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384: u32 = 49265;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49266;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49267;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49268;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49269;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49270;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49271;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49272;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49273;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49274;
pub const MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49275;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49276;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49277;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49286;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49287;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49288;
pub const MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49289;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49290;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49291;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49292;
pub const MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49293;
pub const MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49294;
pub const MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49295;
pub const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49296;
pub const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49297;
pub const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256: u32 = 49298;
pub const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384: u32 = 49299;
pub const MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49300;
pub const MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49301;
pub const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49302;
pub const MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49303;
pub const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49304;
pub const MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49305;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: u32 = 49306;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: u32 = 49307;
pub const MBEDTLS_TLS_RSA_WITH_AES_128_CCM: u32 = 49308;
pub const MBEDTLS_TLS_RSA_WITH_AES_256_CCM: u32 = 49309;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM: u32 = 49310;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM: u32 = 49311;
pub const MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8: u32 = 49312;
pub const MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8: u32 = 49313;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8: u32 = 49314;
pub const MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8: u32 = 49315;
pub const MBEDTLS_TLS_PSK_WITH_AES_128_CCM: u32 = 49316;
pub const MBEDTLS_TLS_PSK_WITH_AES_256_CCM: u32 = 49317;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM: u32 = 49318;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM: u32 = 49319;
pub const MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8: u32 = 49320;
pub const MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8: u32 = 49321;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8: u32 = 49322;
pub const MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8: u32 = 49323;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM: u32 = 49324;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM: u32 = 49325;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8: u32 = 49326;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8: u32 = 49327;
pub const MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8: u32 = 49407;
pub const MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: u32 = 52392;
pub const MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: u32 = 52393;
pub const MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: u32 = 52394;
pub const MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: u32 = 52395;
pub const MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: u32 = 52396;
pub const MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256: u32 = 52397;
pub const MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256: u32 = 52398;
pub const MBEDTLS_CIPHERSUITE_WEAK: u32 = 1;
pub const MBEDTLS_CIPHERSUITE_SHORT_TAG: u32 = 2;
pub const MBEDTLS_CIPHERSUITE_NODTLS: u32 = 4;
pub const MBEDTLS_ERR_ASN1_OUT_OF_DATA: i32 = -96;
pub const MBEDTLS_ERR_ASN1_UNEXPECTED_TAG: i32 = -98;
pub const MBEDTLS_ERR_ASN1_INVALID_LENGTH: i32 = -100;
pub const MBEDTLS_ERR_ASN1_LENGTH_MISMATCH: i32 = -102;
pub const MBEDTLS_ERR_ASN1_INVALID_DATA: i32 = -104;
pub const MBEDTLS_ERR_ASN1_ALLOC_FAILED: i32 = -106;
pub const MBEDTLS_ERR_ASN1_BUF_TOO_SMALL: i32 = -108;
pub const MBEDTLS_ASN1_BOOLEAN: u32 = 1;
pub const MBEDTLS_ASN1_INTEGER: u32 = 2;
pub const MBEDTLS_ASN1_BIT_STRING: u32 = 3;
pub const MBEDTLS_ASN1_OCTET_STRING: u32 = 4;
pub const MBEDTLS_ASN1_NULL: u32 = 5;
pub const MBEDTLS_ASN1_OID: u32 = 6;
pub const MBEDTLS_ASN1_ENUMERATED: u32 = 10;
pub const MBEDTLS_ASN1_UTF8_STRING: u32 = 12;
pub const MBEDTLS_ASN1_SEQUENCE: u32 = 16;
pub const MBEDTLS_ASN1_SET: u32 = 17;
pub const MBEDTLS_ASN1_PRINTABLE_STRING: u32 = 19;
pub const MBEDTLS_ASN1_T61_STRING: u32 = 20;
pub const MBEDTLS_ASN1_IA5_STRING: u32 = 22;
pub const MBEDTLS_ASN1_UTC_TIME: u32 = 23;
pub const MBEDTLS_ASN1_GENERALIZED_TIME: u32 = 24;
pub const MBEDTLS_ASN1_UNIVERSAL_STRING: u32 = 28;
pub const MBEDTLS_ASN1_BMP_STRING: u32 = 30;
pub const MBEDTLS_ASN1_PRIMITIVE: u32 = 0;
pub const MBEDTLS_ASN1_CONSTRUCTED: u32 = 32;
pub const MBEDTLS_ASN1_CONTEXT_SPECIFIC: u32 = 128;
pub const MBEDTLS_ASN1_TAG_CLASS_MASK: u32 = 192;
pub const MBEDTLS_ASN1_TAG_PC_MASK: u32 = 32;
pub const MBEDTLS_ASN1_TAG_VALUE_MASK: u32 = 31;
pub const MBEDTLS_X509_MAX_INTERMEDIATE_CA: u32 = 8;
pub const MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE: i32 = -8320;
pub const MBEDTLS_ERR_X509_UNKNOWN_OID: i32 = -8448;
pub const MBEDTLS_ERR_X509_INVALID_FORMAT: i32 = -8576;
pub const MBEDTLS_ERR_X509_INVALID_VERSION: i32 = -8704;
pub const MBEDTLS_ERR_X509_INVALID_SERIAL: i32 = -8832;
pub const MBEDTLS_ERR_X509_INVALID_ALG: i32 = -8960;
pub const MBEDTLS_ERR_X509_INVALID_NAME: i32 = -9088;
pub const MBEDTLS_ERR_X509_INVALID_DATE: i32 = -9216;
pub const MBEDTLS_ERR_X509_INVALID_SIGNATURE: i32 = -9344;
pub const MBEDTLS_ERR_X509_INVALID_EXTENSIONS: i32 = -9472;
pub const MBEDTLS_ERR_X509_UNKNOWN_VERSION: i32 = -9600;
pub const MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG: i32 = -9728;
pub const MBEDTLS_ERR_X509_SIG_MISMATCH: i32 = -9856;
pub const MBEDTLS_ERR_X509_CERT_VERIFY_FAILED: i32 = -9984;
pub const MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT: i32 = -10112;
pub const MBEDTLS_ERR_X509_BAD_INPUT_DATA: i32 = -10240;
pub const MBEDTLS_ERR_X509_ALLOC_FAILED: i32 = -10368;
pub const MBEDTLS_ERR_X509_FILE_IO_ERROR: i32 = -10496;
pub const MBEDTLS_ERR_X509_BUFFER_TOO_SMALL: i32 = -10624;
pub const MBEDTLS_ERR_X509_FATAL_ERROR: i32 = -12288;
pub const MBEDTLS_X509_BADCERT_EXPIRED: u32 = 1;
pub const MBEDTLS_X509_BADCERT_REVOKED: u32 = 2;
pub const MBEDTLS_X509_BADCERT_CN_MISMATCH: u32 = 4;
pub const MBEDTLS_X509_BADCERT_NOT_TRUSTED: u32 = 8;
pub const MBEDTLS_X509_BADCRL_NOT_TRUSTED: u32 = 16;
pub const MBEDTLS_X509_BADCRL_EXPIRED: u32 = 32;
pub const MBEDTLS_X509_BADCERT_MISSING: u32 = 64;
pub const MBEDTLS_X509_BADCERT_SKIP_VERIFY: u32 = 128;
pub const MBEDTLS_X509_BADCERT_OTHER: u32 = 256;
pub const MBEDTLS_X509_BADCERT_FUTURE: u32 = 512;
pub const MBEDTLS_X509_BADCRL_FUTURE: u32 = 1024;
pub const MBEDTLS_X509_BADCERT_KEY_USAGE: u32 = 2048;
pub const MBEDTLS_X509_BADCERT_EXT_KEY_USAGE: u32 = 4096;
pub const MBEDTLS_X509_BADCERT_NS_CERT_TYPE: u32 = 8192;
pub const MBEDTLS_X509_BADCERT_BAD_MD: u32 = 16384;
pub const MBEDTLS_X509_BADCERT_BAD_PK: u32 = 32768;
pub const MBEDTLS_X509_BADCERT_BAD_KEY: u32 = 65536;
pub const MBEDTLS_X509_BADCRL_BAD_MD: u32 = 131072;
pub const MBEDTLS_X509_BADCRL_BAD_PK: u32 = 262144;
pub const MBEDTLS_X509_BADCRL_BAD_KEY: u32 = 524288;
pub const MBEDTLS_X509_SAN_OTHER_NAME: u32 = 0;
pub const MBEDTLS_X509_SAN_RFC822_NAME: u32 = 1;
pub const MBEDTLS_X509_SAN_DNS_NAME: u32 = 2;
pub const MBEDTLS_X509_SAN_X400_ADDRESS_NAME: u32 = 3;
pub const MBEDTLS_X509_SAN_DIRECTORY_NAME: u32 = 4;
pub const MBEDTLS_X509_SAN_EDI_PARTY_NAME: u32 = 5;
pub const MBEDTLS_X509_SAN_UNIFORM_RESOURCE_IDENTIFIER: u32 = 6;
pub const MBEDTLS_X509_SAN_IP_ADDRESS: u32 = 7;
pub const MBEDTLS_X509_SAN_REGISTERED_ID: u32 = 8;
pub const MBEDTLS_X509_KU_DIGITAL_SIGNATURE: u32 = 128;
pub const MBEDTLS_X509_KU_NON_REPUDIATION: u32 = 64;
pub const MBEDTLS_X509_KU_KEY_ENCIPHERMENT: u32 = 32;
pub const MBEDTLS_X509_KU_DATA_ENCIPHERMENT: u32 = 16;
pub const MBEDTLS_X509_KU_KEY_AGREEMENT: u32 = 8;
pub const MBEDTLS_X509_KU_KEY_CERT_SIGN: u32 = 4;
pub const MBEDTLS_X509_KU_CRL_SIGN: u32 = 2;
pub const MBEDTLS_X509_KU_ENCIPHER_ONLY: u32 = 1;
pub const MBEDTLS_X509_KU_DECIPHER_ONLY: u32 = 32768;
pub const MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT: u32 = 128;
pub const MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER: u32 = 64;
pub const MBEDTLS_X509_NS_CERT_TYPE_EMAIL: u32 = 32;
pub const MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING: u32 = 16;
pub const MBEDTLS_X509_NS_CERT_TYPE_RESERVED: u32 = 8;
pub const MBEDTLS_X509_NS_CERT_TYPE_SSL_CA: u32 = 4;
pub const MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA: u32 = 2;
pub const MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA: u32 = 1;
pub const MBEDTLS_X509_FORMAT_DER: u32 = 1;
pub const MBEDTLS_X509_FORMAT_PEM: u32 = 2;
pub const MBEDTLS_X509_MAX_DN_NAME_SIZE: u32 = 256;
pub const MBEDTLS_X509_CRT_VERSION_1: u32 = 0;
pub const MBEDTLS_X509_CRT_VERSION_2: u32 = 1;
pub const MBEDTLS_X509_CRT_VERSION_3: u32 = 2;
pub const MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN: u32 = 32;
pub const MBEDTLS_X509_RFC5280_UTC_TIME_LEN: u32 = 15;
pub const MBEDTLS_X509_MAX_FILE_PATH_LEN: u32 = 512;
pub const MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE: u32 = 10;
pub const MBEDTLS_ERR_DHM_BAD_INPUT_DATA: i32 = -12416;
pub const MBEDTLS_ERR_DHM_READ_PARAMS_FAILED: i32 = -12544;
pub const MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED: i32 = -12672;
pub const MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED: i32 = -12800;
pub const MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED: i32 = -12928;
pub const MBEDTLS_ERR_DHM_CALC_SECRET_FAILED: i32 = -13056;
pub const MBEDTLS_ERR_DHM_INVALID_FORMAT: i32 = -13184;
pub const MBEDTLS_ERR_DHM_ALLOC_FAILED: i32 = -13312;
pub const MBEDTLS_ERR_DHM_FILE_IO_ERROR: i32 = -13440;
pub const MBEDTLS_ERR_DHM_HW_ACCEL_FAILED: i32 = -13568;
pub const MBEDTLS_ERR_DHM_SET_GROUP_FAILED: i32 = -13696;
pub const MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE: i32 = -28800;
pub const MBEDTLS_ERR_SSL_BAD_INPUT_DATA: i32 = -28928;
pub const MBEDTLS_ERR_SSL_INVALID_MAC: i32 = -29056;
pub const MBEDTLS_ERR_SSL_INVALID_RECORD: i32 = -29184;
pub const MBEDTLS_ERR_SSL_CONN_EOF: i32 = -29312;
pub const MBEDTLS_ERR_SSL_UNKNOWN_CIPHER: i32 = -29440;
pub const MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN: i32 = -29568;
pub const MBEDTLS_ERR_SSL_NO_RNG: i32 = -29696;
pub const MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE: i32 = -29824;
pub const MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE: i32 = -29952;
pub const MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED: i32 = -30080;
pub const MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED: i32 = -30208;
pub const MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED: i32 = -30336;
pub const MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE: i32 = -30464;
pub const MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE: i32 = -30592;
pub const MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED: i32 = -30720;
pub const MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY: i32 = -30848;
pub const MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO: i32 = -30976;
pub const MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO: i32 = -31104;
pub const MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE: i32 = -31232;
pub const MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST: i32 = -31360;
pub const MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE: i32 = -31488;
pub const MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE: i32 = -31616;
pub const MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE: i32 = -31744;
pub const MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP: i32 = -31872;
pub const MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS: i32 = -32000;
pub const MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY: i32 = -32128;
pub const MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC: i32 = -32256;
pub const MBEDTLS_ERR_SSL_BAD_HS_FINISHED: i32 = -32384;
pub const MBEDTLS_ERR_SSL_ALLOC_FAILED: i32 = -32512;
pub const MBEDTLS_ERR_SSL_HW_ACCEL_FAILED: i32 = -32640;
pub const MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH: i32 = -28544;
pub const MBEDTLS_ERR_SSL_COMPRESSION_FAILED: i32 = -28416;
pub const MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION: i32 = -28288;
pub const MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET: i32 = -28160;
pub const MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED: i32 = -28032;
pub const MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH: i32 = -27904;
pub const MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY: i32 = -27776;
pub const MBEDTLS_ERR_SSL_INTERNAL_ERROR: i32 = -27648;
pub const MBEDTLS_ERR_SSL_COUNTER_WRAPPING: i32 = -27520;
pub const MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO: i32 = -27392;
pub const MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED: i32 = -27264;
pub const MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL: i32 = -27136;
pub const MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE: i32 = -27008;
pub const MBEDTLS_ERR_SSL_WANT_READ: i32 = -26880;
pub const MBEDTLS_ERR_SSL_WANT_WRITE: i32 = -26752;
pub const MBEDTLS_ERR_SSL_TIMEOUT: i32 = -26624;
pub const MBEDTLS_ERR_SSL_CLIENT_RECONNECT: i32 = -26496;
pub const MBEDTLS_ERR_SSL_UNEXPECTED_RECORD: i32 = -26368;
pub const MBEDTLS_ERR_SSL_NON_FATAL: i32 = -26240;
pub const MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH: i32 = -26112;
pub const MBEDTLS_ERR_SSL_CONTINUE_PROCESSING: i32 = -25984;
pub const MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS: i32 = -25856;
pub const MBEDTLS_ERR_SSL_EARLY_MESSAGE: i32 = -25728;
pub const MBEDTLS_ERR_SSL_UNEXPECTED_CID: i32 = -24576;
pub const MBEDTLS_ERR_SSL_VERSION_MISMATCH: i32 = -24320;
pub const MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS: i32 = -28672;
pub const MBEDTLS_ERR_SSL_BAD_CONFIG: i32 = -24192;
pub const MBEDTLS_SSL_MAJOR_VERSION_3: u32 = 3;
pub const MBEDTLS_SSL_MINOR_VERSION_0: u32 = 0;
pub const MBEDTLS_SSL_MINOR_VERSION_1: u32 = 1;
pub const MBEDTLS_SSL_MINOR_VERSION_2: u32 = 2;
pub const MBEDTLS_SSL_MINOR_VERSION_3: u32 = 3;
pub const MBEDTLS_SSL_MINOR_VERSION_4: u32 = 4;
pub const MBEDTLS_SSL_TRANSPORT_STREAM: u32 = 0;
pub const MBEDTLS_SSL_TRANSPORT_DATAGRAM: u32 = 1;
pub const MBEDTLS_SSL_MAX_HOST_NAME_LEN: u32 = 255;
pub const MBEDTLS_SSL_MAX_ALPN_NAME_LEN: u32 = 255;
pub const MBEDTLS_SSL_MAX_ALPN_LIST_LEN: u32 = 65535;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_NONE: u32 = 0;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_512: u32 = 1;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_1024: u32 = 2;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_2048: u32 = 3;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_4096: u32 = 4;
pub const MBEDTLS_SSL_MAX_FRAG_LEN_INVALID: u32 = 5;
pub const MBEDTLS_SSL_IS_CLIENT: u32 = 0;
pub const MBEDTLS_SSL_IS_SERVER: u32 = 1;
pub const MBEDTLS_SSL_IS_NOT_FALLBACK: u32 = 0;
pub const MBEDTLS_SSL_IS_FALLBACK: u32 = 1;
pub const MBEDTLS_SSL_EXTENDED_MS_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_EXTENDED_MS_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_CID_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_CID_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_ETM_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_ETM_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_COMPRESS_NULL: u32 = 0;
pub const MBEDTLS_SSL_COMPRESS_DEFLATE: u32 = 1;
pub const MBEDTLS_SSL_VERIFY_NONE: u32 = 0;
pub const MBEDTLS_SSL_VERIFY_OPTIONAL: u32 = 1;
pub const MBEDTLS_SSL_VERIFY_REQUIRED: u32 = 2;
pub const MBEDTLS_SSL_VERIFY_UNSET: u32 = 3;
pub const MBEDTLS_SSL_LEGACY_RENEGOTIATION: u32 = 0;
pub const MBEDTLS_SSL_SECURE_RENEGOTIATION: u32 = 1;
pub const MBEDTLS_SSL_RENEGOTIATION_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_RENEGOTIATION_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_ANTI_REPLAY_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_ANTI_REPLAY_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED: i32 = -1;
pub const MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT: u32 = 16;
pub const MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION: u32 = 0;
pub const MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION: u32 = 1;
pub const MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE: u32 = 2;
pub const MBEDTLS_SSL_TRUNC_HMAC_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_TRUNC_HMAC_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_TRUNCATED_HMAC_LEN: u32 = 10;
pub const MBEDTLS_SSL_SESSION_TICKETS_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_SESSION_TICKETS_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_ARC4_ENABLED: u32 = 0;
pub const MBEDTLS_SSL_ARC4_DISABLED: u32 = 1;
pub const MBEDTLS_SSL_PRESET_DEFAULT: u32 = 0;
pub const MBEDTLS_SSL_PRESET_SUITEB: u32 = 2;
pub const MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED: u32 = 1;
pub const MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED: u32 = 0;
pub const MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED: u32 = 0;
pub const MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED: u32 = 1;
pub const MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN: u32 = 1000;
pub const MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX: u32 = 60000;
pub const MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME: u32 = 86400;
pub const MBEDTLS_SSL_MAX_CONTENT_LEN: u32 = 16384;
pub const MBEDTLS_SSL_DTLS_MAX_BUFFERING: u32 = 32768;
pub const MBEDTLS_SSL_CID_IN_LEN_MAX: u32 = 32;
pub const MBEDTLS_SSL_CID_OUT_LEN_MAX: u32 = 32;
pub const MBEDTLS_SSL_CID_PADDING_GRANULARITY: u32 = 16;
pub const MBEDTLS_SSL_TLS1_3_PADDING_GRANULARITY: u32 = 1;
pub const MBEDTLS_SSL_VERIFY_DATA_MAX_LEN: u32 = 12;
pub const MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO: u32 = 255;
pub const MBEDTLS_SSL_FALLBACK_SCSV_VALUE: u32 = 22016;
pub const MBEDTLS_SSL_HASH_NONE: u32 = 0;
pub const MBEDTLS_SSL_HASH_MD5: u32 = 1;
pub const MBEDTLS_SSL_HASH_SHA1: u32 = 2;
pub const MBEDTLS_SSL_HASH_SHA224: u32 = 3;
pub const MBEDTLS_SSL_HASH_SHA256: u32 = 4;
pub const MBEDTLS_SSL_HASH_SHA384: u32 = 5;
pub const MBEDTLS_SSL_HASH_SHA512: u32 = 6;
pub const MBEDTLS_SSL_SIG_ANON: u32 = 0;
pub const MBEDTLS_SSL_SIG_RSA: u32 = 1;
pub const MBEDTLS_SSL_SIG_ECDSA: u32 = 3;
pub const MBEDTLS_SSL_CERT_TYPE_RSA_SIGN: u32 = 1;
pub const MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN: u32 = 64;
pub const MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC: u32 = 20;
pub const MBEDTLS_SSL_MSG_ALERT: u32 = 21;
pub const MBEDTLS_SSL_MSG_HANDSHAKE: u32 = 22;
pub const MBEDTLS_SSL_MSG_APPLICATION_DATA: u32 = 23;
pub const MBEDTLS_SSL_MSG_CID: u32 = 25;
pub const MBEDTLS_SSL_ALERT_LEVEL_WARNING: u32 = 1;
pub const MBEDTLS_SSL_ALERT_LEVEL_FATAL: u32 = 2;
pub const MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY: u32 = 0;
pub const MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE: u32 = 10;
pub const MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC: u32 = 20;
pub const MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED: u32 = 21;
pub const MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW: u32 = 22;
pub const MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE: u32 = 30;
pub const MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE: u32 = 40;
pub const MBEDTLS_SSL_ALERT_MSG_NO_CERT: u32 = 41;
pub const MBEDTLS_SSL_ALERT_MSG_BAD_CERT: u32 = 42;
pub const MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT: u32 = 43;
pub const MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED: u32 = 44;
pub const MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED: u32 = 45;
pub const MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN: u32 = 46;
pub const MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER: u32 = 47;
pub const MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA: u32 = 48;
pub const MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED: u32 = 49;
pub const MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR: u32 = 50;
pub const MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR: u32 = 51;
pub const MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION: u32 = 60;
pub const MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION: u32 = 70;
pub const MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY: u32 = 71;
pub const MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR: u32 = 80;
pub const MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK: u32 = 86;
pub const MBEDTLS_SSL_ALERT_MSG_USER_CANCELED: u32 = 90;
pub const MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION: u32 = 100;
pub const MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT: u32 = 110;
pub const MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME: u32 = 112;
pub const MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY: u32 = 115;
pub const MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL: u32 = 120;
pub const MBEDTLS_SSL_HS_HELLO_REQUEST: u32 = 0;
pub const MBEDTLS_SSL_HS_CLIENT_HELLO: u32 = 1;
pub const MBEDTLS_SSL_HS_SERVER_HELLO: u32 = 2;
pub const MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST: u32 = 3;
pub const MBEDTLS_SSL_HS_NEW_SESSION_TICKET: u32 = 4;
pub const MBEDTLS_SSL_HS_CERTIFICATE: u32 = 11;
pub const MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE: u32 = 12;
pub const MBEDTLS_SSL_HS_CERTIFICATE_REQUEST: u32 = 13;
pub const MBEDTLS_SSL_HS_SERVER_HELLO_DONE: u32 = 14;
pub const MBEDTLS_SSL_HS_CERTIFICATE_VERIFY: u32 = 15;
pub const MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE: u32 = 16;
pub const MBEDTLS_SSL_HS_FINISHED: u32 = 20;
pub const MBEDTLS_TLS_EXT_SERVERNAME: u32 = 0;
pub const MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME: u32 = 0;
pub const MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH: u32 = 1;
pub const MBEDTLS_TLS_EXT_TRUNCATED_HMAC: u32 = 4;
pub const MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES: u32 = 10;
pub const MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS: u32 = 11;
pub const MBEDTLS_TLS_EXT_SIG_ALG: u32 = 13;
pub const MBEDTLS_TLS_EXT_USE_SRTP: u32 = 14;
pub const MBEDTLS_TLS_EXT_ALPN: u32 = 16;
pub const MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC: u32 = 22;
pub const MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET: u32 = 23;
pub const MBEDTLS_TLS_EXT_SESSION_TICKET: u32 = 35;
pub const MBEDTLS_TLS_EXT_CID: u32 = 254;
pub const MBEDTLS_TLS_EXT_ECJPAKE_KKPP: u32 = 256;
pub const MBEDTLS_TLS_EXT_RENEGOTIATION_INFO: u32 = 65281;
pub const MBEDTLS_PSK_MAX_LEN: u32 = 32;
pub const MBEDTLS_ERR_NET_SOCKET_FAILED: i32 = -66;
pub const MBEDTLS_ERR_NET_CONNECT_FAILED: i32 = -68;
pub const MBEDTLS_ERR_NET_BIND_FAILED: i32 = -70;
pub const MBEDTLS_ERR_NET_LISTEN_FAILED: i32 = -72;
pub const MBEDTLS_ERR_NET_ACCEPT_FAILED: i32 = -74;
pub const MBEDTLS_ERR_NET_RECV_FAILED: i32 = -76;
pub const MBEDTLS_ERR_NET_SEND_FAILED: i32 = -78;
pub const MBEDTLS_ERR_NET_CONN_RESET: i32 = -80;
pub const MBEDTLS_ERR_NET_UNKNOWN_HOST: i32 = -82;
pub const MBEDTLS_ERR_NET_BUFFER_TOO_SMALL: i32 = -67;
pub const MBEDTLS_ERR_NET_INVALID_CONTEXT: i32 = -69;
pub const MBEDTLS_ERR_NET_POLL_FAILED: i32 = -71;
pub const MBEDTLS_ERR_NET_BAD_INPUT_DATA: i32 = -73;
pub const MBEDTLS_NET_LISTEN_BACKLOG: u32 = 10;
pub const MBEDTLS_NET_PROTO_TCP: u32 = 0;
pub const MBEDTLS_NET_PROTO_UDP: u32 = 1;
pub const MBEDTLS_NET_POLL_READ: u32 = 1;
pub const MBEDTLS_NET_POLL_WRITE: u32 = 2;
pub const MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED: i32 = -57;
pub const MBEDTLS_ERR_SHA512_BAD_INPUT_DATA: i32 = -117;
pub const MBEDTLS_ERR_ENTROPY_SOURCE_FAILED: i32 = -60;
pub const MBEDTLS_ERR_ENTROPY_MAX_SOURCES: i32 = -62;
pub const MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED: i32 = -64;
pub const MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE: i32 = -61;
pub const MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR: i32 = -63;
pub const MBEDTLS_ENTROPY_MAX_SOURCES: u32 = 20;
pub const MBEDTLS_ENTROPY_MAX_GATHER: u32 = 128;
pub const MBEDTLS_ENTROPY_BLOCK_SIZE: u32 = 64;
pub const MBEDTLS_ENTROPY_MAX_SEED_SIZE: u32 = 1024;
pub const MBEDTLS_ENTROPY_SOURCE_MANUAL: u32 = 20;
pub const MBEDTLS_ENTROPY_SOURCE_STRONG: u32 = 1;
pub const MBEDTLS_ENTROPY_SOURCE_WEAK: u32 = 0;
pub const MBEDTLS_AES_ENCRYPT: u32 = 1;
pub const MBEDTLS_AES_DECRYPT: u32 = 0;
pub const MBEDTLS_ERR_AES_INVALID_KEY_LENGTH: i32 = -32;
pub const MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH: i32 = -34;
pub const MBEDTLS_ERR_AES_BAD_INPUT_DATA: i32 = -33;
pub const MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE: i32 = -35;
pub const MBEDTLS_ERR_AES_HW_ACCEL_FAILED: i32 = -37;
pub const ESP_AES_ENCRYPT: u32 = 1;
pub const ESP_AES_DECRYPT: u32 = 0;
pub const AES_BLOCK_BYTES: u32 = 16;
pub const AES_BLOCK_WORDS: u32 = 4;
pub const IV_BYTES: u32 = 16;
pub const IV_WORDS: u32 = 4;
pub const TAG_BYTES: u32 = 16;
pub const TAG_WORDS: u32 = 4;
pub const AES_128_KEY_BYTES: u32 = 16;
pub const AES_192_KEY_BYTES: u32 = 24;
pub const AES_256_KEY_BYTES: u32 = 32;
pub const ERR_ESP_AES_INVALID_KEY_LENGTH: i32 = -32;
pub const ERR_ESP_AES_INVALID_INPUT_LENGTH: i32 = -34;
pub const MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED: i32 = -52;
pub const MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG: i32 = -54;
pub const MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG: i32 = -56;
pub const MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR: i32 = -58;
pub const MBEDTLS_CTR_DRBG_BLOCKSIZE: u32 = 16;
pub const MBEDTLS_CTR_DRBG_KEYSIZE: u32 = 32;
pub const MBEDTLS_CTR_DRBG_KEYBITS: u32 = 256;
pub const MBEDTLS_CTR_DRBG_SEEDLEN: u32 = 48;
pub const MBEDTLS_CTR_DRBG_ENTROPY_LEN: u32 = 48;
pub const MBEDTLS_CTR_DRBG_RESEED_INTERVAL: u32 = 10000;
pub const MBEDTLS_CTR_DRBG_MAX_INPUT: u32 = 256;
pub const MBEDTLS_CTR_DRBG_MAX_REQUEST: u32 = 1024;
pub const MBEDTLS_CTR_DRBG_MAX_SEED_INPUT: u32 = 384;
pub const MBEDTLS_CTR_DRBG_PR_OFF: u32 = 0;
pub const MBEDTLS_CTR_DRBG_PR_ON: u32 = 1;
pub const MBEDTLS_CTR_DRBG_ENTROPY_NONCE_LEN: u32 = 0;
pub const MBEDTLS_ERR_ERROR_GENERIC_ERROR: i32 = -1;
pub const MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED: i32 = -110;
pub const ESP_PARTITION_MAGIC: u32 = 20650;
pub const ESP_PARTITION_MAGIC_MD5: u32 = 60395;
pub const PART_TYPE_APP: u32 = 0;
pub const PART_SUBTYPE_FACTORY: u32 = 0;
pub const PART_SUBTYPE_OTA_FLAG: u32 = 16;
pub const PART_SUBTYPE_OTA_MASK: u32 = 15;
pub const PART_SUBTYPE_TEST: u32 = 32;
pub const PART_TYPE_DATA: u32 = 1;
pub const PART_SUBTYPE_DATA_OTA: u32 = 0;
pub const PART_SUBTYPE_DATA_RF: u32 = 1;
pub const PART_SUBTYPE_DATA_WIFI: u32 = 2;
pub const PART_SUBTYPE_DATA_NVS_KEYS: u32 = 4;
pub const PART_SUBTYPE_DATA_EFUSE_EM: u32 = 5;
pub const PART_TYPE_END: u32 = 255;
pub const PART_SUBTYPE_END: u32 = 255;
pub const PART_FLAG_ENCRYPTED: u32 = 1;
pub const ESP_PARTITION_MD5_OFFSET: u32 = 16;
pub const ESP_BOOTLOADER_DIGEST_OFFSET: u32 = 0;
pub const ESP_BOOTLOADER_OFFSET: u32 = 0;
pub const ESP_PARTITION_TABLE_OFFSET: u32 = 32768;
pub const ESP_PARTITION_TABLE_MAX_LEN: u32 = 3072;
pub const ESP_IMAGE_HEADER_MAGIC: u32 = 233;
pub const ESP_IMAGE_MAX_SEGMENTS: u32 = 16;
pub const ESP_APP_DESC_MAGIC_WORD: u32 = 2882360370;
pub const ESP_ERR_IMAGE_BASE: i32 = 8192;
pub const ESP_ERR_IMAGE_FLASH_FAIL: i32 = 8193;
pub const ESP_ERR_IMAGE_INVALID: i32 = 8194;
pub const ESP_IMAGE_HASH_LEN: u32 = 32;
pub const OTA_SIZE_UNKNOWN: u32 = 4294967295;
pub const OTA_WITH_SEQUENTIAL_WRITES: u32 = 4294967294;
pub const ESP_ERR_OTA_BASE: i32 = 5376;
pub const ESP_ERR_OTA_PARTITION_CONFLICT: i32 = 5377;
pub const ESP_ERR_OTA_SELECT_INFO_INVALID: i32 = 5378;
pub const ESP_ERR_OTA_VALIDATE_FAILED: i32 = 5379;
pub const ESP_ERR_OTA_SMALL_SEC_VER: i32 = 5380;
pub const ESP_ERR_OTA_ROLLBACK_FAILED: i32 = 5381;
pub const ESP_ERR_OTA_ROLLBACK_INVALID_STATE: i32 = 5382;
pub const HTTP_PARSER_VERSION_MAJOR: u32 = 2;
pub const HTTP_PARSER_VERSION_MINOR: u32 = 7;
pub const HTTP_PARSER_VERSION_PATCH: u32 = 0;
pub const HTTP_PARSER_STRICT: u32 = 1;
pub const HTTP_MAX_HEADER_SIZE: u32 = 81920;
pub const DEFAULT_HTTP_BUF_SIZE: u32 = 512;
pub const ESP_ERR_HTTP_BASE: i32 = 28672;
pub const ESP_ERR_HTTP_MAX_REDIRECT: i32 = 28673;
pub const ESP_ERR_HTTP_CONNECT: i32 = 28674;
pub const ESP_ERR_HTTP_WRITE_DATA: i32 = 28675;
pub const ESP_ERR_HTTP_FETCH_HEADER: i32 = 28676;
pub const ESP_ERR_HTTP_INVALID_TRANSPORT: i32 = 28677;
pub const ESP_ERR_HTTP_CONNECTING: i32 = 28678;
pub const ESP_ERR_HTTP_EAGAIN: i32 = 28679;
pub const ESP_ERR_HTTP_CONNECTION_CLOSED: i32 = 28680;
pub const ESP_ERR_HTTPD_BASE: i32 = 45056;
pub const ESP_ERR_HTTPD_HANDLERS_FULL: i32 = 45057;
pub const ESP_ERR_HTTPD_HANDLER_EXISTS: i32 = 45058;
pub const ESP_ERR_HTTPD_INVALID_REQ: i32 = 45059;
pub const ESP_ERR_HTTPD_RESULT_TRUNC: i32 = 45060;
pub const ESP_ERR_HTTPD_RESP_HDR: i32 = 45061;
pub const ESP_ERR_HTTPD_RESP_SEND: i32 = 45062;
pub const ESP_ERR_HTTPD_ALLOC_MEM: i32 = 45063;
pub const ESP_ERR_HTTPD_TASK: i32 = 45064;
pub const HTTPD_RESP_USE_STRLEN: i32 = -1;
pub const HTTPD_MAX_REQ_HDR_LEN: u32 = 512;
pub const HTTPD_MAX_URI_LEN: u32 = 512;
pub const HTTPD_SOCK_ERR_FAIL: i32 = -1;
pub const HTTPD_SOCK_ERR_INVALID: i32 = -2;
pub const HTTPD_SOCK_ERR_TIMEOUT: i32 = -3;
pub const HTTPD_200: &[u8; 7usize] = b"200 OK\0";
pub const HTTPD_204: &[u8; 15usize] = b"204 No Content\0";
pub const HTTPD_207: &[u8; 17usize] = b"207 Multi-Status\0";
pub const HTTPD_400: &[u8; 16usize] = b"400 Bad Request\0";
pub const HTTPD_404: &[u8; 14usize] = b"404 Not Found\0";
pub const HTTPD_408: &[u8; 20usize] = b"408 Request Timeout\0";
pub const HTTPD_500: &[u8; 26usize] = b"500 Internal Server Error\0";
pub const HTTPD_TYPE_JSON: &[u8; 17usize] = b"application/json\0";
pub const HTTPD_TYPE_TEXT: &[u8; 10usize] = b"text/html\0";
pub const HTTPD_TYPE_OCTET: &[u8; 25usize] = b"application/octet-stream\0";
pub const MDNS_TYPE_A: u32 = 1;
pub const MDNS_TYPE_PTR: u32 = 12;
pub const MDNS_TYPE_TXT: u32 = 16;
pub const MDNS_TYPE_AAAA: u32 = 28;
pub const MDNS_TYPE_SRV: u32 = 33;
pub const MDNS_TYPE_OPT: u32 = 41;
pub const MDNS_TYPE_NSEC: u32 = 47;
pub const MDNS_TYPE_ANY: u32 = 255;
pub const ESP_ERR_NVS_BASE: i32 = 4352;
pub const ESP_ERR_NVS_NOT_INITIALIZED: i32 = 4353;
pub const ESP_ERR_NVS_NOT_FOUND: i32 = 4354;
pub const ESP_ERR_NVS_TYPE_MISMATCH: i32 = 4355;
pub const ESP_ERR_NVS_READ_ONLY: i32 = 4356;
pub const ESP_ERR_NVS_NOT_ENOUGH_SPACE: i32 = 4357;
pub const ESP_ERR_NVS_INVALID_NAME: i32 = 4358;
pub const ESP_ERR_NVS_INVALID_HANDLE: i32 = 4359;
pub const ESP_ERR_NVS_REMOVE_FAILED: i32 = 4360;
pub const ESP_ERR_NVS_KEY_TOO_LONG: i32 = 4361;
pub const ESP_ERR_NVS_PAGE_FULL: i32 = 4362;
pub const ESP_ERR_NVS_INVALID_STATE: i32 = 4363;
pub const ESP_ERR_NVS_INVALID_LENGTH: i32 = 4364;
pub const ESP_ERR_NVS_NO_FREE_PAGES: i32 = 4365;
pub const ESP_ERR_NVS_VALUE_TOO_LONG: i32 = 4366;
pub const ESP_ERR_NVS_PART_NOT_FOUND: i32 = 4367;
pub const ESP_ERR_NVS_NEW_VERSION_FOUND: i32 = 4368;
pub const ESP_ERR_NVS_XTS_ENCR_FAILED: i32 = 4369;
pub const ESP_ERR_NVS_XTS_DECR_FAILED: i32 = 4370;
pub const ESP_ERR_NVS_XTS_CFG_FAILED: i32 = 4371;
pub const ESP_ERR_NVS_XTS_CFG_NOT_FOUND: i32 = 4372;
pub const ESP_ERR_NVS_ENCR_NOT_SUPPORTED: i32 = 4373;
pub const ESP_ERR_NVS_KEYS_NOT_INITIALIZED: i32 = 4374;
pub const ESP_ERR_NVS_CORRUPT_KEY_PART: i32 = 4375;
pub const ESP_ERR_NVS_WRONG_ENCRYPTION: i32 = 4377;
pub const ESP_ERR_NVS_CONTENT_DIFFERS: i32 = 4376;
pub const NVS_DEFAULT_PART_NAME: &[u8; 4usize] = b"nvs\0";
pub const NVS_PART_NAME_MAX_SIZE: u32 = 16;
pub const NVS_KEY_NAME_MAX_SIZE: u32 = 16;
pub const NVS_KEY_SIZE: u32 = 32;
pub const RTC_CNTL_WDT_WKEY_VALUE: u32 = 1356348065;
pub const RTC_CNTL_SWD_WKEY_VALUE: u32 = 2401055018;
pub const RTC_WDT_RESET_LENGTH_100_NS: u32 = 0;
pub const RTC_WDT_RESET_LENGTH_200_NS: u32 = 1;
pub const RTC_WDT_RESET_LENGTH_300_NS: u32 = 2;
pub const RTC_WDT_RESET_LENGTH_400_NS: u32 = 3;
pub const RTC_WDT_RESET_LENGTH_500_NS: u32 = 4;
pub const RTC_WDT_RESET_LENGTH_800_NS: u32 = 5;
pub const RTC_WDT_RESET_LENGTH_1600_NS: u32 = 6;
pub const RTC_WDT_RESET_LENGTH_3200_NS: u32 = 7;
pub const RTC_CNTL_OPTIONS0_REG: u32 = 1610645504;
pub const RTC_CNTL_SW_SYS_RST_V: u32 = 1;
pub const RTC_CNTL_SW_SYS_RST_S: u32 = 31;
pub const RTC_CNTL_DG_WRAP_FORCE_NORST_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_NORST_S: u32 = 30;
pub const RTC_CNTL_DG_WRAP_FORCE_RST_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_RST_S: u32 = 29;
pub const RTC_CNTL_ANALOG_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_ANALOG_FORCE_NOISO_S: u32 = 28;
pub const RTC_CNTL_PLL_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_PLL_FORCE_NOISO_S: u32 = 27;
pub const RTC_CNTL_XTL_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_XTL_FORCE_NOISO_S: u32 = 26;
pub const RTC_CNTL_ANALOG_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_ANALOG_FORCE_ISO_S: u32 = 25;
pub const RTC_CNTL_PLL_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_PLL_FORCE_ISO_S: u32 = 24;
pub const RTC_CNTL_XTL_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_XTL_FORCE_ISO_S: u32 = 23;
pub const RTC_CNTL_XTL_EXT_CTR_SEL: u32 = 7;
pub const RTC_CNTL_XTL_EXT_CTR_SEL_V: u32 = 7;
pub const RTC_CNTL_XTL_EXT_CTR_SEL_S: u32 = 20;
pub const RTC_CNTL_XTL_EN_WAIT: u32 = 15;
pub const RTC_CNTL_XTL_EN_WAIT_V: u32 = 15;
pub const RTC_CNTL_XTL_EN_WAIT_S: u32 = 14;
pub const RTC_CNTL_XTL_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_XTL_FORCE_PU_S: u32 = 13;
pub const RTC_CNTL_XTL_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_XTL_FORCE_PD_S: u32 = 12;
pub const RTC_CNTL_BBPLL_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_BBPLL_FORCE_PU_S: u32 = 11;
pub const RTC_CNTL_BBPLL_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_BBPLL_FORCE_PD_S: u32 = 10;
pub const RTC_CNTL_BBPLL_I2C_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_BBPLL_I2C_FORCE_PU_S: u32 = 9;
pub const RTC_CNTL_BBPLL_I2C_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_BBPLL_I2C_FORCE_PD_S: u32 = 8;
pub const RTC_CNTL_BB_I2C_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_BB_I2C_FORCE_PU_S: u32 = 7;
pub const RTC_CNTL_BB_I2C_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_BB_I2C_FORCE_PD_S: u32 = 6;
pub const RTC_CNTL_SW_PROCPU_RST_V: u32 = 1;
pub const RTC_CNTL_SW_PROCPU_RST_S: u32 = 5;
pub const RTC_CNTL_SW_APPCPU_RST_V: u32 = 1;
pub const RTC_CNTL_SW_APPCPU_RST_S: u32 = 4;
pub const RTC_CNTL_SW_STALL_PROCPU_C0: u32 = 3;
pub const RTC_CNTL_SW_STALL_PROCPU_C0_V: u32 = 3;
pub const RTC_CNTL_SW_STALL_PROCPU_C0_S: u32 = 2;
pub const RTC_CNTL_SW_STALL_APPCPU_C0: u32 = 3;
pub const RTC_CNTL_SW_STALL_APPCPU_C0_V: u32 = 3;
pub const RTC_CNTL_SW_STALL_APPCPU_C0_S: u32 = 0;
pub const RTC_CNTL_SLP_TIMER0_REG: u32 = 1610645508;
pub const RTC_CNTL_SLP_VAL_LO: u32 = 4294967295;
pub const RTC_CNTL_SLP_VAL_LO_V: u32 = 4294967295;
pub const RTC_CNTL_SLP_VAL_LO_S: u32 = 0;
pub const RTC_CNTL_SLP_TIMER1_REG: u32 = 1610645512;
pub const RTC_CNTL_MAIN_TIMER_ALARM_EN_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_ALARM_EN_S: u32 = 16;
pub const RTC_CNTL_SLP_VAL_HI: u32 = 65535;
pub const RTC_CNTL_SLP_VAL_HI_V: u32 = 65535;
pub const RTC_CNTL_SLP_VAL_HI_S: u32 = 0;
pub const RTC_CNTL_TIME_UPDATE_REG: u32 = 1610645516;
pub const RTC_CNTL_TIME_UPDATE_V: u32 = 1;
pub const RTC_CNTL_TIME_UPDATE_S: u32 = 31;
pub const RTC_CNTL_TIMER_SYS_RST_V: u32 = 1;
pub const RTC_CNTL_TIMER_SYS_RST_S: u32 = 29;
pub const RTC_CNTL_TIMER_XTL_OFF_V: u32 = 1;
pub const RTC_CNTL_TIMER_XTL_OFF_S: u32 = 28;
pub const RTC_CNTL_TIMER_SYS_STALL_V: u32 = 1;
pub const RTC_CNTL_TIMER_SYS_STALL_S: u32 = 27;
pub const RTC_CNTL_TIME_LOW0_REG: u32 = 1610645520;
pub const RTC_CNTL_TIMER_VALUE0_LOW: u32 = 4294967295;
pub const RTC_CNTL_TIMER_VALUE0_LOW_V: u32 = 4294967295;
pub const RTC_CNTL_TIMER_VALUE0_LOW_S: u32 = 0;
pub const RTC_CNTL_TIME_HIGH0_REG: u32 = 1610645524;
pub const RTC_CNTL_TIMER_VALUE0_HIGH: u32 = 65535;
pub const RTC_CNTL_TIMER_VALUE0_HIGH_V: u32 = 65535;
pub const RTC_CNTL_TIMER_VALUE0_HIGH_S: u32 = 0;
pub const RTC_CNTL_STATE0_REG: u32 = 1610645528;
pub const RTC_CNTL_SLEEP_EN_V: u32 = 1;
pub const RTC_CNTL_SLEEP_EN_S: u32 = 31;
pub const RTC_CNTL_SLP_REJECT_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_S: u32 = 30;
pub const RTC_CNTL_SLP_WAKEUP_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_S: u32 = 29;
pub const RTC_CNTL_SDIO_ACTIVE_IND_V: u32 = 1;
pub const RTC_CNTL_SDIO_ACTIVE_IND_S: u32 = 28;
pub const RTC_CNTL_APB2RTC_BRIDGE_SEL_V: u32 = 1;
pub const RTC_CNTL_APB2RTC_BRIDGE_SEL_S: u32 = 22;
pub const RTC_CNTL_SLP_REJECT_CAUSE_CLR_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_CAUSE_CLR_S: u32 = 1;
pub const RTC_CNTL_SW_CPU_INT_V: u32 = 1;
pub const RTC_CNTL_SW_CPU_INT_S: u32 = 0;
pub const RTC_CNTL_TIMER1_REG: u32 = 1610645532;
pub const RTC_CNTL_PLL_BUF_WAIT: u32 = 255;
pub const RTC_CNTL_PLL_BUF_WAIT_V: u32 = 255;
pub const RTC_CNTL_PLL_BUF_WAIT_S: u32 = 24;
pub const RTC_CNTL_XTL_BUF_WAIT: u32 = 1023;
pub const RTC_CNTL_XTL_BUF_WAIT_V: u32 = 1023;
pub const RTC_CNTL_XTL_BUF_WAIT_S: u32 = 14;
pub const RTC_CNTL_CK8M_WAIT: u32 = 255;
pub const RTC_CNTL_CK8M_WAIT_V: u32 = 255;
pub const RTC_CNTL_CK8M_WAIT_S: u32 = 6;
pub const RTC_CNTL_CPU_STALL_WAIT: u32 = 31;
pub const RTC_CNTL_CPU_STALL_WAIT_V: u32 = 31;
pub const RTC_CNTL_CPU_STALL_WAIT_S: u32 = 1;
pub const RTC_CNTL_CPU_STALL_EN_V: u32 = 1;
pub const RTC_CNTL_CPU_STALL_EN_S: u32 = 0;
pub const RTC_CNTL_TIMER2_REG: u32 = 1610645536;
pub const RTC_CNTL_MIN_TIME_CK8M_OFF: u32 = 255;
pub const RTC_CNTL_MIN_TIME_CK8M_OFF_V: u32 = 255;
pub const RTC_CNTL_MIN_TIME_CK8M_OFF_S: u32 = 24;
pub const RTC_CNTL_TIMER3_REG: u32 = 1610645540;
pub const RTC_CNTL_BT_POWERUP_TIMER: u32 = 127;
pub const RTC_CNTL_BT_POWERUP_TIMER_V: u32 = 127;
pub const RTC_CNTL_BT_POWERUP_TIMER_S: u32 = 25;
pub const RTC_CNTL_BT_WAIT_TIMER: u32 = 511;
pub const RTC_CNTL_BT_WAIT_TIMER_V: u32 = 511;
pub const RTC_CNTL_BT_WAIT_TIMER_S: u32 = 16;
pub const RTC_CNTL_WIFI_POWERUP_TIMER: u32 = 127;
pub const RTC_CNTL_WIFI_POWERUP_TIMER_V: u32 = 127;
pub const RTC_CNTL_WIFI_POWERUP_TIMER_S: u32 = 9;
pub const RTC_CNTL_WIFI_WAIT_TIMER: u32 = 511;
pub const RTC_CNTL_WIFI_WAIT_TIMER_V: u32 = 511;
pub const RTC_CNTL_WIFI_WAIT_TIMER_S: u32 = 0;
pub const RTC_CNTL_TIMER4_REG: u32 = 1610645544;
pub const RTC_CNTL_DG_WRAP_POWERUP_TIMER: u32 = 127;
pub const RTC_CNTL_DG_WRAP_POWERUP_TIMER_V: u32 = 127;
pub const RTC_CNTL_DG_WRAP_POWERUP_TIMER_S: u32 = 25;
pub const RTC_CNTL_DG_WRAP_WAIT_TIMER: u32 = 511;
pub const RTC_CNTL_DG_WRAP_WAIT_TIMER_V: u32 = 511;
pub const RTC_CNTL_DG_WRAP_WAIT_TIMER_S: u32 = 16;
pub const RTC_CNTL_CPU_TOP_POWERUP_TIMER: u32 = 127;
pub const RTC_CNTL_CPU_TOP_POWERUP_TIMER_V: u32 = 127;
pub const RTC_CNTL_CPU_TOP_POWERUP_TIMER_S: u32 = 9;
pub const RTC_CNTL_CPU_TOP_WAIT_TIMER: u32 = 511;
pub const RTC_CNTL_CPU_TOP_WAIT_TIMER_V: u32 = 511;
pub const RTC_CNTL_CPU_TOP_WAIT_TIMER_S: u32 = 0;
pub const RTC_CNTL_TIMER5_REG: u32 = 1610645548;
pub const RTC_CNTL_MIN_SLP_VAL: u32 = 255;
pub const RTC_CNTL_MIN_SLP_VAL_V: u32 = 255;
pub const RTC_CNTL_MIN_SLP_VAL_S: u32 = 8;
pub const RTC_CNTL_MIN_SLP_VAL_MIN: u32 = 2;
pub const RTC_CNTL_TIMER6_REG: u32 = 1610645552;
pub const RTC_CNTL_DG_PERI_POWERUP_TIMER: u32 = 127;
pub const RTC_CNTL_DG_PERI_POWERUP_TIMER_V: u32 = 127;
pub const RTC_CNTL_DG_PERI_POWERUP_TIMER_S: u32 = 25;
pub const RTC_CNTL_DG_PERI_WAIT_TIMER: u32 = 511;
pub const RTC_CNTL_DG_PERI_WAIT_TIMER_V: u32 = 511;
pub const RTC_CNTL_DG_PERI_WAIT_TIMER_S: u32 = 16;
pub const RTC_CNTL_ANA_CONF_REG: u32 = 1610645556;
pub const RTC_CNTL_PLL_I2C_PU_V: u32 = 1;
pub const RTC_CNTL_PLL_I2C_PU_S: u32 = 31;
pub const RTC_CNTL_CKGEN_I2C_PU_V: u32 = 1;
pub const RTC_CNTL_CKGEN_I2C_PU_S: u32 = 30;
pub const RTC_CNTL_RFRX_PBUS_PU_V: u32 = 1;
pub const RTC_CNTL_RFRX_PBUS_PU_S: u32 = 28;
pub const RTC_CNTL_TXRF_I2C_PU_V: u32 = 1;
pub const RTC_CNTL_TXRF_I2C_PU_S: u32 = 27;
pub const RTC_CNTL_PVTMON_PU_V: u32 = 1;
pub const RTC_CNTL_PVTMON_PU_S: u32 = 26;
pub const RTC_CNTL_BBPLL_CAL_SLP_START_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_SLP_START_S: u32 = 25;
pub const RTC_CNTL_PLLA_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_PLLA_FORCE_PU_S: u32 = 24;
pub const RTC_CNTL_PLLA_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_PLLA_FORCE_PD_S: u32 = 23;
pub const RTC_CNTL_SAR_I2C_PU_V: u32 = 1;
pub const RTC_CNTL_SAR_I2C_PU_S: u32 = 22;
pub const RTC_CNTL_GLITCH_RST_EN_V: u32 = 1;
pub const RTC_CNTL_GLITCH_RST_EN_S: u32 = 20;
pub const RTC_CNTL_I2C_RESET_POR_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_I2C_RESET_POR_FORCE_PU_S: u32 = 19;
pub const RTC_CNTL_I2C_RESET_POR_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_I2C_RESET_POR_FORCE_PD_S: u32 = 18;
pub const RTC_CNTL_RESET_STATE_REG: u32 = 1610645560;
pub const RTC_CNTL_DRESET_MASK_PROCPU_V: u32 = 1;
pub const RTC_CNTL_DRESET_MASK_PROCPU_S: u32 = 25;
pub const RTC_CNTL_DRESET_MASK_APPCPU_V: u32 = 1;
pub const RTC_CNTL_DRESET_MASK_APPCPU_S: u32 = 24;
pub const RTC_CNTL_JTAG_RESET_FLAG_CLR_APPCPU_V: u32 = 1;
pub const RTC_CNTL_JTAG_RESET_FLAG_CLR_APPCPU_S: u32 = 23;
pub const RTC_CNTL_JTAG_RESET_FLAG_CLR_PROCPU_V: u32 = 1;
pub const RTC_CNTL_JTAG_RESET_FLAG_CLR_PROCPU_S: u32 = 22;
pub const RTC_CNTL_JTAG_RESET_FLAG_APPCPU_V: u32 = 1;
pub const RTC_CNTL_JTAG_RESET_FLAG_APPCPU_S: u32 = 21;
pub const RTC_CNTL_JTAG_RESET_FLAG_PROCPU_V: u32 = 1;
pub const RTC_CNTL_JTAG_RESET_FLAG_PROCPU_S: u32 = 20;
pub const RTC_CNTL_OCD_HALT_ON_RESET_PROCPU_V: u32 = 1;
pub const RTC_CNTL_OCD_HALT_ON_RESET_PROCPU_S: u32 = 19;
pub const RTC_CNTL_OCD_HALT_ON_RESET_APPCPU_V: u32 = 1;
pub const RTC_CNTL_OCD_HALT_ON_RESET_APPCPU_S: u32 = 18;
pub const RTC_CNTL_ALL_RESET_FLAG_CLR_APPCPU_V: u32 = 1;
pub const RTC_CNTL_ALL_RESET_FLAG_CLR_APPCPU_S: u32 = 17;
pub const RTC_CNTL_ALL_RESET_FLAG_CLR_PROCPU_V: u32 = 1;
pub const RTC_CNTL_ALL_RESET_FLAG_CLR_PROCPU_S: u32 = 16;
pub const RTC_CNTL_ALL_RESET_FLAG_APPCPU_V: u32 = 1;
pub const RTC_CNTL_ALL_RESET_FLAG_APPCPU_S: u32 = 15;
pub const RTC_CNTL_ALL_RESET_FLAG_PROCPU_V: u32 = 1;
pub const RTC_CNTL_ALL_RESET_FLAG_PROCPU_S: u32 = 14;
pub const RTC_CNTL_STAT_VECTOR_SEL_PROCPU_V: u32 = 1;
pub const RTC_CNTL_STAT_VECTOR_SEL_PROCPU_S: u32 = 13;
pub const RTC_CNTL_STAT_VECTOR_SEL_APPCPU_V: u32 = 1;
pub const RTC_CNTL_STAT_VECTOR_SEL_APPCPU_S: u32 = 12;
pub const RTC_CNTL_RESET_CAUSE_APPCPU: u32 = 63;
pub const RTC_CNTL_RESET_CAUSE_APPCPU_V: u32 = 63;
pub const RTC_CNTL_RESET_CAUSE_APPCPU_S: u32 = 6;
pub const RTC_CNTL_RESET_CAUSE_PROCPU: u32 = 63;
pub const RTC_CNTL_RESET_CAUSE_PROCPU_V: u32 = 63;
pub const RTC_CNTL_RESET_CAUSE_PROCPU_S: u32 = 0;
pub const RTC_CNTL_WAKEUP_STATE_REG: u32 = 1610645564;
pub const RTC_CNTL_WAKEUP_ENA: u32 = 131071;
pub const RTC_CNTL_WAKEUP_ENA_V: u32 = 131071;
pub const RTC_CNTL_WAKEUP_ENA_S: u32 = 15;
pub const RTC_CNTL_INT_ENA_REG: u32 = 1610645568;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_ENA_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_ENA_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_S: u32 = 0;
pub const RTC_CNTL_INT_RAW_REG: u32 = 1610645572;
pub const RTC_CNTL_BBPLL_CAL_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_RAW_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_RAW_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_RAW_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_RAW_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_RAW_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_RAW_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_RAW_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_RAW_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_RAW_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_RAW_S: u32 = 0;
pub const RTC_CNTL_INT_ST_REG: u32 = 1610645576;
pub const RTC_CNTL_BBPLL_CAL_INT_ST_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_ST_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_ST_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_ST_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ST_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ST_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_ST_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_ST_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_ST_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_ST_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_ST_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_ST_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_ST_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_ST_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_ST_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_ST_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ST_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ST_S: u32 = 0;
pub const RTC_CNTL_INT_CLR_REG: u32 = 1610645580;
pub const RTC_CNTL_BBPLL_CAL_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_CLR_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_CLR_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_CLR_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_CLR_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_CLR_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_CLR_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_CLR_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_CLR_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_CLR_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_CLR_S: u32 = 0;
pub const RTC_CNTL_STORE0_REG: u32 = 1610645584;
pub const RTC_CNTL_SCRATCH0: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH0_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH0_S: u32 = 0;
pub const RTC_CNTL_STORE1_REG: u32 = 1610645588;
pub const RTC_CNTL_SCRATCH1: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH1_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH1_S: u32 = 0;
pub const RTC_CNTL_STORE2_REG: u32 = 1610645592;
pub const RTC_CNTL_SCRATCH2: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH2_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH2_S: u32 = 0;
pub const RTC_CNTL_STORE3_REG: u32 = 1610645596;
pub const RTC_CNTL_SCRATCH3: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH3_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH3_S: u32 = 0;
pub const RTC_CNTL_EXT_XTL_CONF_REG: u32 = 1610645600;
pub const RTC_CNTL_XTL_EXT_CTR_EN_V: u32 = 1;
pub const RTC_CNTL_XTL_EXT_CTR_EN_S: u32 = 31;
pub const RTC_CNTL_XTL_EXT_CTR_LV_V: u32 = 1;
pub const RTC_CNTL_XTL_EXT_CTR_LV_S: u32 = 30;
pub const RTC_CNTL_XTAL32K_GPIO_SEL_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_GPIO_SEL_S: u32 = 23;
pub const RTC_CNTL_WDT_STATE: u32 = 7;
pub const RTC_CNTL_WDT_STATE_V: u32 = 7;
pub const RTC_CNTL_WDT_STATE_S: u32 = 20;
pub const RTC_CNTL_DAC_XTAL_32K: u32 = 7;
pub const RTC_CNTL_DAC_XTAL_32K_V: u32 = 7;
pub const RTC_CNTL_DAC_XTAL_32K_S: u32 = 17;
pub const RTC_CNTL_XPD_XTAL_32K_V: u32 = 1;
pub const RTC_CNTL_XPD_XTAL_32K_S: u32 = 16;
pub const RTC_CNTL_DRES_XTAL_32K: u32 = 7;
pub const RTC_CNTL_DRES_XTAL_32K_V: u32 = 7;
pub const RTC_CNTL_DRES_XTAL_32K_S: u32 = 13;
pub const RTC_CNTL_DGM_XTAL_32K: u32 = 7;
pub const RTC_CNTL_DGM_XTAL_32K_V: u32 = 7;
pub const RTC_CNTL_DGM_XTAL_32K_S: u32 = 10;
pub const RTC_CNTL_DBUF_XTAL_32K_V: u32 = 1;
pub const RTC_CNTL_DBUF_XTAL_32K_S: u32 = 9;
pub const RTC_CNTL_ENCKINIT_XTAL_32K_V: u32 = 1;
pub const RTC_CNTL_ENCKINIT_XTAL_32K_S: u32 = 8;
pub const RTC_CNTL_XTAL32K_XPD_FORCE_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_XPD_FORCE_S: u32 = 7;
pub const RTC_CNTL_XTAL32K_AUTO_RETURN_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_AUTO_RETURN_S: u32 = 6;
pub const RTC_CNTL_XTAL32K_AUTO_RESTART_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_AUTO_RESTART_S: u32 = 5;
pub const RTC_CNTL_XTAL32K_AUTO_BACKUP_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_AUTO_BACKUP_S: u32 = 4;
pub const RTC_CNTL_XTAL32K_EXT_CLK_FO_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_EXT_CLK_FO_S: u32 = 3;
pub const RTC_CNTL_XTAL32K_WDT_RESET_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_WDT_RESET_S: u32 = 2;
pub const RTC_CNTL_XTAL32K_WDT_CLK_FO_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_WDT_CLK_FO_S: u32 = 1;
pub const RTC_CNTL_XTAL32K_WDT_EN_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_WDT_EN_S: u32 = 0;
pub const RTC_CNTL_EXT_WAKEUP_CONF_REG: u32 = 1610645604;
pub const RTC_CNTL_GPIO_WAKEUP_FILTER_V: u32 = 1;
pub const RTC_CNTL_GPIO_WAKEUP_FILTER_S: u32 = 31;
pub const RTC_CNTL_SLP_REJECT_CONF_REG: u32 = 1610645608;
pub const RTC_CNTL_DEEP_SLP_REJECT_EN_V: u32 = 1;
pub const RTC_CNTL_DEEP_SLP_REJECT_EN_S: u32 = 31;
pub const RTC_CNTL_LIGHT_SLP_REJECT_EN_V: u32 = 1;
pub const RTC_CNTL_LIGHT_SLP_REJECT_EN_S: u32 = 30;
pub const RTC_CNTL_SLEEP_REJECT_ENA: u32 = 262143;
pub const RTC_CNTL_SLEEP_REJECT_ENA_V: u32 = 262143;
pub const RTC_CNTL_SLEEP_REJECT_ENA_S: u32 = 12;
pub const RTC_CNTL_CPU_PERIOD_CONF_REG: u32 = 1610645612;
pub const RTC_CNTL_CPUPERIOD_SEL: u32 = 3;
pub const RTC_CNTL_CPUPERIOD_SEL_V: u32 = 3;
pub const RTC_CNTL_CPUPERIOD_SEL_S: u32 = 30;
pub const RTC_CNTL_CPUSEL_CONF_V: u32 = 1;
pub const RTC_CNTL_CPUSEL_CONF_S: u32 = 29;
pub const RTC_CNTL_CLK_CONF_REG: u32 = 1610645616;
pub const RTC_CNTL_ANA_CLK_RTC_SEL: u32 = 3;
pub const RTC_CNTL_ANA_CLK_RTC_SEL_V: u32 = 3;
pub const RTC_CNTL_ANA_CLK_RTC_SEL_S: u32 = 30;
pub const RTC_CNTL_FAST_CLK_RTC_SEL_V: u32 = 1;
pub const RTC_CNTL_FAST_CLK_RTC_SEL_S: u32 = 29;
pub const RTC_CNTL_XTAL_GLOBAL_FORCE_NOGATING_V: u32 = 1;
pub const RTC_CNTL_XTAL_GLOBAL_FORCE_NOGATING_S: u32 = 28;
pub const RTC_CNTL_XTAL_GLOBAL_FORCE_GATING_V: u32 = 1;
pub const RTC_CNTL_XTAL_GLOBAL_FORCE_GATING_S: u32 = 27;
pub const RTC_CNTL_CK8M_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_CK8M_FORCE_PU_S: u32 = 26;
pub const RTC_CNTL_CK8M_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_CK8M_FORCE_PD_S: u32 = 25;
pub const RTC_CNTL_CK8M_DFREQ: u32 = 255;
pub const RTC_CNTL_CK8M_DFREQ_V: u32 = 255;
pub const RTC_CNTL_CK8M_DFREQ_S: u32 = 17;
pub const RTC_CNTL_CK8M_FORCE_NOGATING_V: u32 = 1;
pub const RTC_CNTL_CK8M_FORCE_NOGATING_S: u32 = 16;
pub const RTC_CNTL_XTAL_FORCE_NOGATING_V: u32 = 1;
pub const RTC_CNTL_XTAL_FORCE_NOGATING_S: u32 = 15;
pub const RTC_CNTL_CK8M_DIV_SEL: u32 = 7;
pub const RTC_CNTL_CK8M_DIV_SEL_V: u32 = 7;
pub const RTC_CNTL_CK8M_DIV_SEL_S: u32 = 12;
pub const RTC_CNTL_DIG_CLK8M_EN_V: u32 = 1;
pub const RTC_CNTL_DIG_CLK8M_EN_S: u32 = 10;
pub const RTC_CNTL_DIG_CLK8M_D256_EN_V: u32 = 1;
pub const RTC_CNTL_DIG_CLK8M_D256_EN_S: u32 = 9;
pub const RTC_CNTL_DIG_XTAL32K_EN_V: u32 = 1;
pub const RTC_CNTL_DIG_XTAL32K_EN_S: u32 = 8;
pub const RTC_CNTL_ENB_CK8M_DIV_V: u32 = 1;
pub const RTC_CNTL_ENB_CK8M_DIV_S: u32 = 7;
pub const RTC_CNTL_ENB_CK8M_V: u32 = 1;
pub const RTC_CNTL_ENB_CK8M_S: u32 = 6;
pub const RTC_CNTL_CK8M_DIV: u32 = 3;
pub const RTC_CNTL_CK8M_DIV_V: u32 = 3;
pub const RTC_CNTL_CK8M_DIV_S: u32 = 4;
pub const RTC_CNTL_CK8M_DIV_SEL_VLD_V: u32 = 1;
pub const RTC_CNTL_CK8M_DIV_SEL_VLD_S: u32 = 3;
pub const RTC_CNTL_EFUSE_CLK_FORCE_NOGATING_V: u32 = 1;
pub const RTC_CNTL_EFUSE_CLK_FORCE_NOGATING_S: u32 = 2;
pub const RTC_CNTL_EFUSE_CLK_FORCE_GATING_V: u32 = 1;
pub const RTC_CNTL_EFUSE_CLK_FORCE_GATING_S: u32 = 1;
pub const RTC_CNTL_SLOW_CLK_CONF_REG: u32 = 1610645620;
pub const RTC_CNTL_SLOW_CLK_NEXT_EDGE_V: u32 = 1;
pub const RTC_CNTL_SLOW_CLK_NEXT_EDGE_S: u32 = 31;
pub const RTC_CNTL_ANA_CLK_DIV: u32 = 255;
pub const RTC_CNTL_ANA_CLK_DIV_V: u32 = 255;
pub const RTC_CNTL_ANA_CLK_DIV_S: u32 = 23;
pub const RTC_CNTL_ANA_CLK_DIV_VLD_V: u32 = 1;
pub const RTC_CNTL_ANA_CLK_DIV_VLD_S: u32 = 22;
pub const RTC_CNTL_SDIO_CONF_REG: u32 = 1610645624;
pub const RTC_CNTL_XPD_SDIO_REG_V: u32 = 1;
pub const RTC_CNTL_XPD_SDIO_REG_S: u32 = 31;
pub const RTC_CNTL_DREFH_SDIO: u32 = 3;
pub const RTC_CNTL_DREFH_SDIO_V: u32 = 3;
pub const RTC_CNTL_DREFH_SDIO_S: u32 = 29;
pub const RTC_CNTL_DREFM_SDIO: u32 = 3;
pub const RTC_CNTL_DREFM_SDIO_V: u32 = 3;
pub const RTC_CNTL_DREFM_SDIO_S: u32 = 27;
pub const RTC_CNTL_DREFL_SDIO: u32 = 3;
pub const RTC_CNTL_DREFL_SDIO_V: u32 = 3;
pub const RTC_CNTL_DREFL_SDIO_S: u32 = 25;
pub const RTC_CNTL_REG1P8_READY_V: u32 = 1;
pub const RTC_CNTL_REG1P8_READY_S: u32 = 24;
pub const RTC_CNTL_SDIO_TIEH_V: u32 = 1;
pub const RTC_CNTL_SDIO_TIEH_S: u32 = 23;
pub const RTC_CNTL_SDIO_FORCE_V: u32 = 1;
pub const RTC_CNTL_SDIO_FORCE_S: u32 = 22;
pub const RTC_CNTL_SDIO_PD_EN_V: u32 = 1;
pub const RTC_CNTL_SDIO_PD_EN_S: u32 = 21;
pub const RTC_CNTL_SDIO_ENCURLIM_V: u32 = 1;
pub const RTC_CNTL_SDIO_ENCURLIM_S: u32 = 20;
pub const RTC_CNTL_SDIO_MODECURLIM_V: u32 = 1;
pub const RTC_CNTL_SDIO_MODECURLIM_S: u32 = 19;
pub const RTC_CNTL_SDIO_DCURLIM: u32 = 7;
pub const RTC_CNTL_SDIO_DCURLIM_V: u32 = 7;
pub const RTC_CNTL_SDIO_DCURLIM_S: u32 = 16;
pub const RTC_CNTL_SDIO_EN_INITI_V: u32 = 1;
pub const RTC_CNTL_SDIO_EN_INITI_S: u32 = 15;
pub const RTC_CNTL_SDIO_INITI: u32 = 3;
pub const RTC_CNTL_SDIO_INITI_V: u32 = 3;
pub const RTC_CNTL_SDIO_INITI_S: u32 = 13;
pub const RTC_CNTL_SDIO_DCAP: u32 = 3;
pub const RTC_CNTL_SDIO_DCAP_V: u32 = 3;
pub const RTC_CNTL_SDIO_DCAP_S: u32 = 11;
pub const RTC_CNTL_SDIO_DTHDRV: u32 = 3;
pub const RTC_CNTL_SDIO_DTHDRV_V: u32 = 3;
pub const RTC_CNTL_SDIO_DTHDRV_S: u32 = 9;
pub const RTC_CNTL_SDIO_TIMER_TARGET: u32 = 255;
pub const RTC_CNTL_SDIO_TIMER_TARGET_V: u32 = 255;
pub const RTC_CNTL_SDIO_TIMER_TARGET_S: u32 = 0;
pub const RTC_CNTL_BIAS_CONF_REG: u32 = 1610645628;
pub const RTC_CNTL_DBG_ATTEN_MONITOR: u32 = 15;
pub const RTC_CNTL_DBG_ATTEN_MONITOR_V: u32 = 15;
pub const RTC_CNTL_DBG_ATTEN_MONITOR_S: u32 = 22;
pub const RTC_CNTL_DBG_ATTEN_DEEP_SLP: u32 = 15;
pub const RTC_CNTL_DBG_ATTEN_DEEP_SLP_V: u32 = 15;
pub const RTC_CNTL_DBG_ATTEN_DEEP_SLP_S: u32 = 18;
pub const RTC_CNTL_BIAS_SLEEP_MONITOR_V: u32 = 1;
pub const RTC_CNTL_BIAS_SLEEP_MONITOR_S: u32 = 17;
pub const RTC_CNTL_BIAS_SLEEP_DEEP_SLP_V: u32 = 1;
pub const RTC_CNTL_BIAS_SLEEP_DEEP_SLP_S: u32 = 16;
pub const RTC_CNTL_PD_CUR_MONITOR_V: u32 = 1;
pub const RTC_CNTL_PD_CUR_MONITOR_S: u32 = 15;
pub const RTC_CNTL_PD_CUR_DEEP_SLP_V: u32 = 1;
pub const RTC_CNTL_PD_CUR_DEEP_SLP_S: u32 = 14;
pub const RTC_CNTL_BIAS_BUF_MONITOR_V: u32 = 1;
pub const RTC_CNTL_BIAS_BUF_MONITOR_S: u32 = 13;
pub const RTC_CNTL_BIAS_BUF_DEEP_SLP_V: u32 = 1;
pub const RTC_CNTL_BIAS_BUF_DEEP_SLP_S: u32 = 12;
pub const RTC_CNTL_BIAS_BUF_WAKE_V: u32 = 1;
pub const RTC_CNTL_BIAS_BUF_WAKE_S: u32 = 11;
pub const RTC_CNTL_BIAS_BUF_IDLE_V: u32 = 1;
pub const RTC_CNTL_BIAS_BUF_IDLE_S: u32 = 10;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP_EN_V: u32 = 1;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP_EN_S: u32 = 8;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP: u32 = 255;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP_V: u32 = 255;
pub const RTC_CNTL_DG_VDD_DRV_B_SLP_S: u32 = 0;
pub const RTC_CNTL_REG: u32 = 1610645632;
pub const RTC_CNTL_REGULATOR_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_REGULATOR_FORCE_PU_S: u32 = 31;
pub const RTC_CNTL_REGULATOR_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_REGULATOR_FORCE_PD_S: u32 = 30;
pub const RTC_CNTL_DBOOST_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_DBOOST_FORCE_PU_S: u32 = 29;
pub const RTC_CNTL_DBOOST_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_DBOOST_FORCE_PD_S: u32 = 28;
pub const RTC_CNTL_SCK_DCAP: u32 = 255;
pub const RTC_CNTL_SCK_DCAP_V: u32 = 255;
pub const RTC_CNTL_SCK_DCAP_S: u32 = 14;
pub const RTC_CNTL_DIG_CAL_EN_V: u32 = 1;
pub const RTC_CNTL_DIG_CAL_EN_S: u32 = 7;
pub const RTC_CNTL_PWC_REG: u32 = 1610645636;
pub const RTC_CNTL_PAD_FORCE_HOLD_V: u32 = 1;
pub const RTC_CNTL_PAD_FORCE_HOLD_S: u32 = 21;
pub const RTC_CNTL_DIG_PWC_REG: u32 = 1610645640;
pub const RTC_CNTL_DG_WRAP_PD_EN_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_PD_EN_S: u32 = 31;
pub const RTC_CNTL_WIFI_PD_EN_V: u32 = 1;
pub const RTC_CNTL_WIFI_PD_EN_S: u32 = 30;
pub const RTC_CNTL_CPU_TOP_PD_EN_V: u32 = 1;
pub const RTC_CNTL_CPU_TOP_PD_EN_S: u32 = 29;
pub const RTC_CNTL_DG_PERI_PD_EN_V: u32 = 1;
pub const RTC_CNTL_DG_PERI_PD_EN_S: u32 = 28;
pub const RTC_CNTL_BT_PD_EN_V: u32 = 1;
pub const RTC_CNTL_BT_PD_EN_S: u32 = 27;
pub const RTC_CNTL_CPU_TOP_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_CPU_TOP_FORCE_PU_S: u32 = 22;
pub const RTC_CNTL_CPU_TOP_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_CPU_TOP_FORCE_PD_S: u32 = 21;
pub const RTC_CNTL_DG_WRAP_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_PU_S: u32 = 20;
pub const RTC_CNTL_DG_WRAP_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_PD_S: u32 = 19;
pub const RTC_CNTL_WIFI_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_WIFI_FORCE_PU_S: u32 = 18;
pub const RTC_CNTL_WIFI_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_WIFI_FORCE_PD_S: u32 = 17;
pub const RTC_CNTL_FASTMEM_FORCE_LPU_V: u32 = 1;
pub const RTC_CNTL_FASTMEM_FORCE_LPU_S: u32 = 16;
pub const RTC_CNTL_FASTMEM_FORCE_LPD_V: u32 = 1;
pub const RTC_CNTL_FASTMEM_FORCE_LPD_S: u32 = 15;
pub const RTC_CNTL_DG_PERI_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_DG_PERI_FORCE_PU_S: u32 = 14;
pub const RTC_CNTL_DG_PERI_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_DG_PERI_FORCE_PD_S: u32 = 13;
pub const RTC_CNTL_BT_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_BT_FORCE_PU_S: u32 = 12;
pub const RTC_CNTL_BT_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_BT_FORCE_PD_S: u32 = 11;
pub const RTC_CNTL_LSLP_MEM_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_LSLP_MEM_FORCE_PU_S: u32 = 4;
pub const RTC_CNTL_LSLP_MEM_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_LSLP_MEM_FORCE_PD_S: u32 = 3;
pub const RTC_CNTL_VDD_SPI_PWR_FORCE_V: u32 = 1;
pub const RTC_CNTL_VDD_SPI_PWR_FORCE_S: u32 = 2;
pub const RTC_CNTL_VDD_SPI_PWR_DRV: u32 = 3;
pub const RTC_CNTL_VDD_SPI_PWR_DRV_V: u32 = 3;
pub const RTC_CNTL_VDD_SPI_PWR_DRV_S: u32 = 0;
pub const RTC_CNTL_DIG_ISO_REG: u32 = 1610645644;
pub const RTC_CNTL_DG_WRAP_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_NOISO_S: u32 = 31;
pub const RTC_CNTL_DG_WRAP_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_DG_WRAP_FORCE_ISO_S: u32 = 30;
pub const RTC_CNTL_WIFI_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_WIFI_FORCE_NOISO_S: u32 = 29;
pub const RTC_CNTL_WIFI_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_WIFI_FORCE_ISO_S: u32 = 28;
pub const RTC_CNTL_CPU_TOP_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_CPU_TOP_FORCE_NOISO_S: u32 = 27;
pub const RTC_CNTL_CPU_TOP_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_CPU_TOP_FORCE_ISO_S: u32 = 26;
pub const RTC_CNTL_DG_PERI_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_DG_PERI_FORCE_NOISO_S: u32 = 25;
pub const RTC_CNTL_DG_PERI_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_DG_PERI_FORCE_ISO_S: u32 = 24;
pub const RTC_CNTL_BT_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_BT_FORCE_NOISO_S: u32 = 23;
pub const RTC_CNTL_BT_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_BT_FORCE_ISO_S: u32 = 22;
pub const RTC_CNTL_DG_PAD_FORCE_HOLD_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_FORCE_HOLD_S: u32 = 15;
pub const RTC_CNTL_DG_PAD_FORCE_UNHOLD_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_FORCE_UNHOLD_S: u32 = 14;
pub const RTC_CNTL_DG_PAD_FORCE_ISO_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_FORCE_ISO_S: u32 = 13;
pub const RTC_CNTL_DG_PAD_FORCE_NOISO_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_FORCE_NOISO_S: u32 = 12;
pub const RTC_CNTL_DG_PAD_AUTOHOLD_EN_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_AUTOHOLD_EN_S: u32 = 11;
pub const RTC_CNTL_CLR_DG_PAD_AUTOHOLD_V: u32 = 1;
pub const RTC_CNTL_CLR_DG_PAD_AUTOHOLD_S: u32 = 10;
pub const RTC_CNTL_DG_PAD_AUTOHOLD_V: u32 = 1;
pub const RTC_CNTL_DG_PAD_AUTOHOLD_S: u32 = 9;
pub const RTC_CNTL_DIG_ISO_FORCE_ON_V: u32 = 1;
pub const RTC_CNTL_DIG_ISO_FORCE_ON_S: u32 = 8;
pub const RTC_CNTL_DIG_ISO_FORCE_OFF_V: u32 = 1;
pub const RTC_CNTL_DIG_ISO_FORCE_OFF_S: u32 = 7;
pub const RTC_CNTL_WDTCONFIG0_REG: u32 = 1610645648;
pub const RTC_CNTL_WDT_EN_V: u32 = 1;
pub const RTC_CNTL_WDT_EN_S: u32 = 31;
pub const RTC_CNTL_WDT_STG0: u32 = 7;
pub const RTC_CNTL_WDT_STG0_V: u32 = 7;
pub const RTC_CNTL_WDT_STG0_S: u32 = 28;
pub const RTC_CNTL_WDT_STG1: u32 = 7;
pub const RTC_CNTL_WDT_STG1_V: u32 = 7;
pub const RTC_CNTL_WDT_STG1_S: u32 = 25;
pub const RTC_CNTL_WDT_STG2: u32 = 7;
pub const RTC_CNTL_WDT_STG2_V: u32 = 7;
pub const RTC_CNTL_WDT_STG2_S: u32 = 22;
pub const RTC_CNTL_WDT_STG3: u32 = 7;
pub const RTC_CNTL_WDT_STG3_V: u32 = 7;
pub const RTC_CNTL_WDT_STG3_S: u32 = 19;
pub const RTC_WDT_STG_SEL_OFF: u32 = 0;
pub const RTC_WDT_STG_SEL_INT: u32 = 1;
pub const RTC_WDT_STG_SEL_RESET_CPU: u32 = 2;
pub const RTC_WDT_STG_SEL_RESET_SYSTEM: u32 = 3;
pub const RTC_WDT_STG_SEL_RESET_RTC: u32 = 4;
pub const RTC_CNTL_WDT_CPU_RESET_LENGTH: u32 = 7;
pub const RTC_CNTL_WDT_CPU_RESET_LENGTH_V: u32 = 7;
pub const RTC_CNTL_WDT_CPU_RESET_LENGTH_S: u32 = 16;
pub const RTC_CNTL_WDT_SYS_RESET_LENGTH: u32 = 7;
pub const RTC_CNTL_WDT_SYS_RESET_LENGTH_V: u32 = 7;
pub const RTC_CNTL_WDT_SYS_RESET_LENGTH_S: u32 = 13;
pub const RTC_CNTL_WDT_FLASHBOOT_MOD_EN_V: u32 = 1;
pub const RTC_CNTL_WDT_FLASHBOOT_MOD_EN_S: u32 = 12;
pub const RTC_CNTL_WDT_PROCPU_RESET_EN_V: u32 = 1;
pub const RTC_CNTL_WDT_PROCPU_RESET_EN_S: u32 = 11;
pub const RTC_CNTL_WDT_APPCPU_RESET_EN_V: u32 = 1;
pub const RTC_CNTL_WDT_APPCPU_RESET_EN_S: u32 = 10;
pub const RTC_CNTL_WDT_PAUSE_IN_SLP_V: u32 = 1;
pub const RTC_CNTL_WDT_PAUSE_IN_SLP_S: u32 = 9;
pub const RTC_CNTL_WDT_CHIP_RESET_EN_V: u32 = 1;
pub const RTC_CNTL_WDT_CHIP_RESET_EN_S: u32 = 8;
pub const RTC_CNTL_WDT_CHIP_RESET_WIDTH: u32 = 255;
pub const RTC_CNTL_WDT_CHIP_RESET_WIDTH_V: u32 = 255;
pub const RTC_CNTL_WDT_CHIP_RESET_WIDTH_S: u32 = 0;
pub const RTC_CNTL_WDTCONFIG1_REG: u32 = 1610645652;
pub const RTC_CNTL_WDT_STG0_HOLD: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG0_HOLD_V: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG0_HOLD_S: u32 = 0;
pub const RTC_CNTL_WDTCONFIG2_REG: u32 = 1610645656;
pub const RTC_CNTL_WDT_STG1_HOLD: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG1_HOLD_V: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG1_HOLD_S: u32 = 0;
pub const RTC_CNTL_WDTCONFIG3_REG: u32 = 1610645660;
pub const RTC_CNTL_WDT_STG2_HOLD: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG2_HOLD_V: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG2_HOLD_S: u32 = 0;
pub const RTC_CNTL_WDTCONFIG4_REG: u32 = 1610645664;
pub const RTC_CNTL_WDT_STG3_HOLD: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG3_HOLD_V: u32 = 4294967295;
pub const RTC_CNTL_WDT_STG3_HOLD_S: u32 = 0;
pub const RTC_CNTL_WDTFEED_REG: u32 = 1610645668;
pub const RTC_CNTL_WDT_FEED_V: u32 = 1;
pub const RTC_CNTL_WDT_FEED_S: u32 = 31;
pub const RTC_CNTL_WDTWPROTECT_REG: u32 = 1610645672;
pub const RTC_CNTL_WDT_WKEY: u32 = 4294967295;
pub const RTC_CNTL_WDT_WKEY_V: u32 = 4294967295;
pub const RTC_CNTL_WDT_WKEY_S: u32 = 0;
pub const RTC_CNTL_SWD_CONF_REG: u32 = 1610645676;
pub const RTC_CNTL_SWD_AUTO_FEED_EN_V: u32 = 1;
pub const RTC_CNTL_SWD_AUTO_FEED_EN_S: u32 = 31;
pub const RTC_CNTL_SWD_DISABLE_V: u32 = 1;
pub const RTC_CNTL_SWD_DISABLE_S: u32 = 30;
pub const RTC_CNTL_SWD_FEED_V: u32 = 1;
pub const RTC_CNTL_SWD_FEED_S: u32 = 29;
pub const RTC_CNTL_SWD_RST_FLAG_CLR_V: u32 = 1;
pub const RTC_CNTL_SWD_RST_FLAG_CLR_S: u32 = 28;
pub const RTC_CNTL_SWD_SIGNAL_WIDTH: u32 = 1023;
pub const RTC_CNTL_SWD_SIGNAL_WIDTH_V: u32 = 1023;
pub const RTC_CNTL_SWD_SIGNAL_WIDTH_S: u32 = 18;
pub const RTC_CNTL_SWD_BYPASS_RST_V: u32 = 1;
pub const RTC_CNTL_SWD_BYPASS_RST_S: u32 = 17;
pub const RTC_CNTL_SWD_FEED_INT_V: u32 = 1;
pub const RTC_CNTL_SWD_FEED_INT_S: u32 = 1;
pub const RTC_CNTL_SWD_RESET_FLAG_V: u32 = 1;
pub const RTC_CNTL_SWD_RESET_FLAG_S: u32 = 0;
pub const RTC_CNTL_SWD_WPROTECT_REG: u32 = 1610645680;
pub const RTC_CNTL_SWD_WKEY: u32 = 4294967295;
pub const RTC_CNTL_SWD_WKEY_V: u32 = 4294967295;
pub const RTC_CNTL_SWD_WKEY_S: u32 = 0;
pub const RTC_CNTL_SW_CPU_STALL_REG: u32 = 1610645684;
pub const RTC_CNTL_SW_STALL_PROCPU_C1: u32 = 63;
pub const RTC_CNTL_SW_STALL_PROCPU_C1_V: u32 = 63;
pub const RTC_CNTL_SW_STALL_PROCPU_C1_S: u32 = 26;
pub const RTC_CNTL_SW_STALL_APPCPU_C1: u32 = 63;
pub const RTC_CNTL_SW_STALL_APPCPU_C1_V: u32 = 63;
pub const RTC_CNTL_SW_STALL_APPCPU_C1_S: u32 = 20;
pub const RTC_CNTL_STORE4_REG: u32 = 1610645688;
pub const RTC_CNTL_SCRATCH4: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH4_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH4_S: u32 = 0;
pub const RTC_CNTL_STORE5_REG: u32 = 1610645692;
pub const RTC_CNTL_SCRATCH5: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH5_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH5_S: u32 = 0;
pub const RTC_CNTL_STORE6_REG: u32 = 1610645696;
pub const RTC_CNTL_SCRATCH6: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH6_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH6_S: u32 = 0;
pub const RTC_CNTL_STORE7_REG: u32 = 1610645700;
pub const RTC_CNTL_SCRATCH7: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH7_V: u32 = 4294967295;
pub const RTC_CNTL_SCRATCH7_S: u32 = 0;
pub const RTC_CNTL_LOW_POWER_ST_REG: u32 = 1610645704;
pub const RTC_CNTL_MAIN_STATE: u32 = 15;
pub const RTC_CNTL_MAIN_STATE_V: u32 = 15;
pub const RTC_CNTL_MAIN_STATE_S: u32 = 28;
pub const RTC_CNTL_MAIN_STATE_IN_IDLE_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_IN_IDLE_S: u32 = 27;
pub const RTC_CNTL_MAIN_STATE_IN_SLP_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_IN_SLP_S: u32 = 26;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_XTL_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_XTL_S: u32 = 25;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_PLL_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_PLL_S: u32 = 24;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_8M_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_IN_WAIT_8M_S: u32 = 23;
pub const RTC_CNTL_IN_LOW_POWER_STATE_V: u32 = 1;
pub const RTC_CNTL_IN_LOW_POWER_STATE_S: u32 = 22;
pub const RTC_CNTL_IN_WAKEUP_STATE_V: u32 = 1;
pub const RTC_CNTL_IN_WAKEUP_STATE_S: u32 = 21;
pub const RTC_CNTL_MAIN_STATE_WAIT_END_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_WAIT_END_S: u32 = 20;
pub const RTC_CNTL_RDY_FOR_WAKEUP_V: u32 = 1;
pub const RTC_CNTL_RDY_FOR_WAKEUP_S: u32 = 19;
pub const RTC_CNTL_MAIN_STATE_PLL_ON_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_PLL_ON_S: u32 = 18;
pub const RTC_CNTL_MAIN_STATE_XTAL_ISO_V: u32 = 1;
pub const RTC_CNTL_MAIN_STATE_XTAL_ISO_S: u32 = 17;
pub const RTC_CNTL_COCPU_STATE_DONE_V: u32 = 1;
pub const RTC_CNTL_COCPU_STATE_DONE_S: u32 = 16;
pub const RTC_CNTL_COCPU_STATE_SLP_V: u32 = 1;
pub const RTC_CNTL_COCPU_STATE_SLP_S: u32 = 15;
pub const RTC_CNTL_COCPU_STATE_SWITCH_V: u32 = 1;
pub const RTC_CNTL_COCPU_STATE_SWITCH_S: u32 = 14;
pub const RTC_CNTL_COCPU_STATE_START_V: u32 = 1;
pub const RTC_CNTL_COCPU_STATE_START_S: u32 = 13;
pub const RTC_CNTL_TOUCH_STATE_DONE_V: u32 = 1;
pub const RTC_CNTL_TOUCH_STATE_DONE_S: u32 = 12;
pub const RTC_CNTL_TOUCH_STATE_SLP_V: u32 = 1;
pub const RTC_CNTL_TOUCH_STATE_SLP_S: u32 = 11;
pub const RTC_CNTL_TOUCH_STATE_SWITCH_V: u32 = 1;
pub const RTC_CNTL_TOUCH_STATE_SWITCH_S: u32 = 10;
pub const RTC_CNTL_TOUCH_STATE_START_V: u32 = 1;
pub const RTC_CNTL_TOUCH_STATE_START_S: u32 = 9;
pub const RTC_CNTL_XPD_DIG_V: u32 = 1;
pub const RTC_CNTL_XPD_DIG_S: u32 = 8;
pub const RTC_CNTL_DIG_ISO_V: u32 = 1;
pub const RTC_CNTL_DIG_ISO_S: u32 = 7;
pub const RTC_CNTL_XPD_WIFI_V: u32 = 1;
pub const RTC_CNTL_XPD_WIFI_S: u32 = 6;
pub const RTC_CNTL_WIFI_ISO_V: u32 = 1;
pub const RTC_CNTL_WIFI_ISO_S: u32 = 5;
pub const RTC_CNTL_XPD_RTC_PERI_V: u32 = 1;
pub const RTC_CNTL_XPD_RTC_PERI_S: u32 = 4;
pub const RTC_CNTL_PERI_ISO_V: u32 = 1;
pub const RTC_CNTL_PERI_ISO_S: u32 = 3;
pub const RTC_CNTL_XPD_DIG_DCDC_V: u32 = 1;
pub const RTC_CNTL_XPD_DIG_DCDC_S: u32 = 2;
pub const RTC_CNTL_XPD_ROM0_V: u32 = 1;
pub const RTC_CNTL_XPD_ROM0_S: u32 = 0;
pub const RTC_CNTL_DIAG0_REG: u32 = 1610645708;
pub const RTC_CNTL_LOW_POWER_DIAG1: u32 = 4294967295;
pub const RTC_CNTL_LOW_POWER_DIAG1_V: u32 = 4294967295;
pub const RTC_CNTL_LOW_POWER_DIAG1_S: u32 = 0;
pub const RTC_CNTL_PAD_HOLD_REG: u32 = 1610645712;
pub const RTC_CNTL_GPIO_PIN5_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN5_HOLD_S: u32 = 5;
pub const RTC_CNTL_GPIO_PIN4_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN4_HOLD_S: u32 = 4;
pub const RTC_CNTL_GPIO_PIN3_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN3_HOLD_S: u32 = 3;
pub const RTC_CNTL_GPIO_PIN2_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN2_HOLD_S: u32 = 2;
pub const RTC_CNTL_GPIO_PIN1_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN1_HOLD_S: u32 = 1;
pub const RTC_CNTL_GPIO_PIN0_HOLD_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN0_HOLD_S: u32 = 0;
pub const RTC_CNTL_DIG_PAD_HOLD_REG: u32 = 1610645716;
pub const RTC_CNTL_DIG_PAD_HOLD: u32 = 4294967295;
pub const RTC_CNTL_DIG_PAD_HOLD_V: u32 = 4294967295;
pub const RTC_CNTL_DIG_PAD_HOLD_S: u32 = 0;
pub const RTC_CNTL_BROWN_OUT_REG: u32 = 1610645720;
pub const RTC_CNTL_BROWN_OUT_DET_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_DET_S: u32 = 31;
pub const RTC_CNTL_BROWN_OUT_ENA_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_ENA_S: u32 = 30;
pub const RTC_CNTL_BROWN_OUT_CNT_CLR_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_CNT_CLR_S: u32 = 29;
pub const RTC_CNTL_BROWN_OUT_ANA_RST_EN_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_ANA_RST_EN_S: u32 = 28;
pub const RTC_CNTL_BROWN_OUT_RST_SEL_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_RST_SEL_S: u32 = 27;
pub const RTC_CNTL_BROWN_OUT_RST_ENA_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_RST_ENA_S: u32 = 26;
pub const RTC_CNTL_BROWN_OUT_RST_WAIT: u32 = 1023;
pub const RTC_CNTL_BROWN_OUT_RST_WAIT_V: u32 = 1023;
pub const RTC_CNTL_BROWN_OUT_RST_WAIT_S: u32 = 16;
pub const RTC_CNTL_BROWN_OUT_PD_RF_ENA_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_PD_RF_ENA_S: u32 = 15;
pub const RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_CLOSE_FLASH_ENA_S: u32 = 14;
pub const RTC_CNTL_BROWN_OUT_INT_WAIT: u32 = 1023;
pub const RTC_CNTL_BROWN_OUT_INT_WAIT_V: u32 = 1023;
pub const RTC_CNTL_BROWN_OUT_INT_WAIT_S: u32 = 4;
pub const RTC_CNTL_TIME_LOW1_REG: u32 = 1610645724;
pub const RTC_CNTL_TIMER_VALUE1_LOW: u32 = 4294967295;
pub const RTC_CNTL_TIMER_VALUE1_LOW_V: u32 = 4294967295;
pub const RTC_CNTL_TIMER_VALUE1_LOW_S: u32 = 0;
pub const RTC_CNTL_TIME_HIGH1_REG: u32 = 1610645728;
pub const RTC_CNTL_TIMER_VALUE1_HIGH: u32 = 65535;
pub const RTC_CNTL_TIMER_VALUE1_HIGH_V: u32 = 65535;
pub const RTC_CNTL_TIMER_VALUE1_HIGH_S: u32 = 0;
pub const RTC_CNTL_XTAL32K_CLK_FACTOR_REG: u32 = 1610645732;
pub const RTC_CNTL_XTAL32K_CLK_FACTOR: u32 = 4294967295;
pub const RTC_CNTL_XTAL32K_CLK_FACTOR_V: u32 = 4294967295;
pub const RTC_CNTL_XTAL32K_CLK_FACTOR_S: u32 = 0;
pub const RTC_CNTL_XTAL32K_CONF_REG: u32 = 1610645736;
pub const RTC_CNTL_XTAL32K_STABLE_THRES: u32 = 15;
pub const RTC_CNTL_XTAL32K_STABLE_THRES_V: u32 = 15;
pub const RTC_CNTL_XTAL32K_STABLE_THRES_S: u32 = 28;
pub const RTC_CNTL_XTAL32K_WDT_TIMEOUT: u32 = 255;
pub const RTC_CNTL_XTAL32K_WDT_TIMEOUT_V: u32 = 255;
pub const RTC_CNTL_XTAL32K_WDT_TIMEOUT_S: u32 = 20;
pub const RTC_CNTL_XTAL32K_RESTART_WAIT: u32 = 65535;
pub const RTC_CNTL_XTAL32K_RESTART_WAIT_V: u32 = 65535;
pub const RTC_CNTL_XTAL32K_RESTART_WAIT_S: u32 = 4;
pub const RTC_CNTL_XTAL32K_RETURN_WAIT: u32 = 15;
pub const RTC_CNTL_XTAL32K_RETURN_WAIT_V: u32 = 15;
pub const RTC_CNTL_XTAL32K_RETURN_WAIT_S: u32 = 0;
pub const RTC_CNTL_USB_CONF_REG: u32 = 1610645740;
pub const RTC_CNTL_IO_MUX_RESET_DISABLE_V: u32 = 1;
pub const RTC_CNTL_IO_MUX_RESET_DISABLE_S: u32 = 18;
pub const RTC_CNTL_SLP_REJECT_CAUSE_REG: u32 = 1610645744;
pub const RTC_CNTL_REJECT_CAUSE: u32 = 262143;
pub const RTC_CNTL_REJECT_CAUSE_V: u32 = 262143;
pub const RTC_CNTL_REJECT_CAUSE_S: u32 = 0;
pub const RTC_CNTL_OPTION1_REG: u32 = 1610645748;
pub const RTC_CNTL_FORCE_DOWNLOAD_BOOT_V: u32 = 1;
pub const RTC_CNTL_FORCE_DOWNLOAD_BOOT_S: u32 = 0;
pub const RTC_CNTL_SLP_WAKEUP_CAUSE_REG: u32 = 1610645752;
pub const RTC_CNTL_WAKEUP_CAUSE: u32 = 131071;
pub const RTC_CNTL_WAKEUP_CAUSE_V: u32 = 131071;
pub const RTC_CNTL_WAKEUP_CAUSE_S: u32 = 0;
pub const RTC_CNTL_ULP_CP_TIMER_1_REG: u32 = 1610645756;
pub const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE: u32 = 16777215;
pub const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE_V: u32 = 16777215;
pub const RTC_CNTL_ULP_CP_TIMER_SLP_CYCLE_S: u32 = 8;
pub const RTC_CNTL_INT_ENA_W1TS_REG: u32 = 1610645760;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_W1TS_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_W1TS_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TS_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_ENA_W1TS_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TS_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_W1TS_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_ENA_W1TS_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_W1TS_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TS_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TS_S: u32 = 0;
pub const RTC_CNTL_INT_ENA_W1TC_REG: u32 = 1610645764;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_BBPLL_CAL_INT_ENA_W1TC_S: u32 = 20;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_GLITCH_DET_INT_ENA_W1TC_S: u32 = 19;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_XTAL32K_DEAD_INT_ENA_W1TC_S: u32 = 16;
pub const RTC_CNTL_SWD_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_SWD_INT_ENA_W1TC_S: u32 = 15;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_MAIN_TIMER_INT_ENA_W1TC_S: u32 = 10;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_BROWN_OUT_INT_ENA_W1TC_S: u32 = 9;
pub const RTC_CNTL_WDT_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_WDT_INT_ENA_W1TC_S: u32 = 3;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_SLP_REJECT_INT_ENA_W1TC_S: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TC_V: u32 = 1;
pub const RTC_CNTL_SLP_WAKEUP_INT_ENA_W1TC_S: u32 = 0;
pub const RTC_CNTL_RETENTION_CTRL_REG: u32 = 1610645768;
pub const RTC_CNTL_RETENTION_WAIT: u32 = 31;
pub const RTC_CNTL_RETENTION_WAIT_V: u32 = 31;
pub const RTC_CNTL_RETENTION_WAIT_S: u32 = 27;
pub const RTC_CNTL_RETENTION_EN_V: u32 = 1;
pub const RTC_CNTL_RETENTION_EN_S: u32 = 26;
pub const RTC_CNTL_RETENTION_CLKOFF_WAIT: u32 = 15;
pub const RTC_CNTL_RETENTION_CLKOFF_WAIT_V: u32 = 15;
pub const RTC_CNTL_RETENTION_CLKOFF_WAIT_S: u32 = 22;
pub const RTC_CNTL_RETENTION_DONE_WAIT: u32 = 7;
pub const RTC_CNTL_RETENTION_DONE_WAIT_V: u32 = 7;
pub const RTC_CNTL_RETENTION_DONE_WAIT_S: u32 = 19;
pub const RTC_CNTL_RETENTION_CLK_SEL_V: u32 = 1;
pub const RTC_CNTL_RETENTION_CLK_SEL_S: u32 = 18;
pub const RTC_CNTL_FIB_SEL_REG: u32 = 1610645772;
pub const RTC_CNTL_FIB_SEL: u32 = 7;
pub const RTC_CNTL_FIB_SEL_V: u32 = 7;
pub const RTC_CNTL_FIB_SEL_S: u32 = 0;
pub const RTC_CNTL_GPIO_WAKEUP_REG: u32 = 1610645776;
pub const RTC_CNTL_GPIO_PIN0_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN0_WAKEUP_ENABLE_S: u32 = 31;
pub const RTC_CNTL_GPIO_PIN1_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN1_WAKEUP_ENABLE_S: u32 = 30;
pub const RTC_CNTL_GPIO_PIN2_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN2_WAKEUP_ENABLE_S: u32 = 29;
pub const RTC_CNTL_GPIO_PIN3_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN3_WAKEUP_ENABLE_S: u32 = 28;
pub const RTC_CNTL_GPIO_PIN4_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN4_WAKEUP_ENABLE_S: u32 = 27;
pub const RTC_CNTL_GPIO_PIN5_WAKEUP_ENABLE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN5_WAKEUP_ENABLE_S: u32 = 26;
pub const RTC_CNTL_GPIO_PIN0_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN0_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN0_INT_TYPE_S: u32 = 23;
pub const RTC_CNTL_GPIO_PIN1_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN1_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN1_INT_TYPE_S: u32 = 20;
pub const RTC_CNTL_GPIO_PIN2_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN2_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN2_INT_TYPE_S: u32 = 17;
pub const RTC_CNTL_GPIO_PIN3_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN3_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN3_INT_TYPE_S: u32 = 14;
pub const RTC_CNTL_GPIO_PIN4_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN4_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN4_INT_TYPE_S: u32 = 11;
pub const RTC_CNTL_GPIO_PIN5_INT_TYPE: u32 = 7;
pub const RTC_CNTL_GPIO_PIN5_INT_TYPE_V: u32 = 7;
pub const RTC_CNTL_GPIO_PIN5_INT_TYPE_S: u32 = 8;
pub const RTC_CNTL_GPIO_PIN_CLK_GATE_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN_CLK_GATE_S: u32 = 7;
pub const RTC_CNTL_GPIO_WAKEUP_STATUS_CLR_V: u32 = 1;
pub const RTC_CNTL_GPIO_WAKEUP_STATUS_CLR_S: u32 = 6;
pub const RTC_CNTL_GPIO_WAKEUP_STATUS: u32 = 63;
pub const RTC_CNTL_GPIO_WAKEUP_STATUS_V: u32 = 63;
pub const RTC_CNTL_GPIO_WAKEUP_STATUS_S: u32 = 0;
pub const RTC_CNTL_DBG_SEL_REG: u32 = 1610645780;
pub const RTC_CNTL_DEBUG_SEL4: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL4_V: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL4_S: u32 = 27;
pub const RTC_CNTL_DEBUG_SEL3: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL3_V: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL3_S: u32 = 22;
pub const RTC_CNTL_DEBUG_SEL2: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL2_V: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL2_S: u32 = 17;
pub const RTC_CNTL_DEBUG_SEL1: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL1_V: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL1_S: u32 = 12;
pub const RTC_CNTL_DEBUG_SEL0: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL0_V: u32 = 31;
pub const RTC_CNTL_DEBUG_SEL0_S: u32 = 7;
pub const RTC_CNTL_DEBUG_BIT_SEL: u32 = 31;
pub const RTC_CNTL_DEBUG_BIT_SEL_V: u32 = 31;
pub const RTC_CNTL_DEBUG_BIT_SEL_S: u32 = 2;
pub const RTC_CNTL_DEBUG_12M_NO_GATING_V: u32 = 1;
pub const RTC_CNTL_DEBUG_12M_NO_GATING_S: u32 = 1;
pub const RTC_CNTL_DBG_MAP_REG: u32 = 1610645784;
pub const RTC_CNTL_GPIO_PIN0_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN0_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN0_FUN_SEL_S: u32 = 28;
pub const RTC_CNTL_GPIO_PIN1_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN1_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN1_FUN_SEL_S: u32 = 24;
pub const RTC_CNTL_GPIO_PIN2_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN2_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN2_FUN_SEL_S: u32 = 20;
pub const RTC_CNTL_GPIO_PIN3_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN3_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN3_FUN_SEL_S: u32 = 16;
pub const RTC_CNTL_GPIO_PIN4_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN4_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN4_FUN_SEL_S: u32 = 12;
pub const RTC_CNTL_GPIO_PIN5_FUN_SEL: u32 = 15;
pub const RTC_CNTL_GPIO_PIN5_FUN_SEL_V: u32 = 15;
pub const RTC_CNTL_GPIO_PIN5_FUN_SEL_S: u32 = 8;
pub const RTC_CNTL_GPIO_PIN0_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN0_MUX_SEL_S: u32 = 7;
pub const RTC_CNTL_GPIO_PIN1_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN1_MUX_SEL_S: u32 = 6;
pub const RTC_CNTL_GPIO_PIN2_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN2_MUX_SEL_S: u32 = 5;
pub const RTC_CNTL_GPIO_PIN3_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN3_MUX_SEL_S: u32 = 4;
pub const RTC_CNTL_GPIO_PIN4_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN4_MUX_SEL_S: u32 = 3;
pub const RTC_CNTL_GPIO_PIN5_MUX_SEL_V: u32 = 1;
pub const RTC_CNTL_GPIO_PIN5_MUX_SEL_S: u32 = 2;
pub const RTC_CNTL_SENSOR_CTRL_REG: u32 = 1610645788;
pub const RTC_CNTL_FORCE_XPD_SAR: u32 = 3;
pub const RTC_CNTL_FORCE_XPD_SAR_V: u32 = 3;
pub const RTC_CNTL_FORCE_XPD_SAR_S: u32 = 30;
pub const RTC_CNTL_SAR2_PWDET_CCT: u32 = 7;
pub const RTC_CNTL_SAR2_PWDET_CCT_V: u32 = 7;
pub const RTC_CNTL_SAR2_PWDET_CCT_S: u32 = 27;
pub const RTC_CNTL_DBG_SAR_SEL_REG: u32 = 1610645792;
pub const RTC_CNTL_SAR_DEBUG_SEL: u32 = 31;
pub const RTC_CNTL_SAR_DEBUG_SEL_V: u32 = 31;
pub const RTC_CNTL_SAR_DEBUG_SEL_S: u32 = 27;
pub const RTC_CNTL_PG_CTRL_REG: u32 = 1610645796;
pub const RTC_CNTL_POWER_GLITCH_EN_V: u32 = 1;
pub const RTC_CNTL_POWER_GLITCH_EN_S: u32 = 31;
pub const RTC_CNTL_POWER_GLITCH_EFUSE_SEL_V: u32 = 1;
pub const RTC_CNTL_POWER_GLITCH_EFUSE_SEL_S: u32 = 30;
pub const RTC_CNTL_POWER_GLITCH_FORCE_PU_V: u32 = 1;
pub const RTC_CNTL_POWER_GLITCH_FORCE_PU_S: u32 = 29;
pub const RTC_CNTL_POWER_GLITCH_FORCE_PD_V: u32 = 1;
pub const RTC_CNTL_POWER_GLITCH_FORCE_PD_S: u32 = 28;
pub const RTC_CNTL_POWER_GLITCH_DSENSE: u32 = 3;
pub const RTC_CNTL_POWER_GLITCH_DSENSE_V: u32 = 3;
pub const RTC_CNTL_POWER_GLITCH_DSENSE_S: u32 = 26;
pub const RTC_CNTL_DATE_REG: u32 = 1610646012;
pub const RTC_CNTL_CNTL_DATE: u32 = 268435455;
pub const RTC_CNTL_CNTL_DATE_V: u32 = 268435455;
pub const RTC_CNTL_CNTL_DATE_S: u32 = 0;
pub const TWAI_EXTD_ID_MASK: u32 = 536870911;
pub const TWAI_STD_ID_MASK: u32 = 2047;
pub const TWAI_FRAME_MAX_DLC: u32 = 8;
pub const TWAI_FRAME_EXTD_ID_LEN_BYTES: u32 = 4;
pub const TWAI_FRAME_STD_ID_LEN_BYTES: u32 = 2;
pub const TWAI_ERR_PASS_THRESH: u32 = 128;
pub const TWAI_MSG_FLAG_NONE: u32 = 0;
pub const TWAI_MSG_FLAG_EXTD: u32 = 1;
pub const TWAI_MSG_FLAG_RTR: u32 = 2;
pub const TWAI_MSG_FLAG_SS: u32 = 4;
pub const TWAI_MSG_FLAG_SELF: u32 = 8;
pub const TWAI_MSG_FLAG_DLC_NON_COMP: u32 = 16;
pub const TWAI_BRP_MAX: u32 = 16384;
pub const TWAI_BRP_MIN: u32 = 2;
pub const TWAI_ALERT_TX_IDLE: u32 = 1;
pub const TWAI_ALERT_TX_SUCCESS: u32 = 2;
pub const TWAI_ALERT_RX_DATA: u32 = 4;
pub const TWAI_ALERT_BELOW_ERR_WARN: u32 = 8;
pub const TWAI_ALERT_ERR_ACTIVE: u32 = 16;
pub const TWAI_ALERT_RECOVERY_IN_PROGRESS: u32 = 32;
pub const TWAI_ALERT_BUS_RECOVERED: u32 = 64;
pub const TWAI_ALERT_ARB_LOST: u32 = 128;
pub const TWAI_ALERT_ABOVE_ERR_WARN: u32 = 256;
pub const TWAI_ALERT_BUS_ERROR: u32 = 512;
pub const TWAI_ALERT_TX_FAILED: u32 = 1024;
pub const TWAI_ALERT_RX_QUEUE_FULL: u32 = 2048;
pub const TWAI_ALERT_ERR_PASS: u32 = 4096;
pub const TWAI_ALERT_BUS_OFF: u32 = 8192;
pub const TWAI_ALERT_RX_FIFO_OVERRUN: u32 = 16384;
pub const TWAI_ALERT_TX_RETRIED: u32 = 32768;
pub const TWAI_ALERT_PERIPH_RESET: u32 = 65536;
pub const TWAI_ALERT_ALL: u32 = 131071;
pub const TWAI_ALERT_NONE: u32 = 0;
pub const TWAI_ALERT_AND_LOG: u32 = 131072;
pub const I2C_CLK_FREQ_MAX: i32 = -1;
pub const I2C_APB_CLK_FREQ: u32 = 80000000;
pub const I2C_NUM_MAX: u32 = 1;
pub const I2C_NUM_0: u32 = 0;
pub const I2C_SCLK_SRC_FLAG_FOR_NOMAL: u32 = 0;
pub const I2C_SCLK_SRC_FLAG_AWARE_DFS: u32 = 1;
pub const I2C_SCLK_SRC_FLAG_LIGHT_SLEEP: u32 = 2;
pub const I2C_INTERNAL_STRUCT_SIZE: u32 = 24;
pub const I2S_TX_HUNG_INT_RAW_V: u32 = 1;
pub const I2S_TX_HUNG_INT_RAW_S: u32 = 3;
pub const I2S_RX_HUNG_INT_RAW_V: u32 = 1;
pub const I2S_RX_HUNG_INT_RAW_S: u32 = 2;
pub const I2S_TX_DONE_INT_RAW_V: u32 = 1;
pub const I2S_TX_DONE_INT_RAW_S: u32 = 1;
pub const I2S_RX_DONE_INT_RAW_V: u32 = 1;
pub const I2S_RX_DONE_INT_RAW_S: u32 = 0;
pub const I2S_TX_HUNG_INT_ST_V: u32 = 1;
pub const I2S_TX_HUNG_INT_ST_S: u32 = 3;
pub const I2S_RX_HUNG_INT_ST_V: u32 = 1;
pub const I2S_RX_HUNG_INT_ST_S: u32 = 2;
pub const I2S_TX_DONE_INT_ST_V: u32 = 1;
pub const I2S_TX_DONE_INT_ST_S: u32 = 1;
pub const I2S_RX_DONE_INT_ST_V: u32 = 1;
pub const I2S_RX_DONE_INT_ST_S: u32 = 0;
pub const I2S_TX_HUNG_INT_ENA_V: u32 = 1;
pub const I2S_TX_HUNG_INT_ENA_S: u32 = 3;
pub const I2S_RX_HUNG_INT_ENA_V: u32 = 1;
pub const I2S_RX_HUNG_INT_ENA_S: u32 = 2;
pub const I2S_TX_DONE_INT_ENA_V: u32 = 1;
pub const I2S_TX_DONE_INT_ENA_S: u32 = 1;
pub const I2S_RX_DONE_INT_ENA_V: u32 = 1;
pub const I2S_RX_DONE_INT_ENA_S: u32 = 0;
pub const I2S_TX_HUNG_INT_CLR_V: u32 = 1;
pub const I2S_TX_HUNG_INT_CLR_S: u32 = 3;
pub const I2S_RX_HUNG_INT_CLR_V: u32 = 1;
pub const I2S_RX_HUNG_INT_CLR_S: u32 = 2;
pub const I2S_TX_DONE_INT_CLR_V: u32 = 1;
pub const I2S_TX_DONE_INT_CLR_S: u32 = 1;
pub const I2S_RX_DONE_INT_CLR_V: u32 = 1;
pub const I2S_RX_DONE_INT_CLR_S: u32 = 0;
pub const I2S_RX_PDM_EN_V: u32 = 1;
pub const I2S_RX_PDM_EN_S: u32 = 20;
pub const I2S_RX_TDM_EN_V: u32 = 1;
pub const I2S_RX_TDM_EN_S: u32 = 19;
pub const I2S_RX_BIT_ORDER_V: u32 = 1;
pub const I2S_RX_BIT_ORDER_S: u32 = 18;
pub const I2S_RX_WS_IDLE_POL_V: u32 = 1;
pub const I2S_RX_WS_IDLE_POL_S: u32 = 17;
pub const I2S_RX_24_FILL_EN_V: u32 = 1;
pub const I2S_RX_24_FILL_EN_S: u32 = 16;
pub const I2S_RX_LEFT_ALIGN_V: u32 = 1;
pub const I2S_RX_LEFT_ALIGN_S: u32 = 15;
pub const I2S_RX_STOP_MODE: u32 = 3;
pub const I2S_RX_STOP_MODE_V: u32 = 3;
pub const I2S_RX_STOP_MODE_S: u32 = 13;
pub const I2S_RX_PCM_BYPASS_V: u32 = 1;
pub const I2S_RX_PCM_BYPASS_S: u32 = 12;
pub const I2S_RX_PCM_CONF: u32 = 3;
pub const I2S_RX_PCM_CONF_V: u32 = 3;
pub const I2S_RX_PCM_CONF_S: u32 = 10;
pub const I2S_RX_MONO_FST_VLD_V: u32 = 1;
pub const I2S_RX_MONO_FST_VLD_S: u32 = 9;
pub const I2S_RX_UPDATE_V: u32 = 1;
pub const I2S_RX_UPDATE_S: u32 = 8;
pub const I2S_RX_BIG_ENDIAN_V: u32 = 1;
pub const I2S_RX_BIG_ENDIAN_S: u32 = 7;
pub const I2S_RX_MONO_V: u32 = 1;
pub const I2S_RX_MONO_S: u32 = 5;
pub const I2S_RX_SLAVE_MOD_V: u32 = 1;
pub const I2S_RX_SLAVE_MOD_S: u32 = 3;
pub const I2S_RX_START_V: u32 = 1;
pub const I2S_RX_START_S: u32 = 2;
pub const I2S_RX_FIFO_RESET_V: u32 = 1;
pub const I2S_RX_FIFO_RESET_S: u32 = 1;
pub const I2S_RX_RESET_V: u32 = 1;
pub const I2S_RX_RESET_S: u32 = 0;
pub const I2S_SIG_LOOPBACK_V: u32 = 1;
pub const I2S_SIG_LOOPBACK_S: u32 = 27;
pub const I2S_TX_CHAN_MOD: u32 = 7;
pub const I2S_TX_CHAN_MOD_V: u32 = 7;
pub const I2S_TX_CHAN_MOD_S: u32 = 24;
pub const I2S_TX_PDM_EN_V: u32 = 1;
pub const I2S_TX_PDM_EN_S: u32 = 20;
pub const I2S_TX_TDM_EN_V: u32 = 1;
pub const I2S_TX_TDM_EN_S: u32 = 19;
pub const I2S_TX_BIT_ORDER_V: u32 = 1;
pub const I2S_TX_BIT_ORDER_S: u32 = 18;
pub const I2S_TX_WS_IDLE_POL_V: u32 = 1;
pub const I2S_TX_WS_IDLE_POL_S: u32 = 17;
pub const I2S_TX_24_FILL_EN_V: u32 = 1;
pub const I2S_TX_24_FILL_EN_S: u32 = 16;
pub const I2S_TX_LEFT_ALIGN_V: u32 = 1;
pub const I2S_TX_LEFT_ALIGN_S: u32 = 15;
pub const I2S_TX_STOP_EN_V: u32 = 1;
pub const I2S_TX_STOP_EN_S: u32 = 13;
pub const I2S_TX_PCM_BYPASS_V: u32 = 1;
pub const I2S_TX_PCM_BYPASS_S: u32 = 12;
pub const I2S_TX_PCM_CONF: u32 = 3;
pub const I2S_TX_PCM_CONF_V: u32 = 3;
pub const I2S_TX_PCM_CONF_S: u32 = 10;
pub const I2S_TX_MONO_FST_VLD_V: u32 = 1;
pub const I2S_TX_MONO_FST_VLD_S: u32 = 9;
pub const I2S_TX_UPDATE_V: u32 = 1;
pub const I2S_TX_UPDATE_S: u32 = 8;
pub const I2S_TX_BIG_ENDIAN_V: u32 = 1;
pub const I2S_TX_BIG_ENDIAN_S: u32 = 7;
pub const I2S_TX_CHAN_EQUAL_V: u32 = 1;
pub const I2S_TX_CHAN_EQUAL_S: u32 = 6;
pub const I2S_TX_MONO_V: u32 = 1;
pub const I2S_TX_MONO_S: u32 = 5;
pub const I2S_TX_SLAVE_MOD_V: u32 = 1;
pub const I2S_TX_SLAVE_MOD_S: u32 = 3;
pub const I2S_TX_START_V: u32 = 1;
pub const I2S_TX_START_S: u32 = 2;
pub const I2S_TX_FIFO_RESET_V: u32 = 1;
pub const I2S_TX_FIFO_RESET_S: u32 = 1;
pub const I2S_TX_RESET_V: u32 = 1;
pub const I2S_TX_RESET_S: u32 = 0;
pub const I2S_RX_MSB_SHIFT_V: u32 = 1;
pub const I2S_RX_MSB_SHIFT_S: u32 = 29;
pub const I2S_RX_TDM_CHAN_BITS: u32 = 31;
pub const I2S_RX_TDM_CHAN_BITS_V: u32 = 31;
pub const I2S_RX_TDM_CHAN_BITS_S: u32 = 24;
pub const I2S_RX_HALF_SAMPLE_BITS: u32 = 63;
pub const I2S_RX_HALF_SAMPLE_BITS_V: u32 = 63;
pub const I2S_RX_HALF_SAMPLE_BITS_S: u32 = 18;
pub const I2S_RX_BITS_MOD: u32 = 31;
pub const I2S_RX_BITS_MOD_V: u32 = 31;
pub const I2S_RX_BITS_MOD_S: u32 = 13;
pub const I2S_RX_BCK_DIV_NUM: u32 = 63;
pub const I2S_RX_BCK_DIV_NUM_V: u32 = 63;
pub const I2S_RX_BCK_DIV_NUM_S: u32 = 7;
pub const I2S_RX_TDM_WS_WIDTH: u32 = 127;
pub const I2S_RX_TDM_WS_WIDTH_V: u32 = 127;
pub const I2S_RX_TDM_WS_WIDTH_S: u32 = 0;
pub const I2S_TX_MSB_SHIFT_V: u32 = 1;
pub const I2S_TX_MSB_SHIFT_S: u32 = 29;
pub const I2S_TX_TDM_CHAN_BITS: u32 = 31;
pub const I2S_TX_TDM_CHAN_BITS_V: u32 = 31;
pub const I2S_TX_TDM_CHAN_BITS_S: u32 = 24;
pub const I2S_TX_HALF_SAMPLE_BITS: u32 = 63;
pub const I2S_TX_HALF_SAMPLE_BITS_V: u32 = 63;
pub const I2S_TX_HALF_SAMPLE_BITS_S: u32 = 18;
pub const I2S_TX_BITS_MOD: u32 = 31;
pub const I2S_TX_BITS_MOD_V: u32 = 31;
pub const I2S_TX_BITS_MOD_S: u32 = 13;
pub const I2S_TX_BCK_DIV_NUM: u32 = 63;
pub const I2S_TX_BCK_DIV_NUM_V: u32 = 63;
pub const I2S_TX_BCK_DIV_NUM_S: u32 = 7;
pub const I2S_TX_TDM_WS_WIDTH: u32 = 127;
pub const I2S_TX_TDM_WS_WIDTH_V: u32 = 127;
pub const I2S_TX_TDM_WS_WIDTH_S: u32 = 0;
pub const I2S_MCLK_SEL_V: u32 = 1;
pub const I2S_MCLK_SEL_S: u32 = 29;
pub const I2S_RX_CLK_SEL: u32 = 3;
pub const I2S_RX_CLK_SEL_V: u32 = 3;
pub const I2S_RX_CLK_SEL_S: u32 = 27;
pub const I2S_RX_CLK_ACTIVE_V: u32 = 1;
pub const I2S_RX_CLK_ACTIVE_S: u32 = 26;
pub const I2S_RX_CLKM_DIV_NUM: u32 = 255;
pub const I2S_RX_CLKM_DIV_NUM_V: u32 = 255;
pub const I2S_RX_CLKM_DIV_NUM_S: u32 = 0;
pub const I2S_CLK_EN_V: u32 = 1;
pub const I2S_CLK_EN_S: u32 = 29;
pub const I2S_TX_CLK_SEL: u32 = 3;
pub const I2S_TX_CLK_SEL_V: u32 = 3;
pub const I2S_TX_CLK_SEL_S: u32 = 27;
pub const I2S_TX_CLK_ACTIVE_V: u32 = 1;
pub const I2S_TX_CLK_ACTIVE_S: u32 = 26;
pub const I2S_TX_CLKM_DIV_NUM: u32 = 255;
pub const I2S_TX_CLKM_DIV_NUM_V: u32 = 255;
pub const I2S_TX_CLKM_DIV_NUM_S: u32 = 0;
pub const I2S_RX_CLKM_DIV_YN1_V: u32 = 1;
pub const I2S_RX_CLKM_DIV_YN1_S: u32 = 27;
pub const I2S_RX_CLKM_DIV_X: u32 = 511;
pub const I2S_RX_CLKM_DIV_X_V: u32 = 511;
pub const I2S_RX_CLKM_DIV_X_S: u32 = 18;
pub const I2S_RX_CLKM_DIV_Y: u32 = 511;
pub const I2S_RX_CLKM_DIV_Y_V: u32 = 511;
pub const I2S_RX_CLKM_DIV_Y_S: u32 = 9;
pub const I2S_RX_CLKM_DIV_Z: u32 = 511;
pub const I2S_RX_CLKM_DIV_Z_V: u32 = 511;
pub const I2S_RX_CLKM_DIV_Z_S: u32 = 0;
pub const I2S_TX_CLKM_DIV_YN1_V: u32 = 1;
pub const I2S_TX_CLKM_DIV_YN1_S: u32 = 27;
pub const I2S_TX_CLKM_DIV_X: u32 = 511;
pub const I2S_TX_CLKM_DIV_X_V: u32 = 511;
pub const I2S_TX_CLKM_DIV_X_S: u32 = 18;
pub const I2S_TX_CLKM_DIV_Y: u32 = 511;
pub const I2S_TX_CLKM_DIV_Y_V: u32 = 511;
pub const I2S_TX_CLKM_DIV_Y_S: u32 = 9;
pub const I2S_TX_CLKM_DIV_Z: u32 = 511;
pub const I2S_TX_CLKM_DIV_Z_V: u32 = 511;
pub const I2S_TX_CLKM_DIV_Z_S: u32 = 0;
pub const I2S_PCM2PDM_CONV_EN_V: u32 = 1;
pub const I2S_PCM2PDM_CONV_EN_S: u32 = 25;
pub const I2S_TX_PDM_DAC_MODE_EN_V: u32 = 1;
pub const I2S_TX_PDM_DAC_MODE_EN_S: u32 = 24;
pub const I2S_TX_PDM_DAC_2OUT_EN_V: u32 = 1;
pub const I2S_TX_PDM_DAC_2OUT_EN_S: u32 = 23;
pub const I2S_TX_PDM_SIGMADELTA_DITHER_V: u32 = 1;
pub const I2S_TX_PDM_SIGMADELTA_DITHER_S: u32 = 22;
pub const I2S_TX_PDM_SIGMADELTA_DITHER2_V: u32 = 1;
pub const I2S_TX_PDM_SIGMADELTA_DITHER2_S: u32 = 21;
pub const I2S_TX_PDM_SIGMADELTA_IN_SHIFT: u32 = 3;
pub const I2S_TX_PDM_SIGMADELTA_IN_SHIFT_V: u32 = 3;
pub const I2S_TX_PDM_SIGMADELTA_IN_SHIFT_S: u32 = 19;
pub const I2S_TX_PDM_SINC_IN_SHIFT: u32 = 3;
pub const I2S_TX_PDM_SINC_IN_SHIFT_V: u32 = 3;
pub const I2S_TX_PDM_SINC_IN_SHIFT_S: u32 = 17;
pub const I2S_TX_PDM_LP_IN_SHIFT: u32 = 3;
pub const I2S_TX_PDM_LP_IN_SHIFT_V: u32 = 3;
pub const I2S_TX_PDM_LP_IN_SHIFT_S: u32 = 15;
pub const I2S_TX_PDM_HP_IN_SHIFT: u32 = 3;
pub const I2S_TX_PDM_HP_IN_SHIFT_V: u32 = 3;
pub const I2S_TX_PDM_HP_IN_SHIFT_S: u32 = 13;
pub const I2S_TX_PDM_PRESCALE: u32 = 255;
pub const I2S_TX_PDM_PRESCALE_V: u32 = 255;
pub const I2S_TX_PDM_PRESCALE_S: u32 = 5;
pub const I2S_TX_PDM_SINC_OSR2: u32 = 15;
pub const I2S_TX_PDM_SINC_OSR2_V: u32 = 15;
pub const I2S_TX_PDM_SINC_OSR2_S: u32 = 1;
pub const I2S_TX_PDM_HP_BYPASS_V: u32 = 1;
pub const I2S_TX_PDM_HP_BYPASS_S: u32 = 0;
pub const I2S_TX_IIR_HP_MULT12_0: u32 = 7;
pub const I2S_TX_IIR_HP_MULT12_0_V: u32 = 7;
pub const I2S_TX_IIR_HP_MULT12_0_S: u32 = 23;
pub const I2S_TX_IIR_HP_MULT12_5: u32 = 7;
pub const I2S_TX_IIR_HP_MULT12_5_V: u32 = 7;
pub const I2S_TX_IIR_HP_MULT12_5_S: u32 = 20;
pub const I2S_TX_PDM_FS: u32 = 1023;
pub const I2S_TX_PDM_FS_V: u32 = 1023;
pub const I2S_TX_PDM_FS_S: u32 = 10;
pub const I2S_TX_PDM_FP: u32 = 1023;
pub const I2S_TX_PDM_FP_V: u32 = 1023;
pub const I2S_TX_PDM_FP_S: u32 = 0;
pub const I2S_RX_TDM_TOT_CHAN_NUM: u32 = 15;
pub const I2S_RX_TDM_TOT_CHAN_NUM_V: u32 = 15;
pub const I2S_RX_TDM_TOT_CHAN_NUM_S: u32 = 16;
pub const I2S_RX_TDM_CHAN15_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN15_EN_S: u32 = 15;
pub const I2S_RX_TDM_CHAN14_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN14_EN_S: u32 = 14;
pub const I2S_RX_TDM_CHAN13_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN13_EN_S: u32 = 13;
pub const I2S_RX_TDM_CHAN12_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN12_EN_S: u32 = 12;
pub const I2S_RX_TDM_CHAN11_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN11_EN_S: u32 = 11;
pub const I2S_RX_TDM_CHAN10_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN10_EN_S: u32 = 10;
pub const I2S_RX_TDM_CHAN9_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN9_EN_S: u32 = 9;
pub const I2S_RX_TDM_CHAN8_EN_V: u32 = 1;
pub const I2S_RX_TDM_CHAN8_EN_S: u32 = 8;
pub const I2S_RX_TDM_PDM_CHAN7_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN7_EN_S: u32 = 7;
pub const I2S_RX_TDM_PDM_CHAN6_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN6_EN_S: u32 = 6;
pub const I2S_RX_TDM_PDM_CHAN5_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN5_EN_S: u32 = 5;
pub const I2S_RX_TDM_PDM_CHAN4_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN4_EN_S: u32 = 4;
pub const I2S_RX_TDM_PDM_CHAN3_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN3_EN_S: u32 = 3;
pub const I2S_RX_TDM_PDM_CHAN2_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN2_EN_S: u32 = 2;
pub const I2S_RX_TDM_PDM_CHAN1_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN1_EN_S: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN0_EN_V: u32 = 1;
pub const I2S_RX_TDM_PDM_CHAN0_EN_S: u32 = 0;
pub const I2S_TX_TDM_SKIP_MSK_EN_V: u32 = 1;
pub const I2S_TX_TDM_SKIP_MSK_EN_S: u32 = 20;
pub const I2S_TX_TDM_TOT_CHAN_NUM: u32 = 15;
pub const I2S_TX_TDM_TOT_CHAN_NUM_V: u32 = 15;
pub const I2S_TX_TDM_TOT_CHAN_NUM_S: u32 = 16;
pub const I2S_TX_TDM_CHAN15_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN15_EN_S: u32 = 15;
pub const I2S_TX_TDM_CHAN14_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN14_EN_S: u32 = 14;
pub const I2S_TX_TDM_CHAN13_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN13_EN_S: u32 = 13;
pub const I2S_TX_TDM_CHAN12_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN12_EN_S: u32 = 12;
pub const I2S_TX_TDM_CHAN11_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN11_EN_S: u32 = 11;
pub const I2S_TX_TDM_CHAN10_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN10_EN_S: u32 = 10;
pub const I2S_TX_TDM_CHAN9_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN9_EN_S: u32 = 9;
pub const I2S_TX_TDM_CHAN8_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN8_EN_S: u32 = 8;
pub const I2S_TX_TDM_CHAN7_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN7_EN_S: u32 = 7;
pub const I2S_TX_TDM_CHAN6_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN6_EN_S: u32 = 6;
pub const I2S_TX_TDM_CHAN5_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN5_EN_S: u32 = 5;
pub const I2S_TX_TDM_CHAN4_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN4_EN_S: u32 = 4;
pub const I2S_TX_TDM_CHAN3_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN3_EN_S: u32 = 3;
pub const I2S_TX_TDM_CHAN2_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN2_EN_S: u32 = 2;
pub const I2S_TX_TDM_CHAN1_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN1_EN_S: u32 = 1;
pub const I2S_TX_TDM_CHAN0_EN_V: u32 = 1;
pub const I2S_TX_TDM_CHAN0_EN_S: u32 = 0;
pub const I2S_RX_BCK_IN_DM: u32 = 3;
pub const I2S_RX_BCK_IN_DM_V: u32 = 3;
pub const I2S_RX_BCK_IN_DM_S: u32 = 28;
pub const I2S_RX_WS_IN_DM: u32 = 3;
pub const I2S_RX_WS_IN_DM_V: u32 = 3;
pub const I2S_RX_WS_IN_DM_S: u32 = 24;
pub const I2S_RX_BCK_OUT_DM: u32 = 3;
pub const I2S_RX_BCK_OUT_DM_V: u32 = 3;
pub const I2S_RX_BCK_OUT_DM_S: u32 = 20;
pub const I2S_RX_WS_OUT_DM: u32 = 3;
pub const I2S_RX_WS_OUT_DM_V: u32 = 3;
pub const I2S_RX_WS_OUT_DM_S: u32 = 16;
pub const I2S_RX_SD_IN_DM: u32 = 3;
pub const I2S_RX_SD_IN_DM_V: u32 = 3;
pub const I2S_RX_SD_IN_DM_S: u32 = 0;
pub const I2S_TX_BCK_IN_DM: u32 = 3;
pub const I2S_TX_BCK_IN_DM_V: u32 = 3;
pub const I2S_TX_BCK_IN_DM_S: u32 = 28;
pub const I2S_TX_WS_IN_DM: u32 = 3;
pub const I2S_TX_WS_IN_DM_V: u32 = 3;
pub const I2S_TX_WS_IN_DM_S: u32 = 24;
pub const I2S_TX_BCK_OUT_DM: u32 = 3;
pub const I2S_TX_BCK_OUT_DM_V: u32 = 3;
pub const I2S_TX_BCK_OUT_DM_S: u32 = 20;
pub const I2S_TX_WS_OUT_DM: u32 = 3;
pub const I2S_TX_WS_OUT_DM_V: u32 = 3;
pub const I2S_TX_WS_OUT_DM_S: u32 = 16;
pub const I2S_TX_SD1_OUT_DM: u32 = 3;
pub const I2S_TX_SD1_OUT_DM_V: u32 = 3;
pub const I2S_TX_SD1_OUT_DM_S: u32 = 4;
pub const I2S_TX_SD_OUT_DM: u32 = 3;
pub const I2S_TX_SD_OUT_DM_V: u32 = 3;
pub const I2S_TX_SD_OUT_DM_S: u32 = 0;
pub const I2S_LC_FIFO_TIMEOUT_ENA_V: u32 = 1;
pub const I2S_LC_FIFO_TIMEOUT_ENA_S: u32 = 11;
pub const I2S_LC_FIFO_TIMEOUT_SHIFT: u32 = 7;
pub const I2S_LC_FIFO_TIMEOUT_SHIFT_V: u32 = 7;
pub const I2S_LC_FIFO_TIMEOUT_SHIFT_S: u32 = 8;
pub const I2S_LC_FIFO_TIMEOUT: u32 = 255;
pub const I2S_LC_FIFO_TIMEOUT_V: u32 = 255;
pub const I2S_LC_FIFO_TIMEOUT_S: u32 = 0;
pub const I2S_RX_EOF_NUM: u32 = 4095;
pub const I2S_RX_EOF_NUM_V: u32 = 4095;
pub const I2S_RX_EOF_NUM_S: u32 = 0;
pub const I2S_SINGLE_DATA: u32 = 4294967295;
pub const I2S_SINGLE_DATA_V: u32 = 4294967295;
pub const I2S_SINGLE_DATA_S: u32 = 0;
pub const I2S_TX_IDLE_V: u32 = 1;
pub const I2S_TX_IDLE_S: u32 = 0;
pub const I2S_DATE: u32 = 268435455;
pub const I2S_DATE_V: u32 = 268435455;
pub const I2S_DATE_S: u32 = 0;
pub const I2S_PIN_NO_CHANGE: i32 = -1;
pub const LEDC_APB_CLK_HZ: u32 = 80000000;
pub const LEDC_REF_CLK_HZ: u32 = 1000000;
pub const LEDC_ERR_DUTY: u32 = 4294967295;
pub const LEDC_ERR_VAL: i32 = -1;
pub const RMT_CHANNEL_FLAGS_AWARE_DFS: u32 = 1;
pub const RMT_CHANNEL_FLAGS_INVERT_SIG: u32 = 2;
pub const RMT_CHANNEL_FLAGS_ALWAYS_ON: u32 = 1;
pub const RMT_MEM_ITEM_NUM: u32 = 48;
pub const GPIO_SD0_PRESCALE: u32 = 255;
pub const GPIO_SD0_PRESCALE_V: u32 = 255;
pub const GPIO_SD0_PRESCALE_S: u32 = 8;
pub const GPIO_SD0_IN: u32 = 255;
pub const GPIO_SD0_IN_V: u32 = 255;
pub const GPIO_SD0_IN_S: u32 = 0;
pub const GPIO_SD1_PRESCALE: u32 = 255;
pub const GPIO_SD1_PRESCALE_V: u32 = 255;
pub const GPIO_SD1_PRESCALE_S: u32 = 8;
pub const GPIO_SD1_IN: u32 = 255;
pub const GPIO_SD1_IN_V: u32 = 255;
pub const GPIO_SD1_IN_S: u32 = 0;
pub const GPIO_SD2_PRESCALE: u32 = 255;
pub const GPIO_SD2_PRESCALE_V: u32 = 255;
pub const GPIO_SD2_PRESCALE_S: u32 = 8;
pub const GPIO_SD2_IN: u32 = 255;
pub const GPIO_SD2_IN_V: u32 = 255;
pub const GPIO_SD2_IN_S: u32 = 0;
pub const GPIO_SD3_PRESCALE: u32 = 255;
pub const GPIO_SD3_PRESCALE_V: u32 = 255;
pub const GPIO_SD3_PRESCALE_S: u32 = 8;
pub const GPIO_SD3_IN: u32 = 255;
pub const GPIO_SD3_IN_V: u32 = 255;
pub const GPIO_SD3_IN_S: u32 = 0;
pub const GPIO_SD_CLK_EN_V: u32 = 1;
pub const GPIO_SD_CLK_EN_S: u32 = 31;
pub const GPIO_SPI_SWAP_V: u32 = 1;
pub const GPIO_SPI_SWAP_S: u32 = 31;
pub const GPIO_FUNCTION_CLK_EN_V: u32 = 1;
pub const GPIO_FUNCTION_CLK_EN_S: u32 = 30;
pub const GPIO_SD_DATE: u32 = 268435455;
pub const GPIO_SD_DATE_V: u32 = 268435455;
pub const GPIO_SD_DATE_S: u32 = 0;
pub const SPI_SLAVE_TXBIT_LSBFIRST: u32 = 1;
pub const SPI_SLAVE_RXBIT_LSBFIRST: u32 = 2;
pub const SPI_SLAVE_BIT_LSBFIRST: u32 = 3;
pub const TIMG_WDT_WKEY_VALUE: u32 = 1356348065;
pub const TIMG_WDT_STG_SEL_OFF: u32 = 0;
pub const TIMG_WDT_STG_SEL_INT: u32 = 1;
pub const TIMG_WDT_STG_SEL_RESET_CPU: u32 = 2;
pub const TIMG_WDT_STG_SEL_RESET_SYSTEM: u32 = 3;
pub const TIMG_WDT_RESET_LENGTH_100_NS: u32 = 0;
pub const TIMG_WDT_RESET_LENGTH_200_NS: u32 = 1;
pub const TIMG_WDT_RESET_LENGTH_300_NS: u32 = 2;
pub const TIMG_WDT_RESET_LENGTH_400_NS: u32 = 3;
pub const TIMG_WDT_RESET_LENGTH_500_NS: u32 = 4;
pub const TIMG_WDT_RESET_LENGTH_800_NS: u32 = 5;
pub const TIMG_WDT_RESET_LENGTH_1600_NS: u32 = 6;
pub const TIMG_WDT_RESET_LENGTH_3200_NS: u32 = 7;
pub const TIMG_T0_USE_XTAL_V: u32 = 1;
pub const TIMG_T0_USE_XTAL_S: u32 = 9;
pub const TIMG_T0_ALARM_EN_V: u32 = 1;
pub const TIMG_T0_ALARM_EN_S: u32 = 10;
pub const TIMG_T0_DIVCNT_RST_V: u32 = 1;
pub const TIMG_T0_DIVCNT_RST_S: u32 = 12;
pub const TIMG_T0_DIVIDER: u32 = 65535;
pub const TIMG_T0_DIVIDER_V: u32 = 65535;
pub const TIMG_T0_DIVIDER_S: u32 = 13;
pub const TIMG_T0_AUTORELOAD_V: u32 = 1;
pub const TIMG_T0_AUTORELOAD_S: u32 = 29;
pub const TIMG_T0_INCREASE_V: u32 = 1;
pub const TIMG_T0_INCREASE_S: u32 = 30;
pub const TIMG_T0_EN_V: u32 = 1;
pub const TIMG_T0_EN_S: u32 = 31;
pub const TIMG_T0_LO: u32 = 4294967295;
pub const TIMG_T0_LO_V: u32 = 4294967295;
pub const TIMG_T0_LO_S: u32 = 0;
pub const TIMG_T0_HI: u32 = 4194303;
pub const TIMG_T0_HI_V: u32 = 4194303;
pub const TIMG_T0_HI_S: u32 = 0;
pub const TIMG_T0_UPDATE_V: u32 = 1;
pub const TIMG_T0_UPDATE_S: u32 = 31;
pub const TIMG_T0_ALARM_LO: u32 = 4294967295;
pub const TIMG_T0_ALARM_LO_V: u32 = 4294967295;
pub const TIMG_T0_ALARM_LO_S: u32 = 0;
pub const TIMG_T0_ALARM_HI: u32 = 4194303;
pub const TIMG_T0_ALARM_HI_V: u32 = 4194303;
pub const TIMG_T0_ALARM_HI_S: u32 = 0;
pub const TIMG_T0_LOAD_LO: u32 = 4294967295;
pub const TIMG_T0_LOAD_LO_V: u32 = 4294967295;
pub const TIMG_T0_LOAD_LO_S: u32 = 0;
pub const TIMG_T0_LOAD_HI: u32 = 4194303;
pub const TIMG_T0_LOAD_HI_V: u32 = 4194303;
pub const TIMG_T0_LOAD_HI_S: u32 = 0;
pub const TIMG_T0_LOAD: u32 = 4294967295;
pub const TIMG_T0_LOAD_V: u32 = 4294967295;
pub const TIMG_T0_LOAD_S: u32 = 0;
pub const TIMG_WDT_APPCPU_RESET_EN_V: u32 = 1;
pub const TIMG_WDT_APPCPU_RESET_EN_S: u32 = 12;
pub const TIMG_WDT_PROCPU_RESET_EN_V: u32 = 1;
pub const TIMG_WDT_PROCPU_RESET_EN_S: u32 = 13;
pub const TIMG_WDT_FLASHBOOT_MOD_EN_V: u32 = 1;
pub const TIMG_WDT_FLASHBOOT_MOD_EN_S: u32 = 14;
pub const TIMG_WDT_SYS_RESET_LENGTH: u32 = 7;
pub const TIMG_WDT_SYS_RESET_LENGTH_V: u32 = 7;
pub const TIMG_WDT_SYS_RESET_LENGTH_S: u32 = 15;
pub const TIMG_WDT_CPU_RESET_LENGTH: u32 = 7;
pub const TIMG_WDT_CPU_RESET_LENGTH_V: u32 = 7;
pub const TIMG_WDT_CPU_RESET_LENGTH_S: u32 = 18;
pub const TIMG_WDT_USE_XTAL_V: u32 = 1;
pub const TIMG_WDT_USE_XTAL_S: u32 = 21;
pub const TIMG_WDT_CONF_UPDATE_EN_V: u32 = 1;
pub const TIMG_WDT_CONF_UPDATE_EN_S: u32 = 22;
pub const TIMG_WDT_STG3: u32 = 3;
pub const TIMG_WDT_STG3_V: u32 = 3;
pub const TIMG_WDT_STG3_S: u32 = 23;
pub const TIMG_WDT_STG2: u32 = 3;
pub const TIMG_WDT_STG2_V: u32 = 3;
pub const TIMG_WDT_STG2_S: u32 = 25;
pub const TIMG_WDT_STG1: u32 = 3;
pub const TIMG_WDT_STG1_V: u32 = 3;
pub const TIMG_WDT_STG1_S: u32 = 27;
pub const TIMG_WDT_STG0: u32 = 3;
pub const TIMG_WDT_STG0_V: u32 = 3;
pub const TIMG_WDT_STG0_S: u32 = 29;
pub const TIMG_WDT_EN_V: u32 = 1;
pub const TIMG_WDT_EN_S: u32 = 31;
pub const TIMG_WDT_DIVCNT_RST_V: u32 = 1;
pub const TIMG_WDT_DIVCNT_RST_S: u32 = 0;
pub const TIMG_WDT_CLK_PRESCALE: u32 = 65535;
pub const TIMG_WDT_CLK_PRESCALE_V: u32 = 65535;
pub const TIMG_WDT_CLK_PRESCALE_S: u32 = 16;
pub const TIMG_WDT_STG0_HOLD: u32 = 4294967295;
pub const TIMG_WDT_STG0_HOLD_V: u32 = 4294967295;
pub const TIMG_WDT_STG0_HOLD_S: u32 = 0;
pub const TIMG_WDT_STG1_HOLD: u32 = 4294967295;
pub const TIMG_WDT_STG1_HOLD_V: u32 = 4294967295;
pub const TIMG_WDT_STG1_HOLD_S: u32 = 0;
pub const TIMG_WDT_STG2_HOLD: u32 = 4294967295;
pub const TIMG_WDT_STG2_HOLD_V: u32 = 4294967295;
pub const TIMG_WDT_STG2_HOLD_S: u32 = 0;
pub const TIMG_WDT_STG3_HOLD: u32 = 4294967295;
pub const TIMG_WDT_STG3_HOLD_V: u32 = 4294967295;
pub const TIMG_WDT_STG3_HOLD_S: u32 = 0;
pub const TIMG_WDT_FEED: u32 = 4294967295;
pub const TIMG_WDT_FEED_V: u32 = 4294967295;
pub const TIMG_WDT_FEED_S: u32 = 0;
pub const TIMG_WDT_WKEY: u32 = 4294967295;
pub const TIMG_WDT_WKEY_V: u32 = 4294967295;
pub const TIMG_WDT_WKEY_S: u32 = 0;
pub const TIMG_RTC_CALI_START_CYCLING_V: u32 = 1;
pub const TIMG_RTC_CALI_START_CYCLING_S: u32 = 12;
pub const TIMG_RTC_CALI_CLK_SEL: u32 = 3;
pub const TIMG_RTC_CALI_CLK_SEL_V: u32 = 3;
pub const TIMG_RTC_CALI_CLK_SEL_S: u32 = 13;
pub const TIMG_RTC_CALI_RDY_V: u32 = 1;
pub const TIMG_RTC_CALI_RDY_S: u32 = 15;
pub const TIMG_RTC_CALI_MAX: u32 = 32767;
pub const TIMG_RTC_CALI_MAX_V: u32 = 32767;
pub const TIMG_RTC_CALI_MAX_S: u32 = 16;
pub const TIMG_RTC_CALI_START_V: u32 = 1;
pub const TIMG_RTC_CALI_START_S: u32 = 31;
pub const TIMG_RTC_CALI_CYCLING_DATA_VLD_V: u32 = 1;
pub const TIMG_RTC_CALI_CYCLING_DATA_VLD_S: u32 = 0;
pub const TIMG_RTC_CALI_VALUE: u32 = 33554431;
pub const TIMG_RTC_CALI_VALUE_V: u32 = 33554431;
pub const TIMG_RTC_CALI_VALUE_S: u32 = 7;
pub const TIMG_T0_INT_ENA_V: u32 = 1;
pub const TIMG_T0_INT_ENA_S: u32 = 0;
pub const TIMG_WDT_INT_ENA_V: u32 = 1;
pub const TIMG_WDT_INT_ENA_S: u32 = 1;
pub const TIMG_T0_INT_RAW_V: u32 = 1;
pub const TIMG_T0_INT_RAW_S: u32 = 0;
pub const TIMG_WDT_INT_RAW_V: u32 = 1;
pub const TIMG_WDT_INT_RAW_S: u32 = 1;
pub const TIMG_T0_INT_ST_V: u32 = 1;
pub const TIMG_T0_INT_ST_S: u32 = 0;
pub const TIMG_WDT_INT_ST_V: u32 = 1;
pub const TIMG_WDT_INT_ST_S: u32 = 1;
pub const TIMG_T0_INT_CLR_V: u32 = 1;
pub const TIMG_T0_INT_CLR_S: u32 = 0;
pub const TIMG_WDT_INT_CLR_V: u32 = 1;
pub const TIMG_WDT_INT_CLR_S: u32 = 1;
pub const TIMG_RTC_CALI_TIMEOUT_V: u32 = 1;
pub const TIMG_RTC_CALI_TIMEOUT_S: u32 = 0;
pub const TIMG_RTC_CALI_TIMEOUT_RST_CNT: u32 = 15;
pub const TIMG_RTC_CALI_TIMEOUT_RST_CNT_V: u32 = 15;
pub const TIMG_RTC_CALI_TIMEOUT_RST_CNT_S: u32 = 3;
pub const TIMG_RTC_CALI_TIMEOUT_THRES: u32 = 33554431;
pub const TIMG_RTC_CALI_TIMEOUT_THRES_V: u32 = 33554431;
pub const TIMG_RTC_CALI_TIMEOUT_THRES_S: u32 = 7;
pub const TIMG_NTIMGS_DATE: u32 = 268435455;
pub const TIMG_NTIMGS_DATE_V: u32 = 268435455;
pub const TIMG_NTIMGS_DATE_S: u32 = 0;
pub const TIMG_WDT_CLK_IS_ACTIVE_V: u32 = 1;
pub const TIMG_WDT_CLK_IS_ACTIVE_S: u32 = 29;
pub const TIMG_TIMER_CLK_IS_ACTIVE_V: u32 = 1;
pub const TIMG_TIMER_CLK_IS_ACTIVE_S: u32 = 30;
pub const TIMG_CLK_EN_V: u32 = 1;
pub const TIMG_CLK_EN_S: u32 = 31;
pub const TIMER_BASE_CLK: u32 = 80000000;
pub const UART_NUM_0: u32 = 0;
pub const UART_NUM_1: u32 = 1;
pub const UART_NUM_MAX: u32 = 2;
pub const UART_PIN_NO_CHANGE: i32 = -1;
pub const UART_FIFO_LEN: u32 = 128;
pub const UART_BITRATE_MAX: u32 = 5000000;
pub const APP_ELF_SHA256_SZ: u32 = 17;
pub const PTHREAD_CANCEL_ENABLE: u32 = 0;
pub const PTHREAD_CANCEL_DISABLE: u32 = 1;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 768;
pub type __int8_t = c_types::c_schar;
pub type __uint8_t = c_types::c_uchar;
pub type __int16_t = c_types::c_short;
pub type __uint16_t = c_types::c_ushort;
pub type __int32_t = c_types::c_int;
pub type __uint32_t = c_types::c_uint;
pub type __int64_t = c_types::c_longlong;
pub type __uint64_t = c_types::c_ulonglong;
pub type __int_least8_t = c_types::c_schar;
pub type __uint_least8_t = c_types::c_uchar;
pub type __int_least16_t = c_types::c_short;
pub type __uint_least16_t = c_types::c_ushort;
pub type __int_least32_t = c_types::c_int;
pub type __uint_least32_t = c_types::c_uint;
pub type __int_least64_t = c_types::c_longlong;
pub type __uint_least64_t = c_types::c_ulonglong;
pub type __intmax_t = c_types::c_longlong;
pub type __uintmax_t = c_types::c_ulonglong;
pub type __intptr_t = c_types::c_int;
pub type __uintptr_t = c_types::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = c_types::c_schar;
pub type uint_fast8_t = c_types::c_uchar;
pub type int_fast16_t = c_types::c_short;
pub type uint_fast16_t = c_types::c_ushort;
pub type int_fast32_t = c_types::c_int;
pub type uint_fast32_t = c_types::c_uint;
pub type int_fast64_t = c_types::c_longlong;
pub type uint_fast64_t = c_types::c_ulonglong;
pub type size_t = c_types::c_uint;
pub type wchar_t = c_types::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: c_types::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = c_types::c_uint;
pub type __blkcnt_t = c_types::c_long;
pub type __blksize_t = c_types::c_long;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint32_t;
pub type _off_t = c_types::c_long;
pub type __pid_t = c_types::c_int;
pub type __dev_t = c_types::c_short;
pub type __uid_t = c_types::c_ushort;
pub type __gid_t = c_types::c_ushort;
pub type __id_t = __uint32_t;
pub type __ino_t = c_types::c_ushort;
pub type __mode_t = __uint32_t;
pub type _off64_t = c_types::c_longlong;
pub type __off_t = _off_t;
pub type __loff_t = _off64_t;
pub type __key_t = c_types::c_long;
pub type _fpos_t = c_types::c_long;
pub type __size_t = c_types::c_uint;
pub type _ssize_t = c_types::c_int;
pub type __ssize_t = _ssize_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mbstate_t {
    pub __count: c_types::c_int,
    pub __value: _mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _mbstate_t__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [c_types::c_uchar; 4usize],
}
impl Default for _mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _mbstate_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _iconv_t = *mut c_types::c_void;
pub type __clock_t = c_types::c_ulong;
pub type __time_t = c_types::c_long;
pub type __clockid_t = c_types::c_ulong;
pub type __timer_t = c_types::c_ulong;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __nl_item = c_types::c_int;
pub type __nlink_t = c_types::c_ushort;
pub type __suseconds_t = c_types::c_long;
pub type __useconds_t = c_types::c_ulong;
pub type __va_list = __builtin_va_list;
pub type __ULong = c_types::c_ulong;
pub type _LOCK_T = *mut __lock;
extern "C" {
    pub fn __retarget_lock_init(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_init_recursive(lock: *mut _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_close_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_acquire_recursive(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_try_acquire(lock: _LOCK_T) -> c_types::c_int;
}
extern "C" {
    pub fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) -> c_types::c_int;
}
extern "C" {
    pub fn __retarget_lock_release(lock: _LOCK_T);
}
extern "C" {
    pub fn __retarget_lock_release_recursive(lock: _LOCK_T);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __lock {
    pub reserved: [c_types::c_int; 23usize],
}
pub type _lock_t = _LOCK_T;
extern "C" {
    pub fn _lock_init(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_init_recursive(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_close(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_close_recursive(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_acquire(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_acquire_recursive(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_try_acquire(plock: *mut _lock_t) -> c_types::c_int;
}
extern "C" {
    pub fn _lock_try_acquire_recursive(plock: *mut _lock_t) -> c_types::c_int;
}
extern "C" {
    pub fn _lock_release(plock: *mut _lock_t);
}
extern "C" {
    pub fn _lock_release_recursive(plock: *mut _lock_t);
}
pub type _flock_t = _LOCK_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: c_types::c_int,
    pub _maxwds: c_types::c_int,
    pub _sign: c_types::c_int,
    pub _wds: c_types::c_int,
    pub _x: [__ULong; 1usize],
}
impl Default for _Bigint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __tm {
    pub __tm_sec: c_types::c_int,
    pub __tm_min: c_types::c_int,
    pub __tm_hour: c_types::c_int,
    pub __tm_mday: c_types::c_int,
    pub __tm_mon: c_types::c_int,
    pub __tm_year: c_types::c_int,
    pub __tm_wday: c_types::c_int,
    pub __tm_yday: c_types::c_int,
    pub __tm_isdst: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _on_exit_args {
    pub _fnargs: [*mut c_types::c_void; 32usize],
    pub _dso_handle: [*mut c_types::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
impl Default for _on_exit_args {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: c_types::c_int,
    pub _fns: [::core::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args_ptr: *mut _on_exit_args,
}
impl Default for _atexit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut c_types::c_uchar,
    pub _size: c_types::c_int,
}
impl Default for __sbuf {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE_fake {
    pub _p: *mut c_types::c_uchar,
    pub _r: c_types::c_int,
    pub _w: c_types::c_int,
    pub _flags: c_types::c_short,
    pub _file: c_types::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: c_types::c_int,
    pub _data: *mut _reent,
}
impl Default for __sFILE_fake {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __sinit(arg1: *mut _reent);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut c_types::c_uchar,
    pub _r: c_types::c_int,
    pub _w: c_types::c_int,
    pub _flags: c_types::c_short,
    pub _file: c_types::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: c_types::c_int,
    pub _data: *mut _reent,
    pub _cookie: *mut c_types::c_void,
    pub _read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut c_types::c_void,
            arg3: *mut c_types::c_char,
            arg4: c_types::c_int,
        ) -> _ssize_t,
    >,
    pub _write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut c_types::c_void,
            arg3: *const c_types::c_char,
            arg4: c_types::c_int,
        ) -> _ssize_t,
    >,
    pub _seek: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _reent,
            arg2: *mut c_types::c_void,
            arg3: _fpos_t,
            arg4: c_types::c_int,
        ) -> _fpos_t,
    >,
    pub _close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut _reent, arg2: *mut c_types::c_void) -> c_types::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut c_types::c_uchar,
    pub _ur: c_types::c_int,
    pub _ubuf: [c_types::c_uchar; 3usize],
    pub _nbuf: [c_types::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: c_types::c_int,
    pub _offset: _off_t,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: c_types::c_int,
}
impl Default for __sFILE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: c_types::c_int,
    pub _iobs: *mut __FILE,
}
impl Default for _glue {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _rand48 {
    pub _seed: [c_types::c_ushort; 3usize],
    pub _mult: [c_types::c_ushort; 3usize],
    pub _add: c_types::c_ushort,
    pub _rand_next: c_types::c_ulonglong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mprec {
    pub _result: *mut _Bigint,
    pub _result_k: c_types::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
}
impl Default for _mprec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _misc_reent {
    pub _strtok_last: *mut c_types::c_char,
    pub _mblen_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _l64a_buf: [c_types::c_char; 8usize],
    pub _getdate_err: c_types::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
}
impl Default for _misc_reent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _reent {
    pub _errno: c_types::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: c_types::c_int,
    pub _emergency: *mut c_types::c_char,
    pub __sdidinit: c_types::c_int,
    pub _unspecified_locale_info: c_types::c_int,
    pub _locale: *mut __locale_t,
    pub _mp: *mut _mprec,
    pub __cleanup: ::core::option::Option<unsafe extern "C" fn(arg1: *mut _reent)>,
    pub _gamma_signgam: c_types::c_int,
    pub _cvtlen: c_types::c_int,
    pub _cvtbuf: *mut c_types::c_char,
    pub _r48: *mut _rand48,
    pub _localtime_buf: *mut __tm,
    pub _asctime_buf: *mut c_types::c_char,
    pub _sig_func: *mut ::core::option::Option<unsafe extern "C" fn(arg1: c_types::c_int)>,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub __sglue: _glue,
    pub __sf: *mut __FILE,
    pub _misc: *mut _misc_reent,
    pub _signal_buf: *mut c_types::c_char,
}
impl Default for _reent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static __sf_fake_stdin: __sFILE_fake;
}
extern "C" {
    pub static __sf_fake_stdout: __sFILE_fake;
}
extern "C" {
    pub static __sf_fake_stderr: __sFILE_fake;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: c_types::c_int,
    pub rem: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: c_types::c_long,
    pub rem: c_types::c_long,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: c_types::c_longlong,
    pub rem: c_types::c_longlong,
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const c_types::c_void,
        arg2: *const c_types::c_void,
    ) -> c_types::c_int,
>;
extern "C" {
    pub fn __locale_mb_cur_max() -> c_types::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_uniform(arg1: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(arg1: *mut c_types::c_void, arg2: size_t);
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> c_types::c_int;
}
extern "C" {
    pub fn atof(__nptr: *const c_types::c_char) -> f64;
}
extern "C" {
    pub fn atoff(__nptr: *const c_types::c_char) -> f32;
}
extern "C" {
    pub fn atoi(__nptr: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _atoi_r(arg1: *mut _reent, __nptr: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const c_types::c_char) -> c_types::c_long;
}
extern "C" {
    pub fn _atol_r(arg1: *mut _reent, __nptr: *const c_types::c_char) -> c_types::c_long;
}
extern "C" {
    pub fn bsearch(
        __key: *const c_types::c_void,
        __base: *const c_types::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn calloc(arg1: c_types::c_uint, arg2: c_types::c_uint) -> *mut c_types::c_void;
}
extern "C" {
    pub fn div(__numer: c_types::c_int, __denom: c_types::c_int) -> div_t;
}
extern "C" {
    pub fn exit(__status: c_types::c_int);
}
extern "C" {
    pub fn free(arg1: *mut c_types::c_void);
}
extern "C" {
    pub fn getenv(__string: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _getenv_r(arg1: *mut _reent, __string: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _findenv(
        arg1: *const c_types::c_char,
        arg2: *mut c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _findenv_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub static mut suboptarg: *mut c_types::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut c_types::c_char,
        arg2: *const *mut c_types::c_char,
        arg3: *mut *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn labs(arg1: c_types::c_long) -> c_types::c_long;
}
extern "C" {
    pub fn ldiv(__numer: c_types::c_long, __denom: c_types::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(arg1: c_types::c_uint) -> *mut c_types::c_void;
}
extern "C" {
    pub fn mblen(arg1: *const c_types::c_char, arg2: size_t) -> c_types::c_int;
}
extern "C" {
    pub fn _mblen_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: size_t,
        arg4: *mut _mbstate_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const c_types::c_char, arg3: size_t)
        -> c_types::c_int;
}
extern "C" {
    pub fn _mbtowc_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const c_types::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn wctomb(arg1: *mut c_types::c_char, arg2: wchar_t) -> c_types::c_int;
}
extern "C" {
    pub fn _wctomb_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: wchar_t,
        arg4: *mut _mbstate_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const c_types::c_char, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_r(
        arg1: *mut _reent,
        arg2: *mut wchar_t,
        arg3: *const c_types::c_char,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(arg1: *mut c_types::c_char, arg2: *const wchar_t, arg3: size_t) -> size_t;
}
extern "C" {
    pub fn _wcstombs_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: *const wchar_t,
        arg4: size_t,
        arg5: *mut _mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn mkstemps(arg1: *mut c_types::c_char, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _mkdtemp_r(arg1: *mut _reent, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _mkostemp_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _mkostemps_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _mkstemp_r(arg1: *mut _reent, arg2: *mut c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _mkstemps_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _mktemp_r(arg1: *mut _reent, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn qsort(
        __base: *mut c_types::c_void,
        __nmemb: size_t,
        __size: size_t,
        _compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn rand() -> c_types::c_int;
}
extern "C" {
    pub fn realloc(arg1: *mut c_types::c_void, arg2: c_types::c_uint) -> *mut c_types::c_void;
}
extern "C" {
    pub fn reallocarray(
        arg1: *mut c_types::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn reallocf(arg1: *mut c_types::c_void, arg2: size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn realpath(
        path: *const c_types::c_char,
        resolved_path: *mut c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn rpmatch(response: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn srand(__seed: c_types::c_uint);
}
extern "C" {
    pub fn strtod(__n: *const c_types::c_char, __end_PTR: *mut *mut c_types::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_r(
        arg1: *mut _reent,
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(__n: *const c_types::c_char, __end_PTR: *mut *mut c_types::c_char) -> f32;
}
extern "C" {
    pub fn strtol(
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_long;
}
extern "C" {
    pub fn _strtol_r(
        arg1: *mut _reent,
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_long;
}
extern "C" {
    pub fn strtoul(
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_ulong;
}
extern "C" {
    pub fn _strtoul_r(
        arg1: *mut _reent,
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_ulong;
}
extern "C" {
    pub fn system(__string: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn a64l(__input: *const c_types::c_char) -> c_types::c_long;
}
extern "C" {
    pub fn l64a(__input: c_types::c_long) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _l64a_r(arg1: *mut _reent, __input: c_types::c_long) -> *mut c_types::c_char;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(arg1: c_types::c_int, arg2: *mut c_types::c_void),
        >,
        __arg: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _Exit(__status: c_types::c_int);
}
extern "C" {
    pub fn putenv(__string: *mut c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _putenv_r(arg1: *mut _reent, __string: *mut c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _reallocf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_void,
        arg3: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn setenv(
        __string: *const c_types::c_char,
        __value: *const c_types::c_char,
        __overwrite: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _setenv_r(
        arg1: *mut _reent,
        __string: *const c_types::c_char,
        __value: *const c_types::c_char,
        __overwrite: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn __itoa(
        arg1: c_types::c_int,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn __utoa(
        arg1: c_types::c_uint,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn itoa(
        arg1: c_types::c_int,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn utoa(
        arg1: c_types::c_uint,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn rand_r(__seed: *mut c_types::c_uint) -> c_types::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn _drand48_r(arg1: *mut _reent) -> f64;
}
extern "C" {
    pub fn erand48(arg1: *mut c_types::c_ushort) -> f64;
}
extern "C" {
    pub fn _erand48_r(arg1: *mut _reent, arg2: *mut c_types::c_ushort) -> f64;
}
extern "C" {
    pub fn jrand48(arg1: *mut c_types::c_ushort) -> c_types::c_long;
}
extern "C" {
    pub fn _jrand48_r(arg1: *mut _reent, arg2: *mut c_types::c_ushort) -> c_types::c_long;
}
extern "C" {
    pub fn lcong48(arg1: *mut c_types::c_ushort);
}
extern "C" {
    pub fn _lcong48_r(arg1: *mut _reent, arg2: *mut c_types::c_ushort);
}
extern "C" {
    pub fn lrand48() -> c_types::c_long;
}
extern "C" {
    pub fn _lrand48_r(arg1: *mut _reent) -> c_types::c_long;
}
extern "C" {
    pub fn mrand48() -> c_types::c_long;
}
extern "C" {
    pub fn _mrand48_r(arg1: *mut _reent) -> c_types::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut c_types::c_ushort) -> c_types::c_long;
}
extern "C" {
    pub fn _nrand48_r(arg1: *mut _reent, arg2: *mut c_types::c_ushort) -> c_types::c_long;
}
extern "C" {
    pub fn seed48(arg1: *mut c_types::c_ushort) -> *mut c_types::c_ushort;
}
extern "C" {
    pub fn _seed48_r(arg1: *mut _reent, arg2: *mut c_types::c_ushort) -> *mut c_types::c_ushort;
}
extern "C" {
    pub fn srand48(arg1: c_types::c_long);
}
extern "C" {
    pub fn _srand48_r(arg1: *mut _reent, arg2: c_types::c_long);
}
extern "C" {
    pub fn initstate(
        arg1: c_types::c_uint,
        arg2: *mut c_types::c_char,
        arg3: size_t,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn random() -> c_types::c_long;
}
extern "C" {
    pub fn setstate(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn srandom(arg1: c_types::c_uint);
}
extern "C" {
    pub fn atoll(__nptr: *const c_types::c_char) -> c_types::c_longlong;
}
extern "C" {
    pub fn _atoll_r(arg1: *mut _reent, __nptr: *const c_types::c_char) -> c_types::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: c_types::c_longlong) -> c_types::c_longlong;
}
extern "C" {
    pub fn lldiv(__numer: c_types::c_longlong, __denom: c_types::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_longlong;
}
extern "C" {
    pub fn _strtoll_r(
        arg1: *mut _reent,
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_r(
        arg1: *mut _reent,
        __n: *const c_types::c_char,
        __end_PTR: *mut *mut c_types::c_char,
        __base: c_types::c_int,
    ) -> c_types::c_ulonglong;
}
extern "C" {
    pub fn cfree(arg1: *mut c_types::c_void);
}
extern "C" {
    pub fn unsetenv(__string: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _unsetenv_r(arg1: *mut _reent, __string: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn posix_memalign(
        arg1: *mut *mut c_types::c_void,
        arg2: size_t,
        arg3: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _dtoa_r(
        arg1: *mut _reent,
        arg2: f64,
        arg3: c_types::c_int,
        arg4: c_types::c_int,
        arg5: *mut c_types::c_int,
        arg6: *mut c_types::c_int,
        arg7: *mut *mut c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _malloc_r(arg1: *mut _reent, arg2: size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn _calloc_r(arg1: *mut _reent, arg2: size_t, arg3: size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn _free_r(arg1: *mut _reent, arg2: *mut c_types::c_void);
}
extern "C" {
    pub fn _realloc_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_void,
        arg3: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn _mstats_r(arg1: *mut _reent, arg2: *mut c_types::c_char);
}
extern "C" {
    pub fn _system_r(arg1: *mut _reent, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn __eprintf(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
        arg4: *const c_types::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__bsd_qsort_r"]
    pub fn qsort_r(
        __base: *mut c_types::c_void,
        __nmemb: size_t,
        __size: size_t,
        __thunk: *mut c_types::c_void,
        _compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *const c_types::c_void,
                arg3: *const c_types::c_void,
            ) -> c_types::c_int,
        >,
    );
}
extern "C" {
    pub fn aligned_alloc(arg1: c_types::c_uint, arg2: c_types::c_uint) -> *mut c_types::c_void;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> c_types::c_int;
}
extern "C" {
    pub fn quick_exit(arg1: c_types::c_int);
}
extern "C" {
    pub fn __assert(
        arg1: *const c_types::c_char,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
    );
}
extern "C" {
    pub fn __assert_func(
        arg1: *const c_types::c_char,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
        arg4: *const c_types::c_char,
    );
}
extern "C" {
    pub static mut _global_impure_ptr: *mut _reent;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
extern "C" {
    pub fn __getreent() -> *mut _reent;
}
extern "C" {
    pub fn _cleanup_r(r: *mut _reent);
}
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = __intptr_t;
pub type __sigset_t = c_types::c_ulong;
pub type suseconds_t = __suseconds_t;
pub type time_t = c_types::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: c_types::c_long,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
pub type sigset_t = __sigset_t;
pub type fd_mask = c_types::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _types_fd_set {
    pub fds_bits: [fd_mask; 2usize],
}
extern "C" {
    pub fn select(
        __n: c_types::c_int,
        __readfds: *mut _types_fd_set,
        __writefds: *mut _types_fd_set,
        __exceptfds: *mut _types_fd_set,
        __timeout: *mut timeval,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pselect(
        __n: c_types::c_int,
        __readfds: *mut _types_fd_set,
        __writefds: *mut _types_fd_set,
        __exceptfds: *mut _types_fd_set,
        __timeout: *const timespec,
        __set: *const sigset_t,
    ) -> c_types::c_int;
}
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type u_register_t = __uintptr_t;
pub type u_char = c_types::c_uchar;
pub type u_short = c_types::c_ushort;
pub type u_int = c_types::c_uint;
pub type u_long = c_types::c_ulong;
pub type ushort = c_types::c_ushort;
pub type uint = c_types::c_uint;
pub type ulong = c_types::c_ulong;
pub type blkcnt_t = __blkcnt_t;
pub type blksize_t = __blksize_t;
pub type clock_t = c_types::c_ulong;
pub type daddr_t = c_types::c_long;
pub type caddr_t = *mut c_types::c_char;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type off_t = __off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = __pid_t;
pub type key_t = __key_t;
pub type ssize_t = _ssize_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type sbintime_t = __int64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: c_types::c_int,
}
extern "C" {
    pub fn sched_yield() -> c_types::c_int;
}
pub type pthread_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub is_initialized: c_types::c_int,
    pub stackaddr: *mut c_types::c_void,
    pub stacksize: c_types::c_int,
    pub contentionscope: c_types::c_int,
    pub inheritsched: c_types::c_int,
    pub schedpolicy: c_types::c_int,
    pub schedparam: sched_param,
    pub detachstate: c_types::c_int,
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_mutex_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_mutexattr_t {
    pub is_initialized: c_types::c_int,
    pub type_: c_types::c_int,
    pub recursive: c_types::c_int,
}
pub type pthread_cond_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_condattr_t {
    pub is_initialized: c_types::c_int,
    pub clock: clock_t,
}
pub type pthread_key_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_once_t {
    pub is_initialized: c_types::c_int,
    pub init_executed: c_types::c_int,
}
pub type FILE = __FILE;
pub type fpos_t = _fpos_t;
extern "C" {
    pub fn ctermid(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn tempnam(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn freopen(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut c_types::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
        arg4: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn printf(arg1: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn scanf(arg1: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut c_types::c_char,
        arg2: c_types::c_int,
        arg3: *mut FILE,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn fputc(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const c_types::c_char, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn getchar() -> c_types::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn putc(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn putchar(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn puts(arg1: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn ungetc(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fread(
        arg1: *mut c_types::c_void,
        _size: c_types::c_uint,
        _n: c_types::c_uint,
        arg2: *mut FILE,
    ) -> c_types::c_uint;
}
extern "C" {
    pub fn fwrite(
        arg1: *const c_types::c_void,
        _size: c_types::c_uint,
        _n: c_types::c_uint,
        arg2: *mut FILE,
    ) -> c_types::c_uint;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> c_types::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: c_types::c_long, arg3: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> c_types::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> c_types::c_long;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn perror(arg1: *const c_types::c_char);
}
extern "C" {
    pub fn fopen(_name: *const c_types::c_char, _type: *const c_types::c_char) -> *mut FILE;
}
extern "C" {
    pub fn sprintf(arg1: *mut c_types::c_char, arg2: *const c_types::c_char, ...)
        -> c_types::c_int;
}
extern "C" {
    pub fn remove(arg1: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn rename(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn ftello(arg1: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        arg1: *mut c_types::c_char,
        arg2: c_types::c_uint,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn asiprintf(
        arg1: *mut *mut c_types::c_char,
        arg2: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn asniprintf(
        arg1: *mut c_types::c_char,
        arg2: *mut size_t,
        arg3: *const c_types::c_char,
        ...
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn asnprintf(
        arg1: *mut c_types::c_char,
        arg2: *mut size_t,
        arg3: *const c_types::c_char,
        ...
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn diprintf(arg1: c_types::c_int, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn fiprintf(arg1: *mut FILE, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn fiscanf(arg1: *mut FILE, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn iprintf(arg1: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn iscanf(arg1: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn siprintf(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn siscanf(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn sniprintf(
        arg1: *mut c_types::c_char,
        arg2: size_t,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fdopen(arg1: c_types::c_int, arg2: *const c_types::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn popen(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> *mut FILE;
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut c_types::c_char, arg3: c_types::c_int);
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn putw(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> c_types::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn putc_unlocked(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn dprintf(arg1: c_types::c_int, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn fmemopen(
        arg1: *mut c_types::c_void,
        arg2: size_t,
        arg3: *const c_types::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(arg1: *mut *mut c_types::c_char, arg2: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn renameat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: c_types::c_int,
        arg4: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _asiprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _asniprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: *mut size_t,
        arg4: *const c_types::c_char,
        ...
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _asnprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: *mut size_t,
        arg4: *const c_types::c_char,
        ...
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _asprintf_r(
        arg1: *mut _reent,
        arg2: *mut *mut c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _diprintf_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _dprintf_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fclose_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fcloseall_r(arg1: *mut _reent) -> c_types::c_int;
}
extern "C" {
    pub fn _fdopen_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fflush_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fgetc_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fgetc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fgets_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
        arg4: *mut FILE,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _fgets_unlocked_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: c_types::c_int,
        arg4: *mut FILE,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _fgetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *mut fpos_t) -> c_types::c_int;
}
extern "C" {
    pub fn _fsetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *const fpos_t) -> c_types::c_int;
}
extern "C" {
    pub fn _fiprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fiscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fmemopen_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_void,
        arg3: size_t,
        arg4: *const c_types::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fopen_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _freopen_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
        arg4: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fprintf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fpurge_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fputc_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _fputc_unlocked_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fputs_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fputs_unlocked_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fread_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg3: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_unlocked_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg3: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fscanf_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fseek_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: c_types::c_long,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fseeko_r(
        arg1: *mut _reent,
        arg2: *mut FILE,
        arg3: _off_t,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _ftell_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_long;
}
extern "C" {
    pub fn _ftello_r(arg1: *mut _reent, arg2: *mut FILE) -> _off_t;
}
extern "C" {
    pub fn _rewind_r(arg1: *mut _reent, arg2: *mut FILE);
}
extern "C" {
    pub fn _fwrite_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg3: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fwrite_unlocked_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg3: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _getc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _getchar_r(arg1: *mut _reent) -> c_types::c_int;
}
extern "C" {
    pub fn _getchar_unlocked_r(arg1: *mut _reent) -> c_types::c_int;
}
extern "C" {
    pub fn _gets_r(arg1: *mut _reent, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _iprintf_r(arg1: *mut _reent, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn _iscanf_r(arg1: *mut _reent, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn _open_memstream_r(
        arg1: *mut _reent,
        arg2: *mut *mut c_types::c_char,
        arg3: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _perror_r(arg1: *mut _reent, arg2: *const c_types::c_char);
}
extern "C" {
    pub fn _printf_r(arg1: *mut _reent, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn _putc_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn _putc_unlocked_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _putchar_unlocked_r(arg1: *mut _reent, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn _putchar_r(arg1: *mut _reent, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn _puts_r(arg1: *mut _reent, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _remove_r(arg1: *mut _reent, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _rename_r(
        arg1: *mut _reent,
        _old: *const c_types::c_char,
        _new: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _scanf_r(arg1: *mut _reent, arg2: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    pub fn _siprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _siscanf_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _sniprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: size_t,
        arg4: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _snprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: size_t,
        arg4: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _sprintf_r(
        arg1: *mut _reent,
        arg2: *mut c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _sscanf_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _tempnam_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _tmpfile_r(arg1: *mut _reent) -> *mut FILE;
}
extern "C" {
    pub fn _tmpnam_r(arg1: *mut _reent, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _ungetc_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn __getdelim(
        arg1: *mut *mut c_types::c_char,
        arg2: *mut size_t,
        arg3: c_types::c_int,
        arg4: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn __getline(
        arg1: *mut *mut c_types::c_char,
        arg2: *mut size_t,
        arg3: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn clearerr_unlocked(arg1: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn ferror_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fileno_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fflush_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(arg1: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fputc_unlocked(arg1: c_types::c_int, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        arg1: *mut c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg2: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        arg1: *const c_types::c_void,
        _size: size_t,
        _n: size_t,
        arg2: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn __srget_r(arg1: *mut _reent, arg2: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn __swbuf_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: *mut FILE) -> c_types::c_int;
}
extern "C" {
    pub fn funopen(
        __cookie: *const c_types::c_void,
        __readfn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __buf: *mut c_types::c_char,
                __n: c_types::c_int,
            ) -> c_types::c_int,
        >,
        __writefn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __buf: *const c_types::c_char,
                __n: c_types::c_int,
            ) -> c_types::c_int,
        >,
        __seekfn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __off: fpos_t,
                __whence: c_types::c_int,
            ) -> fpos_t,
        >,
        __closefn: ::core::option::Option<
            unsafe extern "C" fn(__cookie: *mut c_types::c_void) -> c_types::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _funopen_r(
        arg1: *mut _reent,
        __cookie: *const c_types::c_void,
        __readfn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __buf: *mut c_types::c_char,
                __n: c_types::c_int,
            ) -> c_types::c_int,
        >,
        __writefn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __buf: *const c_types::c_char,
                __n: c_types::c_int,
            ) -> c_types::c_int,
        >,
        __seekfn: ::core::option::Option<
            unsafe extern "C" fn(
                __cookie: *mut c_types::c_void,
                __off: fpos_t,
                __whence: c_types::c_int,
            ) -> fpos_t,
        >,
        __closefn: ::core::option::Option<
            unsafe extern "C" fn(__cookie: *mut c_types::c_void) -> c_types::c_int,
        >,
    ) -> *mut FILE;
}
pub type esp_err_t = c_types::c_int;
extern "C" {
    #[doc = " @brief Returns string for esp_err_t error codes"]
    #[doc = ""]
    #[doc = " This function finds the error code in a pre-generated lookup-table and"]
    #[doc = " returns its string representation."]
    #[doc = ""]
    #[doc = " The function is generated by the Python script"]
    #[doc = " tools/gen_esp_err_to_name.py which should be run each time an esp_err_t"]
    #[doc = " error is modified, created or removed from the IDF project."]
    #[doc = ""]
    #[doc = " @param code esp_err_t error code"]
    #[doc = " @return string error message"]
    pub fn esp_err_to_name(code: esp_err_t) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " @brief Returns string for esp_err_t and system error codes"]
    #[doc = ""]
    #[doc = " This function finds the error code in a pre-generated lookup-table of"]
    #[doc = " esp_err_t errors and returns its string representation. If the error code"]
    #[doc = " is not found then it is attempted to be found among system errors."]
    #[doc = ""]
    #[doc = " The function is generated by the Python script"]
    #[doc = " tools/gen_esp_err_to_name.py which should be run each time an esp_err_t"]
    #[doc = " error is modified, created or removed from the IDF project."]
    #[doc = ""]
    #[doc = " @param code esp_err_t error code"]
    #[doc = " @param[out] buf buffer where the error message should be written"]
    #[doc = " @param buflen Size of buffer buf. At most buflen bytes are written into the buf buffer (including the terminating null byte)."]
    #[doc = " @return buf containing the string error message"]
    pub fn esp_err_to_name_r(
        code: esp_err_t,
        buf: *mut c_types::c_char,
        buflen: size_t,
    ) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " @cond"]
    pub fn _esp_error_check_failed(
        rc: esp_err_t,
        file: *const c_types::c_char,
        line: c_types::c_int,
        function: *const c_types::c_char,
        expression: *const c_types::c_char,
    );
}
extern "C" {
    #[doc = " @cond"]
    pub fn _esp_error_check_failed_without_abort(
        rc: esp_err_t,
        file: *const c_types::c_char,
        line: c_types::c_int,
        function: *const c_types::c_char,
        expression: *const c_types::c_char,
    );
}
extern "C" {
    #[doc = " Return full IDF version string, same as 'git describe' output."]
    #[doc = ""]
    #[doc = " @note If you are printing the ESP-IDF version in a log file or other information,"]
    #[doc = " this function provides more information than using the numerical version macros."]
    #[doc = " For example, numerical version macros don't differentiate between development,"]
    #[doc = " pre-release and release versions, but the output of this function does."]
    #[doc = ""]
    #[doc = " @return constant string from IDF_VER"]
    pub fn esp_get_idf_version() -> *const c_types::c_char;
}
pub const esp_mac_type_t_ESP_MAC_WIFI_STA: esp_mac_type_t = 0;
pub const esp_mac_type_t_ESP_MAC_WIFI_SOFTAP: esp_mac_type_t = 1;
pub const esp_mac_type_t_ESP_MAC_BT: esp_mac_type_t = 2;
pub const esp_mac_type_t_ESP_MAC_ETH: esp_mac_type_t = 3;
pub const esp_mac_type_t_ESP_MAC_IEEE802154: esp_mac_type_t = 4;
pub type esp_mac_type_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief  Set base MAC address with the MAC address which is stored in BLK3 of EFUSE or"]
    #[doc = "         external storage e.g. flash and EEPROM."]
    #[doc = ""]
    #[doc = " Base MAC address is used to generate the MAC addresses used by network interfaces."]
    #[doc = ""]
    #[doc = " If using a custom base MAC address, call this API before initializing any network interfaces."]
    #[doc = " Refer to the ESP-IDF Programming Guide for details about how the Base MAC is used."]
    #[doc = ""]
    #[doc = " @note Base MAC must be a unicast MAC (least significant bit of first byte must be zero)."]
    #[doc = ""]
    #[doc = " @note If not using a valid OUI, set the \"locally administered\" bit"]
    #[doc = "       (bit value 0x02 in the first byte) to avoid collisions."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG If mac is NULL or is not a unicast MAC"]
    pub fn esp_base_mac_addr_set(mac: *const u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Return base MAC address which is set using esp_base_mac_addr_set."]
    #[doc = ""]
    #[doc = " @note If no custom Base MAC has been set, this returns the pre-programmed Espressif base MAC address."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG mac is NULL"]
    #[doc = "         ESP_ERR_INVALID_MAC base MAC address has not been set"]
    pub fn esp_base_mac_addr_get(mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Return base MAC address which was previously written to BLK3 of EFUSE."]
    #[doc = ""]
    #[doc = " Base MAC address is used to generate the MAC addresses used by the networking interfaces."]
    #[doc = " This API returns the custom base MAC address which was previously written to EFUSE BLK3 in"]
    #[doc = " a specified format."]
    #[doc = ""]
    #[doc = " Writing this EFUSE allows setting of a different (non-Espressif) base MAC address. It is also"]
    #[doc = " possible to store a custom base MAC address elsewhere, see esp_base_mac_addr_set() for details."]
    #[doc = ""]
    #[doc = " @note This function is currently only supported on ESP32."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG mac is NULL"]
    #[doc = "         ESP_ERR_INVALID_MAC CUSTOM_MAC address has not been set, all zeros (for esp32-xx)"]
    #[doc = "         ESP_ERR_INVALID_VERSION An invalid MAC version field was read from BLK3 of EFUSE (for esp32)"]
    #[doc = "         ESP_ERR_INVALID_CRC An invalid MAC CRC was read from BLK3 of EFUSE (for esp32)"]
    pub fn esp_efuse_mac_get_custom(mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Return base MAC address which is factory-programmed by Espressif in EFUSE."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG mac is NULL"]
    pub fn esp_efuse_mac_get_default(mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Read base MAC address and set MAC address of the interface."]
    #[doc = ""]
    #[doc = " This function first get base MAC address using esp_base_mac_addr_get()."]
    #[doc = " Then calculates the MAC address of the specific interface requested,"]
    #[doc = " refer to ESP-IDF Programming Guide for the algorithm."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = " @param  type Type of MAC address to return"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    pub fn esp_read_mac(mac: *mut u8, type_: esp_mac_type_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Derive local MAC address from universal MAC address."]
    #[doc = ""]
    #[doc = " This function copies a universal MAC address and then sets the \"locally"]
    #[doc = " administered\" bit (bit 0x2) in the first octet, creating a locally"]
    #[doc = " administered MAC address."]
    #[doc = ""]
    #[doc = " If the universal MAC address argument is already a locally administered MAC"]
    #[doc = " address, then the first octet is XORed with 0x4 in order to create a different"]
    #[doc = " locally administered MAC address."]
    #[doc = ""]
    #[doc = " @param  mac base MAC address, length: 6 bytes/8 bytes."]
    #[doc = "         length: 6 bytes for MAC-48"]
    #[doc = "                 8 bytes for EUI-64(used for IEEE 802.15.4)"]
    #[doc = " @param  universal_mac  Source universal MAC address, length: 6 bytes."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    pub fn esp_derive_local_mac(local_mac: *mut u8, universal_mac: *const u8) -> esp_err_t;
}
#[doc = "!< ESP32"]
pub const esp_chip_model_t_CHIP_ESP32: esp_chip_model_t = 1;
#[doc = "!< ESP32-S2"]
pub const esp_chip_model_t_CHIP_ESP32S2: esp_chip_model_t = 2;
#[doc = "!< ESP32-S3"]
pub const esp_chip_model_t_CHIP_ESP32S3: esp_chip_model_t = 9;
#[doc = "!< ESP32-C3"]
pub const esp_chip_model_t_CHIP_ESP32C3: esp_chip_model_t = 5;
#[doc = "!< ESP32-H2"]
pub const esp_chip_model_t_CHIP_ESP32H2: esp_chip_model_t = 6;
#[doc = " @brief Chip models"]
pub type esp_chip_model_t = c_types::c_uint;
#[doc = " @brief The structure represents information about the chip"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_chip_info_t {
    #[doc = "!< chip model, one of esp_chip_model_t"]
    pub model: esp_chip_model_t,
    #[doc = "!< bit mask of CHIP_FEATURE_x feature flags"]
    pub features: u32,
    #[doc = "!< number of CPU cores"]
    pub cores: u8,
    #[doc = "!< chip revision number"]
    pub revision: u8,
}
impl Default for esp_chip_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Fill an esp_chip_info_t structure with information about the chip"]
    #[doc = " @param[out] out_info structure to be filled"]
    pub fn esp_chip_info(out_info: *mut esp_chip_info_t);
}
extern "C" {
    #[doc = " @brief  Get one random 32-bit word from hardware RNG"]
    #[doc = ""]
    #[doc = " If Wi-Fi or Bluetooth are enabled, this function returns true random numbers. In other"]
    #[doc = " situations, if true random numbers are required then consult the ESP-IDF Programming"]
    #[doc = " Guide \"Random Number Generation\" section for necessary prerequisites."]
    #[doc = ""]
    #[doc = " This function automatically busy-waits to ensure enough external entropy has been"]
    #[doc = " introduced into the hardware RNG state, before returning a new random number. This delay"]
    #[doc = " is very short (always less than 100 CPU cycles)."]
    #[doc = ""]
    #[doc = " @return Random value between 0 and UINT32_MAX"]
    pub fn esp_random() -> u32;
}
extern "C" {
    #[doc = " @brief Fill a buffer with random bytes from hardware RNG"]
    #[doc = ""]
    #[doc = " @note This function is implemented via calls to esp_random(), so the same"]
    #[doc = " constraints apply."]
    #[doc = ""]
    #[doc = " @param buf Pointer to buffer to fill with random numbers."]
    #[doc = " @param len Length of buffer in bytes"]
    pub fn esp_fill_random(buf: *mut c_types::c_void, len: size_t);
}
#[doc = "!< Reset reason can not be determined"]
pub const esp_reset_reason_t_ESP_RST_UNKNOWN: esp_reset_reason_t = 0;
#[doc = "!< Reset due to power-on event"]
pub const esp_reset_reason_t_ESP_RST_POWERON: esp_reset_reason_t = 1;
#[doc = "!< Reset by external pin (not applicable for ESP32)"]
pub const esp_reset_reason_t_ESP_RST_EXT: esp_reset_reason_t = 2;
#[doc = "!< Software reset via esp_restart"]
pub const esp_reset_reason_t_ESP_RST_SW: esp_reset_reason_t = 3;
#[doc = "!< Software reset due to exception/panic"]
pub const esp_reset_reason_t_ESP_RST_PANIC: esp_reset_reason_t = 4;
#[doc = "!< Reset (software or hardware) due to interrupt watchdog"]
pub const esp_reset_reason_t_ESP_RST_INT_WDT: esp_reset_reason_t = 5;
#[doc = "!< Reset due to task watchdog"]
pub const esp_reset_reason_t_ESP_RST_TASK_WDT: esp_reset_reason_t = 6;
#[doc = "!< Reset due to other watchdogs"]
pub const esp_reset_reason_t_ESP_RST_WDT: esp_reset_reason_t = 7;
#[doc = "!< Reset after exiting deep sleep mode"]
pub const esp_reset_reason_t_ESP_RST_DEEPSLEEP: esp_reset_reason_t = 8;
#[doc = "!< Brownout reset (software or hardware)"]
pub const esp_reset_reason_t_ESP_RST_BROWNOUT: esp_reset_reason_t = 9;
#[doc = "!< Reset over SDIO"]
pub const esp_reset_reason_t_ESP_RST_SDIO: esp_reset_reason_t = 10;
#[doc = " @brief Reset reasons"]
pub type esp_reset_reason_t = c_types::c_uint;
#[doc = " Shutdown handler type"]
pub type shutdown_handler_t = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[doc = " @brief  Register shutdown handler"]
    #[doc = ""]
    #[doc = " This function allows you to register a handler that gets invoked before"]
    #[doc = " the application is restarted using esp_restart function."]
    #[doc = " @param handle function to execute on restart"]
    #[doc = " @return"]
    #[doc = "   - ESP_OK on success"]
    #[doc = "   - ESP_ERR_INVALID_STATE if the handler has already been registered"]
    #[doc = "   - ESP_ERR_NO_MEM if no more shutdown handler slots are available"]
    pub fn esp_register_shutdown_handler(handle: shutdown_handler_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Unregister shutdown handler"]
    #[doc = ""]
    #[doc = " This function allows you to unregister a handler which was previously"]
    #[doc = " registered using esp_register_shutdown_handler function."]
    #[doc = "   - ESP_OK on success"]
    #[doc = "   - ESP_ERR_INVALID_STATE if the given handler hasn't been registered before"]
    pub fn esp_unregister_shutdown_handler(handle: shutdown_handler_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Restart PRO and APP CPUs."]
    #[doc = ""]
    #[doc = " This function can be called both from PRO and APP CPUs."]
    #[doc = " After successful restart, CPU reset reason will be SW_CPU_RESET."]
    #[doc = " Peripherals (except for WiFi, BT, UART0, SPI1, and legacy timers) are not reset."]
    #[doc = " This function does not return."]
    pub fn esp_restart();
}
extern "C" {
    #[doc = " @brief  Get reason of last reset"]
    #[doc = " @return See description of esp_reset_reason_t for explanation of each value."]
    pub fn esp_reset_reason() -> esp_reset_reason_t;
}
extern "C" {
    #[doc = " @brief  Get the size of available heap."]
    #[doc = ""]
    #[doc = " Note that the returned value may be larger than the maximum contiguous block"]
    #[doc = " which can be allocated."]
    #[doc = ""]
    #[doc = " @return Available heap size, in bytes."]
    pub fn esp_get_free_heap_size() -> u32;
}
extern "C" {
    #[doc = " @brief  Get the size of available internal heap."]
    #[doc = ""]
    #[doc = " Note that the returned value may be larger than the maximum contiguous block"]
    #[doc = " which can be allocated."]
    #[doc = ""]
    #[doc = " @return Available internal heap size, in bytes."]
    pub fn esp_get_free_internal_heap_size() -> u32;
}
extern "C" {
    #[doc = " @brief Get the minimum heap that has ever been available"]
    #[doc = ""]
    #[doc = " @return Minimum free heap ever available"]
    pub fn esp_get_minimum_free_heap_size() -> u32;
}
extern "C" {
    #[doc = " @brief Trigger a software abort"]
    #[doc = ""]
    #[doc = " @param details Details that will be displayed during panic handling."]
    pub fn esp_system_abort(details: *const c_types::c_char);
}
pub const soc_reset_reason_t_RESET_REASON_CHIP_POWER_ON: soc_reset_reason_t = 1;
pub const soc_reset_reason_t_RESET_REASON_CHIP_BROWN_OUT: soc_reset_reason_t = 1;
pub const soc_reset_reason_t_RESET_REASON_CHIP_SUPER_WDT: soc_reset_reason_t = 1;
pub const soc_reset_reason_t_RESET_REASON_CORE_SW: soc_reset_reason_t = 3;
pub const soc_reset_reason_t_RESET_REASON_CORE_DEEP_SLEEP: soc_reset_reason_t = 5;
pub const soc_reset_reason_t_RESET_REASON_CORE_MWDT0: soc_reset_reason_t = 7;
pub const soc_reset_reason_t_RESET_REASON_CORE_MWDT1: soc_reset_reason_t = 8;
pub const soc_reset_reason_t_RESET_REASON_CORE_RTC_WDT: soc_reset_reason_t = 9;
pub const soc_reset_reason_t_RESET_REASON_CPU0_MWDT0: soc_reset_reason_t = 11;
pub const soc_reset_reason_t_RESET_REASON_CPU0_SW: soc_reset_reason_t = 12;
pub const soc_reset_reason_t_RESET_REASON_CPU0_RTC_WDT: soc_reset_reason_t = 13;
pub const soc_reset_reason_t_RESET_REASON_SYS_BROWN_OUT: soc_reset_reason_t = 15;
pub const soc_reset_reason_t_RESET_REASON_SYS_RTC_WDT: soc_reset_reason_t = 16;
pub const soc_reset_reason_t_RESET_REASON_CPU0_MWDT1: soc_reset_reason_t = 17;
pub const soc_reset_reason_t_RESET_REASON_SYS_SUPER_WDT: soc_reset_reason_t = 18;
pub const soc_reset_reason_t_RESET_REASON_SYS_CLK_GLITCH: soc_reset_reason_t = 19;
pub const soc_reset_reason_t_RESET_REASON_CORE_EFUSE_CRC: soc_reset_reason_t = 20;
pub const soc_reset_reason_t_RESET_REASON_CORE_USB_UART: soc_reset_reason_t = 21;
pub const soc_reset_reason_t_RESET_REASON_CORE_USB_JTAG: soc_reset_reason_t = 22;
pub const soc_reset_reason_t_RESET_REASON_CORE_PWR_GLITCH: soc_reset_reason_t = 23;
#[doc = " @brief Naming conventions: RESET_REASON_{reset level}_{reset reason}"]
#[doc = " @note refer to TRM: <Reset and Clock> chapter"]
pub type soc_reset_reason_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief Print formated string to console device"]
    #[doc = " @note float and long long data are not supported!"]
    #[doc = ""]
    #[doc = " @param fmt Format string"]
    #[doc = " @param ... Additional arguments, depending on the format string"]
    #[doc = " @return int: Total number of characters written on success; A negative number on failure."]
    pub fn esp_rom_printf(fmt: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Pauses execution for us microseconds"]
    #[doc = ""]
    #[doc = " @param us Number of microseconds to pause"]
    pub fn esp_rom_delay_us(us: u32);
}
extern "C" {
    #[doc = " @brief esp_rom_printf can print message to different channels simultaneously."]
    #[doc = "        This function can help install the low level putc function for esp_rom_printf."]
    #[doc = ""]
    #[doc = " @param channel Channel number (startting from 1)"]
    #[doc = " @param putc Function pointer to the putc implementation. Set NULL can disconnect esp_rom_printf with putc."]
    pub fn esp_rom_install_channel_putc(
        channel: c_types::c_int,
        putc: ::core::option::Option<unsafe extern "C" fn(c: c_types::c_char)>,
    );
}
extern "C" {
    #[doc = " @brief Install UART1 as the default console channel, equivalent to `esp_rom_install_channel_putc(1, esp_rom_uart_putc)`"]
    pub fn esp_rom_install_uart_printf();
}
extern "C" {
    #[doc = " @brief Get reset reason of CPU"]
    #[doc = ""]
    #[doc = " @param cpu_no CPU number"]
    #[doc = " @return Reset reason code (see in soc/reset_reasons.h)"]
    pub fn esp_rom_get_reset_reason(cpu_no: c_types::c_int) -> soc_reset_reason_t;
}
#[doc = "< return successful in ets"]
pub const ETS_STATUS_ETS_OK: ETS_STATUS = 0;
#[doc = "< return failed in ets"]
pub const ETS_STATUS_ETS_FAILED: ETS_STATUS = 1;
#[doc = " @addtogroup ets_apis"]
#[doc = " @{"]
pub type ETS_STATUS = c_types::c_uint;
#[doc = " @addtogroup ets_apis"]
#[doc = " @{"]
pub use self::ETS_STATUS as ets_status_t;
pub type ETSSignal = u32;
pub type ETSParam = u32;
pub type ETSEvent = ETSEventTag;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ETSEventTag {
    #[doc = "< Event signal, in same task, different Event with different signal"]
    pub sig: ETSSignal,
    #[doc = "< Event parameter, sometimes without usage, then will be set as 0"]
    pub par: ETSParam,
}
pub type ETSTask = ::core::option::Option<unsafe extern "C" fn(e: *mut ETSEvent)>;
pub type ets_idle_cb_t = ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void)>;
extern "C" {
    #[doc = " @brief  Start the Espressif Task Scheduler, which is an infinit loop. Please do not add code after it."]
    #[doc = ""]
    #[doc = " @param  none"]
    #[doc = ""]
    #[doc = " @return none"]
    pub fn ets_run();
}
extern "C" {
    #[doc = " @brief  Set the Idle callback, when Tasks are processed, will call the callback before CPU goto sleep."]
    #[doc = ""]
    #[doc = " @param  ets_idle_cb_t func : The callback function."]
    #[doc = ""]
    #[doc = " @param  void *arg : Argument of the callback."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_set_idle_cb(func: ets_idle_cb_t, arg: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief  Init a task with processer, priority, queue to receive Event, queue length."]
    #[doc = ""]
    #[doc = " @param  ETSTask task : The task processer."]
    #[doc = ""]
    #[doc = " @param  uint8_t prio : Task priority, 0-31, bigger num with high priority, one priority with one task."]
    #[doc = ""]
    #[doc = " @param  ETSEvent *queue : Queue belongs to the task, task always receives Events, Queue is circular used."]
    #[doc = ""]
    #[doc = " @param  uint8_t qlen : Queue length."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_task(task: ETSTask, prio: u8, queue: *mut ETSEvent, qlen: u8);
}
extern "C" {
    #[doc = " @brief  Post an event to an Task."]
    #[doc = ""]
    #[doc = " @param  uint8_t prio : Priority of the Task."]
    #[doc = ""]
    #[doc = " @param  ETSSignal sig : Event signal."]
    #[doc = ""]
    #[doc = " @param  ETSParam  par : Event parameter"]
    #[doc = ""]
    #[doc = " @return ETS_OK     : post successful"]
    #[doc = " @return ETS_FAILED : post failed"]
    pub fn ets_post(prio: u8, sig: ETSSignal, par: ETSParam) -> ETS_STATUS;
}
extern "C" {
    #[doc = " @addtogroup ets_apis"]
    #[doc = " @{"]
    pub static exc_cause_table: [*const c_types::c_char; 40usize];
}
extern "C" {
    #[doc = " @brief  Set Pro cpu Entry code, code can be called in PRO CPU when booting is not completed."]
    #[doc = "         When Pro CPU booting is completed, Pro CPU will call the Entry code if not NULL."]
    #[doc = ""]
    #[doc = " @param  uint32_t start : the PRO Entry code address value in uint32_t"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_set_user_start(start: u32);
}
extern "C" {
    #[doc = " @brief  Set Pro cpu Startup code, code can be called when booting is not completed, or in Entry code."]
    #[doc = "         When Entry code completed, CPU will call the Startup code if not NULL, else call ets_run."]
    #[doc = ""]
    #[doc = " @param  uint32_t callback : the Startup code address value in uint32_t"]
    #[doc = ""]
    #[doc = " @return None     : post successful"]
    pub fn ets_set_startup_callback(callback: u32);
}
extern "C" {
    #[doc = " @brief  Set App cpu Entry code, code can be called in PRO CPU."]
    #[doc = "         When APP booting is completed, APP CPU will call the Entry code if not NULL."]
    #[doc = ""]
    #[doc = " @param  uint32_t start : the APP Entry code address value in uint32_t, stored in register APPCPU_CTRL_REG_D."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_set_appcpu_boot_addr(start: u32);
}
extern "C" {
    #[doc = " @brief  Printf the strings to uart or other devices, similar with printf, simple than printf."]
    #[doc = "         Can not print float point data format, or longlong data format."]
    #[doc = "         So we maybe only use this in ROM."]
    #[doc = ""]
    #[doc = " @param  const char *fmt : See printf."]
    #[doc = ""]
    #[doc = " @param  ... : See printf."]
    #[doc = ""]
    #[doc = " @return int : the length printed to the output device."]
    pub fn ets_printf(fmt: *const c_types::c_char, ...) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief  Set the uart channel of ets_printf(uart_tx_one_char)."]
    #[doc = "         ROM will set it base on the efuse and gpio setting, however, this can be changed after booting."]
    #[doc = ""]
    #[doc = " @param  uart_no : 0 for UART0, 1 for UART1."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_set_printf_channel(uart_no: u8);
}
extern "C" {
    #[doc = " @brief Get the uart channel of ets_printf(uart_tx_one_char)."]
    #[doc = ""]
    #[doc = " @return uint8_t uart channel used by ets_printf(uart_tx_one_char)."]
    pub fn ets_get_printf_channel() -> u8;
}
extern "C" {
    #[doc = " @brief  Output a char to uart, which uart to output(which is in uart module in ROM) is not in scope of the function."]
    #[doc = "         Can not print float point data format, or longlong data format"]
    #[doc = ""]
    #[doc = " @param  char c : char to output."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_write_char_uart(c: c_types::c_char);
}
extern "C" {
    #[doc = " @brief  Ets_printf have two output functions： putc1 and putc2, both of which will be called if need ouput."]
    #[doc = "         To install putc1, which is defaulted installed as ets_write_char_uart in none silent boot mode, as NULL in silent mode."]
    #[doc = ""]
    #[doc = " @param  void (*)(char) p: Output function to install."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_install_putc1(p: ::core::option::Option<unsafe extern "C" fn(c: c_types::c_char)>);
}
extern "C" {
    #[doc = " @brief  Ets_printf have two output functions： putc1 and putc2, both of which will be called if need ouput."]
    #[doc = "         To install putc2, which is defaulted installed as NULL."]
    #[doc = ""]
    #[doc = " @param  void (*)(char) p: Output function to install."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_install_putc2(p: ::core::option::Option<unsafe extern "C" fn(c: c_types::c_char)>);
}
extern "C" {
    #[doc = " @brief  Install putc1 as ets_write_char_uart."]
    #[doc = "         In silent boot mode(to void interfere the UART attached MCU), we can call this function, after booting ok."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_install_uart_printf();
}
#[doc = " @addtogroup ets_timer_apis"]
#[doc = " @{"]
pub type ETSTimerFunc =
    ::core::option::Option<unsafe extern "C" fn(timer_arg: *mut c_types::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ETSTIMER_ {
    #[doc = "< timer linker"]
    pub timer_next: *mut _ETSTIMER_,
    #[doc = "< abstruct time when timer expire"]
    pub timer_expire: u32,
    #[doc = "< timer period, 0 means timer is not periodic repeated"]
    pub timer_period: u32,
    #[doc = "< timer handler"]
    pub timer_func: ETSTimerFunc,
    #[doc = "< timer handler argument"]
    pub timer_arg: *mut c_types::c_void,
}
impl Default for _ETSTIMER_ {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ETSTimer = _ETSTIMER_;
extern "C" {
    #[doc = " @brief  Init ets timer, this timer range is 640 us to 429496 ms"]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_init();
}
extern "C" {
    #[doc = " @brief  In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_deinit();
}
extern "C" {
    #[doc = " @brief  Arm an ets timer, this timer range is 640 us to 429496 ms."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  ETSTimer *timer : Timer struct pointer."]
    #[doc = ""]
    #[doc = " @param  uint32_t tmout : Timer value in ms, range is 1 to 429496."]
    #[doc = ""]
    #[doc = " @param  bool repeat : Timer is periodic repeated."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_arm(timer: *mut ETSTimer, tmout: u32, repeat: bool);
}
extern "C" {
    #[doc = " @brief  Arm an ets timer, this timer range is 640 us to 429496 ms."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  ETSTimer *timer : Timer struct pointer."]
    #[doc = ""]
    #[doc = " @param  uint32_t tmout : Timer value in us, range is 1 to 429496729."]
    #[doc = ""]
    #[doc = " @param  bool repeat : Timer is periodic repeated."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_arm_us(ptimer: *mut ETSTimer, us: u32, repeat: bool);
}
extern "C" {
    #[doc = " @brief  Disarm an ets timer."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  ETSTimer *timer : Timer struct pointer."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_disarm(timer: *mut ETSTimer);
}
extern "C" {
    #[doc = " @brief  Set timer callback and argument."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  ETSTimer *timer : Timer struct pointer."]
    #[doc = ""]
    #[doc = " @param  ETSTimerFunc *pfunction : Timer callback."]
    #[doc = ""]
    #[doc = " @param  void *parg : Timer callback argument."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_setfn(
        ptimer: *mut ETSTimer,
        pfunction: ETSTimerFunc,
        parg: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief  Unset timer callback and argument to NULL."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  ETSTimer *timer : Timer struct pointer."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_timer_done(ptimer: *mut ETSTimer);
}
extern "C" {
    #[doc = " @brief  CPU do while loop for some time."]
    #[doc = "         In FreeRTOS task, please call FreeRTOS apis."]
    #[doc = ""]
    #[doc = " @param  uint32_t us : Delay time in us."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_delay_us(us: u32);
}
extern "C" {
    #[doc = " @brief  Set the real CPU ticks per us to the ets, so that ets_delay_us will be accurate."]
    #[doc = "         Call this function when CPU frequency is changed."]
    #[doc = ""]
    #[doc = " @param  uint32_t ticks_per_us : CPU ticks per us."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_update_cpu_frequency(ticks_per_us: u32);
}
extern "C" {
    #[doc = " @brief  Set the real CPU ticks per us to the ets, so that ets_delay_us will be accurate."]
    #[doc = ""]
    #[doc = " @note This function only sets the tick rate for the current CPU. It is located in ROM,"]
    #[doc = "       so the deep sleep stub can use it even if IRAM is not initialized yet."]
    #[doc = ""]
    #[doc = " @param  uint32_t ticks_per_us : CPU ticks per us."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_update_cpu_frequency_rom(ticks_per_us: u32);
}
extern "C" {
    #[doc = " @brief  Get the real CPU ticks per us to the ets."]
    #[doc = "         This function do not return real CPU ticks per us, just the record in ets. It can be used to check with the real CPU frequency."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return uint32_t : CPU ticks per us record in ets."]
    pub fn ets_get_cpu_frequency() -> u32;
}
extern "C" {
    #[doc = " @brief  Get xtal_freq value, If value not stored in RTC_STORE5, than store."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return uint32_t : if stored in efuse(not 0)"]
    #[doc = "                         clock = ets_efuse_get_xtal_freq() * 1000000;"]
    #[doc = "                    else if analog_8M in efuse"]
    #[doc = "                         clock = ets_get_xtal_scale() * 625 / 16 * ets_efuse_get_8M_clock();"]
    #[doc = "                    else clock = 40M."]
    pub fn ets_get_xtal_freq() -> u32;
}
extern "C" {
    #[doc = " @brief  Get the apb divior by xtal frequency."]
    #[doc = "         When any types of reset happen, the default value is 2."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return uint32_t : 1 or 2."]
    pub fn ets_get_xtal_div() -> u32;
}
extern "C" {
    #[doc = " @brief  Get apb_freq value, If value not stored in RTC_STORE5, than store."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return uint32_t : if rtc store the value (RTC_STORE5 high 16 bits and low 16 bits with same value), read from rtc register."]
    #[doc = "                         clock = (REG_READ(RTC_STORE5) & 0xffff) << 12;"]
    #[doc = "                    else store ets_get_detected_xtal_freq() in."]
    pub fn ets_get_apb_freq() -> u32;
}
#[doc = " @addtogroup ets_intr_apis"]
#[doc = " @{"]
pub type ets_isr_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>;
extern "C" {
    #[doc = " @brief  Attach a interrupt handler to a CPU interrupt number."]
    #[doc = "         This function equals to _xtos_set_interrupt_handler_arg(i, func, arg)."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  int i : CPU interrupt number."]
    #[doc = ""]
    #[doc = " @param  ets_isr_t func : Interrupt handler."]
    #[doc = ""]
    #[doc = " @param  void *arg : argument of the handler."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_isr_attach(i: c_types::c_int, func: ets_isr_t, arg: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief  Mask the interrupts which show in mask bits."]
    #[doc = "         This function equals to _xtos_ints_off(mask)."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  uint32_t mask : BIT(i) means mask CPU interrupt number i."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_isr_mask(mask: u32);
}
extern "C" {
    #[doc = " @brief  Unmask the interrupts which show in mask bits."]
    #[doc = "         This function equals to _xtos_ints_on(mask)."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  uint32_t mask : BIT(i) means mask CPU interrupt number i."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_isr_unmask(unmask: u32);
}
extern "C" {
    #[doc = " @brief  Lock the interrupt to level 2."]
    #[doc = "         This function direct set the CPU registers."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_intr_lock();
}
extern "C" {
    #[doc = " @brief  Unlock the interrupt to level 0."]
    #[doc = "         This function direct set the CPU registers."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_intr_unlock();
}
extern "C" {
    #[doc = " @brief  Unlock the interrupt to level 0, and CPU will go into power save mode(wait interrupt)."]
    #[doc = "         This function direct set the CPU registers."]
    #[doc = "         In FreeRTOS, please call FreeRTOS apis, never call this api."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn ets_waiti0();
}
extern "C" {
    #[doc = " @brief  Attach an CPU interrupt to a hardware source."]
    #[doc = "         We have 4 steps to use an interrupt:"]
    #[doc = "         1.Attach hardware interrupt source to CPU.  intr_matrix_set(0, ETS_WIFI_MAC_INTR_SOURCE, ETS_WMAC_INUM);"]
    #[doc = "         2.Set interrupt handler.                    xt_set_interrupt_handler(ETS_WMAC_INUM, func, NULL);"]
    #[doc = "         3.Enable interrupt for CPU.                 xt_ints_on(1 << ETS_WMAC_INUM);"]
    #[doc = "         4.Enable interrupt in the module."]
    #[doc = ""]
    #[doc = " @param  int cpu_no : The CPU which the interrupt number belongs."]
    #[doc = ""]
    #[doc = " @param  uint32_t model_num : The interrupt hardware source number, please see the interrupt hardware source table."]
    #[doc = ""]
    #[doc = " @param  uint32_t intr_num : The interrupt number CPU, please see the interrupt cpu using table."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn intr_matrix_set(cpu_no: c_types::c_int, model_num: u32, intr_num: u32);
}
pub const STATUS_OK: STATUS = 0;
pub const STATUS_FAIL: STATUS = 1;
pub const STATUS_PENDING: STATUS = 2;
pub const STATUS_BUSY: STATUS = 3;
pub const STATUS_CANCEL: STATUS = 4;
pub type STATUS = c_types::c_uint;
#[doc = "< No log output"]
pub const esp_log_level_t_ESP_LOG_NONE: esp_log_level_t = 0;
#[doc = "< Critical errors, software module can not recover on its own"]
pub const esp_log_level_t_ESP_LOG_ERROR: esp_log_level_t = 1;
#[doc = "< Error conditions from which recovery measures have been taken"]
pub const esp_log_level_t_ESP_LOG_WARN: esp_log_level_t = 2;
#[doc = "< Information messages which describe normal flow of events"]
pub const esp_log_level_t_ESP_LOG_INFO: esp_log_level_t = 3;
#[doc = "< Extra information which is not necessary for normal use (values, pointers, sizes, etc)."]
pub const esp_log_level_t_ESP_LOG_DEBUG: esp_log_level_t = 4;
#[doc = "< Bigger chunks of debugging information, or frequent messages which can potentially flood the output."]
pub const esp_log_level_t_ESP_LOG_VERBOSE: esp_log_level_t = 5;
#[doc = " @brief Log level"]
#[doc = ""]
pub type esp_log_level_t = c_types::c_uint;
pub type vprintf_like_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const c_types::c_char, arg2: va_list) -> c_types::c_int,
>;
extern "C" {
    #[doc = " @brief Default log level"]
    #[doc = ""]
    #[doc = " This is used by the definition of ESP_EARLY_LOGx macros. It is not"]
    #[doc = " recommended to set this directly, call esp_log_level_set(\"*\", level)"]
    #[doc = " instead."]
    pub static mut esp_log_default_level: esp_log_level_t;
}
extern "C" {
    #[doc = " @brief Set log level for given tag"]
    #[doc = ""]
    #[doc = " If logging for given component has already been enabled, changes previous setting."]
    #[doc = ""]
    #[doc = " Note that this function can not raise log level above the level set using"]
    #[doc = " CONFIG_LOG_MAXIMUM_LEVEL setting in menuconfig."]
    #[doc = ""]
    #[doc = " To raise log level above the default one for a given file, define"]
    #[doc = " LOG_LOCAL_LEVEL to one of the ESP_LOG_* values, before including"]
    #[doc = " esp_log.h in this file."]
    #[doc = ""]
    #[doc = " @param tag Tag of the log entries to enable. Must be a non-NULL zero terminated string."]
    #[doc = "            Value \"*\" resets log level for all tags to the given value."]
    #[doc = ""]
    #[doc = " @param level  Selects log level to enable. Only logs at this and lower verbosity"]
    #[doc = " levels will be shown."]
    pub fn esp_log_level_set(tag: *const c_types::c_char, level: esp_log_level_t);
}
extern "C" {
    #[doc = " @brief Get log level for given tag, can be used to avoid expensive log statements"]
    #[doc = ""]
    #[doc = " @param tag Tag of the log to query current level. Must be a non-NULL zero terminated"]
    #[doc = "            string."]
    #[doc = ""]
    #[doc = " @return The current log level for the given tag"]
    pub fn esp_log_level_get(tag: *const c_types::c_char) -> esp_log_level_t;
}
extern "C" {
    #[doc = " @brief Set function used to output log entries"]
    #[doc = ""]
    #[doc = " By default, log output goes to UART0. This function can be used to redirect log"]
    #[doc = " output to some other destination, such as file or network. Returns the original"]
    #[doc = " log handler, which may be necessary to return output to the previous destination."]
    #[doc = ""]
    #[doc = " @note Please note that function callback here must be re-entrant as it can be"]
    #[doc = " invoked in parallel from multiple thread context."]
    #[doc = ""]
    #[doc = " @param func new Function used for output. Must have same signature as vprintf."]
    #[doc = ""]
    #[doc = " @return func old Function used for output."]
    pub fn esp_log_set_vprintf(func: vprintf_like_t) -> vprintf_like_t;
}
extern "C" {
    #[doc = " @brief Function which returns timestamp to be used in log output"]
    #[doc = ""]
    #[doc = " This function is used in expansion of ESP_LOGx macros."]
    #[doc = " In the 2nd stage bootloader, and at early application startup stage"]
    #[doc = " this function uses CPU cycle counter as time source. Later when"]
    #[doc = " FreeRTOS scheduler start running, it switches to FreeRTOS tick count."]
    #[doc = ""]
    #[doc = " For now, we ignore millisecond counter overflow."]
    #[doc = ""]
    #[doc = " @return timestamp, in milliseconds"]
    pub fn esp_log_timestamp() -> u32;
}
extern "C" {
    #[doc = " @brief Function which returns system timestamp to be used in log output"]
    #[doc = ""]
    #[doc = " This function is used in expansion of ESP_LOGx macros to print"]
    #[doc = " the system time as \"HH:MM:SS.sss\". The system time is initialized to"]
    #[doc = " 0 on startup, this can be set to the correct time with an SNTP sync,"]
    #[doc = " or manually with standard POSIX time functions."]
    #[doc = ""]
    #[doc = " Currently this will not get used in logging from binary blobs"]
    #[doc = " (i.e WiFi & Bluetooth libraries), these will still print the RTOS tick time."]
    #[doc = ""]
    #[doc = " @return timestamp, in \"HH:MM:SS.sss\""]
    pub fn esp_log_system_timestamp() -> *mut c_types::c_char;
}
extern "C" {
    #[doc = " @brief Function which returns timestamp to be used in log output"]
    #[doc = ""]
    #[doc = " This function uses HW cycle counter and does not depend on OS,"]
    #[doc = " so it can be safely used after application crash."]
    #[doc = ""]
    #[doc = " @return timestamp, in milliseconds"]
    pub fn esp_log_early_timestamp() -> u32;
}
extern "C" {
    #[doc = " @brief Write message into the log"]
    #[doc = ""]
    #[doc = " This function is not intended to be used directly. Instead, use one of"]
    #[doc = " ESP_LOGE, ESP_LOGW, ESP_LOGI, ESP_LOGD, ESP_LOGV macros."]
    #[doc = ""]
    #[doc = " This function or these macros should not be used from an interrupt."]
    pub fn esp_log_write(
        level: esp_log_level_t,
        tag: *const c_types::c_char,
        format: *const c_types::c_char,
        ...
    );
}
extern "C" {
    pub fn esp_log_buffer_hex_internal(
        tag: *const c_types::c_char,
        buffer: *const c_types::c_void,
        buff_len: u16,
        level: esp_log_level_t,
    );
}
extern "C" {
    pub fn esp_log_buffer_char_internal(
        tag: *const c_types::c_char,
        buffer: *const c_types::c_void,
        buff_len: u16,
        level: esp_log_level_t,
    );
}
extern "C" {
    pub fn esp_log_buffer_hexdump_internal(
        tag: *const c_types::c_char,
        buffer: *const c_types::c_void,
        buff_len: u16,
        log_level: esp_log_level_t,
    );
}
pub const watchpoint_trigger_t_WATCHPOINT_TRIGGER_ON_RO: watchpoint_trigger_t = 0;
pub const watchpoint_trigger_t_WATCHPOINT_TRIGGER_ON_WO: watchpoint_trigger_t = 1;
pub const watchpoint_trigger_t_WATCHPOINT_TRIGGER_ON_RW: watchpoint_trigger_t = 2;
pub type watchpoint_trigger_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief Read a sequence of DPORT registers to the buffer."]
    #[doc = ""]
    #[doc = " @param[out] buff_out  Contains the read data."]
    #[doc = " @param[in]  address   Initial address for reading registers."]
    #[doc = " @param[in]  num_words The number of words."]
    pub fn esp_dport_access_read_buffer(buff_out: *mut u32, address: u32, num_words: u32);
}
extern "C" {
    #[doc = " Set and enable breakpoint at an instruction address."]
    #[doc = ""]
    #[doc = " @note Overwrites previously set breakpoint with same breakpoint ID."]
    #[doc = ""]
    #[doc = " @param id breakpoint to set [0..SOC_CPU_BREAKPOINTS_NUM - 1]"]
    #[doc = " @param addr address to set a breakpoint on"]
    pub fn cpu_hal_set_breakpoint(id: c_types::c_int, addr: *const c_types::c_void);
}
extern "C" {
    #[doc = " Clear and disable breakpoint."]
    #[doc = ""]
    #[doc = " @param id breakpoint to clear [0..SOC_CPU_BREAKPOINTS_NUM - 1]"]
    pub fn cpu_hal_clear_breakpoint(id: c_types::c_int);
}
extern "C" {
    #[doc = " Set and enable a watchpoint, specifying the memory range and trigger operation."]
    #[doc = ""]
    #[doc = " @param id watchpoint to set [0..SOC_CPU_WATCHPOINTS_NUM - 1]"]
    #[doc = " @param addr starting address"]
    #[doc = " @param size number of bytes from starting address to watch"]
    #[doc = " @param trigger operation on specified memory range that triggers the watchpoint (read, write, read/write)"]
    pub fn cpu_hal_set_watchpoint(
        id: c_types::c_int,
        addr: *const c_types::c_void,
        size: size_t,
        trigger: watchpoint_trigger_t,
    );
}
extern "C" {
    #[doc = " Clear and disable watchpoint."]
    #[doc = ""]
    #[doc = " @param id watchpoint to clear [0..SOC_CPU_WATCHPOINTS_NUM - 1]"]
    pub fn cpu_hal_clear_watchpoint(id: c_types::c_int);
}
extern "C" {
    #[doc = " Set exception vector table base address."]
    #[doc = ""]
    #[doc = " @param base address to move the exception vector table to"]
    pub fn cpu_hal_set_vecbase(base: *const c_types::c_void);
}
pub type esp_cpu_ccount_t = u32;
extern "C" {
    #[doc = " @brief Stall CPU using RTC controller"]
    #[doc = " @param cpu_id ID of the CPU to stall (0 = PRO, 1 = APP)"]
    pub fn esp_cpu_stall(cpu_id: c_types::c_int);
}
extern "C" {
    #[doc = " @brief Un-stall CPU using RTC controller"]
    #[doc = " @param cpu_id ID of the CPU to un-stall (0 = PRO, 1 = APP)"]
    pub fn esp_cpu_unstall(cpu_id: c_types::c_int);
}
extern "C" {
    #[doc = " @brief Reset CPU using RTC controller"]
    #[doc = " @param cpu_id ID of the CPU to reset (0 = PRO, 1 = APP)"]
    pub fn esp_cpu_reset(cpu_id: c_types::c_int);
}
extern "C" {
    #[doc = " @brief Returns true if a JTAG debugger is attached to CPU"]
    #[doc = " OCD (on chip debug) port."]
    #[doc = ""]
    #[doc = " @note If \"Make exception and panic handlers JTAG/OCD aware\""]
    #[doc = " is disabled, this function always returns false."]
    pub fn esp_cpu_in_ocd_debug_mode() -> bool;
}
extern "C" {
    #[doc = " @brief Set a watchpoint to break/panic when a certain memory range is accessed."]
    #[doc = ""]
    #[doc = " @param no Watchpoint number. On the ESP32, this can be 0 or 1."]
    #[doc = " @param adr Base address to watch"]
    #[doc = " @param size Size of the region, starting at the base address, to watch. Must"]
    #[doc = "             be one of 2^n, with n in [0..6]."]
    #[doc = " @param flags One of ESP_WATCHPOINT_* flags"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG on invalid arg, ESP_OK otherwise"]
    #[doc = ""]
    #[doc = " @warning The ESP32 watchpoint hardware watches a region of bytes by effectively"]
    #[doc = "          masking away the lower n bits for a region with size 2^n. If adr does"]
    #[doc = "          not have zero for these lower n bits, you may not be watching the"]
    #[doc = "          region you intended."]
    pub fn esp_cpu_set_watchpoint(
        no: c_types::c_int,
        adr: *mut c_types::c_void,
        size: c_types::c_int,
        flags: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clear a watchpoint"]
    #[doc = ""]
    #[doc = " @param no Watchpoint to clear"]
    #[doc = ""]
    pub fn esp_cpu_clear_watchpoint(no: c_types::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_backtrace_frame_t {
    pub pc: u32,
    pub sp: u32,
    pub next_pc: u32,
    pub exc_frame: *const c_types::c_void,
}
impl Default for esp_backtrace_frame_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief If an OCD is connected over JTAG. set breakpoint 0 to the given function"]
    #[doc = "        address. Do nothing otherwise."]
    #[doc = " @param fn  Pointer to the target breakpoint position"]
    pub fn esp_set_breakpoint_if_jtag(fn_: *mut c_types::c_void);
}
extern "C" {
    #[doc = " Get the first frame of the current stack's backtrace"]
    #[doc = ""]
    #[doc = " Given the following function call flow (B -> A -> X -> esp_backtrace_get_start),"]
    #[doc = " this function will do the following."]
    #[doc = " - Flush CPU registers and window frames onto the current stack"]
    #[doc = " - Return PC and SP of function A (i.e. start of the stack's backtrace)"]
    #[doc = " - Return PC of function B (i.e. next_pc)"]
    #[doc = ""]
    #[doc = " @note This function is implemented in assembly"]
    #[doc = ""]
    #[doc = " @param[out] pc       PC of the first frame in the backtrace"]
    #[doc = " @param[out] sp       SP of the first frame in the backtrace"]
    #[doc = " @param[out] next_pc  PC of the first frame's caller"]
    pub fn esp_backtrace_get_start(pc: *mut u32, sp: *mut u32, next_pc: *mut u32);
}
extern "C" {
    #[doc = " Get the next frame on a stack for backtracing"]
    #[doc = ""]
    #[doc = " Given a stack frame(i), this function will obtain the next stack frame(i-1)"]
    #[doc = " on the same call stack (i.e. the caller of frame(i)). This function is meant to be"]
    #[doc = " called iteratively when doing a backtrace."]
    #[doc = ""]
    #[doc = " Entry Conditions: Frame structure containing valid SP and next_pc"]
    #[doc = " Exit Conditions:"]
    #[doc = "  - Frame structure updated with SP and PC of frame(i-1). next_pc now points to frame(i-2)."]
    #[doc = "  - If a next_pc of 0 is returned, it indicates that frame(i-1) is last frame on the stack"]
    #[doc = ""]
    #[doc = " @param[inout] frame  Pointer to frame structure"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - True if the SP and PC of the next frame(i-1) are sane"]
    #[doc = "  - False otherwise"]
    pub fn esp_backtrace_get_next_frame(frame: *mut esp_backtrace_frame_t) -> bool;
}
extern "C" {
    #[doc = " @brief Print the backtrace from specified frame."]
    #[doc = ""]
    #[doc = " @param depth The maximum number of stack frames to print (should be > 0)"]
    #[doc = " @param frame Starting frame to print from"]
    #[doc = " @param panic Indicator if backtrace print is during a system panic"]
    #[doc = ""]
    #[doc = " @note On the ESP32, users must call esp_backtrace_get_start() first to flush the stack."]
    #[doc = " @note If a esp_backtrace_frame_t* frame is obtained though a call to esp_backtrace_get_start()"]
    #[doc = " from some example function func_a(), then frame is only valid within the frame/scope of func_a()."]
    #[doc = " Users should not attempt to pass/use frame other frames within the same stack of different stacks."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK    Backtrace successfully printed to completion or to depth limit"]
    #[doc = "      - ESP_FAIL  Backtrace is corrupted"]
    pub fn esp_backtrace_print_from_frame(
        depth: c_types::c_int,
        frame: *const esp_backtrace_frame_t,
        panic: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Print the backtrace of the current stack"]
    #[doc = ""]
    #[doc = " @param depth The maximum number of stack frames to print (should be > 0)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK    Backtrace successfully printed to completion or to depth limit"]
    #[doc = "      - ESP_FAIL  Backtrace is corrupted"]
    pub fn esp_backtrace_print(depth: c_types::c_int) -> esp_err_t;
}
#[doc = "< Touch pad channel 0 is GPIO4(ESP32)"]
pub const touch_pad_t_TOUCH_PAD_NUM0: touch_pad_t = 0;
#[doc = "< Touch pad channel 1 is GPIO0(ESP32) / GPIO1(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM1: touch_pad_t = 1;
#[doc = "< Touch pad channel 2 is GPIO2(ESP32) / GPIO2(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM2: touch_pad_t = 2;
#[doc = "< Touch pad channel 3 is GPIO15(ESP32) / GPIO3(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM3: touch_pad_t = 3;
#[doc = "< Touch pad channel 4 is GPIO13(ESP32) / GPIO4(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM4: touch_pad_t = 4;
#[doc = "< Touch pad channel 5 is GPIO12(ESP32) / GPIO5(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM5: touch_pad_t = 5;
#[doc = "< Touch pad channel 6 is GPIO14(ESP32) / GPIO6(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM6: touch_pad_t = 6;
#[doc = "< Touch pad channel 7 is GPIO27(ESP32) / GPIO7(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM7: touch_pad_t = 7;
#[doc = "< Touch pad channel 8 is GPIO33(ESP32) / GPIO8(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM8: touch_pad_t = 8;
#[doc = "< Touch pad channel 9 is GPIO32(ESP32) / GPIO9(ESP32-S2)"]
pub const touch_pad_t_TOUCH_PAD_NUM9: touch_pad_t = 9;
pub const touch_pad_t_TOUCH_PAD_MAX: touch_pad_t = 10;
#[doc = " Touch pad channel"]
pub type touch_pad_t = c_types::c_uint;
#[doc = "<Touch sensor high reference voltage, no change"]
pub const touch_high_volt_t_TOUCH_HVOLT_KEEP: touch_high_volt_t = -1;
#[doc = "<Touch sensor high reference voltage, 2.4V"]
pub const touch_high_volt_t_TOUCH_HVOLT_2V4: touch_high_volt_t = 0;
#[doc = "<Touch sensor high reference voltage, 2.5V"]
pub const touch_high_volt_t_TOUCH_HVOLT_2V5: touch_high_volt_t = 1;
#[doc = "<Touch sensor high reference voltage, 2.6V"]
pub const touch_high_volt_t_TOUCH_HVOLT_2V6: touch_high_volt_t = 2;
#[doc = "<Touch sensor high reference voltage, 2.7V"]
pub const touch_high_volt_t_TOUCH_HVOLT_2V7: touch_high_volt_t = 3;
pub const touch_high_volt_t_TOUCH_HVOLT_MAX: touch_high_volt_t = 4;
#[doc = " Touch sensor high reference voltage"]
pub type touch_high_volt_t = c_types::c_int;
#[doc = "<Touch sensor low reference voltage, no change"]
pub const touch_low_volt_t_TOUCH_LVOLT_KEEP: touch_low_volt_t = -1;
#[doc = "<Touch sensor low reference voltage, 0.5V"]
pub const touch_low_volt_t_TOUCH_LVOLT_0V5: touch_low_volt_t = 0;
#[doc = "<Touch sensor low reference voltage, 0.6V"]
pub const touch_low_volt_t_TOUCH_LVOLT_0V6: touch_low_volt_t = 1;
#[doc = "<Touch sensor low reference voltage, 0.7V"]
pub const touch_low_volt_t_TOUCH_LVOLT_0V7: touch_low_volt_t = 2;
#[doc = "<Touch sensor low reference voltage, 0.8V"]
pub const touch_low_volt_t_TOUCH_LVOLT_0V8: touch_low_volt_t = 3;
pub const touch_low_volt_t_TOUCH_LVOLT_MAX: touch_low_volt_t = 4;
#[doc = " Touch sensor low reference voltage"]
pub type touch_low_volt_t = c_types::c_int;
#[doc = "<Touch sensor high reference voltage attenuation, no change"]
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_KEEP: touch_volt_atten_t = -1;
#[doc = "<Touch sensor high reference voltage attenuation, 1.5V attenuation"]
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_1V5: touch_volt_atten_t = 0;
#[doc = "<Touch sensor high reference voltage attenuation, 1.0V attenuation"]
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_1V: touch_volt_atten_t = 1;
#[doc = "<Touch sensor high reference voltage attenuation, 0.5V attenuation"]
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_0V5: touch_volt_atten_t = 2;
#[doc = "<Touch sensor high reference voltage attenuation,   0V attenuation"]
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_0V: touch_volt_atten_t = 3;
pub const touch_volt_atten_t_TOUCH_HVOLT_ATTEN_MAX: touch_volt_atten_t = 4;
#[doc = " Touch sensor high reference voltage attenuation"]
pub type touch_volt_atten_t = c_types::c_int;
#[doc = "<Touch sensor charge / discharge speed, always zero"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_0: touch_cnt_slope_t = 0;
#[doc = "<Touch sensor charge / discharge speed, slowest"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_1: touch_cnt_slope_t = 1;
#[doc = "<Touch sensor charge / discharge speed"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_2: touch_cnt_slope_t = 2;
#[doc = "<Touch sensor charge / discharge speed"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_3: touch_cnt_slope_t = 3;
#[doc = "<Touch sensor charge / discharge speed"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_4: touch_cnt_slope_t = 4;
#[doc = "<Touch sensor charge / discharge speed"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_5: touch_cnt_slope_t = 5;
#[doc = "<Touch sensor charge / discharge speed"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_6: touch_cnt_slope_t = 6;
#[doc = "<Touch sensor charge / discharge speed, fast"]
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_7: touch_cnt_slope_t = 7;
pub const touch_cnt_slope_t_TOUCH_PAD_SLOPE_MAX: touch_cnt_slope_t = 8;
#[doc = " Touch sensor charge/discharge speed"]
pub type touch_cnt_slope_t = c_types::c_uint;
#[doc = "<Initial level of charging voltage, low level"]
pub const touch_tie_opt_t_TOUCH_PAD_TIE_OPT_LOW: touch_tie_opt_t = 0;
#[doc = "<Initial level of charging voltage, high level"]
pub const touch_tie_opt_t_TOUCH_PAD_TIE_OPT_HIGH: touch_tie_opt_t = 1;
pub const touch_tie_opt_t_TOUCH_PAD_TIE_OPT_MAX: touch_tie_opt_t = 2;
#[doc = " Touch sensor initial charge level"]
pub type touch_tie_opt_t = c_types::c_uint;
#[doc = "<To start touch FSM by timer"]
pub const touch_fsm_mode_t_TOUCH_FSM_MODE_TIMER: touch_fsm_mode_t = 0;
#[doc = "<To start touch FSM by software trigger"]
pub const touch_fsm_mode_t_TOUCH_FSM_MODE_SW: touch_fsm_mode_t = 1;
pub const touch_fsm_mode_t_TOUCH_FSM_MODE_MAX: touch_fsm_mode_t = 2;
#[doc = " Touch sensor FSM mode"]
pub type touch_fsm_mode_t = c_types::c_uint;
#[doc = "<Touch interrupt will happen if counter value is less than threshold."]
pub const touch_trigger_mode_t_TOUCH_TRIGGER_BELOW: touch_trigger_mode_t = 0;
#[doc = "<Touch interrupt will happen if counter value is larger than threshold."]
pub const touch_trigger_mode_t_TOUCH_TRIGGER_ABOVE: touch_trigger_mode_t = 1;
pub const touch_trigger_mode_t_TOUCH_TRIGGER_MAX: touch_trigger_mode_t = 2;
#[doc = " ESP32 Only"]
pub type touch_trigger_mode_t = c_types::c_uint;
#[doc = "< wakeup interrupt is generated if both SET1 and SET2 are \"touched\""]
pub const touch_trigger_src_t_TOUCH_TRIGGER_SOURCE_BOTH: touch_trigger_src_t = 0;
#[doc = "< wakeup interrupt is generated if SET1 is \"touched\""]
pub const touch_trigger_src_t_TOUCH_TRIGGER_SOURCE_SET1: touch_trigger_src_t = 1;
pub const touch_trigger_src_t_TOUCH_TRIGGER_SOURCE_MAX: touch_trigger_src_t = 2;
pub type touch_trigger_src_t = c_types::c_uint;
#[doc = "<Measurement done for one of the enabled channels."]
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_DONE: touch_pad_intr_mask_t = 1;
#[doc = "<Active for one of the enabled channels."]
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_ACTIVE: touch_pad_intr_mask_t = 2;
#[doc = "<Inactive for one of the enabled channels."]
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_INACTIVE: touch_pad_intr_mask_t = 4;
#[doc = "<Measurement done for all the enabled channels."]
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_SCAN_DONE: touch_pad_intr_mask_t = 8;
#[doc = "<Timeout for one of the enabled channels."]
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_TIMEOUT: touch_pad_intr_mask_t = 16;
pub const touch_pad_intr_mask_t_TOUCH_PAD_INTR_MASK_MAX: touch_pad_intr_mask_t = 17;
pub type touch_pad_intr_mask_t = c_types::c_uint;
#[doc = "<Denoise range is 12bit"]
pub const touch_pad_denoise_grade_t_TOUCH_PAD_DENOISE_BIT12: touch_pad_denoise_grade_t = 0;
#[doc = "<Denoise range is 10bit"]
pub const touch_pad_denoise_grade_t_TOUCH_PAD_DENOISE_BIT10: touch_pad_denoise_grade_t = 1;
#[doc = "<Denoise range is 8bit"]
pub const touch_pad_denoise_grade_t_TOUCH_PAD_DENOISE_BIT8: touch_pad_denoise_grade_t = 2;
#[doc = "<Denoise range is 4bit"]
pub const touch_pad_denoise_grade_t_TOUCH_PAD_DENOISE_BIT4: touch_pad_denoise_grade_t = 3;
pub const touch_pad_denoise_grade_t_TOUCH_PAD_DENOISE_MAX: touch_pad_denoise_grade_t = 4;
pub type touch_pad_denoise_grade_t = c_types::c_uint;
#[doc = "<Denoise channel internal reference capacitance is 5pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L0: touch_pad_denoise_cap_t = 0;
#[doc = "<Denoise channel internal reference capacitance is 6.4pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L1: touch_pad_denoise_cap_t = 1;
#[doc = "<Denoise channel internal reference capacitance is 7.8pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L2: touch_pad_denoise_cap_t = 2;
#[doc = "<Denoise channel internal reference capacitance is 9.2pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L3: touch_pad_denoise_cap_t = 3;
#[doc = "<Denoise channel internal reference capacitance is 10.6pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L4: touch_pad_denoise_cap_t = 4;
#[doc = "<Denoise channel internal reference capacitance is 12.0pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L5: touch_pad_denoise_cap_t = 5;
#[doc = "<Denoise channel internal reference capacitance is 13.4pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L6: touch_pad_denoise_cap_t = 6;
#[doc = "<Denoise channel internal reference capacitance is 14.8pf"]
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_L7: touch_pad_denoise_cap_t = 7;
pub const touch_pad_denoise_cap_t_TOUCH_PAD_DENOISE_CAP_MAX: touch_pad_denoise_cap_t = 8;
pub type touch_pad_denoise_cap_t = c_types::c_uint;
#[doc = " Touch sensor denoise configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct touch_pad_denoise {
    #[doc = "<Select denoise range of denoise channel."]
    #[doc = "Determined by measuring the noise amplitude of the denoise channel."]
    pub grade: touch_pad_denoise_grade_t,
    #[doc = "<Select internal reference capacitance of denoise channel."]
    #[doc = "Ensure that the denoise readings are closest to the readings of the channel being measured."]
    #[doc = "Use `touch_pad_denoise_read_data` to get the reading of denoise channel."]
    #[doc = "The equivalent capacitance of the shielded channel can be calculated"]
    #[doc = "from the reading of denoise channel."]
    pub cap_level: touch_pad_denoise_cap_t,
}
impl Default for touch_pad_denoise {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Touch sensor denoise configuration"]
pub type touch_pad_denoise_t = touch_pad_denoise;
#[doc = "<The max equivalent capacitance in shield channel is 40pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L0: touch_pad_shield_driver_t = 0;
#[doc = "<The max equivalent capacitance in shield channel is 80pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L1: touch_pad_shield_driver_t = 1;
#[doc = "<The max equivalent capacitance in shield channel is 120pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L2: touch_pad_shield_driver_t = 2;
#[doc = "<The max equivalent capacitance in shield channel is 160pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L3: touch_pad_shield_driver_t = 3;
#[doc = "<The max equivalent capacitance in shield channel is 200pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L4: touch_pad_shield_driver_t = 4;
#[doc = "<The max equivalent capacitance in shield channel is 240pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L5: touch_pad_shield_driver_t = 5;
#[doc = "<The max equivalent capacitance in shield channel is 280pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L6: touch_pad_shield_driver_t = 6;
#[doc = "<The max equivalent capacitance in shield channel is 320pf"]
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_L7: touch_pad_shield_driver_t = 7;
pub const touch_pad_shield_driver_t_TOUCH_PAD_SHIELD_DRV_MAX: touch_pad_shield_driver_t = 8;
#[doc = " Touch sensor shield channel drive capability level"]
pub type touch_pad_shield_driver_t = c_types::c_uint;
#[doc = " Touch sensor waterproof configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct touch_pad_waterproof {
    #[doc = "<Waterproof. Select touch channel use for guard pad."]
    #[doc = "Guard pad is used to detect the large area of water covering the touch panel."]
    pub guard_ring_pad: touch_pad_t,
    #[doc = "<Waterproof. Shield channel drive capability configuration."]
    #[doc = "Shield pad is used to shield the influence of water droplets covering the touch panel."]
    #[doc = "When the waterproof function is enabled, Touch14 is set as shield channel by default."]
    #[doc = "The larger the parasitic capacitance on the shielding channel, the higher the drive capability needs to be set."]
    #[doc = "The equivalent capacitance of the shield channel can be estimated through the reading value of the denoise channel(Touch0)."]
    pub shield_driver: touch_pad_shield_driver_t,
}
impl Default for touch_pad_waterproof {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Touch sensor waterproof configuration"]
pub type touch_pad_waterproof_t = touch_pad_waterproof;
#[doc = "<Idle status of touch channel is high resistance state"]
pub const touch_pad_conn_type_t_TOUCH_PAD_CONN_HIGHZ: touch_pad_conn_type_t = 0;
#[doc = "<Idle status of touch channel is ground connection"]
pub const touch_pad_conn_type_t_TOUCH_PAD_CONN_GND: touch_pad_conn_type_t = 1;
pub const touch_pad_conn_type_t_TOUCH_PAD_CONN_MAX: touch_pad_conn_type_t = 2;
#[doc = " Touch channel idle state configuration"]
pub type touch_pad_conn_type_t = c_types::c_uint;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 4."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_4: touch_filter_mode_t = 0;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 8."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_8: touch_filter_mode_t = 1;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 16 (Typical value)."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_16: touch_filter_mode_t = 2;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 32."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_32: touch_filter_mode_t = 3;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 64."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_64: touch_filter_mode_t = 4;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 128."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_128: touch_filter_mode_t = 5;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 256."]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_IIR_256: touch_filter_mode_t = 6;
#[doc = "<The filter mode is jitter filter"]
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_JITTER: touch_filter_mode_t = 7;
pub const touch_filter_mode_t_TOUCH_PAD_FILTER_MAX: touch_filter_mode_t = 8;
#[doc = " @brief Touch channel IIR filter coefficient configuration."]
#[doc = " @note On ESP32S2. There is an error in the IIR calculation. The magnitude of the error is twice the filter coefficient."]
#[doc = "       So please select a smaller filter coefficient on the basis of meeting the filtering requirements."]
#[doc = "       Recommended filter coefficient selection `IIR_16`."]
pub type touch_filter_mode_t = c_types::c_uint;
#[doc = "<No filtering of raw data."]
pub const touch_smooth_mode_t_TOUCH_PAD_SMOOTH_OFF: touch_smooth_mode_t = 0;
#[doc = "<Filter the raw data. The coefficient is 2 (Typical value)."]
pub const touch_smooth_mode_t_TOUCH_PAD_SMOOTH_IIR_2: touch_smooth_mode_t = 1;
#[doc = "<Filter the raw data. The coefficient is 4."]
pub const touch_smooth_mode_t_TOUCH_PAD_SMOOTH_IIR_4: touch_smooth_mode_t = 2;
#[doc = "<Filter the raw data. The coefficient is 8."]
pub const touch_smooth_mode_t_TOUCH_PAD_SMOOTH_IIR_8: touch_smooth_mode_t = 3;
pub const touch_smooth_mode_t_TOUCH_PAD_SMOOTH_MAX: touch_smooth_mode_t = 4;
#[doc = " @brief Level of filter applied on the original data against large noise interference."]
#[doc = " @note On ESP32S2. There is an error in the IIR calculation. The magnitude of the error is twice the filter coefficient."]
#[doc = "       So please select a smaller filter coefficient on the basis of meeting the filtering requirements."]
#[doc = "       Recommended filter coefficient selection `IIR_2`."]
pub type touch_smooth_mode_t = c_types::c_uint;
#[doc = " Touch sensor filter configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct touch_filter_config {
    #[doc = "<Set filter mode. The input of the filter is the raw value of touch reading,"]
    #[doc = "and the output of the filter is involved in the judgment of the touch state."]
    pub mode: touch_filter_mode_t,
    #[doc = "<Set debounce count, such as `n`. If the measured values continue to exceed"]
    #[doc = "the threshold for `n+1` times, the touch sensor state changes."]
    #[doc = "Range: 0 ~ 7"]
    pub debounce_cnt: u32,
    #[doc = "<Noise threshold coefficient. Higher = More noise resistance."]
    #[doc = "The actual noise should be less than (noise coefficient * touch threshold)."]
    #[doc = "Range: 0 ~ 3. The coefficient is 0: 4/8;  1: 3/8;   2: 2/8;   3: 1;"]
    pub noise_thr: u32,
    #[doc = "<Set jitter filter step size. Range: 0 ~ 15"]
    pub jitter_step: u32,
    #[doc = "<Level of filter applied on the original data against large noise interference."]
    pub smh_lvl: touch_smooth_mode_t,
}
impl Default for touch_filter_config {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Touch sensor filter configuration"]
pub type touch_filter_config_t = touch_filter_config;
#[doc = " Touch sensor channel sleep configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct touch_pad_sleep_channel_t {
    #[doc = "<Set touch channel number for sleep pad."]
    #[doc = "Only one touch sensor channel is supported in deep sleep mode."]
    #[doc = "If clear the sleep channel, point this pad to `TOUCH_PAD_NUM0`"]
    pub touch_num: touch_pad_t,
    #[doc = "<enable proximity function for sleep pad"]
    pub en_proximity: bool,
}
impl Default for touch_pad_sleep_channel_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gpio_dev_s {
    pub bt_select: u32,
    pub out: gpio_dev_s__bindgen_ty_1,
    pub out_w1ts: gpio_dev_s__bindgen_ty_2,
    pub out_w1tc: gpio_dev_s__bindgen_ty_3,
    pub reserved_10: u32,
    pub reserved_14: u32,
    pub reserved_18: u32,
    pub sdio_select: gpio_dev_s__bindgen_ty_4,
    pub enable: gpio_dev_s__bindgen_ty_5,
    pub enable_w1ts: gpio_dev_s__bindgen_ty_6,
    pub enable_w1tc: gpio_dev_s__bindgen_ty_7,
    pub reserved_2c: u32,
    pub reserved_30: u32,
    pub reserved_34: u32,
    pub strap: gpio_dev_s__bindgen_ty_8,
    pub in_: gpio_dev_s__bindgen_ty_9,
    pub reserved_40: u32,
    pub status: gpio_dev_s__bindgen_ty_10,
    pub status_w1ts: gpio_dev_s__bindgen_ty_11,
    pub status_w1tc: gpio_dev_s__bindgen_ty_12,
    pub reserved_50: u32,
    pub reserved_54: u32,
    pub reserved_58: u32,
    pub pcpu_int: gpio_dev_s__bindgen_ty_13,
    pub pcpu_nmi_int: gpio_dev_s__bindgen_ty_14,
    pub cpusdio_int: gpio_dev_s__bindgen_ty_15,
    pub reserved_68: u32,
    pub reserved_6c: u32,
    pub reserved_70: u32,
    pub pin: [gpio_dev_s__bindgen_ty_16; 26usize],
    pub reserved_dc: u32,
    pub reserved_e0: u32,
    pub reserved_e4: u32,
    pub reserved_e8: u32,
    pub reserved_ec: u32,
    pub reserved_f0: u32,
    pub reserved_f4: u32,
    pub reserved_f8: u32,
    pub reserved_fc: u32,
    pub reserved_100: u32,
    pub reserved_104: u32,
    pub reserved_108: u32,
    pub reserved_10c: u32,
    pub reserved_110: u32,
    pub reserved_114: u32,
    pub reserved_118: u32,
    pub reserved_11c: u32,
    pub reserved_120: u32,
    pub reserved_124: u32,
    pub reserved_128: u32,
    pub reserved_12c: u32,
    pub reserved_130: u32,
    pub reserved_134: u32,
    pub reserved_138: u32,
    pub reserved_13c: u32,
    pub reserved_140: u32,
    pub reserved_144: u32,
    pub reserved_148: u32,
    pub status_next: gpio_dev_s__bindgen_ty_17,
    pub reserved_150: u32,
    pub func_in_sel_cfg: [gpio_dev_s__bindgen_ty_18; 128usize],
    pub reserved_354: u32,
    pub reserved_358: u32,
    pub reserved_35c: u32,
    pub reserved_360: u32,
    pub reserved_364: u32,
    pub reserved_368: u32,
    pub reserved_36c: u32,
    pub reserved_370: u32,
    pub reserved_374: u32,
    pub reserved_378: u32,
    pub reserved_37c: u32,
    pub reserved_380: u32,
    pub reserved_384: u32,
    pub reserved_388: u32,
    pub reserved_38c: u32,
    pub reserved_390: u32,
    pub reserved_394: u32,
    pub reserved_398: u32,
    pub reserved_39c: u32,
    pub reserved_3a0: u32,
    pub reserved_3a4: u32,
    pub reserved_3a8: u32,
    pub reserved_3ac: u32,
    pub reserved_3b0: u32,
    pub reserved_3b4: u32,
    pub reserved_3b8: u32,
    pub reserved_3bc: u32,
    pub reserved_3c0: u32,
    pub reserved_3c4: u32,
    pub reserved_3c8: u32,
    pub reserved_3cc: u32,
    pub reserved_3d0: u32,
    pub reserved_3d4: u32,
    pub reserved_3d8: u32,
    pub reserved_3dc: u32,
    pub reserved_3e0: u32,
    pub reserved_3e4: u32,
    pub reserved_3e8: u32,
    pub reserved_3ec: u32,
    pub reserved_3f0: u32,
    pub reserved_3f4: u32,
    pub reserved_3f8: u32,
    pub reserved_3fc: u32,
    pub reserved_400: u32,
    pub reserved_404: u32,
    pub reserved_408: u32,
    pub reserved_40c: u32,
    pub reserved_410: u32,
    pub reserved_414: u32,
    pub reserved_418: u32,
    pub reserved_41c: u32,
    pub reserved_420: u32,
    pub reserved_424: u32,
    pub reserved_428: u32,
    pub reserved_42c: u32,
    pub reserved_430: u32,
    pub reserved_434: u32,
    pub reserved_438: u32,
    pub reserved_43c: u32,
    pub reserved_440: u32,
    pub reserved_444: u32,
    pub reserved_448: u32,
    pub reserved_44c: u32,
    pub reserved_450: u32,
    pub reserved_454: u32,
    pub reserved_458: u32,
    pub reserved_45c: u32,
    pub reserved_460: u32,
    pub reserved_464: u32,
    pub reserved_468: u32,
    pub reserved_46c: u32,
    pub reserved_470: u32,
    pub reserved_474: u32,
    pub reserved_478: u32,
    pub reserved_47c: u32,
    pub reserved_480: u32,
    pub reserved_484: u32,
    pub reserved_488: u32,
    pub reserved_48c: u32,
    pub reserved_490: u32,
    pub reserved_494: u32,
    pub reserved_498: u32,
    pub reserved_49c: u32,
    pub reserved_4a0: u32,
    pub reserved_4a4: u32,
    pub reserved_4a8: u32,
    pub reserved_4ac: u32,
    pub reserved_4b0: u32,
    pub reserved_4b4: u32,
    pub reserved_4b8: u32,
    pub reserved_4bc: u32,
    pub reserved_4c0: u32,
    pub reserved_4c4: u32,
    pub reserved_4c8: u32,
    pub reserved_4cc: u32,
    pub reserved_4d0: u32,
    pub reserved_4d4: u32,
    pub reserved_4d8: u32,
    pub reserved_4dc: u32,
    pub reserved_4e0: u32,
    pub reserved_4e4: u32,
    pub reserved_4e8: u32,
    pub reserved_4ec: u32,
    pub reserved_4f0: u32,
    pub reserved_4f4: u32,
    pub reserved_4f8: u32,
    pub reserved_4fc: u32,
    pub reserved_500: u32,
    pub reserved_504: u32,
    pub reserved_508: u32,
    pub reserved_50c: u32,
    pub reserved_510: u32,
    pub reserved_514: u32,
    pub reserved_518: u32,
    pub reserved_51c: u32,
    pub reserved_520: u32,
    pub reserved_524: u32,
    pub reserved_528: u32,
    pub reserved_52c: u32,
    pub reserved_530: u32,
    pub reserved_534: u32,
    pub reserved_538: u32,
    pub reserved_53c: u32,
    pub reserved_540: u32,
    pub reserved_544: u32,
    pub reserved_548: u32,
    pub reserved_54c: u32,
    pub reserved_550: u32,
    pub func_out_sel_cfg: [gpio_dev_s__bindgen_ty_19; 26usize],
    pub reserved_5bc: u32,
    pub reserved_5c0: u32,
    pub reserved_5c4: u32,
    pub reserved_5c8: u32,
    pub reserved_5cc: u32,
    pub reserved_5d0: u32,
    pub reserved_5d4: u32,
    pub reserved_5d8: u32,
    pub reserved_5dc: u32,
    pub reserved_5e0: u32,
    pub reserved_5e4: u32,
    pub reserved_5e8: u32,
    pub reserved_5ec: u32,
    pub reserved_5f0: u32,
    pub reserved_5f4: u32,
    pub reserved_5f8: u32,
    pub reserved_5fc: u32,
    pub reserved_600: u32,
    pub reserved_604: u32,
    pub reserved_608: u32,
    pub reserved_60c: u32,
    pub reserved_610: u32,
    pub reserved_614: u32,
    pub reserved_618: u32,
    pub reserved_61c: u32,
    pub reserved_620: u32,
    pub reserved_624: u32,
    pub reserved_628: u32,
    pub clock_gate: gpio_dev_s__bindgen_ty_20,
    pub reserved_630: u32,
    pub reserved_634: u32,
    pub reserved_638: u32,
    pub reserved_63c: u32,
    pub reserved_640: u32,
    pub reserved_644: u32,
    pub reserved_648: u32,
    pub reserved_64c: u32,
    pub reserved_650: u32,
    pub reserved_654: u32,
    pub reserved_658: u32,
    pub reserved_65c: u32,
    pub reserved_660: u32,
    pub reserved_664: u32,
    pub reserved_668: u32,
    pub reserved_66c: u32,
    pub reserved_670: u32,
    pub reserved_674: u32,
    pub reserved_678: u32,
    pub reserved_67c: u32,
    pub reserved_680: u32,
    pub reserved_684: u32,
    pub reserved_688: u32,
    pub reserved_68c: u32,
    pub reserved_690: u32,
    pub reserved_694: u32,
    pub reserved_698: u32,
    pub reserved_69c: u32,
    pub reserved_6a0: u32,
    pub reserved_6a4: u32,
    pub reserved_6a8: u32,
    pub reserved_6ac: u32,
    pub reserved_6b0: u32,
    pub reserved_6b4: u32,
    pub reserved_6b8: u32,
    pub reserved_6bc: u32,
    pub reserved_6c0: u32,
    pub reserved_6c4: u32,
    pub reserved_6c8: u32,
    pub reserved_6cc: u32,
    pub reserved_6d0: u32,
    pub reserved_6d4: u32,
    pub reserved_6d8: u32,
    pub reserved_6dc: u32,
    pub reserved_6e0: u32,
    pub reserved_6e4: u32,
    pub reserved_6e8: u32,
    pub reserved_6ec: u32,
    pub reserved_6f0: u32,
    pub reserved_6f4: u32,
    pub reserved_6f8: u32,
    pub date: gpio_dev_s__bindgen_ty_21,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(data: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let data: u32 = unsafe { ::core::mem::transmute(data) };
            data as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn out_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_out_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(out_w1ts: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let out_w1ts: u32 = unsafe { ::core::mem::transmute(out_w1ts) };
            out_w1ts as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn out_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_out_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(out_w1tc: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let out_w1tc: u32 = unsafe { ::core::mem::transmute(out_w1tc) };
            out_w1tc as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(sel: u32, reserved8: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let sel: u32 = unsafe { ::core::mem::transmute(sel) };
            sel as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(data: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let data: u32 = unsafe { ::core::mem::transmute(data) };
            data as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn enable_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_enable_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enable_w1ts: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let enable_w1ts: u32 = unsafe { ::core::mem::transmute(enable_w1ts) };
            enable_w1ts as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn enable_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_enable_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enable_w1tc: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let enable_w1tc: u32 = unsafe { ::core::mem::transmute(enable_w1tc) };
            enable_w1tc as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn strapping(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_strapping(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(strapping: u32, reserved16: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let strapping: u32 = unsafe { ::core::mem::transmute(strapping) };
            strapping as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(data: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let data: u32 = unsafe { ::core::mem::transmute(data) };
            data as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn intr_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_intr_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(intr_st: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let intr_st: u32 = unsafe { ::core::mem::transmute(intr_st) };
            intr_st as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn status_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_status_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        status_w1ts: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let status_w1ts: u32 = unsafe { ::core::mem::transmute(status_w1ts) };
            status_w1ts as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn status_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_status_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        status_w1tc: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let status_w1tc: u32 = unsafe { ::core::mem::transmute(status_w1tc) };
            status_w1tc as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn intr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_intr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(intr: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let intr: u32 = unsafe { ::core::mem::transmute(intr) };
            intr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn intr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_intr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(intr: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let intr: u32 = unsafe { ::core::mem::transmute(intr) };
            intr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn intr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_intr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(intr: u32, reserved26: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let intr: u32 = unsafe { ::core::mem::transmute(intr) };
            intr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn sync2_bypass(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sync2_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pad_driver(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pad_driver(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sync1_bypass(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sync1_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn config(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_config(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sync2_bypass: u32,
        pad_driver: u32,
        sync1_bypass: u32,
        reserved5: u32,
        int_type: u32,
        wakeup_enable: u32,
        config: u32,
        int_ena: u32,
        reserved18: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let sync2_bypass: u32 = unsafe { ::core::mem::transmute(sync2_bypass) };
            sync2_bypass as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pad_driver: u32 = unsafe { ::core::mem::transmute(pad_driver) };
            pad_driver as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let sync1_bypass: u32 = unsafe { ::core::mem::transmute(sync1_bypass) };
            sync1_bypass as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 3u8, {
            let int_type: u32 = unsafe { ::core::mem::transmute(int_type) };
            int_type as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let wakeup_enable: u32 = unsafe { ::core::mem::transmute(wakeup_enable) };
            wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let config: u32 = unsafe { ::core::mem::transmute(config) };
            config as u64
        });
        __bindgen_bitfield_unit.set(13usize, 5u8, {
            let int_ena: u32 = unsafe { ::core::mem::transmute(int_ena) };
            int_ena as u64
        });
        __bindgen_bitfield_unit.set(18usize, 14u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_17 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_17__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_17__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_17__bindgen_ty_1 {
    #[inline]
    pub fn intr_st_next(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_intr_st_next(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        intr_st_next: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let intr_st_next: u32 = unsafe { ::core::mem::transmute(intr_st_next) };
            intr_st_next as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_18 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_18__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_18__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_18__bindgen_ty_1 {
    #[inline]
    pub fn func_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_func_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_in_inv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sig_in_inv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_in_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sig_in_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_reserved7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        func_sel: u32,
        sig_in_inv: u32,
        sig_in_sel: u32,
        reserved7: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let func_sel: u32 = unsafe { ::core::mem::transmute(func_sel) };
            func_sel as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sig_in_inv: u32 = unsafe { ::core::mem::transmute(sig_in_inv) };
            sig_in_inv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sig_in_sel: u32 = unsafe { ::core::mem::transmute(sig_in_sel) };
            sig_in_sel as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let reserved7: u32 = unsafe { ::core::mem::transmute(reserved7) };
            reserved7 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_19 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_19__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_19__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_19__bindgen_ty_1 {
    #[inline]
    pub fn func_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_func_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn inv_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inv_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oen_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oen_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oen_inv_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oen_inv_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        func_sel: u32,
        inv_sel: u32,
        oen_sel: u32,
        oen_inv_sel: u32,
        reserved11: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let func_sel: u32 = unsafe { ::core::mem::transmute(func_sel) };
            func_sel as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let inv_sel: u32 = unsafe { ::core::mem::transmute(inv_sel) };
            inv_sel as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let oen_sel: u32 = unsafe { ::core::mem::transmute(oen_sel) };
            oen_sel as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let oen_inv_sel: u32 = unsafe { ::core::mem::transmute(oen_inv_sel) };
            oen_inv_sel as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_20 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_20__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_20__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_20__bindgen_ty_1 {
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(clk_en: u32, reserved1: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_dev_s__bindgen_ty_21 {
    pub __bindgen_anon_1: gpio_dev_s__bindgen_ty_21__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_dev_s__bindgen_ty_21__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_dev_s__bindgen_ty_21__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_dev_s__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gpio_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gpio_dev_t = gpio_dev_s;
extern "C" {
    pub static mut GPIO: gpio_dev_t;
}
extern "C" {
    pub static GPIO_PIN_MUX_REG: [u32; 22usize];
}
extern "C" {
    pub static GPIO_HOLD_MASK: [u32; 22usize];
}
pub const gpio_port_t_GPIO_PORT_0: gpio_port_t = 0;
pub const gpio_port_t_GPIO_PORT_MAX: gpio_port_t = 1;
pub type gpio_port_t = c_types::c_uint;
#[doc = "< Use to signal not connected to S/W"]
pub const gpio_num_t_GPIO_NUM_NC: gpio_num_t = -1;
#[doc = "< GPIO0, input and output"]
pub const gpio_num_t_GPIO_NUM_0: gpio_num_t = 0;
#[doc = "< GPIO1, input and output"]
pub const gpio_num_t_GPIO_NUM_1: gpio_num_t = 1;
#[doc = "< GPIO2, input and output"]
pub const gpio_num_t_GPIO_NUM_2: gpio_num_t = 2;
#[doc = "< GPIO3, input and output"]
pub const gpio_num_t_GPIO_NUM_3: gpio_num_t = 3;
#[doc = "< GPIO4, input and output"]
pub const gpio_num_t_GPIO_NUM_4: gpio_num_t = 4;
#[doc = "< GPIO5, input and output"]
pub const gpio_num_t_GPIO_NUM_5: gpio_num_t = 5;
#[doc = "< GPIO6, input and output"]
pub const gpio_num_t_GPIO_NUM_6: gpio_num_t = 6;
#[doc = "< GPIO7, input and output"]
pub const gpio_num_t_GPIO_NUM_7: gpio_num_t = 7;
#[doc = "< GPIO8, input and output"]
pub const gpio_num_t_GPIO_NUM_8: gpio_num_t = 8;
#[doc = "< GPIO9, input and output"]
pub const gpio_num_t_GPIO_NUM_9: gpio_num_t = 9;
#[doc = "< GPIO10, input and output"]
pub const gpio_num_t_GPIO_NUM_10: gpio_num_t = 10;
#[doc = "< GPIO11, input and output"]
pub const gpio_num_t_GPIO_NUM_11: gpio_num_t = 11;
#[doc = "< GPIO12, input and output"]
pub const gpio_num_t_GPIO_NUM_12: gpio_num_t = 12;
#[doc = "< GPIO13, input and output"]
pub const gpio_num_t_GPIO_NUM_13: gpio_num_t = 13;
#[doc = "< GPIO14, input and output"]
pub const gpio_num_t_GPIO_NUM_14: gpio_num_t = 14;
#[doc = "< GPIO15, input and output"]
pub const gpio_num_t_GPIO_NUM_15: gpio_num_t = 15;
#[doc = "< GPIO16, input and output"]
pub const gpio_num_t_GPIO_NUM_16: gpio_num_t = 16;
#[doc = "< GPIO17, input and output"]
pub const gpio_num_t_GPIO_NUM_17: gpio_num_t = 17;
#[doc = "< GPIO18, input and output"]
pub const gpio_num_t_GPIO_NUM_18: gpio_num_t = 18;
#[doc = "< GPIO19, input and output"]
pub const gpio_num_t_GPIO_NUM_19: gpio_num_t = 19;
#[doc = "< GPIO20, input and output"]
pub const gpio_num_t_GPIO_NUM_20: gpio_num_t = 20;
#[doc = "< GPIO21, input and output"]
pub const gpio_num_t_GPIO_NUM_21: gpio_num_t = 21;
pub const gpio_num_t_GPIO_NUM_MAX: gpio_num_t = 22;
pub type gpio_num_t = c_types::c_int;
#[doc = "< Disable GPIO interrupt"]
pub const gpio_int_type_t_GPIO_INTR_DISABLE: gpio_int_type_t = 0;
#[doc = "< GPIO interrupt type : rising edge"]
pub const gpio_int_type_t_GPIO_INTR_POSEDGE: gpio_int_type_t = 1;
#[doc = "< GPIO interrupt type : falling edge"]
pub const gpio_int_type_t_GPIO_INTR_NEGEDGE: gpio_int_type_t = 2;
#[doc = "< GPIO interrupt type : both rising and falling edge"]
pub const gpio_int_type_t_GPIO_INTR_ANYEDGE: gpio_int_type_t = 3;
#[doc = "< GPIO interrupt type : input low level trigger"]
pub const gpio_int_type_t_GPIO_INTR_LOW_LEVEL: gpio_int_type_t = 4;
#[doc = "< GPIO interrupt type : input high level trigger"]
pub const gpio_int_type_t_GPIO_INTR_HIGH_LEVEL: gpio_int_type_t = 5;
pub const gpio_int_type_t_GPIO_INTR_MAX: gpio_int_type_t = 6;
pub type gpio_int_type_t = c_types::c_uint;
#[doc = "< GPIO mode : disable input and output"]
pub const gpio_mode_t_GPIO_MODE_DISABLE: gpio_mode_t = 0;
#[doc = "< GPIO mode : input only"]
pub const gpio_mode_t_GPIO_MODE_INPUT: gpio_mode_t = 1;
#[doc = "< GPIO mode : output only mode"]
pub const gpio_mode_t_GPIO_MODE_OUTPUT: gpio_mode_t = 2;
#[doc = "< GPIO mode : output only with open-drain mode"]
pub const gpio_mode_t_GPIO_MODE_OUTPUT_OD: gpio_mode_t = 6;
#[doc = "< GPIO mode : output and input with open-drain mode"]
pub const gpio_mode_t_GPIO_MODE_INPUT_OUTPUT_OD: gpio_mode_t = 7;
#[doc = "< GPIO mode : output and input mode"]
pub const gpio_mode_t_GPIO_MODE_INPUT_OUTPUT: gpio_mode_t = 3;
#[doc = " @endcond"]
pub type gpio_mode_t = c_types::c_uint;
#[doc = "< Disable GPIO pull-up resistor"]
pub const gpio_pullup_t_GPIO_PULLUP_DISABLE: gpio_pullup_t = 0;
#[doc = "< Enable GPIO pull-up resistor"]
pub const gpio_pullup_t_GPIO_PULLUP_ENABLE: gpio_pullup_t = 1;
pub type gpio_pullup_t = c_types::c_uint;
#[doc = "< Disable GPIO pull-down resistor"]
pub const gpio_pulldown_t_GPIO_PULLDOWN_DISABLE: gpio_pulldown_t = 0;
#[doc = "< Enable GPIO pull-down resistor"]
pub const gpio_pulldown_t_GPIO_PULLDOWN_ENABLE: gpio_pulldown_t = 1;
pub type gpio_pulldown_t = c_types::c_uint;
#[doc = " @brief Configuration parameters of GPIO pad for gpio_config function"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gpio_config_t {
    #[doc = "< GPIO pin: set with bit mask, each bit maps to a GPIO"]
    pub pin_bit_mask: u64,
    #[doc = "< GPIO mode: set input/output mode"]
    pub mode: gpio_mode_t,
    #[doc = "< GPIO pull-up"]
    pub pull_up_en: gpio_pullup_t,
    #[doc = "< GPIO pull-down"]
    pub pull_down_en: gpio_pulldown_t,
    #[doc = "< GPIO interrupt type"]
    pub intr_type: gpio_int_type_t,
}
impl Default for gpio_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< Pad pull up"]
pub const gpio_pull_mode_t_GPIO_PULLUP_ONLY: gpio_pull_mode_t = 0;
#[doc = "< Pad pull down"]
pub const gpio_pull_mode_t_GPIO_PULLDOWN_ONLY: gpio_pull_mode_t = 1;
#[doc = "< Pad pull up + pull down"]
pub const gpio_pull_mode_t_GPIO_PULLUP_PULLDOWN: gpio_pull_mode_t = 2;
#[doc = "< Pad floating"]
pub const gpio_pull_mode_t_GPIO_FLOATING: gpio_pull_mode_t = 3;
pub type gpio_pull_mode_t = c_types::c_uint;
#[doc = "< Pad drive capability: weak"]
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_0: gpio_drive_cap_t = 0;
#[doc = "< Pad drive capability: stronger"]
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_1: gpio_drive_cap_t = 1;
#[doc = "< Pad drive capability: medium"]
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_2: gpio_drive_cap_t = 2;
#[doc = "< Pad drive capability: medium"]
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_DEFAULT: gpio_drive_cap_t = 2;
#[doc = "< Pad drive capability: strongest"]
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_3: gpio_drive_cap_t = 3;
pub const gpio_drive_cap_t_GPIO_DRIVE_CAP_MAX: gpio_drive_cap_t = 4;
pub type gpio_drive_cap_t = c_types::c_uint;
pub type gpio_isr_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>;
#[doc = "!< Wake the chip when all selected GPIOs go low"]
pub const esp_sleep_ext1_wakeup_mode_t_ESP_EXT1_WAKEUP_ALL_LOW: esp_sleep_ext1_wakeup_mode_t = 0;
#[doc = "!< Wake the chip when any of the selected GPIOs go high"]
pub const esp_sleep_ext1_wakeup_mode_t_ESP_EXT1_WAKEUP_ANY_HIGH: esp_sleep_ext1_wakeup_mode_t = 1;
#[doc = " @brief Logic function used for EXT1 wakeup mode."]
pub type esp_sleep_ext1_wakeup_mode_t = c_types::c_uint;
pub const esp_deepsleep_gpio_wake_up_mode_t_ESP_GPIO_WAKEUP_GPIO_LOW:
    esp_deepsleep_gpio_wake_up_mode_t = 0;
pub const esp_deepsleep_gpio_wake_up_mode_t_ESP_GPIO_WAKEUP_GPIO_HIGH:
    esp_deepsleep_gpio_wake_up_mode_t = 1;
pub type esp_deepsleep_gpio_wake_up_mode_t = c_types::c_uint;
#[doc = "!< RTC IO, sensors and ULP co-processor"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_RTC_PERIPH: esp_sleep_pd_domain_t = 0;
#[doc = "!< RTC slow memory"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_RTC_SLOW_MEM: esp_sleep_pd_domain_t = 1;
#[doc = "!< RTC fast memory"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_RTC_FAST_MEM: esp_sleep_pd_domain_t = 2;
#[doc = "!< XTAL oscillator"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_XTAL: esp_sleep_pd_domain_t = 3;
#[doc = "!< CPU core"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_CPU: esp_sleep_pd_domain_t = 4;
#[doc = "!< Internal 8M oscillator"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_RTC8M: esp_sleep_pd_domain_t = 5;
#[doc = "!< VDD_SDIO"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_VDDSDIO: esp_sleep_pd_domain_t = 6;
#[doc = "!< Number of domains"]
pub const esp_sleep_pd_domain_t_ESP_PD_DOMAIN_MAX: esp_sleep_pd_domain_t = 7;
#[doc = " @brief Power domains which can be powered down in sleep mode"]
pub type esp_sleep_pd_domain_t = c_types::c_uint;
#[doc = "!< Power down the power domain in sleep mode"]
pub const esp_sleep_pd_option_t_ESP_PD_OPTION_OFF: esp_sleep_pd_option_t = 0;
#[doc = "!< Keep power domain enabled during sleep mode"]
pub const esp_sleep_pd_option_t_ESP_PD_OPTION_ON: esp_sleep_pd_option_t = 1;
#[doc = "!< Keep power domain enabled in sleep mode, if it is needed by one of the wakeup options. Otherwise power it down."]
pub const esp_sleep_pd_option_t_ESP_PD_OPTION_AUTO: esp_sleep_pd_option_t = 2;
#[doc = " @brief Power down options"]
pub type esp_sleep_pd_option_t = c_types::c_uint;
#[doc = "!< In case of deep sleep, reset was not caused by exit from deep sleep"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_UNDEFINED: esp_sleep_source_t = 0;
#[doc = "!< Not a wakeup cause, used to disable all wakeup sources with esp_sleep_disable_wakeup_source"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_ALL: esp_sleep_source_t = 1;
#[doc = "!< Wakeup caused by external signal using RTC_IO"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_EXT0: esp_sleep_source_t = 2;
#[doc = "!< Wakeup caused by external signal using RTC_CNTL"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_EXT1: esp_sleep_source_t = 3;
#[doc = "!< Wakeup caused by timer"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_TIMER: esp_sleep_source_t = 4;
#[doc = "!< Wakeup caused by touchpad"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_TOUCHPAD: esp_sleep_source_t = 5;
#[doc = "!< Wakeup caused by ULP program"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_ULP: esp_sleep_source_t = 6;
#[doc = "!< Wakeup caused by GPIO (light sleep only)"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_GPIO: esp_sleep_source_t = 7;
#[doc = "!< Wakeup caused by UART (light sleep only)"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_UART: esp_sleep_source_t = 8;
#[doc = "!< Wakeup caused by WIFI (light sleep only)"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_WIFI: esp_sleep_source_t = 9;
#[doc = "!< Wakeup caused by COCPU int"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_COCPU: esp_sleep_source_t = 10;
#[doc = "!< Wakeup caused by COCPU crash"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_COCPU_TRAP_TRIG: esp_sleep_source_t = 11;
#[doc = "!< Wakeup caused by BT (light sleep only)"]
pub const esp_sleep_source_t_ESP_SLEEP_WAKEUP_BT: esp_sleep_source_t = 12;
#[doc = " @brief Sleep wakeup cause"]
pub type esp_sleep_source_t = c_types::c_uint;
#[doc = " @brief Sleep wakeup cause"]
pub use self::esp_sleep_source_t as esp_sleep_wakeup_cause_t;
extern "C" {
    #[doc = " @brief Disable wakeup source"]
    #[doc = ""]
    #[doc = " This function is used to deactivate wake up trigger for source"]
    #[doc = " defined as parameter of the function."]
    #[doc = ""]
    #[doc = " @note This function does not modify wake up configuration in RTC."]
    #[doc = "       It will be performed in esp_sleep_start function."]
    #[doc = ""]
    #[doc = " See docs/sleep-modes.rst for details."]
    #[doc = ""]
    #[doc = " @param source - number of source to disable of type esp_sleep_source_t"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if trigger was not active"]
    pub fn esp_sleep_disable_wakeup_source(source: esp_sleep_source_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable wakeup by timer"]
    #[doc = " @param time_in_us  time before wakeup, in microseconds"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if value is out of range (TBD)"]
    pub fn esp_sleep_enable_timer_wakeup(time_in_us: u64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns true if a GPIO number is valid for use as wakeup source."]
    #[doc = ""]
    #[doc = " @note For SoCs with RTC IO capability, this can be any valid RTC IO input pin."]
    #[doc = ""]
    #[doc = " @param gpio_num Number of the GPIO to test for wakeup source capability"]
    #[doc = ""]
    #[doc = " @return True if this GPIO number will be accepted as a sleep wakeup source."]
    pub fn esp_sleep_is_valid_wakeup_gpio(gpio_num: gpio_num_t) -> bool;
}
extern "C" {
    #[doc = " @brief Enable wakeup using specific gpio pins"]
    #[doc = ""]
    #[doc = " This function enables an IO pin to wake the chip from deep sleep"]
    #[doc = ""]
    #[doc = " @note This function does not modify pin configuration. The pins are"]
    #[doc = "       configured in esp_sleep_start, immediately before"]
    #[doc = "       entering sleep mode."]
    #[doc = ""]
    #[doc = " @note You don't need to care to pull-up or pull-down before using this"]
    #[doc = "       function, because this will be done in esp_sleep_start based on"]
    #[doc = "       param mask you give. BTW, when you use low level to wake up the"]
    #[doc = "       chip, we strongly recommand you to add external registors(pull-up)."]
    #[doc = ""]
    #[doc = " @param gpio_pin_mask  Bit mask of GPIO numbers which will cause wakeup. Only GPIOs"]
    #[doc = "              which are have RTC functionality can be used in this bit map."]
    #[doc = " @param mode Select logic function used to determine wakeup condition:"]
    #[doc = "            - ESP_GPIO_WAKEUP_GPIO_LOW: wake up when the gpio turn to low."]
    #[doc = "            - ESP_GPIO_WAKEUP_GPIO_HIGH: wake up when the gpio turn to high."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if gpio num is more than 5 or mode is invalid,"]
    pub fn esp_deep_sleep_enable_gpio_wakeup(
        gpio_pin_mask: u64,
        mode: esp_deepsleep_gpio_wake_up_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable wakeup from light sleep using GPIOs"]
    #[doc = ""]
    #[doc = " Each GPIO supports wakeup function, which can be triggered on either low level"]
    #[doc = " or high level. Unlike EXT0 and EXT1 wakeup sources, this method can be used"]
    #[doc = " both for all IOs: RTC IOs and digital IOs. It can only be used to wakeup from"]
    #[doc = " light sleep though."]
    #[doc = ""]
    #[doc = " To enable wakeup, first call gpio_wakeup_enable, specifying gpio number and"]
    #[doc = " wakeup level, for each GPIO which is used for wakeup."]
    #[doc = " Then call this function to enable wakeup feature."]
    #[doc = ""]
    #[doc = " @note In revisions 0 and 1 of the ESP32, GPIO wakeup source"]
    #[doc = "       can not be used together with touch or ULP wakeup sources."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if wakeup triggers conflict"]
    pub fn esp_sleep_enable_gpio_wakeup() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable wakeup from light sleep using UART"]
    #[doc = ""]
    #[doc = " Use uart_set_wakeup_threshold function to configure UART wakeup threshold."]
    #[doc = ""]
    #[doc = " Wakeup from light sleep takes some time, so not every character sent"]
    #[doc = " to the UART can be received by the application."]
    #[doc = ""]
    #[doc = " @note ESP32 does not support wakeup from UART2."]
    #[doc = ""]
    #[doc = " @param uart_num  UART port to wake up from"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if wakeup from given UART is not supported"]
    pub fn esp_sleep_enable_uart_wakeup(uart_num: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable wakeup by WiFi MAC"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    pub fn esp_sleep_enable_wifi_wakeup() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable wakeup by WiFi MAC"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    pub fn esp_sleep_disable_wifi_wakeup() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the bit mask of GPIOs which caused wakeup (ext1)"]
    #[doc = ""]
    #[doc = " If wakeup was caused by another source, this function will return 0."]
    #[doc = ""]
    #[doc = " @return bit mask, if GPIOn caused wakeup, BIT(n) will be set"]
    pub fn esp_sleep_get_ext1_wakeup_status() -> u64;
}
extern "C" {
    #[doc = " @brief Get the bit mask of GPIOs which caused wakeup (gpio)"]
    #[doc = ""]
    #[doc = " If wakeup was caused by another source, this function will return 0."]
    #[doc = ""]
    #[doc = " @return bit mask, if GPIOn caused wakeup, BIT(n) will be set"]
    pub fn esp_sleep_get_gpio_wakeup_status() -> u64;
}
extern "C" {
    #[doc = " @brief Set power down mode for an RTC power domain in sleep mode"]
    #[doc = ""]
    #[doc = " If not set set using this API, all power domains default to ESP_PD_OPTION_AUTO."]
    #[doc = ""]
    #[doc = " @param domain  power domain to configure"]
    #[doc = " @param option  power down option (ESP_PD_OPTION_OFF, ESP_PD_OPTION_ON, or ESP_PD_OPTION_AUTO)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if either of the arguments is out of range"]
    pub fn esp_sleep_pd_config(
        domain: esp_sleep_pd_domain_t,
        option: esp_sleep_pd_option_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enter deep sleep with the configured wakeup options"]
    #[doc = ""]
    #[doc = " This function does not return."]
    pub fn esp_deep_sleep_start();
}
extern "C" {
    #[doc = " @brief Enter light sleep with the configured wakeup options"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success (returned after wakeup)"]
    #[doc = "  - ESP_ERR_INVALID_STATE if WiFi or BT is not stopped"]
    pub fn esp_light_sleep_start() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enter deep-sleep mode"]
    #[doc = ""]
    #[doc = " The device will automatically wake up after the deep-sleep time"]
    #[doc = " Upon waking up, the device calls deep sleep wake stub, and then proceeds"]
    #[doc = " to load application."]
    #[doc = ""]
    #[doc = " Call to this function is equivalent to a call to esp_deep_sleep_enable_timer_wakeup"]
    #[doc = " followed by a call to esp_deep_sleep_start."]
    #[doc = ""]
    #[doc = " esp_deep_sleep does not shut down WiFi, BT, and higher level protocol"]
    #[doc = " connections gracefully."]
    #[doc = " Make sure relevant WiFi and BT stack functions are called to close any"]
    #[doc = " connections and deinitialize the peripherals. These include:"]
    #[doc = "     - esp_bluedroid_disable"]
    #[doc = "     - esp_bt_controller_disable"]
    #[doc = "     - esp_wifi_stop"]
    #[doc = ""]
    #[doc = " This function does not return."]
    #[doc = ""]
    #[doc = " @note The device will wake up immediately if the deep-sleep time is set to 0"]
    #[doc = ""]
    #[doc = " @param time_in_us  deep-sleep time, unit: microsecond"]
    pub fn esp_deep_sleep(time_in_us: u64);
}
extern "C" {
    #[doc = " @brief Get the wakeup source which caused wakeup from sleep"]
    #[doc = ""]
    #[doc = " @return cause of wake up from last sleep (deep sleep or light sleep)"]
    pub fn esp_sleep_get_wakeup_cause() -> esp_sleep_wakeup_cause_t;
}
extern "C" {
    #[doc = " @brief Default stub to run on wake from deep sleep."]
    #[doc = ""]
    #[doc = " Allows for executing code immediately on wake from sleep, before"]
    #[doc = " the software bootloader or ESP-IDF app has started up."]
    #[doc = ""]
    #[doc = " This function is weak-linked, so you can implement your own version"]
    #[doc = " to run code immediately when the chip wakes from"]
    #[doc = " sleep."]
    #[doc = ""]
    #[doc = " See docs/deep-sleep-stub.rst for details."]
    pub fn esp_wake_deep_sleep();
}
#[doc = " @brief Function type for stub to run on wake from sleep."]
#[doc = ""]
pub type esp_deep_sleep_wake_stub_fn_t = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[doc = " @brief Install a new stub at runtime to run on wake from deep sleep"]
    #[doc = ""]
    #[doc = " If implementing esp_wake_deep_sleep() then it is not necessary to"]
    #[doc = " call this function."]
    #[doc = ""]
    #[doc = " However, it is possible to call this function to substitute a"]
    #[doc = " different deep sleep stub. Any function used as a deep sleep stub"]
    #[doc = " must be marked RTC_IRAM_ATTR, and must obey the same rules given"]
    #[doc = " for esp_wake_deep_sleep()."]
    pub fn esp_set_deep_sleep_wake_stub(new_stub: esp_deep_sleep_wake_stub_fn_t);
}
extern "C" {
    #[doc = " @brief Get current wake from deep sleep stub"]
    #[doc = " @return Return current wake from deep sleep stub, or NULL if"]
    #[doc = "         no stub is installed."]
    pub fn esp_get_deep_sleep_wake_stub() -> esp_deep_sleep_wake_stub_fn_t;
}
extern "C" {
    #[doc = "  @brief The default esp-idf-provided esp_wake_deep_sleep() stub."]
    #[doc = ""]
    #[doc = "  See docs/deep-sleep-stub.rst for details."]
    pub fn esp_default_wake_deep_sleep();
}
extern "C" {
    #[doc = " @brief Disable logging from the ROM code after deep sleep."]
    #[doc = ""]
    #[doc = " Using LSB of RTC_STORE4."]
    pub fn esp_deep_sleep_disable_rom_logging();
}
extern "C" {
    #[doc = " @brief CPU Power down low-level initialize"]
    #[doc = ""]
    #[doc = " @param enable  enable or disable CPU power down during light sleep"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM not enough retention memory"]
    pub fn esp_sleep_cpu_pd_low_init(enable: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure to isolate all GPIO pins in sleep state"]
    pub fn esp_sleep_config_gpio_isolate();
}
extern "C" {
    #[doc = " @brief Enable or disable GPIO pins status switching between slept status and waked status."]
    #[doc = " @param enable decide whether to switch status or not"]
    pub fn esp_sleep_enable_gpio_switch(enable: bool);
}
pub type TaskFunction_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>;
extern "C" {
    #[doc = " @brief Configure CPU to disable access to invalid memory regions"]
    #[doc = ""]
    pub fn esp_cpu_configure_region_protection();
}
extern "C" {
    pub fn compare_and_set_extram(addr: *mut u32, compare: u32, set: *mut u32);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spinlock_t {
    pub owner: u32,
    pub count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_timer {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque type representing a single esp_timer"]
pub type esp_timer_handle_t = *mut esp_timer;
#[doc = " @brief Timer callback function type"]
#[doc = " @param arg pointer to opaque user-specific data"]
pub type esp_timer_cb_t = ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void)>;
#[doc = "!< Callback is called from timer task"]
pub const esp_timer_dispatch_t_ESP_TIMER_TASK: esp_timer_dispatch_t = 0;
#[doc = "!< Count of the methods for dispatching timer callback"]
pub const esp_timer_dispatch_t_ESP_TIMER_MAX: esp_timer_dispatch_t = 1;
#[doc = " @brief Method for dispatching timer callback"]
pub type esp_timer_dispatch_t = c_types::c_uint;
#[doc = " @brief Timer configuration passed to esp_timer_create"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_timer_create_args_t {
    #[doc = "!< Function to call when timer expires"]
    pub callback: esp_timer_cb_t,
    #[doc = "!< Argument to pass to the callback"]
    pub arg: *mut c_types::c_void,
    #[doc = "!< Call the callback from task or from ISR"]
    pub dispatch_method: esp_timer_dispatch_t,
    #[doc = "!< Timer name, used in esp_timer_dump function"]
    pub name: *const c_types::c_char,
    #[doc = "!< Skip unhandled events for periodic timers"]
    pub skip_unhandled_events: bool,
}
impl Default for esp_timer_create_args_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Minimal initialization of esp_timer"]
    #[doc = ""]
    #[doc = " @note This function is called from startup code. Applications do not need"]
    #[doc = " to call this function before using other esp_timer APIs."]
    #[doc = ""]
    #[doc = " This function can be called very early in startup process, after this call"]
    #[doc = " only esp_timer_get_time function can be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    pub fn esp_timer_early_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize esp_timer library"]
    #[doc = ""]
    #[doc = " @note This function is called from startup code. Applications do not need"]
    #[doc = " to call this function before using other esp_timer APIs."]
    #[doc = " Before calling this function, esp_timer_early_init must be called by the"]
    #[doc = " startup code."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if allocation has failed"]
    #[doc = "      - ESP_ERR_INVALID_STATE if already initialized"]
    #[doc = "      - other errors from interrupt allocator"]
    pub fn esp_timer_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief De-initialize esp_timer library"]
    #[doc = ""]
    #[doc = " @note Normally this function should not be called from applications"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if not yet initialized"]
    pub fn esp_timer_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Create an esp_timer instance"]
    #[doc = ""]
    #[doc = " @note When done using the timer, delete it with esp_timer_delete function."]
    #[doc = ""]
    #[doc = " @param create_args   Pointer to a structure with timer creation arguments."]
    #[doc = "                      Not saved by the library, can be allocated on the stack."]
    #[doc = " @param[out] out_handle  Output, pointer to esp_timer_handle_t variable which"]
    #[doc = "                         will hold the created timer handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if some of the create_args are not valid"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_timer library is not initialized yet"]
    #[doc = "      - ESP_ERR_NO_MEM if memory allocation fails"]
    pub fn esp_timer_create(
        create_args: *const esp_timer_create_args_t,
        out_handle: *mut esp_timer_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start one-shot timer"]
    #[doc = ""]
    #[doc = " Timer should not be running when this function is called."]
    #[doc = ""]
    #[doc = " @param timer timer handle created using esp_timer_create"]
    #[doc = " @param timeout_us timer timeout, in microseconds relative to the current moment"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the handle is invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE if the timer is already running"]
    pub fn esp_timer_start_once(timer: esp_timer_handle_t, timeout_us: u64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start a periodic timer"]
    #[doc = ""]
    #[doc = " Timer should not be running when this function is called. This function will"]
    #[doc = " start the timer which will trigger every 'period' microseconds."]
    #[doc = ""]
    #[doc = " @param timer timer handle created using esp_timer_create"]
    #[doc = " @param period timer period, in microseconds"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the handle is invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE if the timer is already running"]
    pub fn esp_timer_start_periodic(timer: esp_timer_handle_t, period: u64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stop the timer"]
    #[doc = ""]
    #[doc = " This function stops the timer previously started using esp_timer_start_once"]
    #[doc = " or esp_timer_start_periodic."]
    #[doc = ""]
    #[doc = " @param timer timer handle created using esp_timer_create"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if the timer is not running"]
    pub fn esp_timer_stop(timer: esp_timer_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete an esp_timer instance"]
    #[doc = ""]
    #[doc = " The timer must be stopped before deleting. A one-shot timer which has expired"]
    #[doc = " does not need to be stopped."]
    #[doc = ""]
    #[doc = " @param timer timer handle allocated using esp_timer_create"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if the timer is running"]
    pub fn esp_timer_delete(timer: esp_timer_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get time in microseconds since boot"]
    #[doc = " @return number of microseconds since underlying timer has been started"]
    pub fn esp_timer_get_time() -> i64;
}
extern "C" {
    #[doc = " @brief Get the timestamp when the next timeout is expected to occur"]
    #[doc = " @return Timestamp of the nearest timer event, in microseconds."]
    #[doc = "         The timebase is the same as for the values returned by esp_timer_get_time."]
    pub fn esp_timer_get_next_alarm() -> i64;
}
extern "C" {
    #[doc = " @brief Get the timestamp when the next timeout is expected to occur skipping those which have skip_unhandled_events flag"]
    #[doc = " @return Timestamp of the nearest timer event, in microseconds."]
    #[doc = "         The timebase is the same as for the values returned by esp_timer_get_time."]
    pub fn esp_timer_get_next_alarm_for_wake_up() -> i64;
}
extern "C" {
    #[doc = " @brief Dump the list of timers to a stream"]
    #[doc = ""]
    #[doc = " If CONFIG_ESP_TIMER_PROFILING option is enabled, this prints the list of all"]
    #[doc = " the existing timers. Otherwise, only the list active timers is printed."]
    #[doc = ""]
    #[doc = " The format is:"]
    #[doc = ""]
    #[doc = "   name  period  alarm  times_armed  times_triggered  total_callback_run_time"]
    #[doc = ""]
    #[doc = " where:"]
    #[doc = ""]
    #[doc = " name — timer name (if CONFIG_ESP_TIMER_PROFILING is defined), or timer pointer"]
    #[doc = " period — period of timer, in microseconds, or 0 for one-shot timer"]
    #[doc = " alarm - time of the next alarm, in microseconds since boot, or 0 if the timer"]
    #[doc = "         is not started"]
    #[doc = ""]
    #[doc = " The following fields are printed if CONFIG_ESP_TIMER_PROFILING is defined:"]
    #[doc = ""]
    #[doc = " times_armed — number of times the timer was armed via esp_timer_start_X"]
    #[doc = " times_triggered - number of times the callback was called"]
    #[doc = " total_callback_run_time - total time taken by callback to execute, across all calls"]
    #[doc = ""]
    #[doc = " @param stream stream (such as stdout) to dump the information to"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if can not allocate temporary buffer for the output"]
    pub fn esp_timer_dump(stream: *mut FILE) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns status of a timer, active or not"]
    #[doc = ""]
    #[doc = " This function is used to identify if the timer is still active or not."]
    #[doc = ""]
    #[doc = " @param timer timer handle created using esp_timer_create"]
    #[doc = " @return"]
    #[doc = "      - 1 if timer is still active"]
    #[doc = "      - 0 if timer is not active."]
    pub fn esp_timer_is_active(timer: esp_timer_handle_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multi_heap_info {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque handle to a registered heap"]
pub type multi_heap_handle_t = *mut multi_heap_info;
extern "C" {
    #[doc = " @brief allocate a chunk of memory with specific alignment"]
    #[doc = ""]
    #[doc = " @param heap  Handle to a registered heap."]
    #[doc = " @param size  size in bytes of memory chunk"]
    #[doc = " @param alignment  how the memory must be aligned"]
    #[doc = ""]
    #[doc = " @return pointer to the memory allocated, NULL on failure"]
    pub fn multi_heap_aligned_alloc(
        heap: multi_heap_handle_t,
        size: size_t,
        alignment: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief malloc() a buffer in a given heap"]
    #[doc = ""]
    #[doc = " Semantics are the same as standard malloc(), only the returned buffer will be allocated in the specified heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param size Size of desired buffer."]
    #[doc = ""]
    #[doc = " @return Pointer to new memory, or NULL if allocation fails."]
    pub fn multi_heap_malloc(heap: multi_heap_handle_t, size: size_t) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief free() a buffer aligned in a given heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param p NULL, or a pointer previously returned from multi_heap_aligned_alloc() for the same heap."]
    #[doc = " @note This function is deprecated, consider using  multi_heap_free() instead"]
    pub fn multi_heap_aligned_free(heap: multi_heap_handle_t, p: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief free() a buffer in a given heap."]
    #[doc = ""]
    #[doc = " Semantics are the same as standard free(), only the argument 'p' must be NULL or have been allocated in the specified heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param p NULL, or a pointer previously returned from multi_heap_malloc() or multi_heap_realloc() for the same heap."]
    pub fn multi_heap_free(heap: multi_heap_handle_t, p: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief realloc() a buffer in a given heap."]
    #[doc = ""]
    #[doc = " Semantics are the same as standard realloc(), only the argument 'p' must be NULL or have been allocated in the specified heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param p NULL, or a pointer previously returned from multi_heap_malloc() or multi_heap_realloc() for the same heap."]
    #[doc = " @param size Desired new size for buffer."]
    #[doc = ""]
    #[doc = " @return New buffer of 'size' containing contents of 'p', or NULL if reallocation failed."]
    pub fn multi_heap_realloc(
        heap: multi_heap_handle_t,
        p: *mut c_types::c_void,
        size: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Return the size that a particular pointer was allocated with."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param p Pointer, must have been previously returned from multi_heap_malloc() or multi_heap_realloc() for the same heap."]
    #[doc = ""]
    #[doc = " @return Size of the memory allocated at this block. May be more than the original size argument, due"]
    #[doc = " to padding and minimum block sizes."]
    pub fn multi_heap_get_allocated_size(
        heap: multi_heap_handle_t,
        p: *mut c_types::c_void,
    ) -> size_t;
}
extern "C" {
    #[doc = " @brief Register a new heap for use"]
    #[doc = ""]
    #[doc = " This function initialises a heap at the specified address, and returns a handle for future heap operations."]
    #[doc = ""]
    #[doc = " There is no equivalent function for deregistering a heap - if all blocks in the heap are free, you can immediately start using the memory for other purposes."]
    #[doc = ""]
    #[doc = " @param start Start address of the memory to use for a new heap."]
    #[doc = " @param size Size (in bytes) of the new heap."]
    #[doc = ""]
    #[doc = " @return Handle of a new heap ready for use, or NULL if the heap region was too small to be initialised."]
    pub fn multi_heap_register(start: *mut c_types::c_void, size: size_t) -> multi_heap_handle_t;
}
extern "C" {
    #[doc = " @brief Associate a private lock pointer with a heap"]
    #[doc = ""]
    #[doc = " The lock argument is supplied to the MULTI_HEAP_LOCK() and MULTI_HEAP_UNLOCK() macros, defined in multi_heap_platform.h."]
    #[doc = ""]
    #[doc = " The lock in question must be recursive."]
    #[doc = ""]
    #[doc = " When the heap is first registered, the associated lock is NULL."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param lock Optional pointer to a locking structure to associate with this heap."]
    pub fn multi_heap_set_lock(heap: multi_heap_handle_t, lock: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Dump heap information to stdout"]
    #[doc = ""]
    #[doc = " For debugging purposes, this function dumps information about every block in the heap to stdout."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    pub fn multi_heap_dump(heap: multi_heap_handle_t);
}
extern "C" {
    #[doc = " @brief Check heap integrity"]
    #[doc = ""]
    #[doc = " Walks the heap and checks all heap data structures are valid. If any errors are detected, an error-specific message"]
    #[doc = " can be optionally printed to stderr. Print behaviour can be overriden at compile time by defining"]
    #[doc = " MULTI_CHECK_FAIL_PRINTF in multi_heap_platform.h."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param print_errors If true, errors will be printed to stderr."]
    #[doc = " @return true if heap is valid, false otherwise."]
    pub fn multi_heap_check(heap: multi_heap_handle_t, print_errors: bool) -> bool;
}
extern "C" {
    #[doc = " @brief Return free heap size"]
    #[doc = ""]
    #[doc = " Returns the number of bytes available in the heap."]
    #[doc = ""]
    #[doc = " Equivalent to the total_free_bytes member returned by multi_heap_get_heap_info()."]
    #[doc = ""]
    #[doc = " Note that the heap may be fragmented, so the actual maximum size for a single malloc() may be lower. To know this"]
    #[doc = " size, see the largest_free_block member returned by multi_heap_get_heap_info()."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @return Number of free bytes."]
    pub fn multi_heap_free_size(heap: multi_heap_handle_t) -> size_t;
}
extern "C" {
    #[doc = " @brief Return the lifetime minimum free heap size"]
    #[doc = ""]
    #[doc = " Equivalent to the minimum_free_bytes member returned by multi_heap_get_info()."]
    #[doc = ""]
    #[doc = " Returns the lifetime \"low water mark\" of possible values returned from multi_free_heap_size(), for the specified"]
    #[doc = " heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @return Number of free bytes."]
    pub fn multi_heap_minimum_free_size(heap: multi_heap_handle_t) -> size_t;
}
#[doc = " @brief Structure to access heap metadata via multi_heap_get_info"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multi_heap_info_t {
    #[doc = "<  Total free bytes in the heap. Equivalent to multi_free_heap_size()."]
    pub total_free_bytes: size_t,
    #[doc = "<  Total bytes allocated to data in the heap."]
    pub total_allocated_bytes: size_t,
    #[doc = "<  Size of largest free block in the heap. This is the largest malloc-able size."]
    pub largest_free_block: size_t,
    #[doc = "<  Lifetime minimum free heap size. Equivalent to multi_minimum_free_heap_size()."]
    pub minimum_free_bytes: size_t,
    #[doc = "<  Number of (variable size) blocks allocated in the heap."]
    pub allocated_blocks: size_t,
    #[doc = "<  Number of (variable size) free blocks in the heap."]
    pub free_blocks: size_t,
    #[doc = "<  Total number of (variable size) blocks in the heap."]
    pub total_blocks: size_t,
}
extern "C" {
    #[doc = " @brief Return metadata about a given heap"]
    #[doc = ""]
    #[doc = " Fills a multi_heap_info_t structure with information about the specified heap."]
    #[doc = ""]
    #[doc = " @param heap Handle to a registered heap."]
    #[doc = " @param info Pointer to a structure to fill with heap metadata."]
    pub fn multi_heap_get_info(heap: multi_heap_handle_t, info: *mut multi_heap_info_t);
}
#[doc = " @brief callback called when a allocation operation fails, if registered"]
#[doc = " @param size in bytes of failed allocation"]
#[doc = " @param caps capabillites requested of failed allocation"]
#[doc = " @param function_name function which generated the failure"]
pub type esp_alloc_failed_hook_t = ::core::option::Option<
    unsafe extern "C" fn(size: size_t, caps: u32, function_name: *const c_types::c_char),
>;
extern "C" {
    #[doc = " @brief registers a callback function to be invoked if a memory allocation operation fails"]
    #[doc = " @param callback caller defined callback to be invoked"]
    #[doc = " @return ESP_OK if callback was registered."]
    pub fn heap_caps_register_failed_alloc_callback(callback: esp_alloc_failed_hook_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Allocate a chunk of memory which has the given capabilities"]
    #[doc = ""]
    #[doc = " Equivalent semantics to libc malloc(), for capability-aware memory."]
    #[doc = ""]
    #[doc = " In IDF, ``malloc(p)`` is equivalent to ``heap_caps_malloc(p, MALLOC_CAP_8BIT)``."]
    #[doc = ""]
    #[doc = " @param size Size, in bytes, of the amount of memory to allocate"]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory to be returned"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    pub fn heap_caps_malloc(size: size_t, caps: u32) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Free memory previously allocated via heap_caps_malloc() or heap_caps_realloc()."]
    #[doc = ""]
    #[doc = " Equivalent semantics to libc free(), for capability-aware memory."]
    #[doc = ""]
    #[doc = "  In IDF, ``free(p)`` is equivalent to ``heap_caps_free(p)``."]
    #[doc = ""]
    #[doc = " @param ptr Pointer to memory previously returned from heap_caps_malloc() or heap_caps_realloc(). Can be NULL."]
    pub fn heap_caps_free(ptr: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Reallocate memory previously allocated via heap_caps_malloc() or heap_caps_realloc()."]
    #[doc = ""]
    #[doc = " Equivalent semantics to libc realloc(), for capability-aware memory."]
    #[doc = ""]
    #[doc = " In IDF, ``realloc(p, s)`` is equivalent to ``heap_caps_realloc(p, s, MALLOC_CAP_8BIT)``."]
    #[doc = ""]
    #[doc = " 'caps' parameter can be different to the capabilities that any original 'ptr' was allocated with. In this way,"]
    #[doc = " realloc can be used to \"move\" a buffer if necessary to ensure it meets a new set of capabilities."]
    #[doc = ""]
    #[doc = " @param ptr Pointer to previously allocated memory, or NULL for a new allocation."]
    #[doc = " @param size Size of the new buffer requested, or 0 to free the buffer."]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory desired for the new allocation."]
    #[doc = ""]
    #[doc = " @return Pointer to a new buffer of size 'size' with capabilities 'caps', or NULL if allocation failed."]
    pub fn heap_caps_realloc(
        ptr: *mut c_types::c_void,
        size: size_t,
        caps: u32,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Allocate a aligned chunk of memory which has the given capabilities"]
    #[doc = ""]
    #[doc = " Equivalent semantics to libc aligned_alloc(), for capability-aware memory."]
    #[doc = " @param alignment  How the pointer received needs to be aligned"]
    #[doc = "                   must be a power of two"]
    #[doc = " @param size Size, in bytes, of the amount of memory to allocate"]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory to be returned"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    #[doc = ""]
    #[doc = ""]
    pub fn heap_caps_aligned_alloc(
        alignment: size_t,
        size: size_t,
        caps: u32,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Used to deallocate memory previously allocated with heap_caps_aligned_alloc"]
    #[doc = ""]
    #[doc = " @param ptr Pointer to the memory allocated"]
    #[doc = " @note This function is deprecated, plase consider using heap_caps_free() instead"]
    pub fn heap_caps_aligned_free(ptr: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Allocate a aligned chunk of memory which has the given capabilities. The initialized value in the memory is set to zero."]
    #[doc = ""]
    #[doc = " @param alignment  How the pointer received needs to be aligned"]
    #[doc = "                   must be a power of two"]
    #[doc = " @param n    Number of continuing chunks of memory to allocate"]
    #[doc = " @param size Size, in bytes, of a chunk of memory to allocate"]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory to be returned"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    #[doc = ""]
    pub fn heap_caps_aligned_calloc(
        alignment: size_t,
        n: size_t,
        size: size_t,
        caps: u32,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Allocate a chunk of memory which has the given capabilities. The initialized value in the memory is set to zero."]
    #[doc = ""]
    #[doc = " Equivalent semantics to libc calloc(), for capability-aware memory."]
    #[doc = ""]
    #[doc = " In IDF, ``calloc(p)`` is equivalent to ``heap_caps_calloc(p, MALLOC_CAP_8BIT)``."]
    #[doc = ""]
    #[doc = " @param n    Number of continuing chunks of memory to allocate"]
    #[doc = " @param size Size, in bytes, of a chunk of memory to allocate"]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory to be returned"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    pub fn heap_caps_calloc(n: size_t, size: size_t, caps: u32) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Get the total size of all the regions that have the given capabilities"]
    #[doc = ""]
    #[doc = " This function takes all regions capable of having the given capabilities allocated in them"]
    #[doc = " and adds up the total space they have."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    #[doc = " @return total size in bytes"]
    pub fn heap_caps_get_total_size(caps: u32) -> size_t;
}
extern "C" {
    #[doc = " @brief Get the total free size of all the regions that have the given capabilities"]
    #[doc = ""]
    #[doc = " This function takes all regions capable of having the given capabilities allocated in them"]
    #[doc = " and adds up the free space they have."]
    #[doc = ""]
    #[doc = " Note that because of heap fragmentation it is probably not possible to allocate a single block of memory"]
    #[doc = " of this size. Use heap_caps_get_largest_free_block() for this purpose."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    #[doc = " @return Amount of free bytes in the regions"]
    pub fn heap_caps_get_free_size(caps: u32) -> size_t;
}
extern "C" {
    #[doc = " @brief Get the total minimum free memory of all regions with the given capabilities"]
    #[doc = ""]
    #[doc = " This adds all the low water marks of the regions capable of delivering the memory"]
    #[doc = " with the given capabilities."]
    #[doc = ""]
    #[doc = " Note the result may be less than the global all-time minimum available heap of this kind, as \"low water marks\" are"]
    #[doc = " tracked per-region. Individual regions' heaps may have reached their \"low water marks\" at different points in time. However"]
    #[doc = " this result still gives a \"worst case\" indication for all-time minimum free heap."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    #[doc = " @return Amount of free bytes in the regions"]
    pub fn heap_caps_get_minimum_free_size(caps: u32) -> size_t;
}
extern "C" {
    #[doc = " @brief Get the largest free block of memory able to be allocated with the given capabilities."]
    #[doc = ""]
    #[doc = " Returns the largest value of ``s`` for which ``heap_caps_malloc(s, caps)`` will succeed."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    #[doc = " @return Size of largest free block in bytes."]
    pub fn heap_caps_get_largest_free_block(caps: u32) -> size_t;
}
extern "C" {
    #[doc = " @brief Get heap info for all regions with the given capabilities."]
    #[doc = ""]
    #[doc = " Calls multi_heap_info() on all heaps which share the given capabilities.  The information returned is an aggregate"]
    #[doc = " across all matching heaps.  The meanings of fields are the same as defined for multi_heap_info_t, except that"]
    #[doc = " ``minimum_free_bytes`` has the same caveats described in heap_caps_get_minimum_free_size()."]
    #[doc = ""]
    #[doc = " @param info        Pointer to a structure which will be filled with relevant"]
    #[doc = "                    heap metadata."]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    pub fn heap_caps_get_info(info: *mut multi_heap_info_t, caps: u32);
}
extern "C" {
    #[doc = " @brief Print a summary of all memory with the given capabilities."]
    #[doc = ""]
    #[doc = " Calls multi_heap_info on all heaps which share the given capabilities, and"]
    #[doc = " prints a two-line summary for each, then a total summary."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = ""]
    pub fn heap_caps_print_heap_info(caps: u32);
}
extern "C" {
    #[doc = " @brief Check integrity of all heap memory in the system."]
    #[doc = ""]
    #[doc = " Calls multi_heap_check on all heaps. Optionally print errors if heaps are corrupt."]
    #[doc = ""]
    #[doc = " Calling this function is equivalent to calling heap_caps_check_integrity"]
    #[doc = " with the caps argument set to MALLOC_CAP_INVALID."]
    #[doc = ""]
    #[doc = " @param print_errors Print specific errors if heap corruption is found."]
    #[doc = ""]
    #[doc = " @return True if all heaps are valid, False if at least one heap is corrupt."]
    pub fn heap_caps_check_integrity_all(print_errors: bool) -> bool;
}
extern "C" {
    #[doc = " @brief Check integrity of all heaps with the given capabilities."]
    #[doc = ""]
    #[doc = " Calls multi_heap_check on all heaps which share the given capabilities. Optionally"]
    #[doc = " print errors if the heaps are corrupt."]
    #[doc = ""]
    #[doc = " See also heap_caps_check_integrity_all to check all heap memory"]
    #[doc = " in the system and heap_caps_check_integrity_addr to check memory"]
    #[doc = " around a single address."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    #[doc = " @param print_errors Print specific errors if heap corruption is found."]
    #[doc = ""]
    #[doc = " @return True if all heaps are valid, False if at least one heap is corrupt."]
    pub fn heap_caps_check_integrity(caps: u32, print_errors: bool) -> bool;
}
extern "C" {
    #[doc = " @brief Check integrity of heap memory around a given address."]
    #[doc = ""]
    #[doc = " This function can be used to check the integrity of a single region of heap memory,"]
    #[doc = " which contains the given address."]
    #[doc = ""]
    #[doc = " This can be useful if debugging heap integrity for corruption at a known address,"]
    #[doc = " as it has a lower overhead than checking all heap regions. Note that if the corrupt"]
    #[doc = " address moves around between runs (due to timing or other factors) then this approach"]
    #[doc = " won't work and you should call heap_caps_check_integrity or"]
    #[doc = " heap_caps_check_integrity_all instead."]
    #[doc = ""]
    #[doc = " @note The entire heap region around the address is checked, not only the adjacent"]
    #[doc = " heap blocks."]
    #[doc = ""]
    #[doc = " @param addr Address in memory. Check for corruption in region containing this address."]
    #[doc = " @param print_errors Print specific errors if heap corruption is found."]
    #[doc = ""]
    #[doc = " @return True if the heap containing the specified address is valid,"]
    #[doc = " False if at least one heap is corrupt or the address doesn't belong to a heap region."]
    pub fn heap_caps_check_integrity_addr(addr: isize, print_errors: bool) -> bool;
}
extern "C" {
    #[doc = " @brief Enable malloc() in external memory and set limit below which"]
    #[doc = "        malloc() attempts are placed in internal memory."]
    #[doc = ""]
    #[doc = " When external memory is in use, the allocation strategy is to initially try to"]
    #[doc = " satisfy smaller allocation requests with internal memory and larger requests"]
    #[doc = " with external memory. This sets the limit between the two, as well as generally"]
    #[doc = " enabling allocation in external memory."]
    #[doc = ""]
    #[doc = " @param limit       Limit, in bytes."]
    pub fn heap_caps_malloc_extmem_enable(limit: size_t);
}
extern "C" {
    #[doc = " @brief Allocate a chunk of memory as preference in decreasing order."]
    #[doc = ""]
    #[doc = " @attention The variable parameters are bitwise OR of MALLOC_CAP_* flags indicating the type of memory."]
    #[doc = "            This API prefers to allocate memory with the first parameter. If failed, allocate memory with"]
    #[doc = "            the next parameter. It will try in this order until allocating a chunk of memory successfully"]
    #[doc = "            or fail to allocate memories with any of the parameters."]
    #[doc = ""]
    #[doc = " @param size Size, in bytes, of the amount of memory to allocate"]
    #[doc = " @param num Number of variable paramters"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    pub fn heap_caps_malloc_prefer(size: size_t, num: size_t, ...) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Allocate a chunk of memory as preference in decreasing order."]
    #[doc = ""]
    #[doc = " @param ptr Pointer to previously allocated memory, or NULL for a new allocation."]
    #[doc = " @param size Size of the new buffer requested, or 0 to free the buffer."]
    #[doc = " @param num Number of variable paramters"]
    #[doc = ""]
    #[doc = " @return Pointer to a new buffer of size 'size', or NULL if allocation failed."]
    pub fn heap_caps_realloc_prefer(
        ptr: *mut c_types::c_void,
        size: size_t,
        num: size_t,
        ...
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Allocate a chunk of memory as preference in decreasing order."]
    #[doc = ""]
    #[doc = " @param n    Number of continuing chunks of memory to allocate"]
    #[doc = " @param size Size, in bytes, of a chunk of memory to allocate"]
    #[doc = " @param num  Number of variable paramters"]
    #[doc = ""]
    #[doc = " @return A pointer to the memory allocated on success, NULL on failure"]
    pub fn heap_caps_calloc_prefer(
        n: size_t,
        size: size_t,
        num: size_t,
        ...
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief Dump the full structure of all heaps with matching capabilities."]
    #[doc = ""]
    #[doc = " Prints a large amount of output to serial (because of locking limitations,"]
    #[doc = " the output bypasses stdout/stderr). For each (variable sized) block"]
    #[doc = " in each matching heap, the following output is printed on a single line:"]
    #[doc = ""]
    #[doc = " - Block address (the data buffer returned by malloc is 4 bytes after this"]
    #[doc = "   if heap debugging is set to Basic, or 8 bytes otherwise)."]
    #[doc = " - Data size (the data size may be larger than the size requested by malloc,"]
    #[doc = "   either due to heap fragmentation or because of heap debugging level)."]
    #[doc = " - Address of next block in the heap."]
    #[doc = " - If the block is free, the address of the next free block is also printed."]
    #[doc = ""]
    #[doc = " @param caps        Bitwise OR of MALLOC_CAP_* flags indicating the type"]
    #[doc = "                    of memory"]
    pub fn heap_caps_dump(caps: u32);
}
extern "C" {
    #[doc = " @brief Dump the full structure of all heaps."]
    #[doc = ""]
    #[doc = " Covers all registered heaps. Prints a large amount of output to serial."]
    #[doc = ""]
    #[doc = " Output is the same as for heap_caps_dump."]
    #[doc = ""]
    pub fn heap_caps_dump_all();
}
extern "C" {
    #[doc = " @brief Return the size that a particular pointer was allocated with."]
    #[doc = ""]
    #[doc = " @param ptr Pointer to currently allocated heap memory. Must be a pointer value previously"]
    #[doc = " returned by heap_caps_malloc,malloc,calloc, etc. and not yet freed."]
    #[doc = ""]
    #[doc = " @note The app will crash with an assertion failure if the pointer is not valid."]
    #[doc = ""]
    #[doc = " @return Size of the memory allocated at this block."]
    #[doc = ""]
    pub fn heap_caps_get_allocated_size(ptr: *mut c_types::c_void) -> size_t;
}
extern "C" {
    pub fn esp_newlib_time_init();
}
extern "C" {
    #[doc = " Replacement for newlib's _REENT_INIT_PTR and __sinit."]
    #[doc = ""]
    #[doc = " Called from startup code and FreeRTOS, not intended to be called from"]
    #[doc = " application code."]
    pub fn esp_reent_init(r: *mut _reent);
}
extern "C" {
    #[doc = " Clean up some of lazily allocated buffers in REENT structures."]
    pub fn esp_reent_cleanup();
}
extern "C" {
    #[doc = " Function which sets up newlib in ROM for use with ESP-IDF"]
    #[doc = ""]
    #[doc = " Includes defining the syscall table, setting up any common locks, etc."]
    #[doc = ""]
    #[doc = " Called from the startup code, not intended to be called from application"]
    #[doc = " code."]
    pub fn esp_newlib_init();
}
extern "C" {
    pub fn esp_setup_syscall_table();
}
extern "C" {
    #[doc = " Update current microsecond time from RTC"]
    pub fn esp_set_time_from_rtc();
}
extern "C" {
    pub fn esp_sync_counters_rtc_and_frc();
}
extern "C" {
    #[doc = " Initialize newlib static locks"]
    pub fn esp_newlib_locks_init();
}
pub type StackType_t = u8;
pub type BaseType_t = c_types::c_int;
pub type UBaseType_t = c_types::c_uint;
pub type TickType_t = u32;
extern "C" {
    #[doc = " @brief Checks if the current core is in an ISR context"]
    #[doc = ""]
    #[doc = " - ISR context consist of Low/Mid priority ISR, or time tick ISR"]
    #[doc = " - High priority ISRs aren't detected here, but they normally cannot call C code, so that should not be an issue anyway."]
    #[doc = ""]
    #[doc = " @note [refactor-todo] Check if this should be inlined"]
    #[doc = " @return"]
    #[doc = "  - pdTRUE if in ISR"]
    #[doc = "  - pdFALSE otherwise"]
    pub fn xPortInIsrContext() -> BaseType_t;
}
extern "C" {
    #[doc = " @brief Check if in ISR context from High priority ISRs"]
    #[doc = ""]
    #[doc = " - Called from High priority ISR"]
    #[doc = " - Checks if the previous context (before high priority interrupt) was in ISR context (meaning low/med priority)"]
    #[doc = ""]
    #[doc = " @note [refactor-todo] Check if this should be inlined"]
    #[doc = " @return"]
    #[doc = "  - pdTRUE if in previous in ISR context"]
    #[doc = "  - pdFALSE otherwise"]
    pub fn xPortInterruptedFromISRContext() -> BaseType_t;
}
#[doc = " @brief Spinlock object"]
#[doc = " Owner:"]
#[doc = "  - Set to 0 if uninitialized"]
#[doc = "  - Set to portMUX_FREE_VAL when free"]
#[doc = "  - Set to CORE_ID_REGVAL_PRO or CORE_ID_REGVAL_AP when locked"]
#[doc = "  - Any other value indicates corruption"]
#[doc = " Count:"]
#[doc = "  - 0 if unlocked"]
#[doc = "  - Recursive count if locked"]
#[doc = ""]
#[doc = " @note Not a true spinlock as single core RISC-V does not have atomic compare and set instruction"]
#[doc = " @note Keep portMUX_INITIALIZER_UNLOCKED in sync with this struct"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct portMUX_TYPE {
    pub owner: u32,
    pub count: u32,
}
extern "C" {
    #[doc = " @brief Enter a critical section"]
    #[doc = ""]
    #[doc = " - Simply disable interrupts"]
    #[doc = " - Can be nested"]
    pub fn vPortEnterCritical();
}
extern "C" {
    #[doc = " @brief Exit a critical section"]
    #[doc = ""]
    #[doc = " - Reenables interrupts"]
    #[doc = " - Can be nested"]
    pub fn vPortExitCritical();
}
extern "C" {
    #[doc = " @brief Set interrupt mask and return current interrupt enable register"]
    #[doc = ""]
    #[doc = " @note [refactor-todo] Check if this function should be renamed (due to int return type)"]
    #[doc = " @return int Current interrupt enable register before set"]
    pub fn vPortSetInterruptMask() -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Clear current interrupt mask and set given mask"]
    #[doc = ""]
    #[doc = " @param mask Interrupt mask"]
    pub fn vPortClearInterruptMask(mask: c_types::c_int);
}
extern "C" {
    #[doc = " @brief Perform a context switch from a task"]
    #[doc = ""]
    #[doc = " @note [refactor-todo] The rest of ESP-IDF should call taskYield() instead"]
    pub fn vPortYield();
}
extern "C" {
    #[doc = " @brief Perform a context switch from an ISR"]
    pub fn vPortYieldFromISR();
}
extern "C" {
    #[doc = " @brief Yields the other core"]
    #[doc = ""]
    #[doc = " @note Added to be compatible with SMP API"]
    #[doc = " @note [refactor-todo] Put this into private macros as its only called from task.c and is not public API"]
    #[doc = " @param coreid ID of core to yield"]
    pub fn vPortYieldOtherCore(coreid: BaseType_t);
}
extern "C" {
    pub fn esp_vApplicationIdleHook();
}
extern "C" {
    pub fn esp_vApplicationTickHook();
}
extern "C" {
    #[doc = " @brief Hook function called on entry to tickless idle"]
    #[doc = ""]
    #[doc = " - Implemented in pm_impl.c"]
    #[doc = ""]
    #[doc = " @param xExpectedIdleTime Expected idle time"]
    pub fn vApplicationSleep(xExpectedIdleTime: TickType_t);
}
extern "C" {
    #[doc = " @brief Get the tick rate per second"]
    #[doc = ""]
    #[doc = " @note [refactor-todo] make this inline"]
    #[doc = " @note [refactor-todo] Check if this function should be renamed (due to uint return type)"]
    #[doc = " @return uint32_t Tick rate in Hz"]
    pub fn xPortGetTickRateHz() -> u32;
}
extern "C" {
    #[doc = " @brief Set a watchpoint to watch the last 32 bytes of the stack"]
    #[doc = ""]
    #[doc = " Callback to set a watchpoint on the end of the stack. Called every context switch to change the stack watchpoint"]
    #[doc = " around."]
    #[doc = ""]
    #[doc = " @param pxStackStart Pointer to the start of the stack"]
    pub fn vPortSetStackWatchpoint(pxStackStart: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Checks if a given piece of memory can be used to store a task's TCB"]
    #[doc = ""]
    #[doc = " - Defined in port_common.c"]
    #[doc = ""]
    #[doc = " @param ptr Pointer to memory"]
    #[doc = " @return true Memory can be used to store a TCB"]
    #[doc = " @return false Otherwise"]
    pub fn xPortCheckValidTCBMem(ptr: *const c_types::c_void) -> bool;
}
extern "C" {
    #[doc = " @brief Checks if a given piece of memory can be used to store a task's stack"]
    #[doc = ""]
    #[doc = " - Defined in port_common.c"]
    #[doc = ""]
    #[doc = " @param ptr Pointer to memory"]
    #[doc = " @return true Memory can be used to store a task stack"]
    #[doc = " @return false Otherwise"]
    pub fn xPortcheckValidStackMem(ptr: *const c_types::c_void) -> bool;
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut c_types::c_void,
    ) -> *mut StackType_t;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _close_r(arg1: *mut _reent, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn _execve_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const *mut c_types::c_char,
        arg4: *const *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fcntl_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: c_types::c_int,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _fork_r(arg1: *mut _reent) -> c_types::c_int;
}
extern "C" {
    pub fn _fstat_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: *mut stat) -> c_types::c_int;
}
extern "C" {
    pub fn _getpid_r(arg1: *mut _reent) -> c_types::c_int;
}
extern "C" {
    pub fn _isatty_r(arg1: *mut _reent, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn _kill_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: c_types::c_int)
        -> c_types::c_int;
}
extern "C" {
    pub fn _link_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _lseek_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: _off_t,
        arg4: c_types::c_int,
    ) -> _off_t;
}
extern "C" {
    pub fn _mkdir_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _open_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: c_types::c_int,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _read_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *mut c_types::c_void,
        arg4: size_t,
    ) -> _ssize_t;
}
extern "C" {
    pub fn _sbrk_r(arg1: *mut _reent, arg2: isize) -> *mut c_types::c_void;
}
extern "C" {
    pub fn _stat_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut stat,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _times_r(arg1: *mut _reent, arg2: *mut tms) -> c_types::c_ulong;
}
extern "C" {
    pub fn _unlink_r(arg1: *mut _reent, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn _wait_r(arg1: *mut _reent, arg2: *mut c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn _write_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: *const c_types::c_void,
        arg4: size_t,
    ) -> _ssize_t;
}
extern "C" {
    pub fn _gettimeofday_r(
        arg1: *mut _reent,
        __tp: *mut timeval,
        __tzp: *mut c_types::c_void,
    ) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut c_types::c_void; 4usize],
}
impl Default for xSTATIC_LIST_ITEM {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticListItem_t = xSTATIC_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_MINI_LIST_ITEM {
    pub xDummy2: TickType_t,
    pub pvDummy3: [*mut c_types::c_void; 2usize],
}
impl Default for xSTATIC_MINI_LIST_ITEM {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticMiniListItem_t = xSTATIC_MINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_LIST {
    pub uxDummy2: UBaseType_t,
    pub pvDummy3: *mut c_types::c_void,
    pub xDummy4: StaticMiniListItem_t,
}
impl Default for xSTATIC_LIST {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticList_t = xSTATIC_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TCB {
    pub pxDummy1: *mut c_types::c_void,
    pub xDummy3: [StaticListItem_t; 2usize],
    pub uxDummy5: UBaseType_t,
    pub pxDummy6: *mut c_types::c_void,
    pub ucDummy7: [u8; 16usize],
    pub xDummyCore: BaseType_t,
    pub pxDummy8: *mut c_types::c_void,
    pub uxDummy12: [UBaseType_t; 2usize],
    pub pvDummy15: [*mut c_types::c_void; 1usize],
    pub pvDummyLocalStorageCallBack: [*mut c_types::c_void; 1usize],
    pub xDummy17: _reent,
    pub ulDummy18: [u32; 1usize],
    pub ucDummy19: [u8; 1usize],
    pub uxDummy20: u8,
    pub ucDummy21: u8,
}
impl Default for xSTATIC_TCB {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticTask_t = xSTATIC_TCB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_QUEUE {
    pub pvDummy1: [*mut c_types::c_void; 3usize],
    pub u: xSTATIC_QUEUE__bindgen_ty_1,
    pub xDummy3: [StaticList_t; 2usize],
    pub uxDummy4: [UBaseType_t; 3usize],
    pub ucDummy5: [u8; 2usize],
    pub ucDummy6: u8,
    pub pvDummy7: *mut c_types::c_void,
    pub xDummy10: portMUX_TYPE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xSTATIC_QUEUE__bindgen_ty_1 {
    pub pvDummy2: *mut c_types::c_void,
    pub uxDummy2: UBaseType_t,
}
impl Default for xSTATIC_QUEUE__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for xSTATIC_QUEUE {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticQueue_t = xSTATIC_QUEUE;
pub type StaticSemaphore_t = StaticQueue_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_EVENT_GROUP {
    pub xDummy1: TickType_t,
    pub xDummy2: StaticList_t,
    pub ucDummy4: u8,
    pub xDummy5: portMUX_TYPE,
}
impl Default for xSTATIC_EVENT_GROUP {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticEventGroup_t = xSTATIC_EVENT_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_TIMER {
    pub pvDummy1: *mut c_types::c_void,
    pub xDummy2: StaticListItem_t,
    pub xDummy3: TickType_t,
    pub pvDummy5: *mut c_types::c_void,
    pub pvDummy6: TaskFunction_t,
    pub ucDummy8: u8,
}
impl Default for xSTATIC_TIMER {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticTimer_t = xSTATIC_TIMER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xSTATIC_STREAM_BUFFER {
    pub uxDummy1: [size_t; 4usize],
    pub pvDummy2: [*mut c_types::c_void; 3usize],
    pub ucDummy3: u8,
    pub xDummy5: portMUX_TYPE,
}
impl Default for xSTATIC_STREAM_BUFFER {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticStreamBuffer_t = xSTATIC_STREAM_BUFFER;
pub type StaticMessageBuffer_t = StaticStreamBuffer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
    pub pvOwner: *mut c_types::c_void,
    pub pvContainer: *mut xLIST,
}
impl Default for xLIST_ITEM {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ListItem_t = xLIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMINI_LIST_ITEM {
    pub xItemValue: TickType_t,
    pub pxNext: *mut xLIST_ITEM,
    pub pxPrevious: *mut xLIST_ITEM,
}
impl Default for xMINI_LIST_ITEM {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type MiniListItem_t = xMINI_LIST_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xLIST {
    pub uxNumberOfItems: UBaseType_t,
    pub pxIndex: *mut ListItem_t,
    pub xListEnd: MiniListItem_t,
}
impl Default for xLIST {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type List_t = xLIST;
extern "C" {
    pub fn vListInitialise(pxList: *mut List_t);
}
extern "C" {
    pub fn vListInitialiseItem(pxItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsert(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn vListInsertEnd(pxList: *mut List_t, pxNewListItem: *mut ListItem_t);
}
extern "C" {
    pub fn uxListRemove(pxItemToRemove: *mut ListItem_t) -> UBaseType_t;
}
#[doc = " task. h"]
#[doc = ""]
#[doc = " Type by which tasks are referenced.  For example, a call to xTaskCreate"]
#[doc = " returns (via a pointer parameter) an TaskHandle_t variable that can then"]
#[doc = " be used as a parameter to vTaskDelete to delete the task."]
#[doc = ""]
#[doc = " @cond !DOC_SINGLE_GROUP"]
#[doc = " \\defgroup TaskHandle_t TaskHandle_t"]
#[doc = " @endcond"]
#[doc = " \\ingroup Tasks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tskTaskControlBlock {
    _unused: [u8; 0],
}
pub type TaskHandle_t = *mut tskTaskControlBlock;
#[doc = " Defines the prototype to which the application task hook function must"]
#[doc = " conform."]
pub type TaskHookFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void) -> BaseType_t>;
pub const eTaskState_eRunning: eTaskState = 0;
pub const eTaskState_eReady: eTaskState = 1;
pub const eTaskState_eBlocked: eTaskState = 2;
pub const eTaskState_eSuspended: eTaskState = 3;
pub const eTaskState_eDeleted: eTaskState = 4;
pub const eTaskState_eInvalid: eTaskState = 5;
#[doc = " Task states returned by eTaskGetState."]
pub type eTaskState = c_types::c_uint;
pub const eNotifyAction_eNoAction: eNotifyAction = 0;
pub const eNotifyAction_eSetBits: eNotifyAction = 1;
pub const eNotifyAction_eIncrement: eNotifyAction = 2;
pub const eNotifyAction_eSetValueWithOverwrite: eNotifyAction = 3;
pub const eNotifyAction_eSetValueWithoutOverwrite: eNotifyAction = 4;
pub type eNotifyAction = c_types::c_uint;
#[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION */"]
#[doc = " Used internally only."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xTIME_OUT {
    pub xOverflowCount: BaseType_t,
    pub xTimeOnEntering: TickType_t,
}
#[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION */"]
#[doc = " Used internally only."]
pub type TimeOut_t = xTIME_OUT;
#[doc = " Defines the memory ranges allocated to the task when an MPU is used."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xMEMORY_REGION {
    pub pvBaseAddress: *mut c_types::c_void,
    pub ulLengthInBytes: u32,
    pub ulParameters: u32,
}
impl Default for xMEMORY_REGION {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Defines the memory ranges allocated to the task when an MPU is used."]
pub type MemoryRegion_t = xMEMORY_REGION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_PARAMETERS {
    pub pvTaskCode: TaskFunction_t,
    pub pcName: *const c_types::c_char,
    pub usStackDepth: u16,
    pub pvParameters: *mut c_types::c_void,
    pub uxPriority: UBaseType_t,
    pub puxStackBuffer: *mut StackType_t,
    pub xRegions: [MemoryRegion_t; 1usize],
}
impl Default for xTASK_PARAMETERS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type TaskParameters_t = xTASK_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xTASK_STATUS {
    pub xHandle: TaskHandle_t,
    pub pcTaskName: *const c_types::c_char,
    pub xTaskNumber: UBaseType_t,
    pub eCurrentState: eTaskState,
    pub uxCurrentPriority: UBaseType_t,
    pub uxBasePriority: UBaseType_t,
    pub ulRunTimeCounter: u32,
    pub pxStackBase: *mut StackType_t,
    pub usStackHighWaterMark: u16,
}
impl Default for xTASK_STATUS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type TaskStatus_t = xTASK_STATUS;
pub const eSleepModeStatus_eAbortSleep: eSleepModeStatus = 0;
pub const eSleepModeStatus_eStandardSleep: eSleepModeStatus = 1;
pub const eSleepModeStatus_eNoTasksWaitingTimeout: eSleepModeStatus = 2;
#[doc = " Possible return values for eTaskConfirmSleepModeStatus()."]
pub type eSleepModeStatus = c_types::c_uint;
extern "C" {
    pub fn xTaskCreatePinnedToCore(
        pvTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        usStackDepth: u32,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        pvCreatedTask: *mut TaskHandle_t,
        xCoreID: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xTaskCreateStaticPinnedToCore(
        pvTaskCode: TaskFunction_t,
        pcName: *const c_types::c_char,
        ulStackDepth: u32,
        pvParameters: *mut c_types::c_void,
        uxPriority: UBaseType_t,
        pxStackBuffer: *mut StackType_t,
        pxTaskBuffer: *mut StaticTask_t,
        xCoreID: BaseType_t,
    ) -> TaskHandle_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Memory regions are assigned to a restricted task when the task is created by"]
    #[doc = " a call to xTaskCreateRestricted().  These regions can be redefined using"]
    #[doc = " vTaskAllocateMPURegions()."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task being updated."]
    #[doc = ""]
    #[doc = " @param pxRegions A pointer to an MemoryRegion_t structure that contains the"]
    #[doc = " new memory region definitions."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " // Define an array of MemoryRegion_t structures that configures an MPU region"]
    #[doc = " // allowing read/write access for 1024 bytes starting at the beginning of the"]
    #[doc = " // ucOneKByte array.  The other two of the maximum 3 definable regions are"]
    #[doc = " // unused so set to zero."]
    #[doc = " static const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] ="]
    #[doc = " {"]
    #[doc = "  // Base address     Length      Parameters"]
    #[doc = "  { ucOneKByte,       1024,       portMPU_REGION_READ_WRITE },"]
    #[doc = "  { 0,                0,          0 },"]
    #[doc = "  { 0,                0,          0 }"]
    #[doc = " };"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = "  // This task was created such that it has access to certain regions of"]
    #[doc = "  // memory as defined by the MPU configuration.  At some point it is"]
    #[doc = "  // desired that these MPU regions are replaced with that defined in the"]
    #[doc = "  // xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()"]
    #[doc = "  // for this purpose.  NULL is used as the task handle to indicate that this"]
    #[doc = "  // function should modify the MPU regions of the calling task."]
    #[doc = "  vTaskAllocateMPURegions( NULL, xAltRegions );"]
    #[doc = ""]
    #[doc = "  // Now the task can continue its function, but from this point on can only"]
    #[doc = "  // access its stack and the ucOneKByte array (unless any other statically"]
    #[doc = "  // defined or shared regions have been declared elsewhere)."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskCreateRestricted xTaskCreateRestricted"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskAllocateMPURegions(xTask: TaskHandle_t, pxRegions: *const MemoryRegion_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskDelete( TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelete must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Remove a task from the RTOS real time kernel's management.  The task being"]
    #[doc = " deleted will be removed from all ready, blocked, suspended and event lists."]
    #[doc = ""]
    #[doc = " NOTE:  The idle task is responsible for freeing the kernel allocated"]
    #[doc = " memory from tasks that have been deleted.  It is therefore important that"]
    #[doc = " the idle task is not starved of microcontroller processing time if your"]
    #[doc = " application makes any calls to vTaskDelete ().  Memory allocated by the"]
    #[doc = " task code is not automatically freed, and should be freed before the task"]
    #[doc = " is deleted."]
    #[doc = ""]
    #[doc = " See the demo application file death.c for sample code that utilises"]
    #[doc = " vTaskDelete ()."]
    #[doc = ""]
    #[doc = " @param xTaskToDelete The handle of the task to be deleted.  Passing NULL will"]
    #[doc = " cause the calling task to be deleted."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vOtherFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create the task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // Use the handle to delete the task."]
    #[doc = "   vTaskDelete( xHandle );"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskDelete vTaskDelete"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup Tasks"]
    pub fn vTaskDelete(xTaskToDelete: TaskHandle_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskDelay( const TickType_t xTicksToDelay );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Delay a task for a given number of ticks.  The actual time that the"]
    #[doc = " task remains blocked depends on the tick rate.  The constant"]
    #[doc = " portTICK_PERIOD_MS can be used to calculate real time from the tick"]
    #[doc = " rate - with the resolution of one tick period."]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskDelay must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " vTaskDelay() specifies a time at which the task wishes to unblock relative to"]
    #[doc = " the time at which vTaskDelay() is called.  For example, specifying a block"]
    #[doc = " period of 100 ticks will cause the task to unblock 100 ticks after"]
    #[doc = " vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method"]
    #[doc = " of controlling the frequency of a periodic task as the path taken through the"]
    #[doc = " code, as well as other task and interrupt activity, will effect the frequency"]
    #[doc = " at which vTaskDelay() gets called and therefore the time at which the task"]
    #[doc = " next executes.  See xTaskDelayUntil() for an alternative API function designed"]
    #[doc = " to facilitate fixed frequency execution.  It does this by specifying an"]
    #[doc = " absolute time (rather than a relative time) at which the calling task should"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " @param xTicksToDelay The amount of time, in tick periods, that"]
    #[doc = " the calling task should block."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " // Block for 500ms."]
    #[doc = " const TickType_t xDelay = 500 / portTICK_PERIOD_MS;"]
    #[doc = ""]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Simply toggle the LED every 500ms, blocking between each toggle."]
    #[doc = "       vToggleLED();"]
    #[doc = "       vTaskDelay( xDelay );"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskDelay vTaskDelay"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskDelay(xTicksToDelay: TickType_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskDelayUntil must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Delay a task until a specified time.  This function can be used by periodic"]
    #[doc = " tasks to ensure a constant execution frequency."]
    #[doc = ""]
    #[doc = " This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will"]
    #[doc = " cause a task to block for the specified number of ticks from the time vTaskDelay () is"]
    #[doc = " called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed"]
    #[doc = " execution frequency as the time between a task starting to execute and that task"]
    #[doc = " calling vTaskDelay () may not be fixed [the task may take a different path though the"]
    #[doc = " code between calls, or may get interrupted or preempted a different number of times"]
    #[doc = " each time it executes]."]
    #[doc = ""]
    #[doc = " Whereas vTaskDelay () specifies a wake time relative to the time at which the function"]
    #[doc = " is called, xTaskDelayUntil () specifies the absolute (exact) time at which it wishes to"]
    #[doc = " unblock."]
    #[doc = ""]
    #[doc = " The macro pdMS_TO_TICKS() can be used to calculate the number of ticks from a"]
    #[doc = " time specified in milliseconds with a resolution of one tick period."]
    #[doc = ""]
    #[doc = " @param pxPreviousWakeTime Pointer to a variable that holds the time at which the"]
    #[doc = " task was last unblocked.  The variable must be initialised with the current time"]
    #[doc = " prior to its first use (see the example below).  Following this the variable is"]
    #[doc = " automatically updated within xTaskDelayUntil ()."]
    #[doc = ""]
    #[doc = " @param xTimeIncrement The cycle time period.  The task will be unblocked at"]
    #[doc = " time *pxPreviousWakeTime + xTimeIncrement.  Calling xTaskDelayUntil with the"]
    #[doc = " same xTimeIncrement parameter value will cause the task to execute with"]
    #[doc = " a fixed interface period."]
    #[doc = ""]
    #[doc = " @return Value which can be used to check whether the task was actually delayed."]
    #[doc = " Will be pdTRUE if the task way delayed and pdFALSE otherwise.  A task will not"]
    #[doc = " be delayed if the next expected wake time is in the past."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " // Perform an action every 10 ticks."]
    #[doc = " void vTaskFunction( void * pvParameters )"]
    #[doc = " {"]
    #[doc = " TickType_t xLastWakeTime;"]
    #[doc = " const TickType_t xFrequency = 10;"]
    #[doc = " BaseType_t xWasDelayed;"]
    #[doc = ""]
    #[doc = "     // Initialise the xLastWakeTime variable with the current time."]
    #[doc = "     xLastWakeTime = xTaskGetTickCount ();"]
    #[doc = "     for( ;; )"]
    #[doc = "     {"]
    #[doc = "         // Wait for the next cycle."]
    #[doc = "         xWasDelayed = xTaskDelayUntil( &xLastWakeTime, xFrequency );"]
    #[doc = ""]
    #[doc = "         // Perform action here. xWasDelayed value can be used to determine"]
    #[doc = "         // whether a deadline was missed if the code here took too long."]
    #[doc = "     }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskDelayUntil xTaskDelayUntil"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskDelayUntil(
        pxPreviousWakeTime: *mut TickType_t,
        xTimeIncrement: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskAbortDelay( TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskAbortDelay must be defined as 1 in FreeRTOSConfig.h for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " A task will enter the Blocked state when it is waiting for an event.  The"]
    #[doc = " event it is waiting for can be a temporal event (waiting for a time), such"]
    #[doc = " as when vTaskDelay() is called, or an event on an object, such as when"]
    #[doc = " xQueueReceive() or ulTaskNotifyTake() is called.  If the handle of a task"]
    #[doc = " that is in the Blocked state is used in a call to xTaskAbortDelay() then the"]
    #[doc = " task will leave the Blocked state, and return from whichever function call"]
    #[doc = " placed the task into the Blocked state."]
    #[doc = ""]
    #[doc = " There is no 'FromISR' version of this function as an interrupt would need to"]
    #[doc = " know which object a task was blocked on in order to know which actions to"]
    #[doc = " take.  For example, if the task was blocked on a queue the interrupt handler"]
    #[doc = " would then need to know if the queue was locked."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the task to remove from the Blocked state."]
    #[doc = ""]
    #[doc = " @return If the task referenced by xTask was not in the Blocked state then"]
    #[doc = " pdFAIL is returned.  Otherwise pdPASS is returned."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskAbortDelay xTaskAbortDelay"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskAbortDelay(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the priority of any task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried.  Passing a NULL"]
    #[doc = " handle results in the priority of the calling task being returned."]
    #[doc = ""]
    #[doc = " @return The priority of xTask."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to obtain the priority of the created task."]
    #[doc = "   // It was created with tskIDLE_PRIORITY, but may have changed"]
    #[doc = "   // it itself."]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )"]
    #[doc = "   {"]
    #[doc = "       // The task has changed it's priority."]
    #[doc = "   }"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Is our priority higher than the created task?"]
    #[doc = "   if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )"]
    #[doc = "   {"]
    #[doc = "       // Our priority (obtained using NULL handle) is higher."]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup uxTaskPriorityGet uxTaskPriorityGet"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn uxTaskPriorityGet(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " A version of uxTaskPriorityGet() that can be used from an ISR."]
    pub fn uxTaskPriorityGetFromISR(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " eTaskState eTaskGetState( TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_eTaskGetState must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Obtain the state of any task.  States are encoded by the eTaskState"]
    #[doc = " enumerated type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task to be queried."]
    #[doc = ""]
    #[doc = " @return The state of xTask at the time the function was called.  Note the"]
    #[doc = " state of the task might change between the function being called, and the"]
    #[doc = " functions return value being tested by the calling task."]
    pub fn eTaskGetState(xTask: TaskHandle_t) -> eTaskState;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Populates a TaskStatus_t structure with information about a task."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task being queried.  If xTask is NULL then"]
    #[doc = " information will be returned about the calling task."]
    #[doc = ""]
    #[doc = " @param pxTaskStatus A pointer to the TaskStatus_t structure that will be"]
    #[doc = " filled with information about the task referenced by the handle passed using"]
    #[doc = " the xTask parameter."]
    #[doc = ""]
    #[doc = " @param xGetFreeStackSpace The TaskStatus_t structure contains a member to report"]
    #[doc = " the stack high water mark of the task being queried.  Calculating the stack"]
    #[doc = " high water mark takes a relatively long time, and can make the system"]
    #[doc = " temporarily unresponsive - so the xGetFreeStackSpace parameter is provided to"]
    #[doc = " allow the high water mark checking to be skipped.  The high watermark value"]
    #[doc = " will only be written to the TaskStatus_t structure if xGetFreeStackSpace is"]
    #[doc = " not set to pdFALSE;"]
    #[doc = ""]
    #[doc = " @param eState The TaskStatus_t structure contains a member to report the"]
    #[doc = " state of the task being queried.  Obtaining the task state is not as fast as"]
    #[doc = " a simple assignment - so the eState parameter is provided to allow the state"]
    #[doc = " information to be omitted from the TaskStatus_t structure.  To obtain state"]
    #[doc = " information then set eState to eInvalid - otherwise the value passed in"]
    #[doc = " eState will be reported as the task state in the TaskStatus_t structure."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = " TaskStatus_t xTaskDetails;"]
    #[doc = ""]
    #[doc = "  // Obtain the handle of a task from its name."]
    #[doc = "  xHandle = xTaskGetHandle( \"Task_Name\" );"]
    #[doc = ""]
    #[doc = "  // Check the handle is not NULL."]
    #[doc = "  configASSERT( xHandle );"]
    #[doc = ""]
    #[doc = "  // Use the handle to obtain further information about the task."]
    #[doc = "  vTaskGetInfo( xHandle,"]
    #[doc = "                &xTaskDetails,"]
    #[doc = "                pdTRUE, // Include the high water mark in xTaskDetails."]
    #[doc = "                eInvalid ); // Include the task state in xTaskDetails."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskGetInfo vTaskGetInfo"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskGetInfo(
        xTask: TaskHandle_t,
        pxTaskStatus: *mut TaskStatus_t,
        xGetFreeStackSpace: BaseType_t,
        eState: eTaskState,
    );
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Set the priority of any task."]
    #[doc = ""]
    #[doc = " A context switch will occur before the function returns if the priority"]
    #[doc = " being set is higher than the currently executing task."]
    #[doc = ""]
    #[doc = " @param xTask Handle to the task for which the priority is being set."]
    #[doc = " Passing a NULL handle results in the priority of the calling task being set."]
    #[doc = ""]
    #[doc = " @param uxNewPriority The priority to which the task will be set."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to raise the priority of the created task."]
    #[doc = "   vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use a NULL handle to raise our priority to the same value."]
    #[doc = "   vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskPrioritySet vTaskPrioritySet"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskPrioritySet(xTask: TaskHandle_t, uxNewPriority: UBaseType_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSuspend( TaskHandle_t xTaskToSuspend );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Suspend any task.  When suspended a task will never get any microcontroller"]
    #[doc = " processing time, no matter what its priority."]
    #[doc = ""]
    #[doc = " Calls to vTaskSuspend are not accumulative -"]
    #[doc = " i.e. calling vTaskSuspend () twice on the same task still only requires one"]
    #[doc = " call to vTaskResume () to ready the suspended task."]
    #[doc = ""]
    #[doc = " @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL"]
    #[doc = " handle will cause the calling task to be suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Suspend ourselves."]
    #[doc = "   vTaskSuspend( NULL );"]
    #[doc = ""]
    #[doc = "   // We cannot get here unless another task calls vTaskResume"]
    #[doc = "   // with our handle as the parameter."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskSuspend vTaskSuspend"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskSuspend(xTaskToSuspend: TaskHandle_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskResume( TaskHandle_t xTaskToResume );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_vTaskSuspend must be defined as 1 for this function to be available."]
    #[doc = " See the configuration section for more information."]
    #[doc = ""]
    #[doc = " Resumes a suspended task."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " vTaskResume ()."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = " TaskHandle_t xHandle;"]
    #[doc = ""]
    #[doc = "   // Create a task, storing the handle."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // Use the handle to suspend the created task."]
    #[doc = "   vTaskSuspend( xHandle );"]
    #[doc = ""]
    #[doc = "   // ..."]
    #[doc = ""]
    #[doc = "   // The created task will not run during this period, unless"]
    #[doc = "   // another task calls vTaskResume( xHandle )."]
    #[doc = ""]
    #[doc = "   //..."]
    #[doc = ""]
    #[doc = ""]
    #[doc = "   // Resume the suspended task ourselves."]
    #[doc = "   vTaskResume( xHandle );"]
    #[doc = ""]
    #[doc = "   // The created task will once again get microcontroller processing"]
    #[doc = "   // time in accordance with its priority within the system."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskResume vTaskResume"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn vTaskResume(xTaskToResume: TaskHandle_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void xTaskResumeFromISR( TaskHandle_t xTaskToResume );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be"]
    #[doc = " available.  See the configuration section for more information."]
    #[doc = ""]
    #[doc = " An implementation of vTaskResume() that can be called from within an ISR."]
    #[doc = ""]
    #[doc = " A task that has been suspended by one or more calls to vTaskSuspend ()"]
    #[doc = " will be made available for running again by a single call to"]
    #[doc = " xTaskResumeFromISR ()."]
    #[doc = ""]
    #[doc = " xTaskResumeFromISR() should not be used to synchronise a task with an"]
    #[doc = " interrupt if there is a chance that the interrupt could arrive prior to the"]
    #[doc = " task being suspended - as this can lead to interrupts being missed. Use of a"]
    #[doc = " semaphore as a synchronisation mechanism would avoid this eventuality."]
    #[doc = ""]
    #[doc = " @param xTaskToResume Handle to the task being readied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if resuming the task should result in a context switch,"]
    #[doc = " otherwise pdFALSE. This is used by the ISR to determine if a context switch"]
    #[doc = " may be required following the ISR."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskResumeFromISR vTaskResumeFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskResumeFromISR(xTaskToResume: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION */"]
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskStartScheduler( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Starts the real time kernel tick processing.  After calling the kernel"]
    #[doc = " has control over which tasks are executed and when."]
    #[doc = ""]
    #[doc = " NOTE: In ESP-IDF the scheduler is started automatically during"]
    #[doc = " application startup, vTaskStartScheduler() should not be called from"]
    #[doc = " ESP-IDF applications."]
    #[doc = ""]
    #[doc = " See the demo application file main.c for an example of creating"]
    #[doc = " tasks and starting the kernel."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will not get here unless a task calls vTaskEndScheduler ()"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskStartScheduler vTaskStartScheduler"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskStartScheduler();
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskEndScheduler( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " NOTE:  At the time of writing only the x86 real mode port, which runs on a PC"]
    #[doc = " in place of DOS, implements this function."]
    #[doc = ""]
    #[doc = " Stops the real time kernel tick.  All created tasks will be automatically"]
    #[doc = " deleted and multitasking (either preemptive or cooperative) will"]
    #[doc = " stop.  Execution then resumes from the point where vTaskStartScheduler ()"]
    #[doc = " was called, as if vTaskStartScheduler () had just returned."]
    #[doc = ""]
    #[doc = " See the demo application file main. c in the demo/PC directory for an"]
    #[doc = " example that uses vTaskEndScheduler ()."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () requires an exit function to be defined within the"]
    #[doc = " portable layer (see vPortEndScheduler () in port. c for the PC port).  This"]
    #[doc = " performs hardware specific operations such as stopping the kernel tick."]
    #[doc = ""]
    #[doc = " vTaskEndScheduler () will cause all of the resources allocated by the"]
    #[doc = " kernel to be freed - but will not free resources allocated by application"]
    #[doc = " tasks."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskCode( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // At some point we want to end the real time kernel processing"]
    #[doc = "       // so call ..."]
    #[doc = "       vTaskEndScheduler ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " void vAFunction( void )"]
    #[doc = " {"]
    #[doc = "   // Create at least one task before starting the kernel."]
    #[doc = "   xTaskCreate( vTaskCode, \"NAME\", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );"]
    #[doc = ""]
    #[doc = "   // Start the real time kernel with preemption."]
    #[doc = "   vTaskStartScheduler ();"]
    #[doc = ""]
    #[doc = "   // Will only get here when the vTaskCode () task has called"]
    #[doc = "   // vTaskEndScheduler ().  When we get here we are back to single task"]
    #[doc = "   // execution."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskEndScheduler vTaskEndScheduler"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskEndScheduler();
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSuspendAll( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Suspends the scheduler without disabling interrupts.  Context switches will"]
    #[doc = " not occur while the scheduler is suspended."]
    #[doc = ""]
    #[doc = " After calling vTaskSuspendAll () the calling task will continue to execute"]
    #[doc = " without risk of being swapped out until a call to xTaskResumeAll () has been"]
    #[doc = " made."]
    #[doc = ""]
    #[doc = " API functions that have the potential to cause a context switch (for example,"]
    #[doc = " vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler"]
    #[doc = " is suspended."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the kernel"]
    #[doc = "       // tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel."]
    #[doc = "       xTaskResumeAll ();"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskSuspendAll vTaskSuspendAll"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn vTaskSuspendAll();
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskResumeAll( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Resumes scheduler activity after it was suspended by a call to"]
    #[doc = " vTaskSuspendAll()."]
    #[doc = ""]
    #[doc = " xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks"]
    #[doc = " that were previously suspended by a call to vTaskSuspend()."]
    #[doc = ""]
    #[doc = " @return If resuming the scheduler caused a context switch then pdTRUE is"]
    #[doc = "         returned, otherwise pdFALSE is returned."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " void vTask1( void * pvParameters )"]
    #[doc = " {"]
    #[doc = "   for( ;; )"]
    #[doc = "   {"]
    #[doc = "       // Task code goes here."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // At some point the task wants to perform a long operation during"]
    #[doc = "       // which it does not want to get swapped out.  It cannot use"]
    #[doc = "       // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the"]
    #[doc = "       // operation may cause interrupts to be missed - including the"]
    #[doc = "       // ticks."]
    #[doc = ""]
    #[doc = "       // Prevent the real time kernel swapping out the task."]
    #[doc = "       vTaskSuspendAll ();"]
    #[doc = ""]
    #[doc = "       // Perform the operation here.  There is no need to use critical"]
    #[doc = "       // sections as we have all the microcontroller processing time."]
    #[doc = "       // During this time interrupts will still operate and the real"]
    #[doc = "       // time kernel tick count will be maintained."]
    #[doc = ""]
    #[doc = "       // ..."]
    #[doc = ""]
    #[doc = "       // The operation is complete.  Restart the kernel.  We want to force"]
    #[doc = "       // a context switch - but there is no point if resuming the scheduler"]
    #[doc = "       // caused a context switch already."]
    #[doc = "       if( !xTaskResumeAll () )"]
    #[doc = "       {"]
    #[doc = "            taskYIELD ();"]
    #[doc = "       }"]
    #[doc = "   }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskResumeAll xTaskResumeAll"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup SchedulerControl"]
    pub fn xTaskResumeAll() -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " TickType_t xTaskGetTickCount( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskGetTickCount xTaskGetTickCount"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCount() -> TickType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " TickType_t xTaskGetTickCountFromISR( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " @return The count of ticks since vTaskStartScheduler was called."]
    #[doc = ""]
    #[doc = " This is a version of xTaskGetTickCount() that is safe to be called from an"]
    #[doc = " ISR - provided that TickType_t is the natural word size of the"]
    #[doc = " microcontroller being used or interrupt nesting is either not supported or"]
    #[doc = " not being used."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetTickCountFromISR() -> TickType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint16_t uxTaskGetNumberOfTasks( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " @return The number of tasks that the real time kernel is currently managing."]
    #[doc = " This includes all ready, blocked and suspended tasks.  A task that"]
    #[doc = " has been deleted but not yet freed by the idle task will also be"]
    #[doc = " included in the count."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn uxTaskGetNumberOfTasks() -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " char *pcTaskGetName( TaskHandle_t xTaskToQuery );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " @return The text (human readable) name of the task referenced by the handle"]
    #[doc = " xTaskToQuery.  A task can query its own name by either passing in its own"]
    #[doc = " handle, or by setting xTaskToQuery to NULL."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup pcTaskGetName pcTaskGetName"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn pcTaskGetName(xTaskToQuery: TaskHandle_t) -> *mut c_types::c_char;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " TaskHandle_t xTaskGetHandle( const char *pcNameToQuery );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " NOTE:  This function takes a relatively long time to complete and should be"]
    #[doc = " used sparingly."]
    #[doc = ""]
    #[doc = " @return The handle of the task that has the human readable name pcNameToQuery."]
    #[doc = " NULL is returned if no matching name is found.  INCLUDE_xTaskGetHandle"]
    #[doc = " must be set to 1 in FreeRTOSConfig.h for pcTaskGetHandle() to be available."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup pcTaskGetHandle pcTaskGetHandle"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn xTaskGetHandle(pcNameToQuery: *const c_types::c_char) -> TaskHandle_t;
}
extern "C" {
    #[doc = " Returns the high water mark of the stack associated with xTask."]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in bytes not words, unlike vanilla"]
    #[doc = " FreeRTOS) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in bytes not words,"]
    #[doc = " unlike vanilla FreeRTOS) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " Returns the start of the stack associated with xTask."]
    #[doc = ""]
    #[doc = " INCLUDE_uxTaskGetStackHighWaterMark2 must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the high water mark of the stack associated with xTask.  That is,"]
    #[doc = " the minimum free stack space there has been (in words, so on a 32 bit machine"]
    #[doc = " a value of 1 means 4 bytes) since the task started.  The smaller the returned"]
    #[doc = " number the closer the task has come to overflowing its stack."]
    #[doc = ""]
    #[doc = " uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the"]
    #[doc = " same except for their return type.  Using configSTACK_DEPTH_TYPE allows the"]
    #[doc = " user to determine the return type.  It gets around the problem of the value"]
    #[doc = " overflowing on 8-bit types without breaking backward compatibility for"]
    #[doc = " applications that expect an 8-bit return type."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack to be checked."]
    #[doc = " Set xTask to NULL to check the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return The smallest amount of free stack space there has been (in words, so"]
    #[doc = " actual spaces on the stack rather than bytes) since the task referenced by"]
    #[doc = " xTask was created."]
    pub fn uxTaskGetStackHighWaterMark2(xTask: TaskHandle_t) -> u16;
}
extern "C" {
    #[doc = " Returns the start of the stack associated with xTask."]
    #[doc = ""]
    #[doc = " INCLUDE_pxTaskGetStackStart must be set to 1 in FreeRTOSConfig.h for"]
    #[doc = " this function to be available."]
    #[doc = ""]
    #[doc = " Returns the lowest stack memory address, regardless of whether the stack grows up or down."]
    #[doc = ""]
    #[doc = " @param xTask Handle of the task associated with the stack returned."]
    #[doc = " Set xTask to NULL to return the stack of the calling task."]
    #[doc = ""]
    #[doc = " @return A pointer to the start of the stack."]
    pub fn pxTaskGetStackStart(xTask: TaskHandle_t) -> *mut u8;
}
extern "C" {
    #[doc = " Set local storage pointer specific to the given task."]
    #[doc = ""]
    #[doc = " Each task contains an array of pointers that is dimensioned by the"]
    #[doc = " configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h."]
    #[doc = " The kernel does not use the pointers itself, so the application writer"]
    #[doc = " can use the pointers for any purpose they wish."]
    #[doc = ""]
    #[doc = " @param xTaskToSet  Task to set thread local storage pointer for"]
    #[doc = " @param xIndex The index of the pointer to set, from 0 to"]
    #[doc = "               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1."]
    #[doc = " @param pvValue  Pointer value to set."]
    pub fn vTaskSetThreadLocalStoragePointer(
        xTaskToSet: TaskHandle_t,
        xIndex: BaseType_t,
        pvValue: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " Get local storage pointer specific to the given task."]
    #[doc = ""]
    #[doc = " Each task contains an array of pointers that is dimensioned by the"]
    #[doc = " configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h."]
    #[doc = " The kernel does not use the pointers itself, so the application writer"]
    #[doc = " can use the pointers for any purpose they wish."]
    #[doc = ""]
    #[doc = " @param xTaskToQuery  Task to get thread local storage pointer for"]
    #[doc = " @param xIndex The index of the pointer to get, from 0 to"]
    #[doc = "               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1."]
    #[doc = " @return  Pointer value"]
    pub fn pvTaskGetThreadLocalStoragePointer(
        xTaskToQuery: TaskHandle_t,
        xIndex: BaseType_t,
    ) -> *mut c_types::c_void;
}
#[doc = " Prototype of local storage pointer deletion callback."]
pub type TlsDeleteCallbackFunction_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: c_types::c_int, arg2: *mut c_types::c_void)>;
extern "C" {
    #[doc = " Set local storage pointer and deletion callback."]
    #[doc = ""]
    #[doc = " Each task contains an array of pointers that is dimensioned by the"]
    #[doc = " configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h."]
    #[doc = " The kernel does not use the pointers itself, so the application writer"]
    #[doc = " can use the pointers for any purpose they wish."]
    #[doc = ""]
    #[doc = " Local storage pointers set for a task can reference dynamically"]
    #[doc = " allocated resources. This function is similar to"]
    #[doc = " vTaskSetThreadLocalStoragePointer, but provides a way to release"]
    #[doc = " these resources when the task gets deleted. For each pointer,"]
    #[doc = " a callback function can be set. This function will be called"]
    #[doc = " when task is deleted, with the local storage pointer index"]
    #[doc = " and value as arguments."]
    #[doc = ""]
    #[doc = " @param xTaskToSet  Task to set thread local storage pointer for"]
    #[doc = " @param xIndex The index of the pointer to set, from 0 to"]
    #[doc = "               configNUM_THREAD_LOCAL_STORAGE_POINTERS - 1."]
    #[doc = " @param pvValue  Pointer value to set."]
    #[doc = " @param pvDelCallback  Function to call to dispose of the local"]
    #[doc = "                       storage pointer when the task is deleted."]
    pub fn vTaskSetThreadLocalStoragePointerAndDelCallback(
        xTaskToSet: TaskHandle_t,
        xIndex: BaseType_t,
        pvValue: *mut c_types::c_void,
        pvDelCallback: TlsDeleteCallbackFunction_t,
    );
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationStackOverflowHook( TaskHandle_t xTask char *pcTaskName);"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = " The application stack overflow hook is called when a stack overflow is detected for a task."]
    #[doc = ""]
    #[doc = " Details on stack overflow detection can be found here: https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html"]
    #[doc = ""]
    #[doc = " @param xTask the task that just exceeded its stack boundaries."]
    #[doc = " @param pcTaskName A character string containing the name of the offending task."]
    pub fn vApplicationStackOverflowHook(xTask: TaskHandle_t, pcTaskName: *mut c_types::c_char);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer, StackType_t ** ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = " This function is used to provide a statically allocated block of memory to FreeRTOS to hold the Idle Task TCB.  This function is required when"]
    #[doc = " configSUPPORT_STATIC_ALLOCATION is set.  For more information see this URI: https://www.FreeRTOS.org/a00110.html#configSUPPORT_STATIC_ALLOCATION"]
    #[doc = ""]
    #[doc = " @param ppxIdleTaskTCBBuffer A handle to a statically allocated TCB buffer"]
    #[doc = " @param ppxIdleTaskStackBuffer A handle to a statically allocated Stack buffer for thie idle task"]
    #[doc = " @param pulIdleTaskStackSize A pointer to the number of elements that will fit in the allocated stack buffer"]
    pub fn vApplicationGetIdleTaskMemory(
        ppxIdleTaskTCBBuffer: *mut *mut StaticTask_t,
        ppxIdleTaskStackBuffer: *mut *mut StackType_t,
        pulIdleTaskStackSize: *mut u32,
    );
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Calls the hook function associated with xTask.  Passing xTask as NULL has"]
    #[doc = " the effect of calling the Running tasks (the calling task) hook function."]
    #[doc = ""]
    #[doc = " @param xTask  Handle of the task to call the hook for."]
    #[doc = " @param pvParameter  Parameter passed to the hook function for the task to interpret as it"]
    #[doc = " wants.  The return value is the value returned by the task hook function"]
    #[doc = " registered by the user."]
    pub fn xTaskCallApplicationTaskHook(
        xTask: TaskHandle_t,
        pvParameter: *mut c_types::c_void,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " xTaskGetIdleTaskHandle() is only available if"]
    #[doc = " INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h."]
    #[doc = ""]
    #[doc = " Simply returns the handle of the idle task.  It is not valid to call"]
    #[doc = " xTaskGetIdleTaskHandle() before the scheduler has been started."]
    pub fn xTaskGetIdleTaskHandle() -> TaskHandle_t;
}
extern "C" {
    #[doc = " configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for"]
    #[doc = " uxTaskGetSystemState() to be available."]
    #[doc = ""]
    #[doc = " uxTaskGetSystemState() populates an TaskStatus_t structure for each task in"]
    #[doc = " the system.  TaskStatus_t structures contain, among other things, members"]
    #[doc = " for the task handle, task name, task priority, task state, and total amount"]
    #[doc = " of run time consumed by the task.  See the TaskStatus_t structure"]
    #[doc = " definition in this file for the full member list."]
    #[doc = ""]
    #[doc = " NOTE: This function is intended for debugging use only as its use results in"]
    #[doc = " the scheduler remaining suspended for an extended period."]
    #[doc = ""]
    #[doc = " @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures."]
    #[doc = " The array must contain at least one TaskStatus_t structure for each task"]
    #[doc = " that is under the control of the RTOS.  The number of tasks under the control"]
    #[doc = " of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function."]
    #[doc = ""]
    #[doc = " @param uxArraySize The size of the array pointed to by the pxTaskStatusArray"]
    #[doc = " parameter.  The size is specified as the number of indexes in the array, or"]
    #[doc = " the number of TaskStatus_t structures contained in the array, not by the"]
    #[doc = " number of bytes in the array."]
    #[doc = ""]
    #[doc = " @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in"]
    #[doc = " FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the"]
    #[doc = " total run time (as defined by the run time stats clock, see"]
    #[doc = " https://www.FreeRTOS.org/rtos-run-time-stats.html) since the target booted."]
    #[doc = " pulTotalRunTime can be set to NULL to omit the total run time information."]
    #[doc = ""]
    #[doc = " @return The number of TaskStatus_t structures that were populated by"]
    #[doc = " uxTaskGetSystemState().  This should equal the number returned by the"]
    #[doc = " uxTaskGetNumberOfTasks() API function, but will be zero if the value passed"]
    #[doc = " in the uxArraySize parameter was too small."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = "  // This example demonstrates how a human readable table of run time stats"]
    #[doc = "  // information is generated from raw data provided by uxTaskGetSystemState()."]
    #[doc = "  // The human readable table is written to pcWriteBuffer"]
    #[doc = "  void vTaskGetRunTimeStats( char *pcWriteBuffer )"]
    #[doc = "  {"]
    #[doc = "  TaskStatus_t *pxTaskStatusArray;"]
    #[doc = "  volatile UBaseType_t uxArraySize, x;"]
    #[doc = "  uint32_t ulTotalRunTime, ulStatsAsPercentage;"]
    #[doc = ""]
    #[doc = "      // Make sure the write buffer does not contain a string."]
    #[doc = " *pcWriteBuffer = 0x00;"]
    #[doc = ""]
    #[doc = "      // Take a snapshot of the number of tasks in case it changes while this"]
    #[doc = "      // function is executing."]
    #[doc = "      uxArraySize = uxTaskGetNumberOfTasks();"]
    #[doc = ""]
    #[doc = "      // Allocate a TaskStatus_t structure for each task.  An array could be"]
    #[doc = "      // allocated statically at compile time."]
    #[doc = "      pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );"]
    #[doc = ""]
    #[doc = "      if( pxTaskStatusArray != NULL )"]
    #[doc = "      {"]
    #[doc = "          // Generate raw status information about each task."]
    #[doc = "          uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );"]
    #[doc = ""]
    #[doc = "          // For percentage calculations."]
    #[doc = "          ulTotalRunTime /= 100UL;"]
    #[doc = ""]
    #[doc = "          // Avoid divide by zero errors."]
    #[doc = "          if( ulTotalRunTime > 0 )"]
    #[doc = "          {"]
    #[doc = "              // For each populated position in the pxTaskStatusArray array,"]
    #[doc = "              // format the raw data as human readable ASCII data"]
    #[doc = "              for( x = 0; x < uxArraySize; x++ )"]
    #[doc = "              {"]
    #[doc = "                  // What percentage of the total run time has the task used?"]
    #[doc = "                  // This will always be rounded down to the nearest integer."]
    #[doc = "                  // ulTotalRunTimeDiv100 has already been divided by 100."]
    #[doc = "                  ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;"]
    #[doc = ""]
    #[doc = "                  if( ulStatsAsPercentage > 0UL )"]
    #[doc = "                  {"]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t%lu%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );"]
    #[doc = "                  }"]
    #[doc = "                  else"]
    #[doc = "                  {"]
    #[doc = "                      // If the percentage is zero here then the task has"]
    #[doc = "                      // consumed less than 1% of the total run time."]
    #[doc = "                      sprintf( pcWriteBuffer, \"%s\\t\\t%lu\\t\\t<1%%\\r\\n\", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );"]
    #[doc = "                  }"]
    #[doc = ""]
    #[doc = "                  pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );"]
    #[doc = "              }"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // The array is no longer needed, free the memory it consumes."]
    #[doc = "          vPortFree( pxTaskStatusArray );"]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = "  @endcode"]
    pub fn uxTaskGetSystemState(
        pxTaskStatusArray: *mut TaskStatus_t,
        uxArraySize: UBaseType_t,
        pulTotalRunTime: *mut u32,
    ) -> UBaseType_t;
}
extern "C" {
    #[doc = " List all the current tasks."]
    #[doc = ""]
    #[doc = " configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must"]
    #[doc = " both be defined as 1 for this function to be available.  See the"]
    #[doc = " configuration section of the FreeRTOS.org website for more information."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Lists all the current tasks, along with their current state and stack"]
    #[doc = " usage high water mark."]
    #[doc = ""]
    #[doc = " Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or"]
    #[doc = " suspended ('S')."]
    #[doc = ""]
    #[doc = " PLEASE NOTE:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskList() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays task"]
    #[doc = " names, states and stack usage."]
    #[doc = ""]
    #[doc = " vTaskList() has a dependency on the sprintf() C library function that might"]
    #[doc = " bloat the code size, use a lot of stack, and provide different results on"]
    #[doc = " different platforms.  An alternative, tiny, third party, and limited"]
    #[doc = " functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState()"]
    #[doc = " directly to get access to raw stats data, rather than indirectly through a"]
    #[doc = " call to vTaskList()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the above mentioned details"]
    #[doc = " will be written, in ASCII form.  This buffer is assumed to be large"]
    #[doc = " enough to contain the generated report.  Approximately 40 bytes per"]
    #[doc = " task should be sufficient."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskList vTaskList"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskList(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    #[doc = " Get the state of running tasks as a string"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " NOTE 1: This function will disable interrupts for its duration.  It is"]
    #[doc = " not intended for normal application runtime use but as a debug aid."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " Calling vTaskGetRunTimeStats() writes the total execution time of each"]
    #[doc = " task into a buffer, both as an absolute count value and as a percentage"]
    #[doc = " of the total system execution time."]
    #[doc = ""]
    #[doc = " NOTE 2:"]
    #[doc = ""]
    #[doc = " This function is provided for convenience only, and is used by many of the"]
    #[doc = " demo applications.  Do not consider it to be part of the scheduler."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the"]
    #[doc = " uxTaskGetSystemState() output into a human readable table that displays the"]
    #[doc = " amount of time each task has spent in the Running state in both absolute and"]
    #[doc = " percentage terms."]
    #[doc = ""]
    #[doc = " vTaskGetRunTimeStats() has a dependency on the sprintf() C library function"]
    #[doc = " that might bloat the code size, use a lot of stack, and provide different"]
    #[doc = " results on different platforms.  An alternative, tiny, third party, and"]
    #[doc = " limited functionality implementation of sprintf() is provided in many of the"]
    #[doc = " FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note"]
    #[doc = " printf-stdarg.c does not provide a full snprintf() implementation!)."]
    #[doc = ""]
    #[doc = " It is recommended that production systems call uxTaskGetSystemState() directly"]
    #[doc = " to get access to raw stats data, rather than indirectly through a call to"]
    #[doc = " vTaskGetRunTimeStats()."]
    #[doc = ""]
    #[doc = " @param pcWriteBuffer A buffer into which the execution times will be"]
    #[doc = " written, in ASCII form.  This buffer is assumed to be large enough to"]
    #[doc = " contain the generated report.  Approximately 40 bytes per task should"]
    #[doc = " be sufficient."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskGetRunTimeStats vTaskGetRunTimeStats"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn vTaskGetRunTimeStats(pcWriteBuffer: *mut c_types::c_char);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code"]
    #[doc = " uint32_t ulTaskGetIdleRunTimeCounter( void );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS"]
    #[doc = " must both be defined as 1 for this function to be available.  The application"]
    #[doc = " must also then provide definitions for"]
    #[doc = " portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()"]
    #[doc = " to configure a peripheral timer/counter and return the timers current count"]
    #[doc = " value respectively.  The counter should be at least 10 times the frequency of"]
    #[doc = " the tick count."]
    #[doc = ""]
    #[doc = " Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total"]
    #[doc = " accumulated execution time being stored for each task.  The resolution"]
    #[doc = " of the accumulated time value depends on the frequency of the timer"]
    #[doc = " configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro."]
    #[doc = " While uxTaskGetSystemState() and vTaskGetRunTimeStats() writes the total"]
    #[doc = " execution time of each task into a buffer, ulTaskGetIdleRunTimeCounter()"]
    #[doc = " returns the total execution time of just the idle task."]
    #[doc = ""]
    #[doc = " @return The total run time of the idle task.  This is the amount of time the"]
    #[doc = " idle task has actually been executing.  The unit of time is dependent on the"]
    #[doc = " frequency configured using the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and"]
    #[doc = " portGET_RUN_TIME_COUNTER_VALUE() macros."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup ulTaskGetIdleRunTimeCounter ulTaskGetIdleRunTimeCounter"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskUtils"]
    pub fn ulTaskGetIdleRunTimeCounter() -> u32;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyIndexed( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction );"]
    #[doc = " BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Sends a direct to task notification to a task, with an optional value and"]
    #[doc = " action."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotify() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotify() is equivalent to calling xTaskNotifyIndexed()"]
    #[doc = " with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotify() does"]
    #[doc = " not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The target notification value is bitwise ORed with ulValue."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The target notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The target notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification at the"]
    #[doc = " same array index (the task already had a notification pending at that index)."]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending at the"]
    #[doc = " same array index then the target notification value is set to ulValue and"]
    #[doc = " xTaskNotifyIndexed() will return pdPASS.  If the task being notified already"]
    #[doc = " had a notification pending at the same array index then no action is"]
    #[doc = " performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification at the specified array index without the"]
    #[doc = " notification value at that index being updated.  ulValue is not used and"]
    #[doc = " xTaskNotifyIndexed() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " pulPreviousNotificationValue -"]
    #[doc = " Can be used to pass out the subject task's notification value before any"]
    #[doc = " bits are modified by the notify function."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskNotifyIndexed xTaskNotifyIndexed"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotify(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyIndexedFromISR( TaskHandle_t xTaskToNotify, UBaseType_t uxIndexToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyIndexed() that can be used from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyFromISR()"]
    #[doc = " does not have this parameter and always sends notifications to index 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param ulValue Data that can be sent with the notification.  How the data is"]
    #[doc = " used depends on the value of the eAction parameter."]
    #[doc = ""]
    #[doc = " @param eAction Specifies how the notification updates the task's notification"]
    #[doc = " value, if at all.  Valid values for eAction are as follows:"]
    #[doc = ""]
    #[doc = " eSetBits -"]
    #[doc = " The task's notification value is bitwise ORed with ulValue.  xTaskNotify()"]
    #[doc = " always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eIncrement -"]
    #[doc = " The task's notification value is incremented.  ulValue is not used and"]
    #[doc = " xTaskNotify() always returns pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithOverwrite -"]
    #[doc = " The task's notification value is set to the value of ulValue, even if the"]
    #[doc = " task being notified had not yet processed the previous notification (the"]
    #[doc = " task already had a notification pending).  xTaskNotify() always returns"]
    #[doc = " pdPASS in this case."]
    #[doc = ""]
    #[doc = " eSetValueWithoutOverwrite -"]
    #[doc = " If the task being notified did not already have a notification pending then"]
    #[doc = " the task's notification value is set to ulValue and xTaskNotify() will"]
    #[doc = " return pdPASS.  If the task being notified already had a notification"]
    #[doc = " pending then no action is performed and pdFAIL is returned."]
    #[doc = ""]
    #[doc = " eNoAction -"]
    #[doc = " The task receives a notification without its notification value being"]
    #[doc = " updated.  ulValue is not used and xTaskNotify() always returns pdPASS in"]
    #[doc = " this case."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should"]
    #[doc = " be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @return Dependent on the value of eAction.  See the description of the"]
    #[doc = " eAction parameter."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskNotifyIndexedFromISR xTaskNotifyIndexedFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        ulValue: u32,
        eAction: eNotifyAction,
        pulPreviousNotificationValue: *mut u32,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyWaitIndexed( UBaseType_t uxIndexToWaitOn, uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification to be pending at a given index within"]
    #[doc = " an array of direct to task notifications."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " A notification sent to a task will remain pending until it is cleared by the"]
    #[doc = " task calling xTaskNotifyWaitIndexed() or ulTaskNotifyTakeIndexed() (or their"]
    #[doc = " un-indexed equivalents).  If the task was already in the Blocked state to"]
    #[doc = " wait for a notification when the notification arrives then the task will"]
    #[doc = " automatically be removed from the Blocked state (unblocked) and the"]
    #[doc = " notification cleared."]
    #[doc = ""]
    #[doc = " A task can use xTaskNotifyWaitIndexed() to [optionally] block to wait for a"]
    #[doc = " notification to be pending, or ulTaskNotifyTakeIndexed() to [optionally] block"]
    #[doc = " to wait for a notification value to have a non-zero value.  The task does"]
    #[doc = " not consume any CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyWait() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling xTaskNotifyWait() is equivalent to calling"]
    #[doc = " xTaskNotifyWaitIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be received.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyWait() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value"]
    #[doc = " will be cleared in the calling task's notification value before the task"]
    #[doc = " checks to see if any notifications are pending, and optionally blocks if no"]
    #[doc = " notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if"]
    #[doc = " limits.h is included) or 0xffffffffUL (if limits.h is not included) will have"]
    #[doc = " the effect of resetting the task's notification value to 0.  Setting"]
    #[doc = " ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged."]
    #[doc = ""]
    #[doc = " @param ulBitsToClearOnExit If a notification is pending or received before"]
    #[doc = " the calling task exits the xTaskNotifyWait() function then the task's"]
    #[doc = " notification value (see the xTaskNotify() API function) is passed out using"]
    #[doc = " the pulNotificationValue parameter.  Then any bits that are set in"]
    #[doc = " ulBitsToClearOnExit will be cleared in the task's notification value (note"]
    #[doc = " *pulNotificationValue is set before any bits are cleared).  Setting"]
    #[doc = " ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL"]
    #[doc = " (if limits.h is not included) will have the effect of resetting the task's"]
    #[doc = " notification value to 0 before the function exits.  Setting"]
    #[doc = " ulBitsToClearOnExit to 0 will leave the task's notification value unchanged"]
    #[doc = " when the function exits (in which case the value passed out in"]
    #[doc = " pulNotificationValue will match the task's notification value)."]
    #[doc = ""]
    #[doc = " @param pulNotificationValue Used to pass the task's notification value out"]
    #[doc = " of the function.  Note the value passed out will not be effected by the"]
    #[doc = " clearing of any bits caused by ulBitsToClearOnExit being non-zero."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for a notification to be received, should a notification"]
    #[doc = " not already be pending when xTaskNotifyWait() was called.  The task"]
    #[doc = " will not consume any processing time while it is in the Blocked state.  This"]
    #[doc = " is specified in kernel ticks, the macro pdMS_TO_TICKS( value_in_ms ) can be"]
    #[doc = " used to convert a time specified in milliseconds to a time specified in"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @return If a notification was received (including notifications that were"]
    #[doc = " already pending when xTaskNotifyWait was called) then pdPASS is"]
    #[doc = " returned.  Otherwise pdFAIL is returned."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskNotifyWaitIndexed xTaskNotifyWaitIndexed"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyWait(
        uxIndexToWaitOn: UBaseType_t,
        ulBitsToClearOnEntry: u32,
        ulBitsToClearOnExit: u32,
        pulNotificationValue: *mut u32,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskNotifyGiveIndexedFromISR( TaskHandle_t xTaskHandle, UBaseType_t uxIndexToNotify, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " A version of xTaskNotifyGiveIndexed() that can be called from an interrupt"]
    #[doc = " service routine (ISR)."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for more details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro"]
    #[doc = " to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " vTaskNotifyGiveIndexedFromISR() is intended for use when task notifications"]
    #[doc = " are used as light weight and faster binary or counting semaphore equivalents."]
    #[doc = " Actual FreeRTOS semaphores are given from an ISR using the"]
    #[doc = " xSemaphoreGiveFromISR() API function, the equivalent action that instead uses"]
    #[doc = " a task notification is vTaskNotifyGiveIndexedFromISR()."]
    #[doc = ""]
    #[doc = " When task notifications are being used as a binary or counting semaphore"]
    #[doc = " equivalent then the task being notified should wait for the notification"]
    #[doc = " using the ulTaskNotificationTakeIndexed() API function rather than the"]
    #[doc = " xTaskNotifyWaitIndexed() API function."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyFromISR() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyGiveFromISR() is equivalent to calling"]
    #[doc = " xTaskNotifyGiveIndexedFromISR() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTaskToNotify The handle of the task being notified.  The handle to a"]
    #[doc = " task can be returned from the xTaskCreate() API function used to create the"]
    #[doc = " task, and the handle of the currently running task can be obtained by calling"]
    #[doc = " xTaskGetCurrentTaskHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToNotify The index within the target task's array of"]
    #[doc = " notification values to which the notification is to be sent.  uxIndexToNotify"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " xTaskNotifyGiveFromISR() does not have this parameter and always sends"]
    #[doc = " notifications to index 0."]
    #[doc = ""]
    #[doc = " @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the"]
    #[doc = " task to which the notification was sent to leave the Blocked state, and the"]
    #[doc = " unblocked task has a priority higher than the currently running task.  If"]
    #[doc = " vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch"]
    #[doc = " should be requested before the interrupt is exited.  How a context switch is"]
    #[doc = " requested from an ISR is dependent on the port - see the documentation page"]
    #[doc = " for the port in use."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vTaskNotifyGiveIndexedFromISR vTaskNotifyGiveIndexedFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn vTaskGenericNotifyGiveFromISR(
        xTaskToNotify: TaskHandle_t,
        uxIndexToNotify: UBaseType_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint32_t ulTaskNotifyTakeIndexed( UBaseType_t uxIndexToWaitOn, BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Waits for a direct to task notification on a particular index in the calling"]
    #[doc = " task's notification array in a manner similar to taking a counting semaphore."]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this"]
    #[doc = " function to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " Events can be sent to a task using an intermediary object.  Examples of such"]
    #[doc = " objects are queues, semaphores, mutexes and event groups.  Task notifications"]
    #[doc = " are a method of sending an event directly to a task without the need for such"]
    #[doc = " an intermediary object."]
    #[doc = ""]
    #[doc = " A notification sent to a task can optionally perform an action, such as"]
    #[doc = " update, overwrite or increment one of the task's notification values.  In"]
    #[doc = " that way task notifications can be used to send data to a task, or be used as"]
    #[doc = " light weight and fast binary or counting semaphores."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() is intended for use when a task notification is"]
    #[doc = " used as a faster and lighter weight binary or counting semaphore alternative."]
    #[doc = " Actual FreeRTOS semaphores are taken using the xSemaphoreTake() API function,"]
    #[doc = " the equivalent action that instead uses a task notification is"]
    #[doc = " ulTaskNotifyTakeIndexed()."]
    #[doc = ""]
    #[doc = " When a task is using its notification value as a binary or counting semaphore"]
    #[doc = " other tasks should send notifications to it using the xTaskNotifyGiveIndexed()"]
    #[doc = " macro, or xTaskNotifyIndex() function with the eAction parameter set to"]
    #[doc = " eIncrement."]
    #[doc = ""]
    #[doc = " ulTaskNotifyTakeIndexed() can either clear the task's notification value at"]
    #[doc = " the array index specified by the uxIndexToWaitOn parameter to zero on exit,"]
    #[doc = " in which case the notification value acts like a binary semaphore, or"]
    #[doc = " decrement the notification value on exit, in which case the notification"]
    #[doc = " value acts like a counting semaphore."]
    #[doc = ""]
    #[doc = " A task can use ulTaskNotifyTakeIndexed() to [optionally] block to wait for"]
    #[doc = " the task's notification value to be non-zero.  The task does not consume any"]
    #[doc = " CPU time while it is in the Blocked state."]
    #[doc = ""]
    #[doc = " Where as xTaskNotifyWaitIndexed() will return when a notification is pending,"]
    #[doc = " ulTaskNotifyTakeIndexed() will return when the task's notification value is"]
    #[doc = " not zero."]
    #[doc = ""]
    #[doc = " **NOTE** Each notification within the array operates independently - a task"]
    #[doc = " can only block on one notification within the array at a time and will not be"]
    #[doc = " unblocked by a notification sent to any other array index."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyTake() is the original API function, and remains backward"]
    #[doc = " compatible by always operating on the notification value at index 0 in the"]
    #[doc = " array. Calling ulTaskNotifyTake() is equivalent to calling"]
    #[doc = " ulTaskNotifyTakeIndexed() with the uxIndexToWaitOn parameter set to 0."]
    #[doc = ""]
    #[doc = " @param uxIndexToWaitOn The index within the calling task's array of"]
    #[doc = " notification values on which the calling task will wait for a notification to"]
    #[doc = " be non-zero.  uxIndexToWaitOn must be less than"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES.  xTaskNotifyTake() does"]
    #[doc = " not have this parameter and always waits for notifications on index 0."]
    #[doc = ""]
    #[doc = " @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's"]
    #[doc = " notification value is decremented when the function exits.  In this way the"]
    #[doc = " notification value acts like a counting semaphore.  If xClearCountOnExit is"]
    #[doc = " not pdFALSE then the task's notification value is cleared to zero when the"]
    #[doc = " function exits.  In this way the notification value acts like a binary"]
    #[doc = " semaphore."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time that the task should wait in"]
    #[doc = " the Blocked state for the task's notification value to be greater than zero,"]
    #[doc = " should the count not already be greater than zero when"]
    #[doc = " ulTaskNotifyTake() was called.  The task will not consume any processing"]
    #[doc = " time while it is in the Blocked state.  This is specified in kernel ticks,"]
    #[doc = " the macro pdMS_TO_TICKS( value_in_ms ) can be used to convert a time"]
    #[doc = " specified in milliseconds to a time specified in ticks."]
    #[doc = ""]
    #[doc = " @return The task's notification count before it is either cleared to zero or"]
    #[doc = " decremented (see the xClearCountOnExit parameter)."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup ulTaskNotifyTakeIndexed ulTaskNotifyTakeIndexed"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyTake(
        uxIndexToWaitOn: UBaseType_t,
        xClearCountOnExit: BaseType_t,
        xTicksToWait: TickType_t,
    ) -> u32;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskNotifyStateClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToCLear );"]
    #[doc = ""]
    #[doc = " BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " If a notification is sent to an index within the array of notifications then"]
    #[doc = " the notification at that index is said to be 'pending' until it is read or"]
    #[doc = " explicitly cleared by the receiving task.  xTaskNotifyStateClearIndexed()"]
    #[doc = " is the function that clears a pending notification without reading the"]
    #[doc = " notification value.  The notification value at the same array index is not"]
    #[doc = " altered.  Set xTask to NULL to clear the notification state of the calling"]
    #[doc = " task."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  xTaskNotifyStateClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling xTaskNotifyStateClear() is equivalent to calling"]
    #[doc = " xTaskNotifyStateClearIndexed() with the uxIndexToNotify parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have a notification state"]
    #[doc = " cleared.  Set xTask to NULL to clear a notification state in the calling"]
    #[doc = " task.  To obtain a task's handle create the task using xTaskCreate() and"]
    #[doc = " make use of the pxCreatedTask parameter, or create the task using"]
    #[doc = " xTaskCreateStatic() and store the returned value, or use the task's name in"]
    #[doc = " a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values to act upon.  For example, setting uxIndexToClear to 1"]
    #[doc = " will clear the state of the notification at index 1 within the array."]
    #[doc = " uxIndexToClear must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyStateClear() does not have this parameter and always acts on the"]
    #[doc = " notification at index 0."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the task's notification state was set to"]
    #[doc = " eNotWaitingNotification, otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskNotifyStateClearIndexed xTaskNotifyStateClearIndexed"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn xTaskGenericNotifyStateClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task. h"]
    #[doc = " @code{c}"]
    #[doc = " uint32_t ulTaskNotifyValueClearIndexed( TaskHandle_t xTask, UBaseType_t uxIndexToClear, uint32_t ulBitsToClear );"]
    #[doc = ""]
    #[doc = " uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " See https://www.FreeRTOS.org/RTOS-task-notifications.html for details."]
    #[doc = ""]
    #[doc = " configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for these"]
    #[doc = " functions to be available."]
    #[doc = ""]
    #[doc = " Each task has a private array of \"notification values\" (or 'notifications'),"]
    #[doc = " each of which is a 32-bit unsigned integer (uint32_t).  The constant"]
    #[doc = " configTASK_NOTIFICATION_ARRAY_ENTRIES sets the number of indexes in the"]
    #[doc = " array, and (for backward compatibility) defaults to 1 if left undefined."]
    #[doc = " Prior to FreeRTOS V10.4.0 there was only one notification value per task."]
    #[doc = ""]
    #[doc = " ulTaskNotifyValueClearIndexed() clears the bits specified by the"]
    #[doc = " ulBitsToClear bit mask in the notification value at array index uxIndexToClear"]
    #[doc = " of the task referenced by xTask."]
    #[doc = ""]
    #[doc = " Backward compatibility information:"]
    #[doc = " Prior to FreeRTOS V10.4.0 each task had a single \"notification value\", and"]
    #[doc = " all task notification API functions operated on that value. Replacing the"]
    #[doc = " single notification value with an array of notification values necessitated a"]
    #[doc = " new set of API functions that could address specific notifications within the"]
    #[doc = " array.  ulTaskNotifyValueClear() is the original API function, and remains"]
    #[doc = " backward compatible by always operating on the notification value at index 0"]
    #[doc = " within the array. Calling ulTaskNotifyValueClear() is equivalent to calling"]
    #[doc = " ulTaskNotifyValueClearIndexed() with the uxIndexToClear parameter set to 0."]
    #[doc = ""]
    #[doc = " @param xTask The handle of the RTOS task that will have bits in one of its"]
    #[doc = " notification values cleared. Set xTask to NULL to clear bits in a"]
    #[doc = " notification value of the calling task.  To obtain a task's handle create the"]
    #[doc = " task using xTaskCreate() and make use of the pxCreatedTask parameter, or"]
    #[doc = " create the task using xTaskCreateStatic() and store the returned value, or"]
    #[doc = " use the task's name in a call to xTaskGetHandle()."]
    #[doc = ""]
    #[doc = " @param uxIndexToClear The index within the target task's array of"]
    #[doc = " notification values in which to clear the bits.  uxIndexToClear"]
    #[doc = " must be less than configTASK_NOTIFICATION_ARRAY_ENTRIES."]
    #[doc = " ulTaskNotifyValueClear() does not have this parameter and always clears bits"]
    #[doc = " in the notification value at index 0."]
    #[doc = ""]
    #[doc = " @param ulBitsToClear Bit mask of the bits to clear in the notification value of"]
    #[doc = " xTask. Set a bit to 1 to clear the corresponding bits in the task's notification"]
    #[doc = " value. Set ulBitsToClear to 0xffffffff (UINT_MAX on 32-bit architectures) to clear"]
    #[doc = " the notification value to 0.  Set ulBitsToClear to 0 to query the task's"]
    #[doc = " notification value without clearing any bits."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return The value of the target task's notification value before the bits"]
    #[doc = " specified by ulBitsToClear were cleared."]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup ulTaskNotifyValueClear ulTaskNotifyValueClear"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskNotifications"]
    pub fn ulTaskGenericNotifyValueClear(
        xTask: TaskHandle_t,
        uxIndexToClear: UBaseType_t,
        ulBitsToClear: u32,
    ) -> u32;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Capture the current time for future use with xTaskCheckForTimeOut()."]
    #[doc = ""]
    #[doc = " @param pxTimeOut Pointer to a timeout object into which the current time"]
    #[doc = " is to be captured.  The captured time includes the tick count and the number"]
    #[doc = " of times the tick count has overflowed since the system first booted."]
    #[doc = " \\defgroup vTaskSetTimeOutState vTaskSetTimeOutState"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\ingroup TaskCtrl"]
    #[doc = " @endcond"]
    pub fn vTaskSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code"]
    #[doc = " BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Determines if pxTicksToWait ticks has passed since a time was captured"]
    #[doc = " using a call to vTaskSetTimeOutState().  The captured time includes the tick"]
    #[doc = " count and the number of times the tick count has overflowed."]
    #[doc = ""]
    #[doc = " @param pxTimeOut The time status as captured previously using"]
    #[doc = " vTaskSetTimeOutState. If the timeout has not yet occurred, it is updated"]
    #[doc = " to reflect the current time status."]
    #[doc = " @param pxTicksToWait The number of ticks to check for timeout i.e. if"]
    #[doc = " pxTicksToWait ticks have passed since pxTimeOut was last updated (either by"]
    #[doc = " vTaskSetTimeOutState() or xTaskCheckForTimeOut()), the timeout has occurred."]
    #[doc = " If the timeout has not occurred, pxTicksToWait is updated to reflect the"]
    #[doc = " number of remaining ticks."]
    #[doc = ""]
    #[doc = " @return If timeout has occurred, pdTRUE is returned. Otherwise pdFALSE is"]
    #[doc = " returned and pxTicksToWait is updated to reflect the number of remaining"]
    #[doc = " ticks."]
    #[doc = ""]
    #[doc = " @see https://www.FreeRTOS.org/xTaskCheckForTimeOut.html"]
    #[doc = ""]
    #[doc = " Example Usage:"]
    #[doc = " @code"]
    #[doc = "  // Driver library function used to receive uxWantedBytes from an Rx buffer"]
    #[doc = "  // that is filled by a UART interrupt. If there are not enough bytes in the"]
    #[doc = "  // Rx buffer then the task enters the Blocked state until it is notified that"]
    #[doc = "  // more data has been placed into the buffer. If there is still not enough"]
    #[doc = "  // data then the task re-enters the Blocked state, and xTaskCheckForTimeOut()"]
    #[doc = "  // is used to re-calculate the Block time to ensure the total amount of time"]
    #[doc = "  // spent in the Blocked state does not exceed MAX_TIME_TO_WAIT. This"]
    #[doc = "  // continues until either the buffer contains at least uxWantedBytes bytes,"]
    #[doc = "  // or the total amount of time spent in the Blocked state reaches"]
    #[doc = "  // MAX_TIME_TO_WAIT – at which point the task reads however many bytes are"]
    #[doc = "  // available up to a maximum of uxWantedBytes."]
    #[doc = ""]
    #[doc = "  size_t xUART_Receive( uint8_t *pucBuffer, size_t uxWantedBytes )"]
    #[doc = "  {"]
    #[doc = "  size_t uxReceived = 0;"]
    #[doc = "  TickType_t xTicksToWait = MAX_TIME_TO_WAIT;"]
    #[doc = "  TimeOut_t xTimeOut;"]
    #[doc = ""]
    #[doc = "      // Initialize xTimeOut.  This records the time at which this function"]
    #[doc = "      // was entered."]
    #[doc = "      vTaskSetTimeOutState( &xTimeOut );"]
    #[doc = ""]
    #[doc = "      // Loop until the buffer contains the wanted number of bytes, or a"]
    #[doc = "      // timeout occurs."]
    #[doc = "      while( UART_bytes_in_rx_buffer( pxUARTInstance ) < uxWantedBytes )"]
    #[doc = "      {"]
    #[doc = "          // The buffer didn't contain enough data so this task is going to"]
    #[doc = "          // enter the Blocked state. Adjusting xTicksToWait to account for"]
    #[doc = "          // any time that has been spent in the Blocked state within this"]
    #[doc = "          // function so far to ensure the total amount of time spent in the"]
    #[doc = "          // Blocked state does not exceed MAX_TIME_TO_WAIT."]
    #[doc = "          if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) != pdFALSE )"]
    #[doc = "          {"]
    #[doc = "              //Timed out before the wanted number of bytes were available,"]
    #[doc = "              // exit the loop."]
    #[doc = "              break;"]
    #[doc = "          }"]
    #[doc = ""]
    #[doc = "          // Wait for a maximum of xTicksToWait ticks to be notified that the"]
    #[doc = "          // receive interrupt has placed more data into the buffer."]
    #[doc = "          ulTaskNotifyTake( pdTRUE, xTicksToWait );"]
    #[doc = "      }"]
    #[doc = ""]
    #[doc = "      // Attempt to read uxWantedBytes from the receive buffer into pucBuffer."]
    #[doc = "      // The actual number of bytes read (which might be less than"]
    #[doc = "      // uxWantedBytes) is returned."]
    #[doc = "      uxReceived = UART_read_from_receive_buffer( pxUARTInstance,"]
    #[doc = "                                                  pucBuffer,"]
    #[doc = "                                                  uxWantedBytes );"]
    #[doc = ""]
    #[doc = "      return uxReceived;"]
    #[doc = "  }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xTaskCheckForTimeOut xTaskCheckForTimeOut"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup TaskCtrl"]
    pub fn xTaskCheckForTimeOut(
        pxTimeOut: *mut TimeOut_t,
        pxTicksToWait: *mut TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " task.h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " This function corrects the tick count value after the application code has held"]
    #[doc = " interrupts disabled for an extended period resulting in tick interrupts having"]
    #[doc = " been missed."]
    #[doc = ""]
    #[doc = " This function is similar to vTaskStepTick(), however, unlike"]
    #[doc = " vTaskStepTick(), xTaskCatchUpTicks() may move the tick count forward past a"]
    #[doc = " time at which a task should be removed from the blocked state.  That means"]
    #[doc = " tasks may have to be removed from the blocked state as the tick count is"]
    #[doc = " moved."]
    #[doc = ""]
    #[doc = " @param xTicksToCatchUp The number of tick interrupts that have been missed due to"]
    #[doc = " interrupts being disabled.  Its value is not computed automatically, so must be"]
    #[doc = " computed by the application writer."]
    #[doc = ""]
    #[doc = " @return pdTRUE if moving the tick count forward resulted in a task leaving the"]
    #[doc = " blocked state and a context switch being performed.  Otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " \\defgroup xTaskCatchUpTicks xTaskCatchUpTicks"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\ingroup TaskCtrl"]
    #[doc = " @endcond"]
    pub fn xTaskCatchUpTicks(xTicksToCatchUp: TickType_t) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    pub fn xTaskGetCurrentTaskHandleForCPU(cpuid: BaseType_t) -> TaskHandle_t;
}
extern "C" {
    #[doc = " Get the handle of idle task for the given CPU."]
    #[doc = ""]
    #[doc = " xTaskGetIdleTaskHandleForCPU() is only available if"]
    #[doc = " INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h."]
    #[doc = ""]
    #[doc = " @param cpuid The CPU to get the handle for"]
    #[doc = ""]
    #[doc = " @return Idle task handle of a given cpu. It is not valid to call"]
    #[doc = " xTaskGetIdleTaskHandleForCPU() before the scheduler has been started."]
    pub fn xTaskGetIdleTaskHandleForCPU(cpuid: UBaseType_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xTaskGetAffinity(xTask: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskIncrementTick() -> BaseType_t;
}
extern "C" {
    pub fn vTaskPlaceOnEventList(pxEventList: *mut List_t, xTicksToWait: TickType_t);
}
extern "C" {
    pub fn vTaskPlaceOnUnorderedEventList(
        pxEventList: *mut List_t,
        xItemValue: TickType_t,
        xTicksToWait: TickType_t,
    );
}
extern "C" {
    pub fn vTaskPlaceOnEventListRestricted(
        pxEventList: *mut List_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xTaskRemoveFromEventList(pxEventList: *const List_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskRemoveFromUnorderedEventList(
        pxEventListItem: *mut ListItem_t,
        xItemValue: TickType_t,
    );
}
extern "C" {
    pub fn vTaskSwitchContext();
}
extern "C" {
    pub fn uxTaskResetEventItemValue() -> TickType_t;
}
extern "C" {
    pub fn xTaskGetCurrentTaskHandle() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskMissedYield();
}
extern "C" {
    pub fn xTaskGetSchedulerState() -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityInherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xTaskPriorityDisinherit(pxMutexHolder: TaskHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn vTaskPriorityDisinheritAfterTimeout(
        pxMutexHolder: TaskHandle_t,
        uxHighestPriorityWaitingTask: UBaseType_t,
    );
}
extern "C" {
    pub fn uxTaskGetTaskNumber(xTask: TaskHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn vTaskSetTaskNumber(xTask: TaskHandle_t, uxHandle: UBaseType_t);
}
extern "C" {
    pub fn vTaskStepTick(xTicksToJump: TickType_t);
}
extern "C" {
    pub fn eTaskConfirmSleepModeStatus() -> eSleepModeStatus;
}
extern "C" {
    pub fn pvTaskIncrementMutexHeldCount() -> TaskHandle_t;
}
extern "C" {
    pub fn vTaskInternalSetTimeOutState(pxTimeOut: *mut TimeOut_t);
}
extern "C" {
    #[doc = " @brief  Initialize the Task Watchdog Timer (TWDT)"]
    #[doc = ""]
    #[doc = " This function configures and initializes the TWDT. If the TWDT is already"]
    #[doc = " initialized when this function is called, this function will update the"]
    #[doc = " TWDT's timeout period and panic configurations instead. After initializing"]
    #[doc = " the TWDT, any task can elect to be watched by the TWDT by subscribing to it"]
    #[doc = " using esp_task_wdt_add()."]
    #[doc = ""]
    #[doc = " @param[in]  timeout     Timeout period of TWDT in seconds"]
    #[doc = " @param[in]  panic       Flag that controls whether the panic handler will be"]
    #[doc = "                         executed when the TWDT times out"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK: Initialization was successful"]
    #[doc = "     - ESP_ERR_NO_MEM: Initialization failed due to lack of memory"]
    #[doc = ""]
    #[doc = " @note   esp_task_wdt_init() must only be called after the scheduler"]
    #[doc = "         started"]
    pub fn esp_task_wdt_init(timeout: u32, panic: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Deinitialize the Task Watchdog Timer (TWDT)"]
    #[doc = ""]
    #[doc = " This function will deinitialize the TWDT. Calling this function whilst tasks"]
    #[doc = " are still subscribed to the TWDT, or when the TWDT is already deinitialized,"]
    #[doc = " will result in an error code being returned."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: TWDT successfully deinitialized"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Error, tasks are still subscribed to the TWDT"]
    #[doc = "      - ESP_ERR_NOT_FOUND: Error, TWDT has already been deinitialized"]
    pub fn esp_task_wdt_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Subscribe a task to the Task Watchdog Timer (TWDT)"]
    #[doc = ""]
    #[doc = " This function subscribes a task to the TWDT. Each subscribed task must"]
    #[doc = " periodically call esp_task_wdt_reset() to prevent the TWDT from elapsing its"]
    #[doc = " timeout period. Failure to do so will result in a TWDT timeout. If the task"]
    #[doc = " being subscribed is one of the Idle Tasks, this function will automatically"]
    #[doc = " enable esp_task_wdt_reset() to called from the Idle Hook of the Idle Task."]
    #[doc = " Calling this function whilst the TWDT is uninitialized or attempting to"]
    #[doc = " subscribe an already subscribed task will result in an error code being"]
    #[doc = " returned."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle of the task. Input NULL to subscribe the current"]
    #[doc = "                     running task to the TWDT"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK: Successfully subscribed the task to the TWDT"]
    #[doc = "     - ESP_ERR_INVALID_ARG: Error, the task is already subscribed"]
    #[doc = "     - ESP_ERR_NO_MEM: Error, could not subscribe the task due to lack of"]
    #[doc = "                       memory"]
    #[doc = "     - ESP_ERR_INVALID_STATE: Error, the TWDT has not been initialized yet"]
    pub fn esp_task_wdt_add(handle: TaskHandle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Reset the Task Watchdog Timer (TWDT) on behalf of the currently"]
    #[doc = "         running task"]
    #[doc = ""]
    #[doc = " This function will reset the TWDT on behalf of the currently running task."]
    #[doc = " Each subscribed task must periodically call this function to prevent the"]
    #[doc = " TWDT from timing out. If one or more subscribed tasks fail to reset the"]
    #[doc = " TWDT on their own behalf, a TWDT timeout will occur. If the IDLE tasks have"]
    #[doc = " been subscribed to the TWDT, they will automatically call this function from"]
    #[doc = " their idle hooks. Calling this function from a task that has not subscribed"]
    #[doc = " to the TWDT, or when the TWDT is uninitialized will result in an error code"]
    #[doc = " being returned."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK: Successfully reset the TWDT on behalf of the currently"]
    #[doc = "               running task"]
    #[doc = "     - ESP_ERR_NOT_FOUND: Error, the current running task has not subscribed"]
    #[doc = "                          to the TWDT"]
    #[doc = "     - ESP_ERR_INVALID_STATE: Error, the TWDT has not been initialized yet"]
    pub fn esp_task_wdt_reset() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Unsubscribes a task from the Task Watchdog Timer (TWDT)"]
    #[doc = ""]
    #[doc = " This function will unsubscribe a task from the TWDT. After being"]
    #[doc = " unsubscribed, the task should no longer call esp_task_wdt_reset(). If the"]
    #[doc = " task is an IDLE task, this function will automatically disable the calling"]
    #[doc = " of esp_task_wdt_reset() from the Idle Hook. Calling this function whilst the"]
    #[doc = " TWDT is uninitialized or attempting to unsubscribe an already unsubscribed"]
    #[doc = " task from the TWDT will result in an error code being returned."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle of the task. Input NULL to unsubscribe the"]
    #[doc = "                     current running task."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK: Successfully unsubscribed the task from the TWDT"]
    #[doc = "     - ESP_ERR_INVALID_ARG: Error, the task is already unsubscribed"]
    #[doc = "     - ESP_ERR_INVALID_STATE: Error, the TWDT has not been initialized yet"]
    pub fn esp_task_wdt_delete(handle: TaskHandle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Query whether a task is subscribed to the Task Watchdog Timer (TWDT)"]
    #[doc = ""]
    #[doc = " This function will query whether a task is currently subscribed to the TWDT,"]
    #[doc = " or whether the TWDT is initialized."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle of the task. Input NULL to query the current"]
    #[doc = "                     running task."]
    #[doc = ""]
    #[doc = " @return:"]
    #[doc = "     - ESP_OK: The task is currently subscribed to the TWDT"]
    #[doc = "     - ESP_ERR_NOT_FOUND: The task is currently not subscribed to the TWDT"]
    #[doc = "     - ESP_ERR_INVALID_STATE: The TWDT is not initialized, therefore no tasks"]
    #[doc = "                              can be subscribed"]
    pub fn esp_task_wdt_status(handle: TaskHandle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Initialize the non-CPU-specific parts of interrupt watchdog."]
    #[doc = "         This is called in the init code if the interrupt watchdog"]
    #[doc = "         is enabled in menuconfig."]
    #[doc = ""]
    pub fn esp_int_wdt_init();
}
extern "C" {
    #[doc = " @brief  Enable the interrupt watchdog on the current CPU. This is called"]
    #[doc = "         in the init code by both CPUs if the interrupt watchdog is enabled"]
    #[doc = "         in menuconfig."]
    #[doc = ""]
    pub fn esp_int_wdt_cpu_init();
}
#[doc = "< ESP32 station interface"]
pub const esp_interface_t_ESP_IF_WIFI_STA: esp_interface_t = 0;
#[doc = "< ESP32 soft-AP interface"]
pub const esp_interface_t_ESP_IF_WIFI_AP: esp_interface_t = 1;
#[doc = "< ESP32 ethernet interface"]
pub const esp_interface_t_ESP_IF_ETH: esp_interface_t = 2;
pub const esp_interface_t_ESP_IF_MAX: esp_interface_t = 3;
pub type esp_interface_t = c_types::c_uint;
#[doc = " @brief Parameters for console initialization"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_console_config_t {
    #[doc = "!< length of command line buffer, in bytes"]
    pub max_cmdline_length: size_t,
    #[doc = "!< maximum number of command line arguments to parse"]
    pub max_cmdline_args: size_t,
    #[doc = "!< ASCII color code of hint text"]
    pub hint_color: c_types::c_int,
    #[doc = "!< Set to 1 to print hint text in bold"]
    pub hint_bold: c_types::c_int,
}
#[doc = " @brief Parameters for console REPL (Read Eval Print Loop)"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_console_repl_config_t {
    #[doc = "!< maximum length for the history"]
    pub max_history_len: u32,
    #[doc = "!< file path used to save history commands, set to NULL won't save to file system"]
    pub history_save_path: *const c_types::c_char,
    #[doc = "!< repl task stack size"]
    pub task_stack_size: u32,
    #[doc = "!< repl task priority"]
    pub task_priority: u32,
    #[doc = "!< prompt (NULL represents default: \"esp> \")"]
    pub prompt: *const c_types::c_char,
    #[doc = "!< maximum length of a command line. If 0, default value will be used"]
    pub max_cmdline_length: size_t,
}
impl Default for esp_console_repl_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Parameters for console device: UART"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_console_dev_uart_config_t {
    #[doc = "!< UART channel number (count from zero)"]
    pub channel: c_types::c_int,
    #[doc = "!< Comunication baud rate"]
    pub baud_rate: c_types::c_int,
    #[doc = "!< GPIO number for TX path, -1 means using default one"]
    pub tx_gpio_num: c_types::c_int,
    #[doc = "!< GPIO number for RX path, -1 means using default one"]
    pub rx_gpio_num: c_types::c_int,
}
#[doc = " @brief Parameters for console device: USB CDC"]
#[doc = ""]
#[doc = " @note It's an empty structure for now, reserved for future"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_console_dev_usb_cdc_config_t {}
extern "C" {
    #[doc = " @brief initialize console module"]
    #[doc = " @param config console configuration"]
    #[doc = " @note  Call this once before using other console module features"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if out of memory"]
    #[doc = "      - ESP_ERR_INVALID_STATE if already initialized"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the configuration is invalid"]
    pub fn esp_console_init(config: *const esp_console_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief de-initialize console module"]
    #[doc = " @note  Call this once when done using console module functions"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if not initialized yet"]
    pub fn esp_console_deinit() -> esp_err_t;
}
#[doc = " @brief Console command main function"]
#[doc = " @param argc number of arguments"]
#[doc = " @param argv array with argc entries, each pointing to a zero-terminated string argument"]
#[doc = " @return console command return code, 0 indicates \"success\""]
pub type esp_console_cmd_func_t = ::core::option::Option<
    unsafe extern "C" fn(argc: c_types::c_int, argv: *mut *mut c_types::c_char) -> c_types::c_int,
>;
#[doc = " @brief Console command description"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_console_cmd_t {
    #[doc = " Command name. Must not be NULL, must not contain spaces."]
    #[doc = " The pointer must be valid until the call to esp_console_deinit."]
    pub command: *const c_types::c_char,
    #[doc = " Help text for the command, shown by help command."]
    #[doc = " If set, the pointer must be valid until the call to esp_console_deinit."]
    #[doc = " If not set, the command will not be listed in 'help' output."]
    pub help: *const c_types::c_char,
    #[doc = " Hint text, usually lists possible arguments."]
    #[doc = " If set to NULL, and 'argtable' field is non-NULL, hint will be generated"]
    #[doc = " automatically"]
    pub hint: *const c_types::c_char,
    #[doc = " Pointer to a function which implements the command."]
    pub func: esp_console_cmd_func_t,
    #[doc = " Array or structure of pointers to arg_xxx structures, may be NULL."]
    #[doc = " Used to generate hint text if 'hint' is set to NULL."]
    #[doc = " Array/structure which this field points to must end with an arg_end."]
    #[doc = " Only used for the duration of esp_console_cmd_register call."]
    pub argtable: *mut c_types::c_void,
}
impl Default for esp_console_cmd_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Register console command"]
    #[doc = " @param cmd pointer to the command description; can point to a temporary value"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if out of memory"]
    #[doc = "      - ESP_ERR_INVALID_ARG if command description includes invalid arguments"]
    pub fn esp_console_cmd_register(cmd: *const esp_console_cmd_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Run command line"]
    #[doc = " @param cmdline command line (command name followed by a number of arguments)"]
    #[doc = " @param[out] cmd_ret return code from the command (set if command was run)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK, if command was run"]
    #[doc = "      - ESP_ERR_INVALID_ARG, if the command line is empty, or only contained"]
    #[doc = "        whitespace"]
    #[doc = "      - ESP_ERR_NOT_FOUND, if command with given name wasn't registered"]
    #[doc = "      - ESP_ERR_INVALID_STATE, if esp_console_init wasn't called"]
    pub fn esp_console_run(
        cmdline: *const c_types::c_char,
        cmd_ret: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Split command line into arguments in place"]
    #[doc = " @verbatim"]
    #[doc = " - This function finds whitespace-separated arguments in the given input line."]
    #[doc = ""]
    #[doc = "     'abc def 1 20 .3' -> [ 'abc', 'def', '1', '20', '.3' ]"]
    #[doc = ""]
    #[doc = " - Argument which include spaces may be surrounded with quotes. In this case"]
    #[doc = "   spaces are preserved and quotes are stripped."]
    #[doc = ""]
    #[doc = "     'abc \"123 456\" def' -> [ 'abc', '123 456', 'def' ]"]
    #[doc = ""]
    #[doc = " - Escape sequences may be used to produce backslash, double quote, and space:"]
    #[doc = ""]
    #[doc = "     'a\\ b\\\\c\\\"' -> [ 'a b\\c\"' ]"]
    #[doc = " @endverbatim"]
    #[doc = " @note Pointers to at most argv_size - 1 arguments are returned in argv array."]
    #[doc = "       The pointer after the last one (i.e. argv[argc]) is set to NULL."]
    #[doc = ""]
    #[doc = " @param line pointer to buffer to parse; it is modified in place"]
    #[doc = " @param argv array where the pointers to arguments are written"]
    #[doc = " @param argv_size number of elements in argv_array (max. number of arguments)"]
    #[doc = " @return number of arguments found (argc)"]
    pub fn esp_console_split_argv(
        line: *mut c_types::c_char,
        argv: *mut *mut c_types::c_char,
        argv_size: size_t,
    ) -> size_t;
}
extern "C" {
    #[doc = " @brief Callback which provides command completion for linenoise library"]
    #[doc = ""]
    #[doc = " When using linenoise for line editing, command completion support"]
    #[doc = " can be enabled like this:"]
    #[doc = ""]
    #[doc = "   linenoiseSetCompletionCallback(&esp_console_get_completion);"]
    #[doc = ""]
    #[doc = " @param buf the string typed by the user"]
    #[doc = " @param lc linenoiseCompletions to be filled in"]
    pub fn esp_console_get_completion(buf: *const c_types::c_char, lc: *mut linenoiseCompletions);
}
extern "C" {
    #[doc = " @brief Callback which provides command hints for linenoise library"]
    #[doc = ""]
    #[doc = " When using linenoise for line editing, hints support can be enabled as"]
    #[doc = " follows:"]
    #[doc = ""]
    #[doc = "   linenoiseSetHintsCallback((linenoiseHintsCallback*) &esp_console_get_hint);"]
    #[doc = ""]
    #[doc = " The extra cast is needed because linenoiseHintsCallback is defined as"]
    #[doc = " returning a char* instead of const char*."]
    #[doc = ""]
    #[doc = " @param buf line typed by the user"]
    #[doc = " @param[out] color ANSI color code to be used when displaying the hint"]
    #[doc = " @param[out] bold set to 1 if hint has to be displayed in bold"]
    #[doc = " @return string containing the hint text. This string is persistent and should"]
    #[doc = "         not be freed (i.e. linenoiseSetFreeHintsCallback should not be used)."]
    pub fn esp_console_get_hint(
        buf: *const c_types::c_char,
        color: *mut c_types::c_int,
        bold: *mut c_types::c_int,
    ) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " @brief Register a 'help' command"]
    #[doc = ""]
    #[doc = " Default 'help' command prints the list of registered commands along with"]
    #[doc = " hints and help strings."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE, if esp_console_init wasn't called"]
    pub fn esp_console_register_help_command() -> esp_err_t;
}
#[doc = " @brief Console REPL base structure"]
#[doc = ""]
pub type esp_console_repl_t = esp_console_repl_s;
#[doc = " @brief Console REPL base structure"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_console_repl_s {
    #[doc = " @brief Delete console REPL environment"]
    #[doc = " @param[in] repl REPL handle returned from esp_console_new_repl_xxx"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_FAIL on errors"]
    pub del:
        ::core::option::Option<unsafe extern "C" fn(repl: *mut esp_console_repl_t) -> esp_err_t>,
}
extern "C" {
    #[doc = " @brief Establish a console REPL environment over UART driver"]
    #[doc = ""]
    #[doc = " @param[in] dev_config UART device configuration"]
    #[doc = " @param[in] repl_config REPL configuration"]
    #[doc = " @param[out] ret_repl return REPL handle after initialization succeed, return NULL otherwise"]
    #[doc = ""]
    #[doc = " @note This is a all-in-one function to establish the environment needed for REPL, includes:"]
    #[doc = "       - Install the UART driver on the console UART (8n1, 115200, REF_TICK clock source)"]
    #[doc = "       - Configures the stdin/stdout to go through the UART driver"]
    #[doc = "       - Initializes linenoise"]
    #[doc = "       - Spawn new thread to run REPL in the background"]
    #[doc = ""]
    #[doc = " @attention This function is meant to be used in the examples to make the code more compact."]
    #[doc = "            Applications which use console functionality should be based on"]
    #[doc = "            the underlying linenoise and esp_console functions."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_FAIL Parameter error"]
    pub fn esp_console_new_repl_uart(
        dev_config: *const esp_console_dev_uart_config_t,
        repl_config: *const esp_console_repl_config_t,
        ret_repl: *mut *mut esp_console_repl_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Establish a console REPL environment over USB CDC"]
    #[doc = ""]
    #[doc = " @param[in] dev_config USB CDC configuration"]
    #[doc = " @param[in] repl_config REPL configuration"]
    #[doc = " @param[out] ret_repl return REPL handle after initialization succeed, return NULL otherwise"]
    #[doc = ""]
    #[doc = " @note This is a all-in-one function to establish the environment needed for REPL, includes:"]
    #[doc = "       - Initializes linenoise"]
    #[doc = "       - Spawn new thread to run REPL in the background"]
    #[doc = ""]
    #[doc = " @attention This function is meant to be used in the examples to make the code more compact."]
    #[doc = "            Applications which use console functionality should be based on"]
    #[doc = "            the underlying linenoise and esp_console functions."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_FAIL Parameter error"]
    pub fn esp_console_new_repl_usb_cdc(
        dev_config: *const esp_console_dev_usb_cdc_config_t,
        repl_config: *const esp_console_repl_config_t,
        ret_repl: *mut *mut esp_console_repl_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start REPL environment"]
    #[doc = " @param[in] repl REPL handle returned from esp_console_new_repl_xxx"]
    #[doc = " @note Once the REPL got started, it won't be stopped until user call repl->del(repl) to destory the REPL environment."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE, if repl has started already"]
    pub fn esp_console_start_repl(repl: *mut esp_console_repl_t) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linenoiseCompletions {
    pub len: size_t,
    pub cvec: *mut *mut c_types::c_char,
}
impl Default for linenoiseCompletions {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type linenoiseCompletionCallback = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const c_types::c_char, arg2: *mut linenoiseCompletions),
>;
pub type linenoiseHintsCallback = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *const c_types::c_char,
        color: *mut c_types::c_int,
        bold: *mut c_types::c_int,
    ) -> *mut c_types::c_char,
>;
pub type linenoiseFreeHintsCallback =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>;
extern "C" {
    pub fn linenoiseSetCompletionCallback(arg1: linenoiseCompletionCallback);
}
extern "C" {
    pub fn linenoiseSetHintsCallback(arg1: linenoiseHintsCallback);
}
extern "C" {
    pub fn linenoiseSetFreeHintsCallback(arg1: linenoiseFreeHintsCallback);
}
extern "C" {
    pub fn linenoiseAddCompletion(arg1: *mut linenoiseCompletions, arg2: *const c_types::c_char);
}
extern "C" {
    pub fn linenoiseProbe() -> c_types::c_int;
}
extern "C" {
    pub fn linenoise(prompt: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn linenoiseFree(ptr: *mut c_types::c_void);
}
extern "C" {
    pub fn linenoiseHistoryAdd(line: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn linenoiseHistorySetMaxLen(len: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn linenoiseHistorySave(filename: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn linenoiseHistoryLoad(filename: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn linenoiseHistoryFree();
}
extern "C" {
    pub fn linenoiseClearScreen();
}
extern "C" {
    pub fn linenoiseSetMultiLine(ml: c_types::c_int);
}
extern "C" {
    pub fn linenoiseSetDumbMode(set: c_types::c_int);
}
extern "C" {
    pub fn linenoiseIsDumbMode() -> bool;
}
extern "C" {
    pub fn linenoisePrintKeyCodes();
}
extern "C" {
    pub fn linenoiseAllowEmpty(arg1: bool);
}
extern "C" {
    pub fn linenoiseSetMaxLineLen(len: size_t) -> c_types::c_int;
}
pub type locale_t = *mut __locale_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tm {
    pub tm_sec: c_types::c_int,
    pub tm_min: c_types::c_int,
    pub tm_hour: c_types::c_int,
    pub tm_mday: c_types::c_int,
    pub tm_mon: c_types::c_int,
    pub tm_year: c_types::c_int,
    pub tm_wday: c_types::c_int,
    pub tm_yday: c_types::c_int,
    pub tm_isdst: c_types::c_int,
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn difftime(_time2: time_t, _time1: time_t) -> f64;
}
extern "C" {
    pub fn mktime(_timeptr: *mut tm) -> time_t;
}
extern "C" {
    pub fn time(_timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn asctime(_tblock: *const tm) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ctime(_time: *const time_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn gmtime(_timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(_timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn strftime(
        _s: *mut c_types::c_char,
        _maxsize: size_t,
        _fmt: *const c_types::c_char,
        _t: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        _s: *mut c_types::c_char,
        _maxsize: size_t,
        _fmt: *const c_types::c_char,
        _t: *const tm,
        _l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn asctime_r(arg1: *const tm, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ctime_r(arg1: *const time_t, arg2: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn _tzset_r(arg1: *mut _reent);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __tzrule_struct {
    pub ch: c_types::c_char,
    pub m: c_types::c_int,
    pub n: c_types::c_int,
    pub d: c_types::c_int,
    pub s: c_types::c_int,
    pub change: time_t,
    pub offset: c_types::c_long,
}
pub type __tzrule_type = __tzrule_struct;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __tzinfo_struct {
    pub __tznorth: c_types::c_int,
    pub __tzyear: c_types::c_int,
    pub __tzrule: [__tzrule_type; 2usize],
}
pub type __tzinfo_type = __tzinfo_struct;
extern "C" {
    pub fn __gettzinfo() -> *mut __tzinfo_type;
}
extern "C" {
    pub static mut _timezone: c_types::c_long;
}
extern "C" {
    pub static mut _daylight: c_types::c_int;
}
extern "C" {
    pub static mut _tzname: [*mut c_types::c_char; 2usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: c_types::c_int,
    pub sival_ptr: *mut c_types::c_void,
}
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: c_types::c_int,
    pub sigev_signo: c_types::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl Default for sigevent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: c_types::c_int,
    pub si_code: c_types::c_int,
    pub si_value: sigval,
}
impl Default for siginfo_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _sig_func_ptr = ::core::option::Option<unsafe extern "C" fn(arg1: c_types::c_int)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigaction {
    pub sa_handler: _sig_func_ptr,
    pub sa_mask: sigset_t,
    pub sa_flags: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut c_types::c_void,
    pub ss_flags: c_types::c_int,
    pub ss_size: size_t,
}
impl Default for sigaltstack {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type stack_t = sigaltstack;
extern "C" {
    pub fn sigprocmask(
        arg1: c_types::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: c_types::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: c_types::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> c_types::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> c_types::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> c_types::c_int;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> c_types::c_int;
}
extern "C" {
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigpause(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sigwaitinfo(arg1: *const sigset_t, arg2: *mut siginfo_t) -> c_types::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        arg1: *const sigset_t,
        arg2: *mut siginfo_t,
        arg3: *const timespec,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn sigqueue(arg1: pid_t, arg2: c_types::c_int, arg3: sigval) -> c_types::c_int;
}
pub type sig_atomic_t = c_types::c_int;
pub type sig_t = _sig_func_ptr;
extern "C" {
    pub fn _signal_r(arg1: *mut _reent, arg2: c_types::c_int, arg3: _sig_func_ptr)
        -> _sig_func_ptr;
}
extern "C" {
    pub fn _raise_r(arg1: *mut _reent, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn signal(arg1: c_types::c_int, arg2: _sig_func_ptr) -> _sig_func_ptr;
}
extern "C" {
    pub fn raise(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn psignal(arg1: c_types::c_int, arg2: *const c_types::c_char);
}
extern "C" {
    pub fn clock_settime(clock_id: clockid_t, tp: *const timespec) -> c_types::c_int;
}
extern "C" {
    pub fn clock_gettime(clock_id: clockid_t, tp: *mut timespec) -> c_types::c_int;
}
extern "C" {
    pub fn clock_getres(clock_id: clockid_t, res: *mut timespec) -> c_types::c_int;
}
extern "C" {
    pub fn timer_create(
        clock_id: clockid_t,
        evp: *mut sigevent,
        timerid: *mut timer_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn timer_delete(timerid: timer_t) -> c_types::c_int;
}
extern "C" {
    pub fn timer_settime(
        timerid: timer_t,
        flags: c_types::c_int,
        value: *const itimerspec,
        ovalue: *mut itimerspec,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn timer_gettime(timerid: timer_t, value: *mut itimerspec) -> c_types::c_int;
}
extern "C" {
    pub fn timer_getoverrun(timerid: timer_t) -> c_types::c_int;
}
extern "C" {
    pub fn nanosleep(rqtp: *const timespec, rmtp: *mut timespec) -> c_types::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        clock_id: clockid_t,
        flags: c_types::c_int,
        rqtp: *const timespec,
        rmtp: *mut timespec,
    ) -> c_types::c_int;
}
pub const ARG_TERMINATOR: c_types::c_uint = 1;
pub const ARG_HASVALUE: c_types::c_uint = 2;
pub const ARG_HASOPTVALUE: c_types::c_uint = 4;
pub type _bindgen_ty_1 = c_types::c_uint;
pub type arg_resetfn = ::core::option::Option<unsafe extern "C" fn(parent: *mut c_types::c_void)>;
pub type arg_scanfn = ::core::option::Option<
    unsafe extern "C" fn(
        parent: *mut c_types::c_void,
        argval: *const c_types::c_char,
    ) -> c_types::c_int,
>;
pub type arg_checkfn =
    ::core::option::Option<unsafe extern "C" fn(parent: *mut c_types::c_void) -> c_types::c_int>;
pub type arg_errorfn = ::core::option::Option<
    unsafe extern "C" fn(
        parent: *mut c_types::c_void,
        fp: *mut FILE,
        error: c_types::c_int,
        argval: *const c_types::c_char,
        progname: *const c_types::c_char,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_hdr {
    pub flag: c_types::c_char,
    pub shortopts: *const c_types::c_char,
    pub longopts: *const c_types::c_char,
    pub datatype: *const c_types::c_char,
    pub glossary: *const c_types::c_char,
    pub mincount: c_types::c_int,
    pub maxcount: c_types::c_int,
    pub parent: *mut c_types::c_void,
    pub resetfn: arg_resetfn,
    pub scanfn: arg_scanfn,
    pub checkfn: arg_checkfn,
    pub errorfn: arg_errorfn,
    pub priv_: *mut c_types::c_void,
}
impl Default for arg_hdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_rem {
    pub hdr: arg_hdr,
}
impl Default for arg_rem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_lit {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
}
impl Default for arg_lit {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_int {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub ival: *mut c_types::c_int,
}
impl Default for arg_int {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_dbl {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub dval: *mut f64,
}
impl Default for arg_dbl {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_str {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub sval: *mut *const c_types::c_char,
}
impl Default for arg_str {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_rex {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub sval: *mut *const c_types::c_char,
}
impl Default for arg_rex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_file {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub filename: *mut *const c_types::c_char,
    pub basename: *mut *const c_types::c_char,
    pub extension: *mut *const c_types::c_char,
}
impl Default for arg_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_date {
    pub hdr: arg_hdr,
    pub format: *const c_types::c_char,
    pub count: c_types::c_int,
    pub tmval: *mut tm,
}
impl Default for arg_date {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const ARG_ELIMIT: c_types::c_uint = 1;
pub const ARG_EMALLOC: c_types::c_uint = 2;
pub const ARG_ENOMATCH: c_types::c_uint = 3;
pub const ARG_ELONGOPT: c_types::c_uint = 4;
pub const ARG_EMISSARG: c_types::c_uint = 5;
pub type _bindgen_ty_2 = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_end {
    pub hdr: arg_hdr,
    pub count: c_types::c_int,
    pub error: *mut c_types::c_int,
    pub parent: *mut *mut c_types::c_void,
    pub argval: *mut *const c_types::c_char,
}
impl Default for arg_end {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " arg_xxx constructor functions"]
    pub fn arg_rem(
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_rem;
}
extern "C" {
    pub fn arg_lit0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_lit;
}
extern "C" {
    pub fn arg_lit1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_lit;
}
extern "C" {
    pub fn arg_litn(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_lit;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arg_key {
    _unused: [u8; 0],
}
extern "C" {
    pub fn arg_key0(
        keyword: *const c_types::c_char,
        flags: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_key;
}
extern "C" {
    pub fn arg_key1(
        keyword: *const c_types::c_char,
        flags: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_key;
}
extern "C" {
    pub fn arg_keyn(
        keyword: *const c_types::c_char,
        flags: c_types::c_int,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_key;
}
extern "C" {
    pub fn arg_int0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_int;
}
extern "C" {
    pub fn arg_int1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_int;
}
extern "C" {
    pub fn arg_intn(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_int;
}
extern "C" {
    pub fn arg_dbl0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_dbl;
}
extern "C" {
    pub fn arg_dbl1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_dbl;
}
extern "C" {
    pub fn arg_dbln(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_dbl;
}
extern "C" {
    pub fn arg_str0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_str;
}
extern "C" {
    pub fn arg_str1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_str;
}
extern "C" {
    pub fn arg_strn(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_str;
}
extern "C" {
    pub fn arg_rex0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        pattern: *const c_types::c_char,
        datatype: *const c_types::c_char,
        flags: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_rex;
}
extern "C" {
    pub fn arg_rex1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        pattern: *const c_types::c_char,
        datatype: *const c_types::c_char,
        flags: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_rex;
}
extern "C" {
    pub fn arg_rexn(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        pattern: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        flags: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_rex;
}
extern "C" {
    pub fn arg_file0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_file;
}
extern "C" {
    pub fn arg_file1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_file;
}
extern "C" {
    pub fn arg_filen(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_file;
}
extern "C" {
    pub fn arg_date0(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        format: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_date;
}
extern "C" {
    pub fn arg_date1(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        format: *const c_types::c_char,
        datatype: *const c_types::c_char,
        glossary: *const c_types::c_char,
    ) -> *mut arg_date;
}
extern "C" {
    pub fn arg_daten(
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        format: *const c_types::c_char,
        datatype: *const c_types::c_char,
        mincount: c_types::c_int,
        maxcount: c_types::c_int,
        glossary: *const c_types::c_char,
    ) -> *mut arg_date;
}
extern "C" {
    pub fn arg_end(maxerrors: c_types::c_int) -> *mut arg_end;
}
extern "C" {
    #[doc = " other functions"]
    pub fn arg_nullcheck(argtable: *mut *mut c_types::c_void) -> c_types::c_int;
}
extern "C" {
    pub fn arg_parse(
        argc: c_types::c_int,
        argv: *mut *mut c_types::c_char,
        argtable: *mut *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn arg_print_option(
        fp: *mut FILE,
        shortopts: *const c_types::c_char,
        longopts: *const c_types::c_char,
        datatype: *const c_types::c_char,
        suffix: *const c_types::c_char,
    );
}
extern "C" {
    pub fn arg_print_syntax(
        fp: *mut FILE,
        argtable: *mut *mut c_types::c_void,
        suffix: *const c_types::c_char,
    );
}
extern "C" {
    pub fn arg_print_syntaxv(
        fp: *mut FILE,
        argtable: *mut *mut c_types::c_void,
        suffix: *const c_types::c_char,
    );
}
extern "C" {
    pub fn arg_print_glossary(
        fp: *mut FILE,
        argtable: *mut *mut c_types::c_void,
        format: *const c_types::c_char,
    );
}
extern "C" {
    pub fn arg_print_glossary_gnu(fp: *mut FILE, argtable: *mut *mut c_types::c_void);
}
extern "C" {
    pub fn arg_print_errors(fp: *mut FILE, end: *mut arg_end, progname: *const c_types::c_char);
}
extern "C" {
    pub fn arg_freetable(argtable: *mut *mut c_types::c_void, n: size_t);
}
extern "C" {
    pub fn arg_print_formatted(
        fp: *mut FILE,
        lmargin: c_types::c_uint,
        rmargin: c_types::c_uint,
        text: *const c_types::c_char,
    );
}
extern "C" {
    #[doc = " deprecated functions, for back-compatibility only"]
    pub fn arg_free(argtable: *mut *mut c_types::c_void);
}
#[doc = "< Number of eFuse BLOCK0. REPEAT_DATA"]
pub const esp_efuse_block_t_EFUSE_BLK0: esp_efuse_block_t = 0;
#[doc = "< Number of eFuse BLOCK1. MAC_SPI_8M_SYS"]
pub const esp_efuse_block_t_EFUSE_BLK1: esp_efuse_block_t = 1;
#[doc = "< Number of eFuse BLOCK2. SYS_DATA_PART1"]
pub const esp_efuse_block_t_EFUSE_BLK2: esp_efuse_block_t = 2;
#[doc = "< Number of eFuse BLOCK2. SYS_DATA_PART1"]
pub const esp_efuse_block_t_EFUSE_BLK_SYS_DATA_PART1: esp_efuse_block_t = 2;
#[doc = "< Number of eFuse BLOCK3. USER_DATA"]
pub const esp_efuse_block_t_EFUSE_BLK3: esp_efuse_block_t = 3;
#[doc = "< Number of eFuse BLOCK3. USER_DATA"]
pub const esp_efuse_block_t_EFUSE_BLK_USER_DATA: esp_efuse_block_t = 3;
#[doc = "< Number of eFuse BLOCK4. KEY0"]
pub const esp_efuse_block_t_EFUSE_BLK4: esp_efuse_block_t = 4;
#[doc = "< Number of eFuse BLOCK4. KEY0"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY0: esp_efuse_block_t = 4;
#[doc = "< Number of eFuse BLOCK5. KEY1"]
pub const esp_efuse_block_t_EFUSE_BLK5: esp_efuse_block_t = 5;
#[doc = "< Number of eFuse BLOCK5. KEY1"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY1: esp_efuse_block_t = 5;
#[doc = "< Number of eFuse BLOCK6. KEY2"]
pub const esp_efuse_block_t_EFUSE_BLK6: esp_efuse_block_t = 6;
#[doc = "< Number of eFuse BLOCK6. KEY2"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY2: esp_efuse_block_t = 6;
#[doc = "< Number of eFuse BLOCK7. KEY3"]
pub const esp_efuse_block_t_EFUSE_BLK7: esp_efuse_block_t = 7;
#[doc = "< Number of eFuse BLOCK7. KEY3"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY3: esp_efuse_block_t = 7;
#[doc = "< Number of eFuse BLOCK8. KEY4"]
pub const esp_efuse_block_t_EFUSE_BLK8: esp_efuse_block_t = 8;
#[doc = "< Number of eFuse BLOCK8. KEY4"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY4: esp_efuse_block_t = 8;
#[doc = "< Number of eFuse BLOCK9. KEY5"]
pub const esp_efuse_block_t_EFUSE_BLK9: esp_efuse_block_t = 9;
#[doc = "< Number of eFuse BLOCK9. KEY5"]
pub const esp_efuse_block_t_EFUSE_BLK_KEY5: esp_efuse_block_t = 9;
pub const esp_efuse_block_t_EFUSE_BLK_KEY_MAX: esp_efuse_block_t = 10;
#[doc = "< Number of eFuse BLOCK10. SYS_DATA_PART2"]
pub const esp_efuse_block_t_EFUSE_BLK10: esp_efuse_block_t = 10;
#[doc = "< Number of eFuse BLOCK10. SYS_DATA_PART2"]
pub const esp_efuse_block_t_EFUSE_BLK_SYS_DATA_PART2: esp_efuse_block_t = 10;
pub const esp_efuse_block_t_EFUSE_BLK_MAX: esp_efuse_block_t = 11;
#[doc = " @brief Type of eFuse blocks ESP32C3"]
pub type esp_efuse_block_t = c_types::c_uint;
#[doc = "< None"]
pub const esp_efuse_coding_scheme_t_EFUSE_CODING_SCHEME_NONE: esp_efuse_coding_scheme_t = 0;
#[doc = "< Reed-Solomon coding"]
pub const esp_efuse_coding_scheme_t_EFUSE_CODING_SCHEME_RS: esp_efuse_coding_scheme_t = 3;
#[doc = " @brief Type of coding scheme"]
pub type esp_efuse_coding_scheme_t = c_types::c_uint;
#[doc = "< User purposes (software-only use)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_USER: esp_efuse_purpose_t = 0;
#[doc = "< Reserved"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_RESERVED: esp_efuse_purpose_t = 1;
#[doc = "< XTS_AES_128_KEY (flash/PSRAM encryption)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_XTS_AES_128_KEY: esp_efuse_purpose_t = 4;
#[doc = "< HMAC Downstream mode"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_HMAC_DOWN_ALL: esp_efuse_purpose_t = 5;
#[doc = "< JTAG soft enable key (uses HMAC Downstream mode)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_HMAC_DOWN_JTAG: esp_efuse_purpose_t = 6;
#[doc = "< Digital Signature peripheral key (uses HMAC Downstream mode)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_HMAC_DOWN_DIGITAL_SIGNATURE:
    esp_efuse_purpose_t = 7;
#[doc = "< HMAC Upstream mode"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_HMAC_UP: esp_efuse_purpose_t = 8;
#[doc = "< SECURE_BOOT_DIGEST0 (Secure Boot key digest)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST0: esp_efuse_purpose_t = 9;
#[doc = "< SECURE_BOOT_DIGEST1 (Secure Boot key digest)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST1: esp_efuse_purpose_t = 10;
#[doc = "< SECURE_BOOT_DIGEST2 (Secure Boot key digest)"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_SECURE_BOOT_DIGEST2: esp_efuse_purpose_t = 11;
#[doc = "< MAX PURPOSE"]
pub const esp_efuse_purpose_t_ESP_EFUSE_KEY_PURPOSE_MAX: esp_efuse_purpose_t = 12;
#[doc = " @brief Type of key purpose"]
pub type esp_efuse_purpose_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ets_rsa_pubkey_t {
    pub n: [u8; 384usize],
    pub e: u32,
    pub rinv: [u8; 384usize],
    pub mdash: u32,
}
impl Default for ets_rsa_pubkey_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ets_rsa_pss_verify(
        key: *const ets_rsa_pubkey_t,
        sig: *const u8,
        digest: *const u8,
        verified_digest: *mut u8,
    ) -> bool;
}
extern "C" {
    pub fn ets_mgf1_sha256(mgfSeed: *const u8, seedLen: size_t, maskLen: size_t, mask: *mut u8);
}
extern "C" {
    pub fn ets_emsa_pss_verify(encoded_message: *const u8, mhash: *const u8) -> bool;
}
pub type ets_secure_boot_sig_block_t = ets_secure_boot_sig_block;
pub type ets_secure_boot_signature_t = ets_secure_boot_signature;
pub type ets_secure_boot_key_digests_t = ets_secure_boot_key_digests;
pub const ets_secure_boot_status_t_SB_SUCCESS: ets_secure_boot_status_t = 978999973;
pub const ets_secure_boot_status_t_SB_FAILED: ets_secure_boot_status_t = 1966311518;
pub type ets_secure_boot_status_t = c_types::c_uint;
extern "C" {
    pub fn ets_secure_boot_verify_stage_bootloader(
        verified_hash: *mut u8,
        allow_key_revoke: bool,
    ) -> ets_secure_boot_status_t;
}
extern "C" {
    pub fn ets_secure_boot_verify_bootloader_with_keys(
        verified_hash: *mut u8,
        trusted_keys: *const ets_secure_boot_key_digests_t,
        stage_load: bool,
    ) -> ets_secure_boot_status_t;
}
extern "C" {
    pub fn ets_secure_boot_read_key_digests(
        trusted_keys: *mut ets_secure_boot_key_digests_t,
    ) -> ETS_STATUS;
}
extern "C" {
    pub fn ets_secure_boot_verify_signature(
        sig: *const ets_secure_boot_signature_t,
        image_digest: *const u8,
        trusted_keys: *const ets_secure_boot_key_digests_t,
        verified_digest: *mut u8,
    ) -> ets_secure_boot_status_t;
}
extern "C" {
    pub fn ets_secure_boot_revoke_public_key_digest(index: c_types::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ets_secure_boot_sig_block {
    pub magic_byte: u8,
    pub version: u8,
    pub _reserved1: u8,
    pub _reserved2: u8,
    pub image_digest: [u8; 32usize],
    pub key: ets_rsa_pubkey_t,
    pub signature: [u8; 384usize],
    pub block_crc: u32,
    pub _padding: [u8; 16usize],
}
impl Default for ets_secure_boot_sig_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ets_secure_boot_signature {
    pub block: [ets_secure_boot_sig_block_t; 3usize],
    pub _padding: [u8; 448usize],
}
impl Default for ets_secure_boot_signature {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ets_secure_boot_key_digests {
    pub key_digests: [*const c_types::c_void; 3usize],
    pub allow_key_revoke: bool,
}
impl Default for ets_secure_boot_key_digests {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Type definition for an eFuse field"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct esp_efuse_desc_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< Start bit [0..255]"]
    pub bit_start: u8,
    #[doc = "< Length of bit field [1..-]"]
    pub bit_count: u16,
}
impl Default for esp_efuse_desc_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl esp_efuse_desc_t {
    #[inline]
    pub fn efuse_block(&self) -> esp_efuse_block_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_efuse_block(&mut self, val: esp_efuse_block_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(efuse_block: esp_efuse_block_t) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let efuse_block: u32 = unsafe { ::core::mem::transmute(efuse_block) };
            efuse_block as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "< Always enable ROM logging"]
pub const esp_efuse_rom_log_scheme_t_ESP_EFUSE_ROM_LOG_ALWAYS_ON: esp_efuse_rom_log_scheme_t = 0;
#[doc = "< ROM logging is enabled when specific GPIO level is low during start up"]
pub const esp_efuse_rom_log_scheme_t_ESP_EFUSE_ROM_LOG_ON_GPIO_LOW: esp_efuse_rom_log_scheme_t = 1;
#[doc = "< ROM logging is enabled when specific GPIO level is high during start up"]
pub const esp_efuse_rom_log_scheme_t_ESP_EFUSE_ROM_LOG_ON_GPIO_HIGH: esp_efuse_rom_log_scheme_t = 2;
#[doc = "< Disable ROM logging permanently"]
pub const esp_efuse_rom_log_scheme_t_ESP_EFUSE_ROM_LOG_ALWAYS_OFF: esp_efuse_rom_log_scheme_t = 3;
#[doc = " @brief Type definition for ROM log scheme"]
pub type esp_efuse_rom_log_scheme_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief   Reads bits from EFUSE field and writes it into an array."]
    #[doc = ""]
    #[doc = " The number of read bits will be limited to the minimum value"]
    #[doc = " from the description of the bits in \"field\" structure or \"dst_size_bits\" required size."]
    #[doc = " Use \"esp_efuse_get_field_size()\" function to determine the length of the field."]
    #[doc = ""]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = " @param[out] dst            A pointer to array that will contain the result of reading."]
    #[doc = " @param[in]  dst_size_bits  The number of bits required to read."]
    #[doc = "                            If the requested number of bits is greater than the field,"]
    #[doc = "                            the number will be limited to the field size."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    pub fn esp_efuse_read_field_blob(
        field: *mut *const esp_efuse_desc_t,
        dst: *mut c_types::c_void,
        dst_size_bits: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read a single bit eFuse field as a boolean value."]
    #[doc = ""]
    #[doc = " @note The value must exist and must be a single bit wide. If there is any possibility of an error"]
    #[doc = " in the provided arguments, call esp_efuse_read_field_blob() and check the returned value instead."]
    #[doc = ""]
    #[doc = " @note If assertions are enabled and the parameter is invalid, execution will abort"]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = " @return"]
    #[doc = "    - true: The field parameter is valid and the bit is set."]
    #[doc = "    - false: The bit is not set, or the parameter is invalid and assertions are disabled."]
    #[doc = ""]
    pub fn esp_efuse_read_field_bit(field: *mut *const esp_efuse_desc_t) -> bool;
}
extern "C" {
    #[doc = " @brief   Reads bits from EFUSE field and returns number of bits programmed as \"1\"."]
    #[doc = ""]
    #[doc = " If the bits are set not sequentially, they will still be counted."]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = " @param[out] out_cnt        A pointer that will contain the number of programmed as \"1\" bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    pub fn esp_efuse_read_field_cnt(
        field: *mut *const esp_efuse_desc_t,
        out_cnt: *mut size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Writes array to EFUSE field."]
    #[doc = ""]
    #[doc = " The number of write bits will be limited to the minimum value"]
    #[doc = " from the description of the bits in \"field\" structure or \"src_size_bits\" required size."]
    #[doc = " Use \"esp_efuse_get_field_size()\" function to determine the length of the field."]
    #[doc = " After the function is completed, the writing registers are cleared."]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = " @param[in]  src            A pointer to array that contains the data for writing."]
    #[doc = " @param[in]  src_size_bits  The number of bits required to write."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_write_field_blob(
        field: *mut *const esp_efuse_desc_t,
        src: *const c_types::c_void,
        src_size_bits: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Writes a required count of bits as \"1\" to EFUSE field."]
    #[doc = ""]
    #[doc = " If there are no free bits in the field to set the required number of bits to \"1\","]
    #[doc = " ESP_ERR_EFUSE_CNT_IS_FULL error is returned, the field will not be partially recorded."]
    #[doc = " After the function is completed, the writing registers are cleared."]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = " @param[in]  cnt            Required number of programmed as \"1\" bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_CNT_IS_FULL: Not all requested cnt bits is set."]
    pub fn esp_efuse_write_field_cnt(field: *mut *const esp_efuse_desc_t, cnt: size_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write a single bit eFuse field to 1"]
    #[doc = ""]
    #[doc = " For use with eFuse fields that are a single bit. This function will write the bit to value 1 if"]
    #[doc = " it is not already set, or does nothing if the bit is already set."]
    #[doc = ""]
    #[doc = " This is equivalent to calling esp_efuse_write_field_cnt() with the cnt parameter equal to 1,"]
    #[doc = " except that it will return ESP_OK if the field is already set to 1."]
    #[doc = ""]
    #[doc = " @param[in] field Pointer to the structure describing the efuse field."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK: The operation was successfully completed, or the bit was already set to value 1."]
    #[doc = " - ESP_ERR_INVALID_ARG: Error in the passed arugments, including if the efuse field is not 1 bit wide."]
    pub fn esp_efuse_write_field_bit(field: *mut *const esp_efuse_desc_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Sets a write protection for the whole block."]
    #[doc = ""]
    #[doc = " After that, it is impossible to write to this block."]
    #[doc = " The write protection does not apply to block 0."]
    #[doc = " @param[in]  blk          Block number of eFuse. (EFUSE_BLK1, EFUSE_BLK2 and EFUSE_BLK3)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_CNT_IS_FULL: Not all requested cnt bits is set."]
    #[doc = "    - ESP_ERR_NOT_SUPPORTED: The block does not support this command."]
    pub fn esp_efuse_set_write_protect(blk: esp_efuse_block_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Sets a read protection for the whole block."]
    #[doc = ""]
    #[doc = " After that, it is impossible to read from this block."]
    #[doc = " The read protection does not apply to block 0."]
    #[doc = " @param[in]  blk          Block number of eFuse. (EFUSE_BLK1, EFUSE_BLK2 and EFUSE_BLK3)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_CNT_IS_FULL: Not all requested cnt bits is set."]
    #[doc = "    - ESP_ERR_NOT_SUPPORTED: The block does not support this command."]
    pub fn esp_efuse_set_read_protect(blk: esp_efuse_block_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Returns the number of bits used by field."]
    #[doc = ""]
    #[doc = " @param[in]  field          A pointer to the structure describing the fields of efuse."]
    #[doc = ""]
    #[doc = " @return Returns the number of bits used by field."]
    pub fn esp_efuse_get_field_size(field: *mut *const esp_efuse_desc_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief   Returns value of efuse register."]
    #[doc = ""]
    #[doc = " This is a thread-safe implementation."]
    #[doc = " Example: EFUSE_BLK2_RDATA3_REG where (blk=2, num_reg=3)"]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " @param[in]  blk     Block number of eFuse."]
    #[doc = " @param[in]  num_reg The register number in the block."]
    #[doc = ""]
    #[doc = " @return Value of register"]
    pub fn esp_efuse_read_reg(blk: esp_efuse_block_t, num_reg: c_types::c_uint) -> u32;
}
extern "C" {
    #[doc = " @brief   Write value to efuse register."]
    #[doc = ""]
    #[doc = " Apply a coding scheme if necessary."]
    #[doc = " This is a thread-safe implementation."]
    #[doc = " Example: EFUSE_BLK3_WDATA0_REG where (blk=3, num_reg=0)"]
    #[doc = " @param[in]  blk     Block number of eFuse."]
    #[doc = " @param[in]  num_reg The register number in the block."]
    #[doc = " @param[in]  val     Value to write."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: The operation was successfully completed."]
    #[doc = "      - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    pub fn esp_efuse_write_reg(
        blk: esp_efuse_block_t,
        num_reg: c_types::c_uint,
        val: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Return efuse coding scheme for blocks."]
    #[doc = ""]
    #[doc = " Note: The coding scheme is applicable only to 1, 2 and 3 blocks. For 0 block, the coding scheme is always ``NONE``."]
    #[doc = ""]
    #[doc = " @param[in]  blk     Block number of eFuse."]
    #[doc = " @return Return efuse coding scheme for blocks"]
    pub fn esp_efuse_get_coding_scheme(blk: esp_efuse_block_t) -> esp_efuse_coding_scheme_t;
}
extern "C" {
    #[doc = " @brief   Read key to efuse block starting at the offset and the required size."]
    #[doc = ""]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " @param[in]  blk             Block number of eFuse."]
    #[doc = " @param[in]  dst_key         A pointer to array that will contain the result of reading."]
    #[doc = " @param[in]  offset_in_bits  Start bit in block."]
    #[doc = " @param[in]  size_bits       The number of bits required to read."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_read_block(
        blk: esp_efuse_block_t,
        dst_key: *mut c_types::c_void,
        offset_in_bits: size_t,
        size_bits: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Write key to efuse block starting at the offset and the required size."]
    #[doc = ""]
    #[doc = " @param[in]  blk             Block number of eFuse."]
    #[doc = " @param[in]  src_key         A pointer to array that contains the key for writing."]
    #[doc = " @param[in]  offset_in_bits  Start bit in block."]
    #[doc = " @param[in]  size_bits       The number of bits required to write."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: The operation was successfully completed."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits"]
    pub fn esp_efuse_write_block(
        blk: esp_efuse_block_t,
        src_key: *const c_types::c_void,
        offset_in_bits: size_t,
        size_bits: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Returns chip version from efuse"]
    #[doc = ""]
    #[doc = " @return chip version"]
    pub fn esp_efuse_get_chip_ver() -> u8;
}
extern "C" {
    #[doc = " @brief   Returns chip package from efuse"]
    #[doc = ""]
    #[doc = " @return chip package"]
    pub fn esp_efuse_get_pkg_ver() -> u32;
}
extern "C" {
    #[doc = "  @brief Reset efuse write registers"]
    #[doc = ""]
    #[doc = " Efuse write registers are written to zero, to negate"]
    #[doc = " any changes that have been staged here."]
    #[doc = ""]
    #[doc = " @note This function is not threadsafe, if calling code updates"]
    #[doc = " efuse values from multiple tasks then this is caller's"]
    #[doc = " responsibility to serialise."]
    pub fn esp_efuse_reset();
}
extern "C" {
    #[doc = "  @brief Disable ROM Download Mode via eFuse"]
    #[doc = ""]
    #[doc = " Permanently disables the ROM Download Mode feature. Once disabled, if the SoC is booted with"]
    #[doc = " strapping pins set for ROM Download Mode then an error is printed instead."]
    #[doc = ""]
    #[doc = " @note Not all SoCs support this option. An error will be returned if called on an ESP32"]
    #[doc = " with a silicon revision lower than 3, as these revisions do not support this option."]
    #[doc = ""]
    #[doc = " @note If ROM Download Mode is already disabled, this function does nothing and returns success."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK If the eFuse was successfully burned, or had already been burned."]
    #[doc = " - ESP_ERR_NOT_SUPPORTED (ESP32 only) This SoC is not capable of disabling UART download mode"]
    #[doc = " - ESP_ERR_INVALID_STATE (ESP32 only) This eFuse is write protected and cannot be written"]
    pub fn esp_efuse_disable_rom_download_mode() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set boot ROM log scheme via eFuse"]
    #[doc = ""]
    #[doc = " @note By default, the boot ROM will always print to console. This API can be called to set the log scheme only once per chip,"]
    #[doc = "       once the value is changed from the default it can't be changed again."]
    #[doc = ""]
    #[doc = " @param log_scheme Supported ROM log scheme"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK If the eFuse was successfully burned, or had already been burned."]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED (ESP32 only) This SoC is not capable of setting ROM log scheme"]
    #[doc = "      - ESP_ERR_INVALID_STATE This eFuse is write protected or has been burned already"]
    pub fn esp_efuse_set_rom_log_scheme(log_scheme: esp_efuse_rom_log_scheme_t) -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Switch ROM Download Mode to Secure Download mode via eFuse"]
    #[doc = ""]
    #[doc = " Permanently enables Secure Download mode. This mode limits the use of ROM Download Mode functions"]
    #[doc = " to simple flash read, write and erase operations, plus a command to return a summary of currently"]
    #[doc = " enabled security features."]
    #[doc = ""]
    #[doc = " @note If Secure Download mode is already enabled, this function does nothing and returns success."]
    #[doc = ""]
    #[doc = " @note Disabling the ROM Download Mode also disables Secure Download Mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK If the eFuse was successfully burned, or had already been burned."]
    #[doc = " - ESP_ERR_INVALID_STATE ROM Download Mode has been disabled via eFuse, so Secure Download mode is unavailable."]
    pub fn esp_efuse_enable_rom_secure_download_mode() -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Return secure_version from efuse field."]
    #[doc = " @return Secure version from efuse field"]
    pub fn esp_efuse_read_secure_version() -> u32;
}
extern "C" {
    #[doc = "  @brief Check secure_version from app and secure_version and from efuse field."]
    #[doc = ""]
    #[doc = " @param secure_version Secure version from app."]
    #[doc = " @return"]
    #[doc = "          - True: If version of app is equal or more then secure_version from efuse."]
    pub fn esp_efuse_check_secure_version(secure_version: u32) -> bool;
}
extern "C" {
    #[doc = "  @brief Write efuse field by secure_version value."]
    #[doc = ""]
    #[doc = " Update the secure_version value is available if the coding scheme is None."]
    #[doc = " Note: Do not use this function in your applications. This function is called as part of the other API."]
    #[doc = ""]
    #[doc = " @param[in] secure_version Secure version from app."]
    #[doc = " @return"]
    #[doc = "          - ESP_OK: Successful."]
    #[doc = "          - ESP_FAIL: secure version of app cannot be set to efuse field."]
    #[doc = "          - ESP_ERR_NOT_SUPPORTED: Anti rollback is not supported with the 3/4 and Repeat coding scheme."]
    pub fn esp_efuse_update_secure_version(secure_version: u32) -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Set the batch mode of writing fields."]
    #[doc = ""]
    #[doc = " This mode allows you to write the fields in the batch mode when need to burn several efuses at one time."]
    #[doc = " To enable batch mode call begin() then perform as usually the necessary operations"]
    #[doc = " read and write and at the end call commit() to actually burn all written efuses."]
    #[doc = " The batch mode can be used nested. The commit will be done by the last commit() function."]
    #[doc = " The number of begin() functions should be equal to the number of commit() functions."]
    #[doc = ""]
    #[doc = " @note Please note that reading in the batch mode does not show uncommitted changes."]
    #[doc = ""]
    #[doc = " Note: If batch mode is enabled by the first task, at this time the second task cannot write/read efuses."]
    #[doc = " The second task will wait for the first task to complete the batch operation."]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example of using the batch writing mode."]
    #[doc = ""]
    #[doc = " // set the batch writing mode"]
    #[doc = " esp_efuse_batch_write_begin();"]
    #[doc = ""]
    #[doc = " // use any writing functions as usual"]
    #[doc = " esp_efuse_write_field_blob(ESP_EFUSE_...);"]
    #[doc = " esp_efuse_write_field_cnt(ESP_EFUSE_...);"]
    #[doc = " esp_efuse_set_write_protect(EFUSE_BLKx);"]
    #[doc = " esp_efuse_write_reg(EFUSE_BLKx, ...);"]
    #[doc = " esp_efuse_write_block(EFUSE_BLKx, ...);"]
    #[doc = " esp_efuse_write(ESP_EFUSE_1, 3);  // ESP_EFUSE_1 == 1, here we write a new value = 3. The changes will be burn by the commit() function."]
    #[doc = " esp_efuse_read_...(ESP_EFUSE_1);  // this function returns ESP_EFUSE_1 == 1 because uncommitted changes are not readable, it will be available only after commit."]
    #[doc = " ..."]
    #[doc = ""]
    #[doc = " // esp_efuse_batch_write APIs can be called recursively."]
    #[doc = " esp_efuse_batch_write_begin();"]
    #[doc = " esp_efuse_set_write_protect(EFUSE_BLKx);"]
    #[doc = " esp_efuse_batch_write_commit(); // the burn will be skipped here, it will be done in the last commit()."]
    #[doc = ""]
    #[doc = " ..."]
    #[doc = ""]
    #[doc = " // Write all of these fields to the efuse registers"]
    #[doc = " esp_efuse_batch_write_commit();"]
    #[doc = " esp_efuse_read_...(ESP_EFUSE_1);  // this function returns ESP_EFUSE_1 == 3."]
    #[doc = ""]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK: Successful."]
    pub fn esp_efuse_batch_write_begin() -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Reset the batch mode of writing fields."]
    #[doc = ""]
    #[doc = " It will reset the batch writing mode and any written changes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK: Successful."]
    #[doc = "          - ESP_ERR_INVALID_STATE: Tha batch mode was not set."]
    pub fn esp_efuse_batch_write_cancel() -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Writes all prepared data for the batch mode."]
    #[doc = ""]
    #[doc = " Must be called to ensure changes are written to the efuse registers."]
    #[doc = " After this the batch writing mode will be reset."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK: Successful."]
    #[doc = "          - ESP_ERR_INVALID_STATE: The deferred writing mode was not set."]
    pub fn esp_efuse_batch_write_commit() -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Checks that the given block is empty."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - True: The block is empty."]
    #[doc = "          - False: The block is not empty or was an error."]
    pub fn esp_efuse_block_is_empty(block: esp_efuse_block_t) -> bool;
}
extern "C" {
    #[doc = " @brief Returns a read protection for the key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return True: The key block is read protected"]
    #[doc = "         False: The key block is readable."]
    pub fn esp_efuse_get_key_dis_read(block: esp_efuse_block_t) -> bool;
}
extern "C" {
    #[doc = " @brief Sets a read protection for the key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_key_dis_read(block: esp_efuse_block_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns a write protection for the key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return True: The key block is write protected"]
    #[doc = "         False: The key block is writeable."]
    pub fn esp_efuse_get_key_dis_write(block: esp_efuse_block_t) -> bool;
}
extern "C" {
    #[doc = " @brief Sets a write protection for the key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_key_dis_write(block: esp_efuse_block_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns true if the key block is unused, false otherwise."]
    #[doc = ""]
    #[doc = " An unused key block is all zero content, not read or write protected,"]
    #[doc = " and has purpose 0 (ESP_EFUSE_KEY_PURPOSE_USER)"]
    #[doc = ""]
    #[doc = " @param block key block to check."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - True if key block is unused,"]
    #[doc = "         - False if key block is used or the specified block index is not a key block."]
    pub fn esp_efuse_key_block_unused(block: esp_efuse_block_t) -> bool;
}
extern "C" {
    #[doc = " @brief Find a key block with the particular purpose set."]
    #[doc = ""]
    #[doc = " @param[in] purpose Purpose to search for."]
    #[doc = " @param[out] block Pointer in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX which will be set to the key block if found."]
    #[doc = "                   Can be NULL, if only need to test the key block exists."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - True: If found,"]
    #[doc = "         - False: If not found (value at block pointer is unchanged)."]
    pub fn esp_efuse_find_purpose(
        purpose: esp_efuse_purpose_t,
        block: *mut esp_efuse_block_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Returns a write protection of the key purpose field for an efuse key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @note For ESP32: no keypurpose, it returns always True."]
    #[doc = ""]
    #[doc = " @return True: The key purpose is write protected."]
    #[doc = "         False: The key purpose is writeable."]
    pub fn esp_efuse_get_keypurpose_dis_write(block: esp_efuse_block_t) -> bool;
}
extern "C" {
    #[doc = " @brief Returns the current purpose set for an efuse key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - Value: If Successful, it returns the value of the purpose related to the given key block."]
    #[doc = "         - ESP_EFUSE_KEY_PURPOSE_MAX: Otherwise."]
    pub fn esp_efuse_get_key_purpose(block: esp_efuse_block_t) -> esp_efuse_purpose_t;
}
extern "C" {
    #[doc = " @brief Returns a pointer to a key purpose for an efuse key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " To get the value of this field use esp_efuse_read_field_blob() or esp_efuse_get_key_purpose()."]
    #[doc = ""]
    #[doc = " @return Pointer: If Successful returns a pointer to the corresponding efuse field otherwise NULL."]
    pub fn esp_efuse_get_purpose_field(block: esp_efuse_block_t) -> *mut *const esp_efuse_desc_t;
}
extern "C" {
    #[doc = " @brief Returns a pointer to a key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return Pointer: If Successful returns a pointer to the corresponding efuse field otherwise NULL."]
    pub fn esp_efuse_get_key(block: esp_efuse_block_t) -> *mut *const esp_efuse_desc_t;
}
extern "C" {
    #[doc = " @brief Sets a key purpose for an efuse key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = " @param[in] purpose Key purpose."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_key_purpose(
        block: esp_efuse_block_t,
        purpose: esp_efuse_purpose_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Sets a write protection of the key purpose field for an efuse key block."]
    #[doc = ""]
    #[doc = " @param[in] block A key block in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_keypurpose_dis_write(block: esp_efuse_block_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Search for an unused key block and return the first one found."]
    #[doc = ""]
    #[doc = " See esp_efuse_key_block_unused for a description of an unused key block."]
    #[doc = ""]
    #[doc = " @return First unused key block, or EFUSE_BLK_KEY_MAX if no unused key block is found."]
    pub fn esp_efuse_find_unused_key_block() -> esp_efuse_block_t;
}
extern "C" {
    #[doc = " @brief Return the number of unused efuse key blocks in the range EFUSE_BLK_KEY0..EFUSE_BLK_KEY_MAX"]
    pub fn esp_efuse_count_unused_key_blocks() -> c_types::c_uint;
}
extern "C" {
    #[doc = " @brief Returns the status of the Secure Boot public key digest revocation bit."]
    #[doc = ""]
    #[doc = " @param[in] num_digest The number of digest in range 0..2"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - True: If key digest is revoked,"]
    #[doc = "         - False; If key digest is not revoked."]
    pub fn esp_efuse_get_digest_revoke(num_digest: c_types::c_uint) -> bool;
}
extern "C" {
    #[doc = " @brief Sets the Secure Boot public key digest revocation bit."]
    #[doc = ""]
    #[doc = " @param[in] num_digest The number of digest in range 0..2"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_digest_revoke(num_digest: c_types::c_uint) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns a write protection of the Secure Boot public key digest revocation bit."]
    #[doc = ""]
    #[doc = " @param[in] num_digest The number of digest in range 0..2"]
    #[doc = ""]
    #[doc = " @return True: The revocation bit is write protected."]
    #[doc = "         False: The revocation bit is writeable."]
    pub fn esp_efuse_get_write_protect_of_digest_revoke(num_digest: c_types::c_uint) -> bool;
}
extern "C" {
    #[doc = " @brief Sets a write protection of the Secure Boot public key digest revocation bit."]
    #[doc = ""]
    #[doc = " @param[in] num_digest The number of digest in range 0..2"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_set_write_protect_of_digest_revoke(num_digest: c_types::c_uint) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Program a block of key data to an efuse block"]
    #[doc = ""]
    #[doc = " The burn of a key, protection bits, and a purpose happens in batch mode."]
    #[doc = ""]
    #[doc = " @param[in] block Block to read purpose for. Must be in range EFUSE_BLK_KEY0 to EFUSE_BLK_KEY_MAX. Key block must be unused (esp_efuse_key_block_unused)."]
    #[doc = " @param[in] purpose Purpose to set for this key. Purpose must be already unset."]
    #[doc = " @param[in] key Pointer to data to write."]
    #[doc = " @param[in] key_size_bytes Bytes length of data to write."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_INVALID_STATE: Error in efuses state, unused block not found."]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_write_key(
        block: esp_efuse_block_t,
        purpose: esp_efuse_purpose_t,
        key: *const c_types::c_void,
        key_size_bytes: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Program keys to unused efuse blocks"]
    #[doc = ""]
    #[doc = " The burn of keys, protection bits, and purposes happens in batch mode."]
    #[doc = ""]
    #[doc = " @param[in] purposes Array of purposes (purpose[number_of_keys])."]
    #[doc = " @param[in] keys Array of keys (uint8_t keys[number_of_keys][32]). Each key is 32 bytes long."]
    #[doc = " @param[in] number_of_keys The number of keys to write (up to 6 keys)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Error in the passed arguments."]
    #[doc = "    - ESP_ERR_INVALID_STATE: Error in efuses state, unused block not found."]
    #[doc = "    - ESP_ERR_NOT_ENOUGH_UNUSED_KEY_BLOCKS: Error not enough unused key blocks available"]
    #[doc = "    - ESP_ERR_EFUSE_REPEATED_PROG: Error repeated programming of programmed bits is strictly forbidden."]
    #[doc = "    - ESP_ERR_CODING: Error range of data does not match the coding scheme."]
    pub fn esp_efuse_write_keys(
        purposes: *const esp_efuse_purpose_t,
        keys: *mut [u8; 32usize],
        number_of_keys: c_types::c_uint,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read key digests from efuse. Any revoked/missing digests will be marked as NULL"]
    #[doc = ""]
    #[doc = " @param[out] trusted_keys The number of digest in range 0..2"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Successful."]
    #[doc = "    - ESP_FAIL: If trusted_keys is NULL or there is no valid digest."]
    pub fn esp_secure_boot_read_key_digests(
        trusted_keys: *mut ets_secure_boot_key_digests_t,
    ) -> esp_err_t;
}
pub const rtc_xtal_freq_t_RTC_XTAL_FREQ_32M: rtc_xtal_freq_t = 32;
#[doc = "!< 40 MHz XTAL"]
pub const rtc_xtal_freq_t_RTC_XTAL_FREQ_40M: rtc_xtal_freq_t = 40;
#[doc = " @brief Possible main XTAL frequency values."]
#[doc = ""]
#[doc = " Enum values should be equal to frequency in MHz."]
pub type rtc_xtal_freq_t = c_types::c_uint;
#[doc = "!< Main XTAL frequency"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_XTAL: rtc_cpu_freq_t = 0;
#[doc = "!< 80 MHz"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_80M: rtc_cpu_freq_t = 1;
#[doc = "!< 160 MHz"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_160M: rtc_cpu_freq_t = 2;
#[doc = "!< 240 MHz"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_240M: rtc_cpu_freq_t = 3;
#[doc = "!< 2 MHz"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_2M: rtc_cpu_freq_t = 4;
#[doc = "!< for test"]
pub const rtc_cpu_freq_t_RTC_CPU_320M_80M: rtc_cpu_freq_t = 5;
#[doc = "!< for test"]
pub const rtc_cpu_freq_t_RTC_CPU_320M_160M: rtc_cpu_freq_t = 6;
#[doc = "!< XTAL/2 after reset"]
pub const rtc_cpu_freq_t_RTC_CPU_FREQ_XTAL_DIV2: rtc_cpu_freq_t = 7;
#[doc = " @brief CPU frequency values"]
pub type rtc_cpu_freq_t = c_types::c_uint;
#[doc = "!< XTAL"]
pub const rtc_cpu_freq_src_t_RTC_CPU_FREQ_SRC_XTAL: rtc_cpu_freq_src_t = 0;
#[doc = "!< PLL (480M or 320M)"]
pub const rtc_cpu_freq_src_t_RTC_CPU_FREQ_SRC_PLL: rtc_cpu_freq_src_t = 1;
#[doc = "!< Internal 8M RTC oscillator"]
pub const rtc_cpu_freq_src_t_RTC_CPU_FREQ_SRC_8M: rtc_cpu_freq_src_t = 2;
#[doc = "!< APLL"]
pub const rtc_cpu_freq_src_t_RTC_CPU_FREQ_SRC_APLL: rtc_cpu_freq_src_t = 3;
#[doc = " @brief CPU clock source"]
pub type rtc_cpu_freq_src_t = c_types::c_uint;
#[doc = " @brief CPU clock configuration structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_cpu_freq_config_s {
    #[doc = "!< The clock from which CPU clock is derived"]
    pub source: rtc_cpu_freq_src_t,
    #[doc = "!< Source clock frequency"]
    pub source_freq_mhz: u32,
    #[doc = "!< Divider, freq_mhz = source_freq_mhz / div"]
    pub div: u32,
    #[doc = "!< CPU clock frequency"]
    pub freq_mhz: u32,
}
impl Default for rtc_cpu_freq_config_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief CPU clock configuration structure"]
pub type rtc_cpu_freq_config_t = rtc_cpu_freq_config_s;
#[doc = "!< Internal 150 kHz RC oscillator"]
pub const rtc_slow_freq_t_RTC_SLOW_FREQ_RTC: rtc_slow_freq_t = 0;
#[doc = "!< External 32 kHz XTAL"]
pub const rtc_slow_freq_t_RTC_SLOW_FREQ_32K_XTAL: rtc_slow_freq_t = 1;
#[doc = "!< Internal 8 MHz RC oscillator, divided by 256"]
pub const rtc_slow_freq_t_RTC_SLOW_FREQ_8MD256: rtc_slow_freq_t = 2;
#[doc = " @brief RTC SLOW_CLK frequency values"]
pub type rtc_slow_freq_t = c_types::c_uint;
#[doc = "!< Main XTAL, divided by 4"]
pub const rtc_fast_freq_t_RTC_FAST_FREQ_XTALD4: rtc_fast_freq_t = 0;
#[doc = "!< Internal 8 MHz RC oscillator"]
pub const rtc_fast_freq_t_RTC_FAST_FREQ_8M: rtc_fast_freq_t = 1;
#[doc = " @brief RTC FAST_CLK frequency values"]
pub type rtc_fast_freq_t = c_types::c_uint;
#[doc = "!< Currently selected RTC SLOW_CLK"]
pub const rtc_cal_sel_t_RTC_CAL_RTC_MUX: rtc_cal_sel_t = 0;
#[doc = "!< Internal 8 MHz RC oscillator, divided by 256"]
pub const rtc_cal_sel_t_RTC_CAL_8MD256: rtc_cal_sel_t = 1;
#[doc = "!< External 32 kHz XTAL"]
pub const rtc_cal_sel_t_RTC_CAL_32K_XTAL: rtc_cal_sel_t = 2;
#[doc = "!< Internal 150 kHz oscillator"]
pub const rtc_cal_sel_t_RTC_CAL_INTERNAL_OSC: rtc_cal_sel_t = 3;
#[doc = " @brief Clock source to be calibrated using rtc_clk_cal function"]
pub type rtc_cal_sel_t = c_types::c_uint;
#[doc = " Initialization parameters for rtc_clk_init"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct rtc_clk_config_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub __bindgen_padding_0: u16,
}
impl Default for rtc_clk_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl rtc_clk_config_t {
    #[inline]
    pub fn xtal_freq(&self) -> rtc_xtal_freq_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_freq(&mut self, val: rtc_xtal_freq_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_freq_mhz(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_freq_mhz(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn fast_freq(&self) -> rtc_fast_freq_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fast_freq(&mut self, val: rtc_fast_freq_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_freq(&self) -> rtc_slow_freq_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_slow_freq(&mut self, val: rtc_slow_freq_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_rtc_clk_div(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_clk_rtc_clk_div(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_8m_clk_div(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_clk_8m_clk_div(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_clk_dcap(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_slow_clk_dcap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_8m_dfreq(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_clk_8m_dfreq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xtal_freq: rtc_xtal_freq_t,
        cpu_freq_mhz: u32,
        fast_freq: rtc_fast_freq_t,
        slow_freq: rtc_slow_freq_t,
        clk_rtc_clk_div: u32,
        clk_8m_clk_div: u32,
        slow_clk_dcap: u32,
        clk_8m_dfreq: u32,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let xtal_freq: u32 = unsafe { ::core::mem::transmute(xtal_freq) };
            xtal_freq as u64
        });
        __bindgen_bitfield_unit.set(8usize, 10u8, {
            let cpu_freq_mhz: u32 = unsafe { ::core::mem::transmute(cpu_freq_mhz) };
            cpu_freq_mhz as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let fast_freq: u32 = unsafe { ::core::mem::transmute(fast_freq) };
            fast_freq as u64
        });
        __bindgen_bitfield_unit.set(19usize, 2u8, {
            let slow_freq: u32 = unsafe { ::core::mem::transmute(slow_freq) };
            slow_freq as u64
        });
        __bindgen_bitfield_unit.set(21usize, 8u8, {
            let clk_rtc_clk_div: u32 = unsafe { ::core::mem::transmute(clk_rtc_clk_div) };
            clk_rtc_clk_div as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let clk_8m_clk_div: u32 = unsafe { ::core::mem::transmute(clk_8m_clk_div) };
            clk_8m_clk_div as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let slow_clk_dcap: u32 = unsafe { ::core::mem::transmute(slow_clk_dcap) };
            slow_clk_dcap as u64
        });
        __bindgen_bitfield_unit.set(40usize, 8u8, {
            let clk_8m_dfreq: u32 = unsafe { ::core::mem::transmute(clk_8m_dfreq) };
            clk_8m_dfreq as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct x32k_config_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl x32k_config_t {
    #[inline]
    pub fn dac(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_dac(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn dres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_dres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dgm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_dgm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dbuf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dbuf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dac: u32,
        dres: u32,
        dgm: u32,
        dbuf: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let dac: u32 = unsafe { ::core::mem::transmute(dac) };
            dac as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let dres: u32 = unsafe { ::core::mem::transmute(dres) };
            dres as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let dgm: u32 = unsafe { ::core::mem::transmute(dgm) };
            dgm as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let dbuf: u32 = unsafe { ::core::mem::transmute(dbuf) };
            dbuf as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_init_config_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 10usize]>,
}
impl rtc_init_config_t {
    #[inline]
    pub fn wifi_powerup_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_wifi_powerup_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_wait_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_wifi_wait_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_powerup_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_bt_powerup_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_wait_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_bt_wait_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_powerup_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_cpu_top_powerup_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_wait_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(39usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_cpu_top_wait_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(39usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_powerup_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_dg_wrap_powerup_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_wait_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(55usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_dg_wrap_wait_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(55usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_powerup_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(64usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_dg_peri_powerup_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(64usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_wait_cycles(&self) -> u16 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(71usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_dg_peri_wait_cycles(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(71usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wifi_powerup_cycles: u16,
        wifi_wait_cycles: u16,
        bt_powerup_cycles: u16,
        bt_wait_cycles: u16,
        cpu_top_powerup_cycles: u16,
        cpu_top_wait_cycles: u16,
        dg_wrap_powerup_cycles: u16,
        dg_wrap_wait_cycles: u16,
        dg_peri_powerup_cycles: u16,
        dg_peri_wait_cycles: u16,
    ) -> __BindgenBitfieldUnit<[u8; 10usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 10usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let wifi_powerup_cycles: u16 = unsafe { ::core::mem::transmute(wifi_powerup_cycles) };
            wifi_powerup_cycles as u64
        });
        __bindgen_bitfield_unit.set(7usize, 9u8, {
            let wifi_wait_cycles: u16 = unsafe { ::core::mem::transmute(wifi_wait_cycles) };
            wifi_wait_cycles as u64
        });
        __bindgen_bitfield_unit.set(16usize, 7u8, {
            let bt_powerup_cycles: u16 = unsafe { ::core::mem::transmute(bt_powerup_cycles) };
            bt_powerup_cycles as u64
        });
        __bindgen_bitfield_unit.set(23usize, 9u8, {
            let bt_wait_cycles: u16 = unsafe { ::core::mem::transmute(bt_wait_cycles) };
            bt_wait_cycles as u64
        });
        __bindgen_bitfield_unit.set(32usize, 7u8, {
            let cpu_top_powerup_cycles: u16 =
                unsafe { ::core::mem::transmute(cpu_top_powerup_cycles) };
            cpu_top_powerup_cycles as u64
        });
        __bindgen_bitfield_unit.set(39usize, 9u8, {
            let cpu_top_wait_cycles: u16 = unsafe { ::core::mem::transmute(cpu_top_wait_cycles) };
            cpu_top_wait_cycles as u64
        });
        __bindgen_bitfield_unit.set(48usize, 7u8, {
            let dg_wrap_powerup_cycles: u16 =
                unsafe { ::core::mem::transmute(dg_wrap_powerup_cycles) };
            dg_wrap_powerup_cycles as u64
        });
        __bindgen_bitfield_unit.set(55usize, 9u8, {
            let dg_wrap_wait_cycles: u16 = unsafe { ::core::mem::transmute(dg_wrap_wait_cycles) };
            dg_wrap_wait_cycles as u64
        });
        __bindgen_bitfield_unit.set(64usize, 7u8, {
            let dg_peri_powerup_cycles: u16 =
                unsafe { ::core::mem::transmute(dg_peri_powerup_cycles) };
            dg_peri_powerup_cycles as u64
        });
        __bindgen_bitfield_unit.set(71usize, 9u8, {
            let dg_peri_wait_cycles: u16 = unsafe { ::core::mem::transmute(dg_peri_wait_cycles) };
            dg_peri_wait_cycles as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn rtc_clk_divider_set(div: u32);
}
extern "C" {
    pub fn rtc_clk_8m_divider_set(div: u32);
}
extern "C" {
    #[doc = " Initialize clocks and set CPU frequency"]
    #[doc = ""]
    #[doc = " @param cfg clock configuration as rtc_clk_config_t"]
    pub fn rtc_clk_init(cfg: rtc_clk_config_t);
}
extern "C" {
    #[doc = " @brief Get main XTAL frequency"]
    #[doc = ""]
    #[doc = " This is the value stored in RTC register RTC_XTAL_FREQ_REG by the bootloader. As passed to"]
    #[doc = " rtc_clk_init function"]
    #[doc = ""]
    #[doc = " @return XTAL frequency, one of rtc_xtal_freq_t"]
    pub fn rtc_clk_xtal_freq_get() -> rtc_xtal_freq_t;
}
extern "C" {
    #[doc = " @brief Update XTAL frequency"]
    #[doc = ""]
    #[doc = " Updates the XTAL value stored in RTC_XTAL_FREQ_REG. Usually this value is ignored"]
    #[doc = " after startup."]
    #[doc = ""]
    #[doc = " @param xtal_freq New frequency value"]
    pub fn rtc_clk_xtal_freq_update(xtal_freq: rtc_xtal_freq_t);
}
extern "C" {
    #[doc = " @brief Enable or disable 32 kHz XTAL oscillator"]
    #[doc = " @param en  true to enable, false to disable"]
    pub fn rtc_clk_32k_enable(en: bool);
}
extern "C" {
    #[doc = " @brief Configure 32 kHz XTAL oscillator to accept external clock signal"]
    pub fn rtc_clk_32k_enable_external();
}
extern "C" {
    #[doc = " @brief Get the state of 32k XTAL oscillator"]
    #[doc = " @return true if 32k XTAL oscillator has been enabled"]
    pub fn rtc_clk_32k_enabled() -> bool;
}
extern "C" {
    #[doc = " @brief Enable 32k oscillator, configuring it for fast startup time."]
    #[doc = " Note: to achieve higher frequency stability, rtc_clk_32k_enable function"]
    #[doc = " must be called one the 32k XTAL oscillator has started up. This function"]
    #[doc = " will initially disable the 32k XTAL oscillator, so it should not be called"]
    #[doc = " when the system is using 32k XTAL as RTC_SLOW_CLK."]
    #[doc = ""]
    #[doc = " @param cycle Number of 32kHz cycles to bootstrap external crystal."]
    #[doc = "              If 0, no square wave will be used to bootstrap crystal oscillation."]
    pub fn rtc_clk_32k_bootstrap(cycle: u32);
}
extern "C" {
    #[doc = " @brief Enable or disable 8 MHz internal oscillator"]
    #[doc = ""]
    #[doc = " Output from 8 MHz internal oscillator is passed into a configurable"]
    #[doc = " divider, which by default divides the input clock frequency by 256."]
    #[doc = " Output of the divider may be used as RTC_SLOW_CLK source."]
    #[doc = " Output of the divider is referred to in register descriptions and code as"]
    #[doc = " 8md256 or simply d256. Divider values other than 256 may be configured, but"]
    #[doc = " this facility is not currently needed, so is not exposed in the code."]
    #[doc = ""]
    #[doc = " When 8MHz/256 divided output is not needed, the divider should be disabled"]
    #[doc = " to reduce power consumption."]
    #[doc = ""]
    #[doc = " @param clk_8m_en true to enable 8MHz generator"]
    #[doc = " @param d256_en true to enable /256 divider"]
    pub fn rtc_clk_8m_enable(clk_8m_en: bool, d256_en: bool);
}
extern "C" {
    #[doc = " @brief Get the state of 8 MHz internal oscillator"]
    #[doc = " @return true if the oscillator is enabled"]
    pub fn rtc_clk_8m_enabled() -> bool;
}
extern "C" {
    #[doc = " @brief Get the state of /256 divider which is applied to 8MHz clock"]
    #[doc = " @return true if the divided output is enabled"]
    pub fn rtc_clk_8md256_enabled() -> bool;
}
extern "C" {
    #[doc = " @brief Enable or disable APLL"]
    #[doc = ""]
    #[doc = " Output frequency is given by the formula:"]
    #[doc = " apll_freq = xtal_freq * (4 + sdm2 + sdm1/256 + sdm0/65536)/((o_div + 2) * 2)"]
    #[doc = ""]
    #[doc = " The dividend in this expression should be in the range of 240 - 600 MHz."]
    #[doc = ""]
    #[doc = " In rev. 0 of ESP32, sdm0 and sdm1 are unused and always set to 0."]
    #[doc = ""]
    #[doc = " @param enable  true to enable, false to disable"]
    #[doc = " @param sdm0  frequency adjustment parameter, 0..255"]
    #[doc = " @param sdm1  frequency adjustment parameter, 0..255"]
    #[doc = " @param sdm2  frequency adjustment parameter, 0..63"]
    #[doc = " @param o_div  frequency divider, 0..31"]
    pub fn rtc_clk_apll_enable(enable: bool, sdm0: u32, sdm1: u32, sdm2: u32, o_div: u32);
}
extern "C" {
    #[doc = " @brief Select source for RTC_SLOW_CLK"]
    #[doc = " @param slow_freq clock source (one of rtc_slow_freq_t values)"]
    pub fn rtc_clk_slow_freq_set(slow_freq: rtc_slow_freq_t);
}
extern "C" {
    #[doc = " @brief Get the RTC_SLOW_CLK source"]
    #[doc = " @return currently selected clock source (one of rtc_slow_freq_t values)"]
    pub fn rtc_clk_slow_freq_get() -> rtc_slow_freq_t;
}
extern "C" {
    #[doc = " @brief Get the approximate frequency of RTC_SLOW_CLK, in Hz"]
    #[doc = ""]
    #[doc = " - if RTC_SLOW_FREQ_RTC is selected, returns ~150000"]
    #[doc = " - if RTC_SLOW_FREQ_32K_XTAL is selected, returns 32768"]
    #[doc = " - if RTC_SLOW_FREQ_8MD256 is selected, returns ~33000"]
    #[doc = ""]
    #[doc = " rtc_clk_cal function can be used to get more precise value by comparing"]
    #[doc = " RTC_SLOW_CLK frequency to the frequency of main XTAL."]
    #[doc = ""]
    #[doc = " @return RTC_SLOW_CLK frequency, in Hz"]
    pub fn rtc_clk_slow_freq_get_hz() -> u32;
}
extern "C" {
    #[doc = " @brief Select source for RTC_FAST_CLK"]
    #[doc = " @param fast_freq clock source (one of rtc_fast_freq_t values)"]
    pub fn rtc_clk_fast_freq_set(fast_freq: rtc_fast_freq_t);
}
extern "C" {
    #[doc = " @brief Get the RTC_FAST_CLK source"]
    #[doc = " @return currently selected clock source (one of rtc_fast_freq_t values)"]
    pub fn rtc_clk_fast_freq_get() -> rtc_fast_freq_t;
}
extern "C" {
    #[doc = " @brief Get CPU frequency config for a given frequency"]
    #[doc = " @param freq_mhz  Frequency in MHz"]
    #[doc = " @param[out] out_config Output, CPU frequency configuration structure"]
    #[doc = " @return true if frequency can be obtained, false otherwise"]
    pub fn rtc_clk_cpu_freq_mhz_to_config(
        freq_mhz: u32,
        out_config: *mut rtc_cpu_freq_config_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Switch CPU frequency"]
    #[doc = ""]
    #[doc = " This function sets CPU frequency according to the given configuration"]
    #[doc = " structure. It enables PLLs, if necessary."]
    #[doc = ""]
    #[doc = " @note This function in not intended to be called by applications in FreeRTOS"]
    #[doc = " environment. This is because it does not adjust various timers based on the"]
    #[doc = " new CPU frequency."]
    #[doc = ""]
    #[doc = " @param config  CPU frequency configuration structure"]
    pub fn rtc_clk_cpu_freq_set_config(config: *const rtc_cpu_freq_config_t);
}
extern "C" {
    #[doc = " @brief Switch CPU frequency (optimized for speed)"]
    #[doc = ""]
    #[doc = " This function is a faster equivalent of rtc_clk_cpu_freq_set_config."]
    #[doc = " It works faster because it does not disable PLLs when switching from PLL to"]
    #[doc = " XTAL and does not enabled them when switching back. If PLL is not already"]
    #[doc = " enabled when this function is called to switch from XTAL to PLL frequency,"]
    #[doc = " or the PLL which is enabled is the wrong one, this function will fall back"]
    #[doc = " to calling rtc_clk_cpu_freq_set_config."]
    #[doc = ""]
    #[doc = " Unlike rtc_clk_cpu_freq_set_config, this function relies on static data,"]
    #[doc = " so it is less safe to use it e.g. from a panic handler (when memory might"]
    #[doc = " be corrupted)."]
    #[doc = ""]
    #[doc = " @note This function in not intended to be called by applications in FreeRTOS"]
    #[doc = " environment. This is because it does not adjust various timers based on the"]
    #[doc = " new CPU frequency."]
    #[doc = ""]
    #[doc = " @param config  CPU frequency configuration structure"]
    pub fn rtc_clk_cpu_freq_set_config_fast(config: *const rtc_cpu_freq_config_t);
}
extern "C" {
    #[doc = " @brief Get the currently used CPU frequency configuration"]
    #[doc = " @param[out] out_config  Output, CPU frequency configuration structure"]
    pub fn rtc_clk_cpu_freq_get_config(out_config: *mut rtc_cpu_freq_config_t);
}
extern "C" {
    #[doc = " @brief Switch CPU clock source to XTAL"]
    #[doc = ""]
    #[doc = " Short form for filling in rtc_cpu_freq_config_t structure and calling"]
    #[doc = " rtc_clk_cpu_freq_set_config when a switch to XTAL is needed."]
    #[doc = " Assumes that XTAL frequency has been determined —\u{a0}don't call in startup code."]
    pub fn rtc_clk_cpu_freq_set_xtal();
}
extern "C" {
    #[doc = " @brief Store new APB frequency value into RTC_APB_FREQ_REG"]
    #[doc = ""]
    #[doc = " This function doesn't change any hardware clocks."]
    #[doc = ""]
    #[doc = " Functions which perform frequency switching and change APB frequency call"]
    #[doc = " this function to update the value of APB frequency stored in RTC_APB_FREQ_REG"]
    #[doc = " (one of RTC general purpose retention registers). This should not normally"]
    #[doc = " be called from application code."]
    #[doc = ""]
    #[doc = " @param apb_freq  new APB frequency, in Hz"]
    pub fn rtc_clk_apb_freq_update(apb_freq: u32);
}
extern "C" {
    #[doc = " @brief Get the current stored APB frequency."]
    #[doc = " @return The APB frequency value as last set via rtc_clk_apb_freq_update(), in Hz."]
    pub fn rtc_clk_apb_freq_get() -> u32;
}
extern "C" {
    pub fn rtc_clk_cal_internal(cal_clk: rtc_cal_sel_t, slowclk_cycles: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Measure RTC slow clock's period, based on main XTAL frequency"]
    #[doc = ""]
    #[doc = " This function will time out and return 0 if the time for the given number"]
    #[doc = " of cycles to be counted exceeds the expected time twice. This may happen if"]
    #[doc = " 32k XTAL is being calibrated, but the oscillator has not started up (due to"]
    #[doc = " incorrect loading capacitance, board design issue, or lack of 32 XTAL on board)."]
    #[doc = ""]
    #[doc = " @param cal_clk  clock to be measured"]
    #[doc = " @param slow_clk_cycles  number of slow clock cycles to average"]
    #[doc = " @return average slow clock period in microseconds, Q13.19 fixed point format,"]
    #[doc = "         or 0 if calibration has timed out"]
    pub fn rtc_clk_cal(cal_clk: rtc_cal_sel_t, slow_clk_cycles: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Measure ratio between XTAL frequency and RTC slow clock frequency"]
    #[doc = " @param cal_clk slow clock to be measured"]
    #[doc = " @param slow_clk_cycles number of slow clock cycles to average"]
    #[doc = " @return average ratio between XTAL frequency and slow clock frequency,"]
    #[doc = "         Q13.19 fixed point format, or 0 if calibration has timed out."]
    pub fn rtc_clk_cal_ratio(cal_clk: rtc_cal_sel_t, slow_clk_cycles: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Convert time interval from microseconds to RTC_SLOW_CLK cycles"]
    #[doc = " @param time_in_us Time interval in microseconds"]
    #[doc = " @param slow_clk_period  Period of slow clock in microseconds, Q13.19"]
    #[doc = "                         fixed point format (as returned by rtc_slowck_cali)."]
    #[doc = " @return number of slow clock cycles"]
    pub fn rtc_time_us_to_slowclk(time_in_us: u64, period: u32) -> u64;
}
extern "C" {
    #[doc = " @brief Convert time interval from RTC_SLOW_CLK to microseconds"]
    #[doc = " @param time_in_us Time interval in RTC_SLOW_CLK cycles"]
    #[doc = " @param slow_clk_period  Period of slow clock in microseconds, Q13.19"]
    #[doc = "                         fixed point format (as returned by rtc_slowck_cali)."]
    #[doc = " @return time interval in microseconds"]
    pub fn rtc_time_slowclk_to_us(rtc_cycles: u64, period: u32) -> u64;
}
extern "C" {
    #[doc = " @brief Get current value of RTC counter"]
    #[doc = ""]
    #[doc = " RTC has a 48-bit counter which is incremented by 2 every 2 RTC_SLOW_CLK"]
    #[doc = " cycles. Counter value is not writable by software. The value is not adjusted"]
    #[doc = " when switching to a different RTC_SLOW_CLK source."]
    #[doc = ""]
    #[doc = " Note: this function may take up to 1 RTC_SLOW_CLK cycle to execute"]
    #[doc = ""]
    #[doc = " @return current value of RTC counter"]
    pub fn rtc_time_get() -> u64;
}
extern "C" {
    pub fn rtc_light_slp_time_get() -> u64;
}
extern "C" {
    pub fn rtc_deep_slp_time_get() -> u64;
}
extern "C" {
    #[doc = " @brief Busy loop until next RTC_SLOW_CLK cycle"]
    #[doc = ""]
    #[doc = " This function returns not earlier than the next RTC_SLOW_CLK clock cycle."]
    #[doc = " In some cases (e.g. when RTC_SLOW_CLK cycle is very close), it may return"]
    #[doc = " one RTC_SLOW_CLK cycle later."]
    pub fn rtc_clk_wait_for_slow_cycle();
}
extern "C" {
    #[doc = " @brief Enable the rtc digital 8M clock"]
    #[doc = ""]
    #[doc = " This function is used to enable the digital rtc 8M clock to support peripherals."]
    #[doc = " For enabling the analog 8M clock, using `rtc_clk_8M_enable` function above."]
    pub fn rtc_dig_clk8m_enable();
}
extern "C" {
    #[doc = " @brief Disable the rtc digital 8M clock"]
    #[doc = ""]
    #[doc = " This function is used to disable the digital rtc 8M clock, which is only used to support peripherals."]
    pub fn rtc_dig_clk8m_disable();
}
extern "C" {
    #[doc = " @brief Calculate the real clock value after the clock calibration"]
    #[doc = ""]
    #[doc = " @param cal_val Average slow clock period in microseconds, fixed point value as returned from `rtc_clk_cal`"]
    #[doc = " @return Frequency of the clock in Hz"]
    pub fn rtc_clk_freq_cal(cal_val: u32) -> u32;
}
#[doc = " @brief Power down flags for rtc_sleep_pd function"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_sleep_pu_config_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl rtc_sleep_pu_config_t {
    #[inline]
    pub fn dig_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn i2s_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_i2s_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bb_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bb_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nrx_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nrx_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fe_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fe_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sram_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sram_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rom_ram_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rom_ram_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dig_fpu: u32,
        rtc_fpu: u32,
        cpu_fpu: u32,
        i2s_fpu: u32,
        bb_fpu: u32,
        nrx_fpu: u32,
        fe_fpu: u32,
        sram_fpu: u32,
        rom_ram_fpu: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dig_fpu: u32 = unsafe { ::core::mem::transmute(dig_fpu) };
            dig_fpu as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtc_fpu: u32 = unsafe { ::core::mem::transmute(rtc_fpu) };
            rtc_fpu as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cpu_fpu: u32 = unsafe { ::core::mem::transmute(cpu_fpu) };
            cpu_fpu as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let i2s_fpu: u32 = unsafe { ::core::mem::transmute(i2s_fpu) };
            i2s_fpu as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bb_fpu: u32 = unsafe { ::core::mem::transmute(bb_fpu) };
            bb_fpu as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let nrx_fpu: u32 = unsafe { ::core::mem::transmute(nrx_fpu) };
            nrx_fpu as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fe_fpu: u32 = unsafe { ::core::mem::transmute(fe_fpu) };
            fe_fpu as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sram_fpu: u32 = unsafe { ::core::mem::transmute(sram_fpu) };
            sram_fpu as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rom_ram_fpu: u32 = unsafe { ::core::mem::transmute(rom_ram_fpu) };
            rom_ram_fpu as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn rtc_sleep_pu(cfg: rtc_sleep_pu_config_t);
}
#[doc = " @brief sleep configuration for rtc_sleep_init function"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_sleep_config_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 5usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl rtc_sleep_config_t {
    #[inline]
    pub fn lslp_mem_inf_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lslp_mem_inf_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_mem_inf_follow_cpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_mem_inf_follow_cpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_fastmem_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_fastmem_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_slowmem_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_slowmem_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_peri_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_peri_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn int_8m_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_int_8m_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_peri_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_peri_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deep_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deep_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_flashboot_mod_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_flashboot_mod_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_dbias_wak(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_dig_dbias_wak(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_dbias_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_dig_dbias_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dbias_wak(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dbias_wak(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dbias_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dbias_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn vddsdio_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vddsdio_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deep_slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deep_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn light_slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_light_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lslp_mem_inf_fpu: u32,
        rtc_mem_inf_follow_cpu: u32,
        rtc_fastmem_pd_en: u32,
        rtc_slowmem_pd_en: u32,
        rtc_peri_pd_en: u32,
        wifi_pd_en: u32,
        bt_pd_en: u32,
        cpu_pd_en: u32,
        int_8m_pd_en: u32,
        dig_peri_pd_en: u32,
        deep_slp: u32,
        wdt_flashboot_mod_en: u32,
        dig_dbias_wak: u32,
        dig_dbias_slp: u32,
        rtc_dbias_wak: u32,
        rtc_dbias_slp: u32,
        vddsdio_pd_en: u32,
        xtal_fpu: u32,
        deep_slp_reject: u32,
        light_slp_reject: u32,
    ) -> __BindgenBitfieldUnit<[u8; 5usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 5usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lslp_mem_inf_fpu: u32 = unsafe { ::core::mem::transmute(lslp_mem_inf_fpu) };
            lslp_mem_inf_fpu as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtc_mem_inf_follow_cpu: u32 =
                unsafe { ::core::mem::transmute(rtc_mem_inf_follow_cpu) };
            rtc_mem_inf_follow_cpu as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rtc_fastmem_pd_en: u32 = unsafe { ::core::mem::transmute(rtc_fastmem_pd_en) };
            rtc_fastmem_pd_en as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_slowmem_pd_en: u32 = unsafe { ::core::mem::transmute(rtc_slowmem_pd_en) };
            rtc_slowmem_pd_en as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let rtc_peri_pd_en: u32 = unsafe { ::core::mem::transmute(rtc_peri_pd_en) };
            rtc_peri_pd_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let wifi_pd_en: u32 = unsafe { ::core::mem::transmute(wifi_pd_en) };
            wifi_pd_en as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bt_pd_en: u32 = unsafe { ::core::mem::transmute(bt_pd_en) };
            bt_pd_en as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cpu_pd_en: u32 = unsafe { ::core::mem::transmute(cpu_pd_en) };
            cpu_pd_en as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let int_8m_pd_en: u32 = unsafe { ::core::mem::transmute(int_8m_pd_en) };
            int_8m_pd_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let dig_peri_pd_en: u32 = unsafe { ::core::mem::transmute(dig_peri_pd_en) };
            dig_peri_pd_en as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let deep_slp: u32 = unsafe { ::core::mem::transmute(deep_slp) };
            deep_slp as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wdt_flashboot_mod_en: u32 = unsafe { ::core::mem::transmute(wdt_flashboot_mod_en) };
            wdt_flashboot_mod_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 5u8, {
            let dig_dbias_wak: u32 = unsafe { ::core::mem::transmute(dig_dbias_wak) };
            dig_dbias_wak as u64
        });
        __bindgen_bitfield_unit.set(17usize, 5u8, {
            let dig_dbias_slp: u32 = unsafe { ::core::mem::transmute(dig_dbias_slp) };
            dig_dbias_slp as u64
        });
        __bindgen_bitfield_unit.set(22usize, 5u8, {
            let rtc_dbias_wak: u32 = unsafe { ::core::mem::transmute(rtc_dbias_wak) };
            rtc_dbias_wak as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let rtc_dbias_slp: u32 = unsafe { ::core::mem::transmute(rtc_dbias_slp) };
            rtc_dbias_slp as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let vddsdio_pd_en: u32 = unsafe { ::core::mem::transmute(vddsdio_pd_en) };
            vddsdio_pd_en as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let xtal_fpu: u32 = unsafe { ::core::mem::transmute(xtal_fpu) };
            xtal_fpu as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let deep_slp_reject: u32 = unsafe { ::core::mem::transmute(deep_slp_reject) };
            deep_slp_reject as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let light_slp_reject: u32 = unsafe { ::core::mem::transmute(light_slp_reject) };
            light_slp_reject as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " @brief Prepare the chip to enter sleep mode"]
    #[doc = ""]
    #[doc = " This function configures various power control state machines to handle"]
    #[doc = " entry into light sleep or deep sleep mode, switches APB and CPU clock source"]
    #[doc = " (usually to XTAL), and sets bias voltages for digital and RTC power domains."]
    #[doc = ""]
    #[doc = " This function does not actually enter sleep mode; this is done using"]
    #[doc = " rtc_sleep_start function. Software may do some other actions between"]
    #[doc = " rtc_sleep_init and rtc_sleep_start, such as set wakeup timer and configure"]
    #[doc = " wakeup sources."]
    #[doc = " @param cfg sleep mode configuration"]
    pub fn rtc_sleep_init(cfg: rtc_sleep_config_t);
}
extern "C" {
    #[doc = " @brief Low level initialize for rtc state machine waiting cycles after waking up"]
    #[doc = ""]
    #[doc = " This function configures the cycles chip need to wait for internal 8MHz"]
    #[doc = " oscillator and external 40MHz crystal. As we configure fixed time for waiting"]
    #[doc = " crystal, we need to pass period to calculate cycles. Now this function only"]
    #[doc = " used in lightsleep mode."]
    #[doc = ""]
    #[doc = " @param slowclk_period re-calibrated slow clock period"]
    pub fn rtc_sleep_low_init(slowclk_period: u32);
}
extern "C" {
    #[doc = " @brief Set target value of RTC counter for RTC_TIMER_TRIG_EN wakeup source"]
    #[doc = " @param t value of RTC counter at which wakeup from sleep will happen;"]
    #[doc = "          only the lower 48 bits are used"]
    pub fn rtc_sleep_set_wakeup_time(t: u64);
}
extern "C" {
    #[doc = " @brief Enter deep or light sleep mode"]
    #[doc = ""]
    #[doc = " This function enters the sleep mode previously configured using rtc_sleep_init"]
    #[doc = " function. Before entering sleep, software should configure wake up sources"]
    #[doc = " appropriately (set up GPIO wakeup registers, timer wakeup registers,"]
    #[doc = " and so on)."]
    #[doc = ""]
    #[doc = " If deep sleep mode was configured using rtc_sleep_init, and sleep is not"]
    #[doc = " rejected by hardware (based on reject_opt flags), this function never returns."]
    #[doc = " When the chip wakes up from deep sleep, CPU is reset and execution starts"]
    #[doc = " from ROM bootloader."]
    #[doc = ""]
    #[doc = " If light sleep mode was configured using rtc_sleep_init, this function"]
    #[doc = " returns on wakeup, or if sleep is rejected by hardware."]
    #[doc = ""]
    #[doc = " @param wakeup_opt  bit mask wake up reasons to enable (RTC_xxx_TRIG_EN flags"]
    #[doc = "                    combined with OR)"]
    #[doc = " @param reject_opt  bit mask of sleep reject reasons:"]
    #[doc = "                      - RTC_CNTL_GPIO_REJECT_EN"]
    #[doc = "                      - RTC_CNTL_SDIO_REJECT_EN"]
    #[doc = "                    These flags are used to prevent entering sleep when e.g."]
    #[doc = "                    an external host is communicating via SDIO slave"]
    #[doc = " @return non-zero if sleep was rejected by hardware"]
    pub fn rtc_sleep_start(wakeup_opt: u32, reject_opt: u32, lslp_mem_inf_fpu: u32) -> u32;
}
extern "C" {
    #[doc = " @brief Enter deep sleep mode"]
    #[doc = ""]
    #[doc = " Similar to rtc_sleep_start(), but additionally uses hardware to calculate the CRC value"]
    #[doc = " of RTC FAST memory. On wake, this CRC is used to determine if a deep sleep wake"]
    #[doc = " stub is valid to execute (if a wake address is set)."]
    #[doc = ""]
    #[doc = " No RAM is accessed while calculating the CRC and going into deep sleep, which makes"]
    #[doc = " this function safe to use even if the caller's stack is in RTC FAST memory."]
    #[doc = ""]
    #[doc = " @note If no deep sleep wake stub address is set then calling rtc_sleep_start() will"]
    #[doc = " have the same effect and takes less time as CRC calculation is skipped."]
    #[doc = ""]
    #[doc = " @note This function should only be called after rtc_sleep_init() has been called to"]
    #[doc = " configure the system for deep sleep."]
    #[doc = ""]
    #[doc = " @param wakeup_opt - same as for rtc_sleep_start"]
    #[doc = " @param reject_opt - same as for rtc_sleep_start"]
    #[doc = ""]
    #[doc = " @return non-zero if sleep was rejected by hardware"]
    pub fn rtc_deep_sleep_start(wakeup_opt: u32, reject_opt: u32) -> u32;
}
#[doc = " RTC power and clock control initialization settings"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_config_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_config_t {
    #[inline]
    pub fn ck8m_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pll_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pll_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn clkctl_init(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clkctl_init(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pwrctl_init(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pwrctl_init(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dboost_fpd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dboost_fpd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_fpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_fpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_waiti_clk_gate(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_waiti_clk_gate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cali_ocode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cali_ocode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ck8m_wait: u32,
        xtal_wait: u32,
        pll_wait: u32,
        clkctl_init: u32,
        pwrctl_init: u32,
        rtc_dboost_fpd: u32,
        xtal_fpu: u32,
        bbpll_fpu: u32,
        cpu_waiti_clk_gate: u32,
        cali_ocode: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let ck8m_wait: u32 = unsafe { ::core::mem::transmute(ck8m_wait) };
            ck8m_wait as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let xtal_wait: u32 = unsafe { ::core::mem::transmute(xtal_wait) };
            xtal_wait as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pll_wait: u32 = unsafe { ::core::mem::transmute(pll_wait) };
            pll_wait as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let clkctl_init: u32 = unsafe { ::core::mem::transmute(clkctl_init) };
            clkctl_init as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pwrctl_init: u32 = unsafe { ::core::mem::transmute(pwrctl_init) };
            pwrctl_init as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let rtc_dboost_fpd: u32 = unsafe { ::core::mem::transmute(rtc_dboost_fpd) };
            rtc_dboost_fpd as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let xtal_fpu: u32 = unsafe { ::core::mem::transmute(xtal_fpu) };
            xtal_fpu as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let bbpll_fpu: u32 = unsafe { ::core::mem::transmute(bbpll_fpu) };
            bbpll_fpu as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let cpu_waiti_clk_gate: u32 = unsafe { ::core::mem::transmute(cpu_waiti_clk_gate) };
            cpu_waiti_clk_gate as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let cali_ocode: u32 = unsafe { ::core::mem::transmute(cali_ocode) };
            cali_ocode as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " Initialize RTC clock and power control related functions"]
    #[doc = " @param cfg configuration options as rtc_config_t"]
    pub fn rtc_init(cfg: rtc_config_t);
}
#[doc = " Structure describing vddsdio configuration"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_vddsdio_config_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
impl rtc_vddsdio_config_t {
    #[inline]
    pub fn force(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tieh(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tieh(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn drefh(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefh(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn drefm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn drefl(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefl(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force: u32,
        enable: u32,
        tieh: u32,
        drefh: u32,
        drefm: u32,
        drefl: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force: u32 = unsafe { ::core::mem::transmute(force) };
            force as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let enable: u32 = unsafe { ::core::mem::transmute(enable) };
            enable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tieh: u32 = unsafe { ::core::mem::transmute(tieh) };
            tieh as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let drefh: u32 = unsafe { ::core::mem::transmute(drefh) };
            drefh as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let drefm: u32 = unsafe { ::core::mem::transmute(drefm) };
            drefm as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let drefl: u32 = unsafe { ::core::mem::transmute(drefl) };
            drefl as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " Get current VDDSDIO configuration"]
    #[doc = " If VDDSDIO configuration is overridden by RTC, get values from RTC"]
    #[doc = " Otherwise, if VDDSDIO is configured by EFUSE, get values from EFUSE"]
    #[doc = " Otherwise, use default values and the level of MTDI bootstrapping pin."]
    #[doc = " @return currently used VDDSDIO configuration"]
    pub fn rtc_vddsdio_get_config() -> rtc_vddsdio_config_t;
}
extern "C" {
    #[doc = " Set new VDDSDIO configuration using RTC registers."]
    #[doc = " If config.force == 1, this overrides configuration done using bootstrapping"]
    #[doc = " pins and EFUSE."]
    #[doc = ""]
    #[doc = " @param config new VDDSDIO configuration"]
    pub fn rtc_vddsdio_set_config(config: rtc_vddsdio_config_t);
}
#[doc = " @brief Power management config for ESP32C3"]
#[doc = ""]
#[doc = " Pass a pointer to this structure as an argument to esp_pm_configure function."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_pm_config_esp32c3_t {
    #[doc = "< Maximum CPU frequency, in MHz"]
    pub max_freq_mhz: c_types::c_int,
    #[doc = "< Minimum CPU frequency to use when no locks are taken, in MHz"]
    pub min_freq_mhz: c_types::c_int,
    #[doc = "< Enter light sleep when no locks are taken"]
    pub light_sleep_enable: bool,
}
#[doc = " Require CPU frequency to be at the maximum value set via esp_pm_configure."]
#[doc = " Argument is unused and should be set to 0."]
pub const esp_pm_lock_type_t_ESP_PM_CPU_FREQ_MAX: esp_pm_lock_type_t = 0;
#[doc = " Require APB frequency to be at the maximum value supported by the chip."]
#[doc = " Argument is unused and should be set to 0."]
pub const esp_pm_lock_type_t_ESP_PM_APB_FREQ_MAX: esp_pm_lock_type_t = 1;
#[doc = " Prevent the system from going into light sleep."]
#[doc = " Argument is unused and should be set to 0."]
pub const esp_pm_lock_type_t_ESP_PM_NO_LIGHT_SLEEP: esp_pm_lock_type_t = 2;
#[doc = " @brief Power management constraints"]
pub type esp_pm_lock_type_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief Set implementation-specific power management configuration"]
    #[doc = " @param config pointer to implementation-specific configuration structure (e.g. esp_pm_config_esp32)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the configuration values are not correct"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if certain combination of values is not supported,"]
    #[doc = "        or if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_configure(config: *const c_types::c_void) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get implementation-specific power management configuration"]
    #[doc = " @param config pointer to implementation-specific configuration structure (e.g. esp_pm_config_esp32)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the pointer is null"]
    pub fn esp_pm_get_configuration(config: *mut c_types::c_void) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_pm_lock {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque handle to the power management lock"]
pub type esp_pm_lock_handle_t = *mut esp_pm_lock;
extern "C" {
    #[doc = " @brief Initialize a lock handle for certain power management parameter"]
    #[doc = ""]
    #[doc = " When lock is created, initially it is not taken."]
    #[doc = " Call esp_pm_lock_acquire to take the lock."]
    #[doc = ""]
    #[doc = " This function must not be called from an ISR."]
    #[doc = ""]
    #[doc = " @param lock_type Power management constraint which the lock should control"]
    #[doc = " @param arg argument, value depends on lock_type, see esp_pm_lock_type_t"]
    #[doc = " @param name arbitrary string identifying the lock (e.g. \"wifi\" or \"spi\")."]
    #[doc = "             Used by the esp_pm_dump_locks function to list existing locks."]
    #[doc = "             May be set to NULL. If not set to NULL, must point to a string which is valid"]
    #[doc = "             for the lifetime of the lock."]
    #[doc = " @param[out] out_handle  handle returned from this function. Use this handle when calling"]
    #[doc = "                         esp_pm_lock_delete, esp_pm_lock_acquire, esp_pm_lock_release."]
    #[doc = "                         Must not be NULL."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if the lock structure can not be allocated"]
    #[doc = "      - ESP_ERR_INVALID_ARG if out_handle is NULL or type argument is not valid"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_lock_create(
        lock_type: esp_pm_lock_type_t,
        arg: c_types::c_int,
        name: *const c_types::c_char,
        out_handle: *mut esp_pm_lock_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Take a power management lock"]
    #[doc = ""]
    #[doc = " Once the lock is taken, power management algorithm will not switch to the"]
    #[doc = " mode specified in a call to esp_pm_lock_create, or any of the lower power"]
    #[doc = " modes (higher numeric values of 'mode')."]
    #[doc = ""]
    #[doc = " The lock is recursive, in the sense that if esp_pm_lock_acquire is called"]
    #[doc = " a number of times, esp_pm_lock_release has to be called the same number of"]
    #[doc = " times in order to release the lock."]
    #[doc = ""]
    #[doc = " This function may be called from an ISR."]
    #[doc = ""]
    #[doc = " This function is not thread-safe w.r.t. calls to other esp_pm_lock_*"]
    #[doc = " functions for the same handle."]
    #[doc = ""]
    #[doc = " @param handle handle obtained from esp_pm_lock_create function"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the handle is invalid"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_lock_acquire(handle: esp_pm_lock_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Release the lock taken using esp_pm_lock_acquire."]
    #[doc = ""]
    #[doc = " Call to this functions removes power management restrictions placed when"]
    #[doc = " taking the lock."]
    #[doc = ""]
    #[doc = " Locks are recursive, so if esp_pm_lock_acquire is called a number of times,"]
    #[doc = " esp_pm_lock_release has to be called the same number of times in order to"]
    #[doc = " actually release the lock."]
    #[doc = ""]
    #[doc = " This function may be called from an ISR."]
    #[doc = ""]
    #[doc = " This function is not thread-safe w.r.t. calls to other esp_pm_lock_*"]
    #[doc = " functions for the same handle."]
    #[doc = ""]
    #[doc = " @param handle handle obtained from esp_pm_lock_create function"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the handle is invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE if lock is not acquired"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_lock_release(handle: esp_pm_lock_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete a lock created using esp_pm_lock"]
    #[doc = ""]
    #[doc = " The lock must be released before calling this function."]
    #[doc = ""]
    #[doc = " This function must not be called from an ISR."]
    #[doc = ""]
    #[doc = " @param handle handle obtained from esp_pm_lock_create function"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the handle argument is NULL"]
    #[doc = "      - ESP_ERR_INVALID_STATE if the lock is still acquired"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_lock_delete(handle: esp_pm_lock_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Dump the list of all locks to stderr"]
    #[doc = ""]
    #[doc = " This function dumps debugging information about locks created using"]
    #[doc = " esp_pm_lock_create to an output stream."]
    #[doc = ""]
    #[doc = " This function must not be called from an ISR. If esp_pm_lock_acquire/release"]
    #[doc = " are called while this function is running, inconsistent results may be"]
    #[doc = " reported."]
    #[doc = ""]
    #[doc = " @param stream stream to print information to; use stdout or stderr to print"]
    #[doc = "               to the console; use fmemopen/open_memstream to print to a"]
    #[doc = "               string buffer."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_PM_ENABLE is not enabled in sdkconfig"]
    pub fn esp_pm_dump_locks(stream: *mut FILE) -> esp_err_t;
}
pub const spi_flash_wrap_mode_t_FLASH_WRAP_MODE_8B: spi_flash_wrap_mode_t = 0;
pub const spi_flash_wrap_mode_t_FLASH_WRAP_MODE_16B: spi_flash_wrap_mode_t = 2;
pub const spi_flash_wrap_mode_t_FLASH_WRAP_MODE_32B: spi_flash_wrap_mode_t = 4;
pub const spi_flash_wrap_mode_t_FLASH_WRAP_MODE_64B: spi_flash_wrap_mode_t = 6;
pub const spi_flash_wrap_mode_t_FLASH_WRAP_MODE_DISABLE: spi_flash_wrap_mode_t = 1;
pub type spi_flash_wrap_mode_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief set wrap mode of flash"]
    #[doc = ""]
    #[doc = " @param mode: wrap mode support disable, 16 32, 64 byte"]
    #[doc = ""]
    #[doc = " @return esp_err_t : ESP_OK for successful."]
    #[doc = ""]
    pub fn spi_flash_wrap_set(mode: spi_flash_wrap_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Initialize SPI flash access driver"]
    #[doc = ""]
    #[doc = "  This function must be called exactly once, before any other"]
    #[doc = "  spi_flash_* functions are called."]
    #[doc = "  Currently this function is called from startup code. There is"]
    #[doc = "  no need to call it from application code."]
    #[doc = ""]
    pub fn spi_flash_init();
}
extern "C" {
    #[doc = " @brief  Get flash chip size, as set in binary image header"]
    #[doc = ""]
    #[doc = " @note This value does not necessarily match real flash size."]
    #[doc = ""]
    #[doc = " @return size of flash chip, in bytes"]
    pub fn spi_flash_get_chip_size() -> size_t;
}
extern "C" {
    #[doc = " @brief  Erase the Flash sector."]
    #[doc = ""]
    #[doc = " @param  sector: Sector number, the count starts at sector 0, 4KB per sector."]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_erase_sector(sector: size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Erase a range of flash sectors"]
    #[doc = ""]
    #[doc = " @param  start_address  Address where erase operation has to start."]
    #[doc = "                                  Must be 4kB-aligned"]
    #[doc = " @param  size  Size of erased range, in bytes. Must be divisible by 4kB."]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_erase_range(start_address: size_t, size: size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Write data to Flash."]
    #[doc = ""]
    #[doc = " @note For fastest write performance, write a 4 byte aligned size at a"]
    #[doc = " 4 byte aligned offset in flash from a source buffer in DRAM. Varying any of"]
    #[doc = " these parameters will still work, but will be slower due to buffering."]
    #[doc = ""]
    #[doc = " @note Writing more than 8KB at a time will be split into multiple"]
    #[doc = " write operations to avoid disrupting other tasks in the system."]
    #[doc = ""]
    #[doc = " @param  dest_addr Destination address in Flash."]
    #[doc = " @param  src       Pointer to the source buffer."]
    #[doc = " @param  size      Length of data, in bytes."]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_write(
        dest_addr: size_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Write data encrypted to Flash."]
    #[doc = ""]
    #[doc = " @note Flash encryption must be enabled for this function to work."]
    #[doc = ""]
    #[doc = " @note Flash encryption must be enabled when calling this function."]
    #[doc = " If flash encryption is disabled, the function returns"]
    #[doc = " ESP_ERR_INVALID_STATE.  Use esp_flash_encryption_enabled()"]
    #[doc = " function to determine if flash encryption is enabled."]
    #[doc = ""]
    #[doc = " @note Both dest_addr and size must be multiples of 16 bytes. For"]
    #[doc = " absolute best performance, both dest_addr and size arguments should"]
    #[doc = " be multiples of 32 bytes."]
    #[doc = ""]
    #[doc = " @param  dest_addr Destination address in Flash. Must be a multiple of 16 bytes."]
    #[doc = " @param  src       Pointer to the source buffer."]
    #[doc = " @param  size      Length of data, in bytes. Must be a multiple of 16 bytes."]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_write_encrypted(
        dest_addr: size_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Read data from Flash."]
    #[doc = ""]
    #[doc = " @note For fastest read performance, all parameters should be"]
    #[doc = " 4 byte aligned. If source address and read size are not 4 byte"]
    #[doc = " aligned, read may be split into multiple flash operations. If"]
    #[doc = " destination buffer is not 4 byte aligned, a temporary buffer will"]
    #[doc = " be allocated on the stack."]
    #[doc = ""]
    #[doc = " @note Reading more than 16KB of data at a time will be split"]
    #[doc = " into multiple reads to avoid disruption to other tasks in the"]
    #[doc = " system. Consider using spi_flash_mmap() to read large amounts"]
    #[doc = " of data."]
    #[doc = ""]
    #[doc = " @param  src_addr source address of the data in Flash."]
    #[doc = " @param  dest     pointer to the destination buffer"]
    #[doc = " @param  size     length of data"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_read(src_addr: size_t, dest: *mut c_types::c_void, size: size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Read data from Encrypted Flash."]
    #[doc = ""]
    #[doc = " If flash encryption is enabled, this function will transparently decrypt data as it is read."]
    #[doc = " If flash encryption is not enabled, this function behaves the same as spi_flash_read()."]
    #[doc = ""]
    #[doc = " See esp_flash_encryption_enabled() for a function to check if flash encryption is enabled."]
    #[doc = ""]
    #[doc = " @param  src   source address of the data in Flash."]
    #[doc = " @param  dest  pointer to the destination buffer"]
    #[doc = " @param  size  length of data"]
    #[doc = ""]
    #[doc = " @return esp_err_t"]
    pub fn spi_flash_read_encrypted(
        src: size_t,
        dest: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
#[doc = "< map to data memory (Vaddr0), allows byte-aligned access, 4 MB total"]
pub const spi_flash_mmap_memory_t_SPI_FLASH_MMAP_DATA: spi_flash_mmap_memory_t = 0;
#[doc = "< map to instruction memory (Vaddr1-3), allows only 4-byte-aligned access, 11 MB total"]
pub const spi_flash_mmap_memory_t_SPI_FLASH_MMAP_INST: spi_flash_mmap_memory_t = 1;
#[doc = " @brief Enumeration which specifies memory space requested in an mmap call"]
pub type spi_flash_mmap_memory_t = c_types::c_uint;
#[doc = " @brief Opaque handle for memory region obtained from spi_flash_mmap."]
pub type spi_flash_mmap_handle_t = u32;
extern "C" {
    #[doc = " @brief Map region of flash memory into data or instruction address space"]
    #[doc = ""]
    #[doc = " This function allocates sufficient number of 64kB MMU pages and configures"]
    #[doc = " them to map the requested region of flash memory into the address space."]
    #[doc = " It may reuse MMU pages which already provide the required mapping."]
    #[doc = ""]
    #[doc = " As with any allocator, if mmap/munmap are heavily used then the address space"]
    #[doc = " may become fragmented. To troubleshoot issues with page allocation, use"]
    #[doc = " spi_flash_mmap_dump() function."]
    #[doc = ""]
    #[doc = " @param src_addr  Physical address in flash where requested region starts."]
    #[doc = "                  This address *must* be aligned to 64kB boundary"]
    #[doc = "                  (SPI_FLASH_MMU_PAGE_SIZE)"]
    #[doc = " @param size  Size of region to be mapped. This size will be rounded"]
    #[doc = "              up to a 64kB boundary"]
    #[doc = " @param memory  Address space where the region should be mapped (data or instruction)"]
    #[doc = " @param[out] out_ptr  Output, pointer to the mapped memory region"]
    #[doc = " @param[out] out_handle  Output, handle which should be used for spi_flash_munmap call"]
    #[doc = ""]
    #[doc = " @return  ESP_OK on success, ESP_ERR_NO_MEM if pages can not be allocated"]
    pub fn spi_flash_mmap(
        src_addr: size_t,
        size: size_t,
        memory: spi_flash_mmap_memory_t,
        out_ptr: *mut *const c_types::c_void,
        out_handle: *mut spi_flash_mmap_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Map sequences of pages of flash memory into data or instruction address space"]
    #[doc = ""]
    #[doc = " This function allocates sufficient number of 64kB MMU pages and configures"]
    #[doc = " them to map the indicated pages of flash memory contiguously into address space."]
    #[doc = " In this respect, it works in a similar way as spi_flash_mmap() but it allows mapping"]
    #[doc = " a (maybe non-contiguous) set of pages into a contiguous region of memory."]
    #[doc = ""]
    #[doc = " @param pages An array of numbers indicating the 64kB pages in flash to be mapped"]
    #[doc = "              contiguously into memory. These indicate the indexes of the 64kB pages,"]
    #[doc = "              not the byte-size addresses as used in other functions."]
    #[doc = "              Array must be located in internal memory."]
    #[doc = " @param page_count  Number of entries in the pages array"]
    #[doc = " @param memory  Address space where the region should be mapped (instruction or data)"]
    #[doc = " @param[out] out_ptr  Output, pointer to the mapped memory region"]
    #[doc = " @param[out] out_handle  Output, handle which should be used for spi_flash_munmap call"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM if pages can not be allocated"]
    #[doc = "      - ESP_ERR_INVALID_ARG if pagecount is zero or pages array is not in"]
    #[doc = "        internal memory"]
    pub fn spi_flash_mmap_pages(
        pages: *const c_types::c_int,
        page_count: size_t,
        memory: spi_flash_mmap_memory_t,
        out_ptr: *mut *const c_types::c_void,
        out_handle: *mut spi_flash_mmap_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Release region previously obtained using spi_flash_mmap"]
    #[doc = ""]
    #[doc = " @note Calling this function will not necessarily unmap memory region."]
    #[doc = "       Region will only be unmapped when there are no other handles which"]
    #[doc = "       reference this region. In case of partially overlapping regions"]
    #[doc = "       it is possible that memory will be unmapped partially."]
    #[doc = ""]
    #[doc = " @param handle  Handle obtained from spi_flash_mmap"]
    pub fn spi_flash_munmap(handle: spi_flash_mmap_handle_t);
}
extern "C" {
    #[doc = " @brief Display information about mapped regions"]
    #[doc = ""]
    #[doc = " This function lists handles obtained using spi_flash_mmap, along with range"]
    #[doc = " of pages allocated to each handle. It also lists all non-zero entries of"]
    #[doc = " MMU table and corresponding reference counts."]
    pub fn spi_flash_mmap_dump();
}
extern "C" {
    #[doc = " @brief get free pages number which can be mmap"]
    #[doc = ""]
    #[doc = " This function will return number of free pages available in mmu table. This could be useful"]
    #[doc = " before calling actual spi_flash_mmap (maps flash range to DCache or ICache memory) to check"]
    #[doc = " if there is sufficient space available for mapping."]
    #[doc = ""]
    #[doc = " @param memory memory type of MMU table free page"]
    #[doc = ""]
    #[doc = " @return number of free pages which can be mmaped"]
    pub fn spi_flash_mmap_get_free_pages(memory: spi_flash_mmap_memory_t) -> u32;
}
extern "C" {
    #[doc = " @brief Given a memory address where flash is mapped, return the corresponding physical flash offset."]
    #[doc = ""]
    #[doc = " Cache address does not have have been assigned via spi_flash_mmap(), any address in memory mapped flash space can be looked up."]
    #[doc = ""]
    #[doc = " @param cached Pointer to flashed cached memory."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - SPI_FLASH_CACHE2PHYS_FAIL If cache address is outside flash cache region, or the address is not mapped."]
    #[doc = " - Otherwise, returns physical offset in flash"]
    pub fn spi_flash_cache2phys(cached: *const c_types::c_void) -> size_t;
}
extern "C" {
    #[doc = " @brief Given a physical offset in flash, return the address where it is mapped in the memory space."]
    #[doc = ""]
    #[doc = " Physical address does not have to have been assigned via spi_flash_mmap(), any address in flash can be looked up."]
    #[doc = ""]
    #[doc = " @note Only the first matching cache address is returned. If MMU flash cache table is configured so multiple entries"]
    #[doc = " point to the same physical address, there may be more than one cache address corresponding to that physical"]
    #[doc = " address. It is also possible for a single physical address to be mapped to both the IROM and DROM regions."]
    #[doc = ""]
    #[doc = " @note This function doesn't impose any alignment constraints, but if memory argument is SPI_FLASH_MMAP_INST and"]
    #[doc = " phys_offs is not 4-byte aligned, then reading from the returned pointer will result in a crash."]
    #[doc = ""]
    #[doc = " @param phys_offs Physical offset in flash memory to look up."]
    #[doc = " @param memory Address space type to look up a flash cache address mapping for (instruction or data)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - NULL if the physical address is invalid or not mapped to flash cache of the specified memory type."]
    #[doc = " - Cached memory address (in IROM or DROM space) corresponding to phys_offs."]
    pub fn spi_flash_phys2cache(
        phys_offs: size_t,
        memory: spi_flash_mmap_memory_t,
    ) -> *const c_types::c_void;
}
extern "C" {
    #[doc = " @brief Check at runtime if flash cache is enabled on both CPUs"]
    #[doc = ""]
    #[doc = " @return true if both CPUs have flash cache enabled, false otherwise."]
    pub fn spi_flash_cache_enabled() -> bool;
}
extern "C" {
    #[doc = " @brief Re-enable cache for the core defined as cpuid parameter."]
    #[doc = ""]
    #[doc = " @param cpuid the core number to enable instruction cache for"]
    pub fn spi_flash_enable_cache(cpuid: u32);
}
#[doc = " @brief SPI flash critical section enter function."]
#[doc = ""]
pub type spi_flash_guard_start_func_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief SPI flash critical section exit function."]
pub type spi_flash_guard_end_func_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief SPI flash operation lock function."]
pub type spi_flash_op_lock_func_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief SPI flash operation unlock function."]
pub type spi_flash_op_unlock_func_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " @brief Function to protect SPI flash critical regions corruption."]
pub type spi_flash_is_safe_write_address_t =
    ::core::option::Option<unsafe extern "C" fn(addr: size_t, size: size_t) -> bool>;
#[doc = " @brief Function to yield to the OS during erase operation."]
pub type spi_flash_os_yield_t = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " Structure holding SPI flash access critical sections management functions."]
#[doc = ""]
#[doc = " Flash API uses two types of flash access management functions:"]
#[doc = " 1) Functions which prepare/restore flash cache and interrupts before calling"]
#[doc = "    appropriate ROM functions (SPIWrite, SPIRead and SPIEraseBlock):"]
#[doc = "   - 'start' function should disables flash cache and non-IRAM interrupts and"]
#[doc = "      is invoked before the call to one of ROM function above."]
#[doc = "   - 'end' function should restore state of flash cache and non-IRAM interrupts and"]
#[doc = "      is invoked after the call to one of ROM function above."]
#[doc = "    These two functions are not recursive."]
#[doc = " 2) Functions which synchronizes access to internal data used by flash API."]
#[doc = "    This functions are mostly intended to synchronize access to flash API internal data"]
#[doc = "    in multithreaded environment and use OS primitives:"]
#[doc = "   - 'op_lock' locks access to flash API internal data."]
#[doc = "   - 'op_unlock' unlocks access to flash API internal data."]
#[doc = "   These two functions are recursive and can be used around the outside of multiple calls to"]
#[doc = "   'start' & 'end', in order to create atomic multi-part flash operations."]
#[doc = " 3) When CONFIG_SPI_FLASH_DANGEROUS_WRITE_ALLOWED is disabled, flash writing/erasing"]
#[doc = "    API checks for addresses provided by user to avoid corruption of critical flash regions"]
#[doc = "    (bootloader, partition table, running application etc.)."]
#[doc = ""]
#[doc = " Different versions of the guarding functions should be used depending on the context of"]
#[doc = " execution (with or without functional OS). In normal conditions when flash API is called"]
#[doc = " from task the functions use OS primitives. When there is no OS at all or when"]
#[doc = " it is not guaranteed that OS is functional (accessing flash from exception handler) these"]
#[doc = " functions cannot use OS primitives or even does not need them (multithreaded access is not possible)."]
#[doc = ""]
#[doc = " @note Structure and corresponding guard functions should not reside in flash."]
#[doc = "       For example structure can be placed in DRAM and functions in IRAM sections."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_flash_guard_funcs_t {
    #[doc = "< critical section start function."]
    pub start: spi_flash_guard_start_func_t,
    #[doc = "< critical section end function."]
    pub end: spi_flash_guard_end_func_t,
    #[doc = "< flash access API lock function."]
    pub op_lock: spi_flash_op_lock_func_t,
    #[doc = "< flash access API unlock function."]
    pub op_unlock: spi_flash_op_unlock_func_t,
    #[doc = "< checks flash write addresses."]
    pub is_safe_write_address: spi_flash_is_safe_write_address_t,
    #[doc = "< yield to the OS during flash erase"]
    pub yield_: spi_flash_os_yield_t,
}
extern "C" {
    #[doc = " @brief  Sets guard functions to access flash."]
    #[doc = ""]
    #[doc = " @note Pointed structure and corresponding guard functions should not reside in flash."]
    #[doc = "       For example structure can be placed in DRAM and functions in IRAM sections."]
    #[doc = ""]
    #[doc = " @param funcs pointer to structure holding flash access guard functions."]
    pub fn spi_flash_guard_set(funcs: *const spi_flash_guard_funcs_t);
}
extern "C" {
    #[doc = " @brief Get the guard functions used for flash access"]
    #[doc = ""]
    #[doc = " @return The guard functions that were set via spi_flash_guard_set(). These functions"]
    #[doc = " can be called if implementing custom low-level SPI flash operations."]
    pub fn spi_flash_guard_get() -> *const spi_flash_guard_funcs_t;
}
extern "C" {
    #[doc = " @brief Default OS-aware flash access guard functions"]
    pub static g_flash_guard_default_ops: spi_flash_guard_funcs_t;
}
extern "C" {
    #[doc = " @brief Non-OS flash access guard functions"]
    #[doc = ""]
    #[doc = " @note This version of flash guard functions is to be used when no OS is present or from panic handler."]
    #[doc = "       It does not use any OS primitives and IPC and implies that only calling CPU is active."]
    pub static g_flash_guard_no_os_ops: spi_flash_guard_funcs_t;
}
#[doc = "< The chip doesn't have enough space for the current partition table"]
pub const ESP_ERR_FLASH_SIZE_NOT_MATCH: c_types::c_uint = 260;
#[doc = "< Chip did not respond to the command, or timed out."]
pub const ESP_ERR_FLASH_NO_RESPONSE: c_types::c_uint = 264;
pub type _bindgen_ty_3 = c_types::c_uint;
#[doc = " Definition of a common transaction. Also holds the return value."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_flash_trans_t {
    #[doc = "< Reserved, must be 0."]
    pub reserved: u8,
    #[doc = "< Output data length, in bytes"]
    pub mosi_len: u8,
    #[doc = "< Input data length, in bytes"]
    pub miso_len: u8,
    #[doc = "< Length of address in bits, set to 0 if command does not need an address"]
    pub address_bitlen: u8,
    #[doc = "< Address to perform operation on"]
    pub address: u32,
    #[doc = "< Output data to salve"]
    pub mosi_data: *const u8,
    #[doc = "< [out] Input data from slave, little endian"]
    pub miso_data: *mut u8,
    #[doc = "< Flags for this transaction. Set to 0 for now."]
    pub flags: u32,
    #[doc = "< Command to send"]
    pub command: u16,
    #[doc = "< Basic dummy bits to use"]
    pub dummy_bitlen: u8,
    #[doc = "< Flash working mode when `SPI_FLASH_IGNORE_BASEIO` is specified."]
    pub io_mode: u32,
}
impl Default for spi_flash_trans_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< The flash runs under 5MHz"]
pub const esp_flash_speed_t_ESP_FLASH_5MHZ: esp_flash_speed_t = 0;
#[doc = "< The flash runs under 10MHz"]
pub const esp_flash_speed_t_ESP_FLASH_10MHZ: esp_flash_speed_t = 1;
#[doc = "< The flash runs under 20MHz"]
pub const esp_flash_speed_t_ESP_FLASH_20MHZ: esp_flash_speed_t = 2;
#[doc = "< The flash runs under 26MHz"]
pub const esp_flash_speed_t_ESP_FLASH_26MHZ: esp_flash_speed_t = 3;
#[doc = "< The flash runs under 40MHz"]
pub const esp_flash_speed_t_ESP_FLASH_40MHZ: esp_flash_speed_t = 4;
#[doc = "< The flash runs under 80MHz"]
pub const esp_flash_speed_t_ESP_FLASH_80MHZ: esp_flash_speed_t = 5;
#[doc = "< The flash runs under 120MHz, 120MHZ can only be used by main flash after timing tuning in system. Do not use this directely in any API."]
pub const esp_flash_speed_t_ESP_FLASH_120MHZ: esp_flash_speed_t = 6;
#[doc = "< The maximum frequency supported by the host is ``ESP_FLASH_SPEED_MAX-1``."]
pub const esp_flash_speed_t_ESP_FLASH_SPEED_MAX: esp_flash_speed_t = 7;
#[doc = " @brief SPI flash clock speed values, always refer to them by the enum rather"]
#[doc = " than the actual value (more speed may be appended into the list)."]
#[doc = ""]
#[doc = " A strategy to select the maximum allowed speed is to enumerate from the"]
#[doc = " ``ESP_FLSH_SPEED_MAX-1`` or highest frequency supported by your flash, and"]
#[doc = " decrease the speed until the probing success."]
pub type esp_flash_speed_t = c_types::c_uint;
#[doc = "< Data read using single I/O, some limits on speed"]
pub const esp_flash_io_mode_t_SPI_FLASH_SLOWRD: esp_flash_io_mode_t = 0;
#[doc = "< Data read using single I/O, no limit on speed"]
pub const esp_flash_io_mode_t_SPI_FLASH_FASTRD: esp_flash_io_mode_t = 1;
#[doc = "< Data read using dual I/O"]
pub const esp_flash_io_mode_t_SPI_FLASH_DOUT: esp_flash_io_mode_t = 2;
#[doc = "< Both address & data transferred using dual I/O"]
pub const esp_flash_io_mode_t_SPI_FLASH_DIO: esp_flash_io_mode_t = 3;
#[doc = "< Data read using quad I/O"]
pub const esp_flash_io_mode_t_SPI_FLASH_QOUT: esp_flash_io_mode_t = 4;
#[doc = "< Both address & data transferred using quad I/O"]
pub const esp_flash_io_mode_t_SPI_FLASH_QIO: esp_flash_io_mode_t = 5;
#[doc = "< Only support on OPI flash, flash read and write under STR mode"]
pub const esp_flash_io_mode_t_SPI_FLASH_OPI_STR: esp_flash_io_mode_t = 16;
#[doc = "< Only support on OPI flash, flash read and write under DTR mode"]
pub const esp_flash_io_mode_t_SPI_FLASH_OPI_DTR: esp_flash_io_mode_t = 17;
#[doc = "< The fastest io mode supported by the host is ``ESP_FLASH_READ_MODE_MAX-1``."]
pub const esp_flash_io_mode_t_SPI_FLASH_READ_MODE_MAX: esp_flash_io_mode_t = 18;
#[doc = " @brief Mode used for reading from SPI flash"]
pub type esp_flash_io_mode_t = c_types::c_uint;
#[doc = " Configuration structure for the flash chip suspend feature."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_flash_sus_cmd_conf {
    #[doc = "< SUS/SUS1/SUS2 bit in flash register."]
    pub sus_mask: u32,
    pub __bindgen_anon_1: spi_flash_sus_cmd_conf__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_flash_sus_cmd_conf__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_flash_sus_cmd_conf__bindgen_ty_1 {
    #[inline]
    pub fn cmd_rdsr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_cmd_rdsr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sus_cmd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sus_cmd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn res_cmd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_res_cmd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cmd_rdsr: u32,
        sus_cmd: u32,
        res_cmd: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let cmd_rdsr: u32 = unsafe { ::core::mem::transmute(cmd_rdsr) };
            cmd_rdsr as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let sus_cmd: u32 = unsafe { ::core::mem::transmute(sus_cmd) };
            sus_cmd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let res_cmd: u32 = unsafe { ::core::mem::transmute(res_cmd) };
            res_cmd as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " Structure for flash encryption operations."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_flash_encryption_t {
    #[doc = " @brief Enable the flash encryption"]
    pub flash_encryption_enable: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " @brief Disable the flash encryption"]
    pub flash_encryption_disable: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Prepare flash encryption before operation."]
    #[doc = ""]
    #[doc = " @param address The destination address in flash for the write operation."]
    #[doc = " @param buffer Data for programming"]
    #[doc = " @param size Size to program."]
    #[doc = ""]
    #[doc = " @note address and buffer must be 8-word aligned."]
    pub flash_encryption_data_prepare:
        ::core::option::Option<unsafe extern "C" fn(address: u32, buffer: *const u32, size: u32)>,
    #[doc = " @brief flash data encryption operation is done."]
    pub flash_encryption_done: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Destroy encrypted result"]
    pub flash_encryption_destroy: ::core::option::Option<unsafe extern "C" fn()>,
    #[doc = " Check if is qualified to encrypt the buffer"]
    #[doc = ""]
    #[doc = " @param address the address of written flash partition."]
    #[doc = " @param length Buffer size."]
    pub flash_encryption_check:
        ::core::option::Option<unsafe extern "C" fn(address: u32, length: u32) -> bool>,
}
#[doc = " Host driver configuration and context structure."]
pub type spi_flash_host_driver_t = spi_flash_host_driver_s;
#[doc = " SPI Flash Host driver instance"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_flash_host_inst_t {
    #[doc = "< Pointer to the implementation function table"]
    pub driver: *const spi_flash_host_driver_s,
}
impl Default for spi_flash_host_inst_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Host driver configuration and context structure."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_flash_host_driver_s {
    #[doc = " Configure the device-related register before transactions. This saves"]
    #[doc = " some time to re-configure those registers when we send continuously"]
    pub dev_config:
        ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t) -> esp_err_t>,
    #[doc = " Send an user-defined spi transaction to the device."]
    pub common_command: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            t: *mut spi_flash_trans_t,
        ) -> esp_err_t,
    >,
    #[doc = " Read flash ID."]
    pub read_id: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, id: *mut u32) -> esp_err_t,
    >,
    #[doc = " Erase whole flash chip."]
    pub erase_chip: ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t)>,
    #[doc = " Erase a specific sector by its start address."]
    pub erase_sector: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, start_address: u32),
    >,
    #[doc = " Erase a specific block by its start address."]
    pub erase_block: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, start_address: u32),
    >,
    #[doc = " Read the status of the flash chip."]
    pub read_status: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, out_sr: *mut u8) -> esp_err_t,
    >,
    #[doc = " Disable write protection."]
    pub set_write_protect: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, wp: bool) -> esp_err_t,
    >,
    #[doc = " Program a page of the flash. Check ``max_write_bytes`` for the maximum allowed writing length."]
    pub program_page: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            buffer: *const c_types::c_void,
            address: u32,
            length: u32,
        ),
    >,
    #[doc = " Check whether given buffer can be directly used to write"]
    pub supports_direct_write: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, p: *const c_types::c_void) -> bool,
    >,
    #[doc = " Slicer for write data. The `program_page` should be called iteratively with the return value"]
    #[doc = " of this function."]
    #[doc = ""]
    #[doc = " @param address Beginning flash address to write"]
    #[doc = " @param len Length request to write"]
    #[doc = " @param align_addr Output of the aligned address to write to"]
    #[doc = " @param page_size Physical page size of the flash chip"]
    #[doc = " @return Length that can be actually written in one `program_page` call"]
    pub write_data_slicer: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            address: u32,
            len: u32,
            align_addr: *mut u32,
            page_size: u32,
        ) -> c_types::c_int,
    >,
    #[doc = " Read data from the flash. Check ``max_read_bytes`` for the maximum allowed reading length."]
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            buffer: *mut c_types::c_void,
            address: u32,
            read_len: u32,
        ) -> esp_err_t,
    >,
    #[doc = " Check whether given buffer can be directly used to read"]
    pub supports_direct_read: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, p: *const c_types::c_void) -> bool,
    >,
    #[doc = " Slicer for read data. The `read` should be called iteratively with the return value"]
    #[doc = " of this function."]
    #[doc = ""]
    #[doc = " @param address Beginning flash address to read"]
    #[doc = " @param len Length request to read"]
    #[doc = " @param align_addr Output of the aligned address to read"]
    #[doc = " @param page_size Physical page size of the flash chip"]
    #[doc = " @return Length that can be actually read in one `read` call"]
    pub read_data_slicer: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            address: u32,
            len: u32,
            align_addr: *mut u32,
            page_size: u32,
        ) -> c_types::c_int,
    >,
    #[doc = " Check the host status, 0:busy, 1:idle, 2:suspended."]
    pub host_status:
        ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t) -> u32>,
    #[doc = " Configure the host to work at different read mode. Responsible to compensate the timing and set IO mode."]
    pub configure_host_io_mode: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            command: u32,
            addr_bitlen: u32,
            dummy_bitlen_base: c_types::c_int,
            io_mode: esp_flash_io_mode_t,
        ) -> esp_err_t,
    >,
    #[doc = "  Internal use, poll the HW until the last operation is done."]
    pub poll_cmd_done:
        ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t)>,
    #[doc = " For some host (SPI1), they are shared with a cache. When the data is"]
    #[doc = " modified, the cache needs to be flushed. Left NULL if not supported."]
    pub flush_cache: ::core::option::Option<
        unsafe extern "C" fn(host: *mut spi_flash_host_inst_t, addr: u32, size: u32) -> esp_err_t,
    >,
    #[doc = " Suspend check erase/program operation, reserved for ESP32-C3 and ESP32-S3 spi flash ROM IMPL."]
    pub check_suspend:
        ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t)>,
    #[doc = " Resume flash from suspend manually"]
    pub resume: ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t)>,
    #[doc = " Set flash in suspend status manually"]
    pub suspend: ::core::option::Option<unsafe extern "C" fn(host: *mut spi_flash_host_inst_t)>,
    #[doc = " Suspend feature setup for setting cmd and status register mask."]
    pub sus_setup: ::core::option::Option<
        unsafe extern "C" fn(
            host: *mut spi_flash_host_inst_t,
            sus_conf: *const spi_flash_sus_cmd_conf,
        ) -> esp_err_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_flash_chip_t {
    _unused: [u8; 0],
}
#[doc = " @brief Structure for describing a region of flash"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_flash_region_t {
    #[doc = "< Start address of this region"]
    pub offset: u32,
    #[doc = "< Size of the region"]
    pub size: u32,
}
#[doc = " @brief OS-level integration hooks for accessing flash chips inside a running OS"]
#[doc = ""]
#[doc = " It's in the public header because some instances should be allocated statically in the startup"]
#[doc = " code. May be updated according to hardware version and new flash chip feature requirements,"]
#[doc = " shouldn't be treated as public API."]
#[doc = ""]
#[doc = "  For advanced developers, you may replace some of them with your implementations at your own"]
#[doc = "  risk."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_flash_os_functions_t {
    #[doc = " Called before commencing any flash operation. Does not need to be"]
    #[doc = " recursive (ie is called at most once for each call to 'end')."]
    pub start: ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void) -> esp_err_t>,
    #[doc = " Called after completing any flash operation."]
    pub end: ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void) -> esp_err_t>,
    #[doc = " Called before any erase/write operations to check whether the region is limited by the OS"]
    pub region_protected: ::core::option::Option<
        unsafe extern "C" fn(
            arg: *mut c_types::c_void,
            start_addr: size_t,
            size: size_t,
        ) -> esp_err_t,
    >,
    #[doc = " Delay for at least 'us' microseconds. Called in between 'start' and 'end'."]
    pub delay_us: ::core::option::Option<
        unsafe extern "C" fn(arg: *mut c_types::c_void, us: u32) -> esp_err_t,
    >,
    #[doc = " Called for get temp buffer when buffer from application cannot be directly read into/write from."]
    pub get_temp_buffer: ::core::option::Option<
        unsafe extern "C" fn(
            arg: *mut c_types::c_void,
            reqest_size: size_t,
            out_size: *mut size_t,
        ) -> *mut c_types::c_void,
    >,
    #[doc = " Called for release temp buffer."]
    pub release_temp_buffer: ::core::option::Option<
        unsafe extern "C" fn(arg: *mut c_types::c_void, temp_buf: *mut c_types::c_void),
    >,
    #[doc = " Yield to other tasks. Called during erase operations."]
    #[doc = " @return ESP_OK means yield needs to be called (got an event to handle), while ESP_ERR_TIMEOUT means skip yield."]
    pub check_yield: ::core::option::Option<
        unsafe extern "C" fn(
            arg: *mut c_types::c_void,
            chip_status: u32,
            out_request: *mut u32,
        ) -> esp_err_t,
    >,
    #[doc = " Yield to other tasks. Called during erase operations."]
    pub yield_: ::core::option::Option<
        unsafe extern "C" fn(arg: *mut c_types::c_void, out_status: *mut u32) -> esp_err_t,
    >,
    #[doc = " Called for get system time."]
    pub get_system_time:
        ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void) -> i64>,
}
#[doc = " @brief Structure to describe a SPI flash chip connected to the system."]
#[doc = ""]
#[doc = "Structure must be initialized before use (passed to esp_flash_init()). It's in the public"]
#[doc = "header because some instances should be allocated statically in the startup code. May be"]
#[doc = "updated according to hardware version and new flash chip feature requirements, shouldn't be"]
#[doc = "treated as public API."]
#[doc = ""]
#[doc = "For advanced developers, you may replace some of them with your implementations at your own"]
#[doc = "risk."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_flash_t {
    #[doc = "< Pointer to hardware-specific \"host_driver\" structure. Must be initialized before used."]
    pub host: *mut spi_flash_host_inst_t,
    #[doc = "< Pointer to chip-model-specific \"adapter\" structure. If NULL, will be detected during initialisation."]
    pub chip_drv: *const spi_flash_chip_t,
    #[doc = "< Pointer to os-specific hook structure. Call ``esp_flash_init_os_functions()`` to setup this field, after the host is properly initialized."]
    pub os_func: *const esp_flash_os_functions_t,
    #[doc = "< Pointer to argument for os-specific hooks. Left NULL and will be initialized with ``os_func``."]
    pub os_func_data: *mut c_types::c_void,
    #[doc = "< Configured SPI flash read mode. Set before ``esp_flash_init`` is called."]
    pub read_mode: esp_flash_io_mode_t,
    #[doc = "< Size of SPI flash in bytes. If 0, size will be detected during initialisation."]
    pub size: u32,
    #[doc = "< Detected chip id."]
    pub chip_id: u32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl Default for esp_flash_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl esp_flash_t {
    #[inline]
    pub fn busy(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_busy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_flags(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(busy: u32, reserved_flags: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let busy: u32 = unsafe { ::core::mem::transmute(busy) };
            busy as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved_flags: u32 = unsafe { ::core::mem::transmute(reserved_flags) };
            reserved_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    #[doc = " @brief Initialise SPI flash chip interface."]
    #[doc = ""]
    #[doc = " This function must be called before any other API functions are called for this chip."]
    #[doc = ""]
    #[doc = " @note Only the ``host`` and ``read_mode`` fields of the chip structure must"]
    #[doc = "       be initialised before this function is called. Other fields may be"]
    #[doc = "       auto-detected if left set to zero or NULL."]
    #[doc = ""]
    #[doc = " @note If the chip->drv pointer is NULL, chip chip_drv will be auto-detected"]
    #[doc = "       based on its manufacturer & product IDs. See"]
    #[doc = "       ``esp_flash_registered_flash_drivers`` pointer for details of this process."]
    #[doc = ""]
    #[doc = " @param chip Pointer to SPI flash chip to use. If NULL, esp_flash_default_chip is substituted."]
    #[doc = " @return ESP_OK on success, or a flash error code if initialisation fails."]
    pub fn esp_flash_init(chip: *mut esp_flash_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Check if appropriate chip driver is set."]
    #[doc = ""]
    #[doc = " @param chip Pointer to SPI flash chip to use. If NULL, esp_flash_default_chip is substituted."]
    #[doc = ""]
    #[doc = " @return true if set, otherwise false."]
    pub fn esp_flash_chip_driver_initialized(chip: *const esp_flash_t) -> bool;
}
extern "C" {
    #[doc = " @brief Read flash ID via the common \"RDID\" SPI flash command."]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param[out] out_id Pointer to receive ID value."]
    #[doc = ""]
    #[doc = " ID is a 24-bit value. Lower 16 bits of 'id' are the chip ID, upper 8 bits are the manufacturer ID."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_read_id(chip: *mut esp_flash_t, out_id: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Detect flash size based on flash ID."]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param[out] out_size Detected size in bytes."]
    #[doc = ""]
    #[doc = " @note Most flash chips use a common format for flash ID, where the lower 4 bits specify the size as a power of 2. If"]
    #[doc = " the manufacturer doesn't follow this convention, the size may be incorrectly detected."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_get_size(chip: *mut esp_flash_t, out_size: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read flash unique ID via the common \"RDUID\" SPI flash command."]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()."]
    #[doc = " @param[out] out_id Pointer to receive unique ID value."]
    #[doc = ""]
    #[doc = " ID is a 64-bit value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success, or a flash error code if operation failed."]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the chip doesn't support read id."]
    pub fn esp_flash_read_unique_chip_id(chip: *mut esp_flash_t, out_id: *mut u64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase flash chip contents"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success,"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the chip is not able to perform the operation. This is indicated by WREN = 1 after the command is sent."]
    #[doc = "      - Other flash error code if operation failed."]
    pub fn esp_flash_erase_chip(chip: *mut esp_flash_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase a region of the flash chip"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param start Address to start erasing flash. Must be sector aligned."]
    #[doc = " @param len Length of region to erase. Must also be sector aligned."]
    #[doc = ""]
    #[doc = " Sector size is specifyed in chip->drv->sector_size field (typically 4096 bytes.) ESP_ERR_INVALID_ARG will be"]
    #[doc = " returned if the start & length are not a multiple of this size."]
    #[doc = ""]
    #[doc = " Erase is performed using block (multi-sector) erases where possible (block size is specified in"]
    #[doc = " chip->drv->block_erase_size field, typically 65536 bytes). Remaining sectors are erased using individual sector erase"]
    #[doc = " commands."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success,"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the chip is not able to perform the operation. This is indicated by WREN = 1 after the command is sent."]
    #[doc = "      - Other flash error code if operation failed."]
    pub fn esp_flash_erase_region(chip: *mut esp_flash_t, start: u32, len: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read if the entire chip is write protected"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param[out] write_protected Pointer to boolean, set to the value of the write protect flag."]
    #[doc = ""]
    #[doc = " @note A correct result for this flag depends on the SPI flash chip model and chip_drv in use (via the 'chip->drv'"]
    #[doc = " field)."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_get_chip_write_protect(
        chip: *mut esp_flash_t,
        write_protected: *mut bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set write protection for the SPI flash chip"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param write_protect Boolean value for the write protect flag"]
    #[doc = ""]
    #[doc = " @note Correct behaviour of this function depends on the SPI flash chip model and chip_drv in use (via the 'chip->drv'"]
    #[doc = " field)."]
    #[doc = ""]
    #[doc = " Some SPI flash chips may require a power cycle before write protect status can be cleared. Otherwise,"]
    #[doc = " write protection can be removed via a follow-up call to this function."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_set_chip_write_protect(
        chip: *mut esp_flash_t,
        write_protect: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read the list of individually protectable regions of this SPI flash chip."]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param[out] out_regions Pointer to receive a pointer to the array of protectable regions of the chip."]
    #[doc = " @param[out] out_num_regions Pointer to an integer receiving the count of protectable regions in the array returned in 'regions'."]
    #[doc = ""]
    #[doc = " @note Correct behaviour of this function depends on the SPI flash chip model and chip_drv in use (via the 'chip->drv'"]
    #[doc = " field)."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_get_protectable_regions(
        chip: *const esp_flash_t,
        out_regions: *mut *const esp_flash_region_t,
        out_num_regions: *mut u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Detect if a region of the SPI flash chip is protected"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param region Pointer to a struct describing a protected region. This must match one of the regions returned from esp_flash_get_protectable_regions(...)."]
    #[doc = " @param[out] out_protected Pointer to a flag which is set based on the protected status for this region."]
    #[doc = ""]
    #[doc = " @note It is possible for this result to be false and write operations to still fail, if protection is enabled for the entire chip."]
    #[doc = ""]
    #[doc = " @note Correct behaviour of this function depends on the SPI flash chip model and chip_drv in use (via the 'chip->drv'"]
    #[doc = " field)."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_get_protected_region(
        chip: *mut esp_flash_t,
        region: *const esp_flash_region_t,
        out_protected: *mut bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Update the protected status for a region of the SPI flash chip"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param region Pointer to a struct describing a protected region. This must match one of the regions returned from esp_flash_get_protectable_regions(...)."]
    #[doc = " @param protect Write protection flag to set."]
    #[doc = ""]
    #[doc = " @note It is possible for the region protection flag to be cleared and write operations to still fail, if protection is enabled for the entire chip."]
    #[doc = ""]
    #[doc = " @note Correct behaviour of this function depends on the SPI flash chip model and chip_drv in use (via the 'chip->drv'"]
    #[doc = " field)."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, or a flash error code if operation failed."]
    pub fn esp_flash_set_protected_region(
        chip: *mut esp_flash_t,
        region: *const esp_flash_region_t,
        protect: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read data from the SPI flash chip"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param buffer Pointer to a buffer where the data will be read. To get better performance, this should be in the DRAM and word aligned."]
    #[doc = " @param address Address on flash to read from. Must be less than chip->size field."]
    #[doc = " @param length Length (in bytes) of data to read."]
    #[doc = ""]
    #[doc = " There are no alignment constraints on buffer, address or length."]
    #[doc = ""]
    #[doc = " @note If on-chip flash encryption is used, this function returns raw (ie encrypted) data. Use the flash cache"]
    #[doc = " to transparently decrypt data."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: success"]
    #[doc = "      - ESP_ERR_NO_MEM: Buffer is in external PSRAM which cannot be concurrently accessed, and a temporary internal buffer could not be allocated."]
    #[doc = "      - or a flash error code if operation failed."]
    pub fn esp_flash_read(
        chip: *mut esp_flash_t,
        buffer: *mut c_types::c_void,
        address: u32,
        length: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to the SPI flash chip"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must have been successfully initialised via esp_flash_init()"]
    #[doc = " @param address Address on flash to write to. Must be previously erased (SPI NOR flash can only write bits 1->0)."]
    #[doc = " @param buffer Pointer to a buffer with the data to write. To get better performance, this should be in the DRAM and word aligned."]
    #[doc = " @param length Length (in bytes) of data to write."]
    #[doc = ""]
    #[doc = " There are no alignment constraints on buffer, address or length."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success,"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the chip is not able to perform the operation. This is indicated by WREN = 1 after the command is sent."]
    #[doc = "      - Other flash error code if operation failed."]
    pub fn esp_flash_write(
        chip: *mut esp_flash_t,
        buffer: *const c_types::c_void,
        address: u32,
        length: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Encrypted and write data to the SPI flash chip using on-chip hardware flash encryption"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must be NULL (the main flash chip). For other chips, encrypted write is not supported."]
    #[doc = " @param address Address on flash to write to. 16 byte aligned. Must be previously erased (SPI NOR flash can only write bits 1->0)."]
    #[doc = " @param buffer Pointer to a buffer with the data to write."]
    #[doc = " @param length Length (in bytes) of data to write. 16 byte aligned."]
    #[doc = ""]
    #[doc = " @note Both address & length must be 16 byte aligned, as this is the encryption block size"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: on success"]
    #[doc = "  - ESP_ERR_NOT_SUPPORTED: encrypted write not supported for this chip."]
    #[doc = "  - ESP_ERR_INVALID_ARG: Either the address, buffer or length is invalid."]
    #[doc = "  - or other flash error code from spi_flash_write_encrypted()."]
    pub fn esp_flash_write_encrypted(
        chip: *mut esp_flash_t,
        address: u32,
        buffer: *const c_types::c_void,
        length: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read and decrypt data from the SPI flash chip using on-chip hardware flash encryption"]
    #[doc = ""]
    #[doc = " @param chip Pointer to identify flash chip. Must be NULL (the main flash chip). For other chips, encrypted read is not supported."]
    #[doc = " @param address Address on flash to read from."]
    #[doc = " @param out_buffer Pointer to a buffer for the data to read to."]
    #[doc = " @param length Length (in bytes) of data to read."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: on success"]
    #[doc = "  - ESP_ERR_NOT_SUPPORTED: encrypted read not supported for this chip."]
    #[doc = "  - or other flash error code from spi_flash_read_encrypted()."]
    pub fn esp_flash_read_encrypted(
        chip: *mut esp_flash_t,
        address: u32,
        out_buffer: *mut c_types::c_void,
        length: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Pointer to the \"default\" SPI flash chip, ie the main chip attached to the MCU."]
    #[doc = ""]
    #[doc = "This chip is used if the 'chip' argument pass to esp_flash_xxx API functions is ever NULL."]
    pub static mut esp_flash_default_chip: *mut esp_flash_t;
}
#[doc = "!< Application partition type"]
pub const esp_partition_type_t_ESP_PARTITION_TYPE_APP: esp_partition_type_t = 0;
#[doc = "!< Data partition type"]
pub const esp_partition_type_t_ESP_PARTITION_TYPE_DATA: esp_partition_type_t = 1;
#[doc = "!< Used to search for partitions with any type"]
pub const esp_partition_type_t_ESP_PARTITION_TYPE_ANY: esp_partition_type_t = 255;
#[doc = " @brief Partition type"]
#[doc = ""]
#[doc = " @note Partition types with integer value 0x00-0x3F are reserved for partition types defined by ESP-IDF."]
#[doc = " Any other integer value 0x40-0xFE can be used by individual applications, without restriction."]
#[doc = ""]
#[doc = " @internal Keep this enum in sync with PartitionDefinition class gen_esp32part.py @endinternal"]
#[doc = ""]
pub type esp_partition_type_t = c_types::c_uint;
#[doc = "!< Factory application partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_FACTORY: esp_partition_subtype_t = 0;
#[doc = "!< Base for OTA partition subtypes"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_MIN: esp_partition_subtype_t = 16;
#[doc = "!< OTA partition 0"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_0: esp_partition_subtype_t = 16;
#[doc = "!< OTA partition 1"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_1: esp_partition_subtype_t = 17;
#[doc = "!< OTA partition 2"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_2: esp_partition_subtype_t = 18;
#[doc = "!< OTA partition 3"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_3: esp_partition_subtype_t = 19;
#[doc = "!< OTA partition 4"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_4: esp_partition_subtype_t = 20;
#[doc = "!< OTA partition 5"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_5: esp_partition_subtype_t = 21;
#[doc = "!< OTA partition 6"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_6: esp_partition_subtype_t = 22;
#[doc = "!< OTA partition 7"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_7: esp_partition_subtype_t = 23;
#[doc = "!< OTA partition 8"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_8: esp_partition_subtype_t = 24;
#[doc = "!< OTA partition 9"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_9: esp_partition_subtype_t = 25;
#[doc = "!< OTA partition 10"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_10: esp_partition_subtype_t = 26;
#[doc = "!< OTA partition 11"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_11: esp_partition_subtype_t = 27;
#[doc = "!< OTA partition 12"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_12: esp_partition_subtype_t = 28;
#[doc = "!< OTA partition 13"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_13: esp_partition_subtype_t = 29;
#[doc = "!< OTA partition 14"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_14: esp_partition_subtype_t = 30;
#[doc = "!< OTA partition 15"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_15: esp_partition_subtype_t = 31;
#[doc = "!< Max subtype of OTA partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_OTA_MAX: esp_partition_subtype_t = 32;
#[doc = "!< Test application partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_APP_TEST: esp_partition_subtype_t = 32;
#[doc = "!< OTA selection partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_OTA: esp_partition_subtype_t = 0;
#[doc = "!< PHY init data partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_PHY: esp_partition_subtype_t = 1;
#[doc = "!< NVS partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_NVS: esp_partition_subtype_t = 2;
#[doc = "!< COREDUMP partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_COREDUMP: esp_partition_subtype_t = 3;
#[doc = "!< Partition for NVS keys"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_NVS_KEYS: esp_partition_subtype_t = 4;
#[doc = "!< Partition for emulate eFuse bits"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_EFUSE_EM: esp_partition_subtype_t = 5;
#[doc = "!< Undefined (or unspecified) data partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_UNDEFINED: esp_partition_subtype_t = 6;
#[doc = "!< ESPHTTPD partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_ESPHTTPD: esp_partition_subtype_t =
    128;
#[doc = "!< FAT partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_FAT: esp_partition_subtype_t = 129;
#[doc = "!< SPIFFS partition"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_DATA_SPIFFS: esp_partition_subtype_t = 130;
#[doc = "!< Used to search for partitions with any subtype"]
pub const esp_partition_subtype_t_ESP_PARTITION_SUBTYPE_ANY: esp_partition_subtype_t = 255;
#[doc = " @brief Partition subtype"]
#[doc = ""]
#[doc = " @note These ESP-IDF-defined partition subtypes apply to partitions of type ESP_PARTITION_TYPE_APP"]
#[doc = " and ESP_PARTITION_TYPE_DATA."]
#[doc = ""]
#[doc = " Application-defined partition types (0x40-0xFE) can set any numeric subtype value."]
#[doc = ""]
#[doc = " @internal Keep this enum in sync with PartitionDefinition class gen_esp32part.py @endinternal"]
pub type esp_partition_subtype_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_partition_iterator_opaque_ {
    _unused: [u8; 0],
}
#[doc = " @brief Opaque partition iterator type"]
pub type esp_partition_iterator_t = *mut esp_partition_iterator_opaque_;
#[doc = " @brief partition information structure"]
#[doc = ""]
#[doc = " This is not the format in flash, that format is esp_partition_info_t."]
#[doc = ""]
#[doc = " However, this is the format used by this API."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_partition_t {
    #[doc = "< SPI flash chip on which the partition resides"]
    pub flash_chip: *mut esp_flash_t,
    #[doc = "< partition type (app/data)"]
    pub type_: esp_partition_type_t,
    #[doc = "< partition subtype"]
    pub subtype: esp_partition_subtype_t,
    #[doc = "< starting address of the partition in flash"]
    pub address: u32,
    #[doc = "< size of the partition, in bytes"]
    pub size: u32,
    #[doc = "< partition label, zero-terminated ASCII string"]
    pub label: [c_types::c_char; 17usize],
    #[doc = "< flag is set to true if partition is encrypted"]
    pub encrypted: bool,
}
impl Default for esp_partition_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Find partition based on one or more parameters"]
    #[doc = ""]
    #[doc = " @param type Partition type, one of esp_partition_type_t values or an 8-bit unsigned integer."]
    #[doc = "             To find all partitions, no matter the type, use ESP_PARTITION_TYPE_ANY, and set"]
    #[doc = "             subtype argument to ESP_PARTITION_SUBTYPE_ANY."]
    #[doc = " @param subtype Partition subtype, one of esp_partition_subtype_t values or an 8-bit unsigned integer."]
    #[doc = "                To find all partitions of given type, use ESP_PARTITION_SUBTYPE_ANY."]
    #[doc = " @param label (optional) Partition label. Set this value if looking"]
    #[doc = "             for partition with a specific name. Pass NULL otherwise."]
    #[doc = ""]
    #[doc = " @return iterator which can be used to enumerate all the partitions found,"]
    #[doc = "         or NULL if no partitions were found."]
    #[doc = "         Iterator obtained through this function has to be released"]
    #[doc = "         using esp_partition_iterator_release when not used any more."]
    pub fn esp_partition_find(
        type_: esp_partition_type_t,
        subtype: esp_partition_subtype_t,
        label: *const c_types::c_char,
    ) -> esp_partition_iterator_t;
}
extern "C" {
    #[doc = " @brief Find first partition based on one or more parameters"]
    #[doc = ""]
    #[doc = " @param type Partition type, one of esp_partition_type_t values or an 8-bit unsigned integer."]
    #[doc = "             To find all partitions, no matter the type, use ESP_PARTITION_TYPE_ANY, and set"]
    #[doc = "             subtype argument to ESP_PARTITION_SUBTYPE_ANY."]
    #[doc = " @param subtype Partition subtype, one of esp_partition_subtype_t values or an 8-bit unsigned integer"]
    #[doc = "                To find all partitions of given type, use ESP_PARTITION_SUBTYPE_ANY."]
    #[doc = " @param label (optional) Partition label. Set this value if looking"]
    #[doc = "             for partition with a specific name. Pass NULL otherwise."]
    #[doc = ""]
    #[doc = " @return pointer to esp_partition_t structure, or NULL if no partition is found."]
    #[doc = "         This pointer is valid for the lifetime of the application."]
    pub fn esp_partition_find_first(
        type_: esp_partition_type_t,
        subtype: esp_partition_subtype_t,
        label: *const c_types::c_char,
    ) -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Get esp_partition_t structure for given partition"]
    #[doc = ""]
    #[doc = " @param iterator  Iterator obtained using esp_partition_find. Must be non-NULL."]
    #[doc = ""]
    #[doc = " @return pointer to esp_partition_t structure. This pointer is valid for the lifetime"]
    #[doc = "         of the application."]
    pub fn esp_partition_get(iterator: esp_partition_iterator_t) -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Move partition iterator to the next partition found"]
    #[doc = ""]
    #[doc = " Any copies of the iterator will be invalid after this call."]
    #[doc = ""]
    #[doc = " @param iterator Iterator obtained using esp_partition_find. Must be non-NULL."]
    #[doc = ""]
    #[doc = " @return NULL if no partition was found, valid esp_partition_iterator_t otherwise."]
    pub fn esp_partition_next(iterator: esp_partition_iterator_t) -> esp_partition_iterator_t;
}
extern "C" {
    #[doc = " @brief Release partition iterator"]
    #[doc = ""]
    #[doc = " @param iterator Iterator obtained using esp_partition_find."]
    #[doc = "                 The iterator is allowed to be NULL, so it is not necessary to check its value"]
    #[doc = "                 before calling this function."]
    #[doc = ""]
    pub fn esp_partition_iterator_release(iterator: esp_partition_iterator_t);
}
extern "C" {
    #[doc = " @brief Verify partition data"]
    #[doc = ""]
    #[doc = " Given a pointer to partition data, verify this partition exists in the partition table (all fields match.)"]
    #[doc = ""]
    #[doc = " This function is also useful to take partition data which may be in a RAM buffer and convert it to a pointer to the"]
    #[doc = " permanent partition data stored in flash."]
    #[doc = ""]
    #[doc = " Pointers returned from this function can be compared directly to the address of any pointer returned from"]
    #[doc = " esp_partition_get(), as a test for equality."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition data to verify. Must be non-NULL. All fields of this structure must match the"]
    #[doc = " partition table entry in flash for this function to return a successful match."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - If partition not found, returns NULL."]
    #[doc = " - If found, returns a pointer to the esp_partition_t structure in flash. This pointer is always valid for the lifetime of the application."]
    pub fn esp_partition_verify(partition: *const esp_partition_t) -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Read data from the partition"]
    #[doc = ""]
    #[doc = " Partitions marked with an encryption flag will automatically be"]
    #[doc = " be read and decrypted via a cache mapping."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param dst Pointer to the buffer where data should be stored."]
    #[doc = "            Pointer must be non-NULL and buffer must be at least 'size' bytes long."]
    #[doc = " @param src_offset Address of the data to be read, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param size Size of data to be read, in bytes."]
    #[doc = ""]
    #[doc = " @return ESP_OK, if data was read successfully;"]
    #[doc = "         ESP_ERR_INVALID_ARG, if src_offset exceeds partition size;"]
    #[doc = "         ESP_ERR_INVALID_SIZE, if read would go out of bounds of the partition;"]
    #[doc = "         or one of error codes from lower-level flash driver."]
    pub fn esp_partition_read(
        partition: *const esp_partition_t,
        src_offset: size_t,
        dst: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to the partition"]
    #[doc = ""]
    #[doc = " Before writing data to flash, corresponding region of flash needs to be erased."]
    #[doc = " This can be done using esp_partition_erase_range function."]
    #[doc = ""]
    #[doc = " Partitions marked with an encryption flag will automatically be"]
    #[doc = " written via the spi_flash_write_encrypted() function. If writing to"]
    #[doc = " an encrypted partition, all write offsets and lengths must be"]
    #[doc = " multiples of 16 bytes. See the spi_flash_write_encrypted() function"]
    #[doc = " for more details. Unencrypted partitions do not have this"]
    #[doc = " restriction."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param dst_offset Address where the data should be written, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param src Pointer to the source buffer.  Pointer must be non-NULL and"]
    #[doc = "            buffer must be at least 'size' bytes long."]
    #[doc = " @param size Size of data to be written, in bytes."]
    #[doc = ""]
    #[doc = " @note Prior to writing to flash memory, make sure it has been erased with"]
    #[doc = "       esp_partition_erase_range call."]
    #[doc = ""]
    #[doc = " @return ESP_OK, if data was written successfully;"]
    #[doc = "         ESP_ERR_INVALID_ARG, if dst_offset exceeds partition size;"]
    #[doc = "         ESP_ERR_INVALID_SIZE, if write would go out of bounds of the partition;"]
    #[doc = "         or one of error codes from lower-level flash driver."]
    pub fn esp_partition_write(
        partition: *const esp_partition_t,
        dst_offset: size_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read data from the partition without any transformation/decryption."]
    #[doc = ""]
    #[doc = " @note This function is essentially the same as \\c esp_partition_read() above."]
    #[doc = "       It just never decrypts data but returns it as is."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param dst Pointer to the buffer where data should be stored."]
    #[doc = "            Pointer must be non-NULL and buffer must be at least 'size' bytes long."]
    #[doc = " @param src_offset Address of the data to be read, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param size Size of data to be read, in bytes."]
    #[doc = ""]
    #[doc = " @return ESP_OK, if data was read successfully;"]
    #[doc = "         ESP_ERR_INVALID_ARG, if src_offset exceeds partition size;"]
    #[doc = "         ESP_ERR_INVALID_SIZE, if read would go out of bounds of the partition;"]
    #[doc = "         or one of error codes from lower-level flash driver."]
    pub fn esp_partition_read_raw(
        partition: *const esp_partition_t,
        src_offset: size_t,
        dst: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to the partition without any transformation/encryption."]
    #[doc = ""]
    #[doc = " @note This function is essentially the same as \\c esp_partition_write() above."]
    #[doc = "       It just never encrypts data but writes it as is."]
    #[doc = ""]
    #[doc = " Before writing data to flash, corresponding region of flash needs to be erased."]
    #[doc = " This can be done using esp_partition_erase_range function."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param dst_offset Address where the data should be written, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param src Pointer to the source buffer.  Pointer must be non-NULL and"]
    #[doc = "            buffer must be at least 'size' bytes long."]
    #[doc = " @param size Size of data to be written, in bytes."]
    #[doc = ""]
    #[doc = " @note Prior to writing to flash memory, make sure it has been erased with"]
    #[doc = "       esp_partition_erase_range call."]
    #[doc = ""]
    #[doc = " @return ESP_OK, if data was written successfully;"]
    #[doc = "         ESP_ERR_INVALID_ARG, if dst_offset exceeds partition size;"]
    #[doc = "         ESP_ERR_INVALID_SIZE, if write would go out of bounds of the partition;"]
    #[doc = "         or one of the error codes from lower-level flash driver."]
    pub fn esp_partition_write_raw(
        partition: *const esp_partition_t,
        dst_offset: size_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase part of the partition"]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param offset Offset from the beginning of partition where erase operation"]
    #[doc = "               should start. Must be aligned to 4 kilobytes."]
    #[doc = " @param size Size of the range which should be erased, in bytes."]
    #[doc = "                   Must be divisible by 4 kilobytes."]
    #[doc = ""]
    #[doc = " @return ESP_OK, if the range was erased successfully;"]
    #[doc = "         ESP_ERR_INVALID_ARG, if iterator or dst are NULL;"]
    #[doc = "         ESP_ERR_INVALID_SIZE, if erase would go out of bounds of the partition;"]
    #[doc = "         or one of error codes from lower-level flash driver."]
    pub fn esp_partition_erase_range(
        partition: *const esp_partition_t,
        offset: size_t,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure MMU to map partition into data memory"]
    #[doc = ""]
    #[doc = " Unlike spi_flash_mmap function, which requires a 64kB aligned base address,"]
    #[doc = " this function doesn't impose such a requirement."]
    #[doc = " If offset results in a flash address which is not aligned to 64kB boundary,"]
    #[doc = " address will be rounded to the lower 64kB boundary, so that mapped region"]
    #[doc = " includes requested range."]
    #[doc = " Pointer returned via out_ptr argument will be adjusted to point to the"]
    #[doc = " requested offset (not necessarily to the beginning of mmap-ed region)."]
    #[doc = ""]
    #[doc = " To release mapped memory, pass handle returned via out_handle argument to"]
    #[doc = " spi_flash_munmap function."]
    #[doc = ""]
    #[doc = " @param partition Pointer to partition structure obtained using"]
    #[doc = "                  esp_partition_find_first or esp_partition_get."]
    #[doc = "                  Must be non-NULL."]
    #[doc = " @param offset Offset from the beginning of partition where mapping should start."]
    #[doc = " @param size Size of the area to be mapped."]
    #[doc = " @param memory  Memory space where the region should be mapped"]
    #[doc = " @param out_ptr  Output, pointer to the mapped memory region"]
    #[doc = " @param out_handle  Output, handle which should be used for spi_flash_munmap call"]
    #[doc = ""]
    #[doc = " @return ESP_OK, if successful"]
    pub fn esp_partition_mmap(
        partition: *const esp_partition_t,
        offset: size_t,
        size: size_t,
        memory: spi_flash_mmap_memory_t,
        out_ptr: *mut *const c_types::c_void,
        out_handle: *mut spi_flash_mmap_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get SHA-256 digest for required partition."]
    #[doc = ""]
    #[doc = " For apps with SHA-256 appended to the app image, the result is the appended SHA-256 value for the app image content."]
    #[doc = " The hash is verified before returning, if app content is invalid then the function returns ESP_ERR_IMAGE_INVALID."]
    #[doc = " For apps without SHA-256 appended to the image, the result is the SHA-256 of all bytes in the app image."]
    #[doc = " For other partition types, the result is the SHA-256 of the entire partition."]
    #[doc = ""]
    #[doc = " @param[in]  partition    Pointer to info for partition containing app or data. (fields: address, size and type, are required to be filled)."]
    #[doc = " @param[out] sha_256      Returned SHA-256 digest for a given partition."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK: In case of successful operation."]
    #[doc = "          - ESP_ERR_INVALID_ARG: The size was 0 or the sha_256 was NULL."]
    #[doc = "          - ESP_ERR_NO_MEM: Cannot allocate memory for sha256 operation."]
    #[doc = "          - ESP_ERR_IMAGE_INVALID: App partition doesn't contain a valid app image."]
    #[doc = "          - ESP_FAIL: An allocation error occurred."]
    pub fn esp_partition_get_sha256(
        partition: *const esp_partition_t,
        sha_256: *mut u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Check for the identity of two partitions by SHA-256 digest."]
    #[doc = ""]
    #[doc = " @param[in] partition_1 Pointer to info for partition 1 containing app or data. (fields: address, size and type, are required to be filled)."]
    #[doc = " @param[in] partition_2 Pointer to info for partition 2 containing app or data. (fields: address, size and type, are required to be filled)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - True:  In case of the two firmware is equal."]
    #[doc = "         - False: Otherwise"]
    pub fn esp_partition_check_identity(
        partition_1: *const esp_partition_t,
        partition_2: *const esp_partition_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Register a partition on an external flash chip"]
    #[doc = ""]
    #[doc = " This API allows designating certain areas of external flash chips (identified by the esp_flash_t structure)"]
    #[doc = " as partitions. This allows using them with components which access SPI flash through the esp_partition API."]
    #[doc = ""]
    #[doc = " @param flash_chip  Pointer to the structure identifying the flash chip"]
    #[doc = " @param offset  Address in bytes, where the partition starts"]
    #[doc = " @param size  Size of the partition in bytes"]
    #[doc = " @param label  Partition name"]
    #[doc = " @param type  One of the partition types (ESP_PARTITION_TYPE_*), or an integer. Note that applications can not be booted from external flash"]
    #[doc = "              chips, so using ESP_PARTITION_TYPE_APP is not supported."]
    #[doc = " @param subtype  One of the partition subtypes (ESP_PARTITION_SUBTYPE_*), or an integer."]
    #[doc = " @param[out] out_partition  Output, if non-NULL, receives the pointer to the resulting esp_partition_t structure"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if CONFIG_CONFIG_SPI_FLASH_USE_LEGACY_IMPL is enabled"]
    #[doc = "      - ESP_ERR_NO_MEM if memory allocation has failed"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the new partition overlaps another partition on the same flash chip"]
    #[doc = "      - ESP_ERR_INVALID_SIZE if the partition doesn't fit into the flash chip size"]
    pub fn esp_partition_register_external(
        flash_chip: *mut esp_flash_t,
        offset: size_t,
        size: size_t,
        label: *const c_types::c_char,
        type_: esp_partition_type_t,
        subtype: esp_partition_subtype_t,
        out_partition: *mut *const esp_partition_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deregister the partition previously registered using esp_partition_register_external"]
    #[doc = " @param partition  pointer to the partition structure obtained from esp_partition_register_external,"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if the partition pointer is not found"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the partition comes from the partition table"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the partition was not registered using"]
    #[doc = "        esp_partition_register_external function."]
    pub fn esp_partition_deregister_external(partition: *const esp_partition_t) -> esp_err_t;
}
#[doc = " Function prototype for interrupt handler function"]
pub type intr_handler_t = ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct intr_handle_data_t {
    _unused: [u8; 0],
}
#[doc = " Handle to an interrupt handler"]
pub type intr_handle_t = *mut intr_handle_data_t;
extern "C" {
    #[doc = " @brief Mark an interrupt as a shared interrupt"]
    #[doc = ""]
    #[doc = " This will mark a certain interrupt on the specified CPU as"]
    #[doc = " an interrupt that can be used to hook shared interrupt handlers"]
    #[doc = " to."]
    #[doc = ""]
    #[doc = " @param intno The number of the interrupt (0-31)"]
    #[doc = " @param cpu CPU on which the interrupt should be marked as shared (0 or 1)"]
    #[doc = " @param is_in_iram Shared interrupt is for handlers that reside in IRAM and"]
    #[doc = "                   the int can be left enabled while the flash cache is disabled."]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if cpu or intno is invalid"]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_mark_shared(
        intno: c_types::c_int,
        cpu: c_types::c_int,
        is_in_iram: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reserve an interrupt to be used outside of this framework"]
    #[doc = ""]
    #[doc = " This will mark a certain interrupt on the specified CPU as"]
    #[doc = " reserved, not to be allocated for any reason."]
    #[doc = ""]
    #[doc = " @param intno The number of the interrupt (0-31)"]
    #[doc = " @param cpu CPU on which the interrupt should be marked as shared (0 or 1)"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if cpu or intno is invalid"]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_reserve(intno: c_types::c_int, cpu: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Allocate an interrupt with the given parameters."]
    #[doc = ""]
    #[doc = " This finds an interrupt that matches the restrictions as given in the flags"]
    #[doc = " parameter, maps the given interrupt source to it and hooks up the given"]
    #[doc = " interrupt handler (with optional argument) as well. If needed, it can return"]
    #[doc = " a handle for the interrupt as well."]
    #[doc = ""]
    #[doc = " The interrupt will always be allocated on the core that runs this function."]
    #[doc = ""]
    #[doc = " If ESP_INTR_FLAG_IRAM flag is used, and handler address is not in IRAM or"]
    #[doc = " RTC_FAST_MEM, then ESP_ERR_INVALID_ARG is returned."]
    #[doc = ""]
    #[doc = " @param source The interrupt source. One of the ETS_*_INTR_SOURCE interrupt mux"]
    #[doc = "               sources, as defined in soc/soc.h, or one of the internal"]
    #[doc = "               ETS_INTERNAL_*_INTR_SOURCE sources as defined in this header."]
    #[doc = " @param flags An ORred mask of the ESP_INTR_FLAG_* defines. These restrict the"]
    #[doc = "               choice of interrupts that this routine can choose from. If this value"]
    #[doc = "               is 0, it will default to allocating a non-shared interrupt of level"]
    #[doc = "               1, 2 or 3. If this is ESP_INTR_FLAG_SHARED, it will allocate a shared"]
    #[doc = "               interrupt of level 1. Setting ESP_INTR_FLAG_INTRDISABLED will return"]
    #[doc = "               from this function with the interrupt disabled."]
    #[doc = " @param handler The interrupt handler. Must be NULL when an interrupt of level >3"]
    #[doc = "               is requested, because these types of interrupts aren't C-callable."]
    #[doc = " @param arg    Optional argument for passed to the interrupt handler"]
    #[doc = " @param ret_handle Pointer to an intr_handle_t to store a handle that can later be"]
    #[doc = "               used to request details or free the interrupt. Can be NULL if no handle"]
    #[doc = "               is required."]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if the combination of arguments is invalid."]
    #[doc = "         ESP_ERR_NOT_FOUND No free interrupt found with the specified flags"]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_alloc(
        source: c_types::c_int,
        flags: c_types::c_int,
        handler: intr_handler_t,
        arg: *mut c_types::c_void,
        ret_handle: *mut intr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Allocate an interrupt with the given parameters."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " This essentially does the same as esp_intr_alloc, but allows specifying a register and mask"]
    #[doc = " combo. For shared interrupts, the handler is only called if a read from the specified"]
    #[doc = " register, ANDed with the mask, returns non-zero. By passing an interrupt status register"]
    #[doc = " address and a fitting mask, this can be used to accelerate interrupt handling in the case"]
    #[doc = " a shared interrupt is triggered; by checking the interrupt statuses first, the code can"]
    #[doc = " decide which ISRs can be skipped"]
    #[doc = ""]
    #[doc = " @param source The interrupt source. One of the ETS_*_INTR_SOURCE interrupt mux"]
    #[doc = "               sources, as defined in soc/soc.h, or one of the internal"]
    #[doc = "               ETS_INTERNAL_*_INTR_SOURCE sources as defined in this header."]
    #[doc = " @param flags An ORred mask of the ESP_INTR_FLAG_* defines. These restrict the"]
    #[doc = "               choice of interrupts that this routine can choose from. If this value"]
    #[doc = "               is 0, it will default to allocating a non-shared interrupt of level"]
    #[doc = "               1, 2 or 3. If this is ESP_INTR_FLAG_SHARED, it will allocate a shared"]
    #[doc = "               interrupt of level 1. Setting ESP_INTR_FLAG_INTRDISABLED will return"]
    #[doc = "               from this function with the interrupt disabled."]
    #[doc = " @param intrstatusreg The address of an interrupt status register"]
    #[doc = " @param intrstatusmask A mask. If a read of address intrstatusreg has any of the bits"]
    #[doc = "               that are 1 in the mask set, the ISR will be called. If not, it will be"]
    #[doc = "               skipped."]
    #[doc = " @param handler The interrupt handler. Must be NULL when an interrupt of level >3"]
    #[doc = "               is requested, because these types of interrupts aren't C-callable."]
    #[doc = " @param arg    Optional argument for passed to the interrupt handler"]
    #[doc = " @param ret_handle Pointer to an intr_handle_t to store a handle that can later be"]
    #[doc = "               used to request details or free the interrupt. Can be NULL if no handle"]
    #[doc = "               is required."]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if the combination of arguments is invalid."]
    #[doc = "         ESP_ERR_NOT_FOUND No free interrupt found with the specified flags"]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_alloc_intrstatus(
        source: c_types::c_int,
        flags: c_types::c_int,
        intrstatusreg: u32,
        intrstatusmask: u32,
        handler: intr_handler_t,
        arg: *mut c_types::c_void,
        ret_handle: *mut intr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable and free an interrupt."]
    #[doc = ""]
    #[doc = " Use an interrupt handle to disable the interrupt and release the resources associated with it."]
    #[doc = " If the current core is not the core that registered this interrupt, this routine will be assigned to"]
    #[doc = " the core that allocated this interrupt, blocking and waiting until the resource is successfully released."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = " When the handler shares its source with other handlers, the interrupt status"]
    #[doc = " bits it's responsible for should be managed properly before freeing it. see"]
    #[doc = " ``esp_intr_disable`` for more details. Please do not call this function in ``esp_ipc_call_blocking``."]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG the handle is NULL"]
    #[doc = "         ESP_FAIL failed to release this handle"]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_free(handle: intr_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get CPU number an interrupt is tied to"]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = ""]
    #[doc = " @return The core number where the interrupt is allocated"]
    pub fn esp_intr_get_cpu(handle: intr_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Get the allocated interrupt for a certain handle"]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = ""]
    #[doc = " @return The interrupt number"]
    pub fn esp_intr_get_intno(handle: intr_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Disable the interrupt associated with the handle"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = " 1. For local interrupts (ESP_INTERNAL_* sources), this function has to be called on the"]
    #[doc = " CPU the interrupt is allocated on. Other interrupts have no such restriction."]
    #[doc = " 2. When several handlers sharing a same interrupt source, interrupt status bits, which are"]
    #[doc = " handled in the handler to be disabled, should be masked before the disabling, or handled"]
    #[doc = " in other enabled interrupts properly. Miss of interrupt status handling will cause infinite"]
    #[doc = " interrupt calls and finally system crash."]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if the combination of arguments is invalid."]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_disable(handle: intr_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable the interrupt associated with the handle"]
    #[doc = ""]
    #[doc = " @note For local interrupts (ESP_INTERNAL_* sources), this function has to be called on the"]
    #[doc = "       CPU the interrupt is allocated on. Other interrupts have no such restriction."]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if the combination of arguments is invalid."]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_enable(handle: intr_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set the \"in IRAM\" status of the handler."]
    #[doc = ""]
    #[doc = " @note Does not work on shared interrupts."]
    #[doc = ""]
    #[doc = " @param handle The handle, as obtained by esp_intr_alloc or esp_intr_alloc_intrstatus"]
    #[doc = " @param is_in_iram Whether the handler associated with this handle resides in IRAM."]
    #[doc = "                   Handlers residing in IRAM can be called when cache is disabled."]
    #[doc = ""]
    #[doc = " @return ESP_ERR_INVALID_ARG if the combination of arguments is invalid."]
    #[doc = "         ESP_OK otherwise"]
    pub fn esp_intr_set_in_iram(handle: intr_handle_t, is_in_iram: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable interrupts that aren't specifically marked as running from IRAM"]
    pub fn esp_intr_noniram_disable();
}
extern "C" {
    #[doc = " @brief Re-enable interrupts disabled by esp_intr_noniram_disable"]
    pub fn esp_intr_noniram_enable();
}
extern "C" {
    #[doc = " @brief enable the interrupt source based on its number"]
    #[doc = " @param inum interrupt number from 0 to 31"]
    pub fn esp_intr_enable_source(inum: c_types::c_int);
}
extern "C" {
    #[doc = " @brief disable the interrupt source based on its number"]
    #[doc = " @param inum interrupt number from 0 to 31"]
    pub fn esp_intr_disable_source(inum: c_types::c_int);
}
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_DISABLE: GPIO_INT_TYPE = 0;
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_POSEDGE: GPIO_INT_TYPE = 1;
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_NEGEDGE: GPIO_INT_TYPE = 2;
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_ANYEDGE: GPIO_INT_TYPE = 3;
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_LOLEVEL: GPIO_INT_TYPE = 4;
pub const GPIO_INT_TYPE_GPIO_PIN_INTR_HILEVEL: GPIO_INT_TYPE = 5;
pub type GPIO_INT_TYPE = c_types::c_uint;
pub type gpio_intr_handler_fn_t = ::core::option::Option<
    unsafe extern "C" fn(intr_mask: u32, high: bool, arg: *mut c_types::c_void),
>;
extern "C" {
    #[doc = " @brief Initialize GPIO. This includes reading the GPIO Configuration DataSet"]
    #[doc = "        to initialize \"output enables\" and pin configurations for each gpio pin."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param  None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_init();
}
extern "C" {
    #[doc = " @brief Change GPIO(0-31) pin output by setting, clearing, or disabling pins, GPIO0<->BIT(0)."]
    #[doc = "         There is no particular ordering guaranteed; so if the order of writes is significant,"]
    #[doc = "         calling code should divide a single call into multiple calls."]
    #[doc = ""]
    #[doc = " @param  uint32_t set_mask : the gpios that need high level."]
    #[doc = ""]
    #[doc = " @param  uint32_t clear_mask : the gpios that need low level."]
    #[doc = ""]
    #[doc = " @param  uint32_t enable_mask : the gpios that need be changed."]
    #[doc = ""]
    #[doc = " @param  uint32_t disable_mask : the gpios that need diable output."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_output_set(set_mask: u32, clear_mask: u32, enable_mask: u32, disable_mask: u32);
}
extern "C" {
    #[doc = " @brief Change GPIO(32-39) pin output by setting, clearing, or disabling pins, GPIO32<->BIT(0)."]
    #[doc = "         There is no particular ordering guaranteed; so if the order of writes is significant,"]
    #[doc = "         calling code should divide a single call into multiple calls."]
    #[doc = ""]
    #[doc = " @param  uint32_t set_mask : the gpios that need high level."]
    #[doc = ""]
    #[doc = " @param  uint32_t clear_mask : the gpios that need low level."]
    #[doc = ""]
    #[doc = " @param  uint32_t enable_mask : the gpios that need be changed."]
    #[doc = ""]
    #[doc = " @param  uint32_t disable_mask : the gpios that need diable output."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_output_set_high(
        set_mask: u32,
        clear_mask: u32,
        enable_mask: u32,
        disable_mask: u32,
    );
}
extern "C" {
    #[doc = " @brief Sample the value of GPIO input pins(0-31) and returns a bitmask."]
    #[doc = ""]
    #[doc = " @param None"]
    #[doc = ""]
    #[doc = " @return uint32_t : bitmask for GPIO input pins, BIT(0) for GPIO0."]
    pub fn gpio_input_get() -> u32;
}
extern "C" {
    #[doc = " @brief Sample the value of GPIO input pins(32-39) and returns a bitmask."]
    #[doc = ""]
    #[doc = " @param None"]
    #[doc = ""]
    #[doc = " @return uint32_t : bitmask for GPIO input pins, BIT(0) for GPIO32."]
    pub fn gpio_input_get_high() -> u32;
}
extern "C" {
    #[doc = " @brief Register an application-specific interrupt handler for GPIO pin interrupts."]
    #[doc = "        Once the interrupt handler is called, it will not be called again until after a call to gpio_intr_ack."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param gpio_intr_handler_fn_t fn : gpio application-specific interrupt handler"]
    #[doc = ""]
    #[doc = " @param void *arg : gpio application-specific interrupt handler argument."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_intr_handler_register(fn_: gpio_intr_handler_fn_t, arg: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Get gpio interrupts which happens but not processed."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param None"]
    #[doc = ""]
    #[doc = " @return uint32_t : bitmask for GPIO pending interrupts, BIT(0) for GPIO0."]
    pub fn gpio_intr_pending() -> u32;
}
extern "C" {
    #[doc = " @brief Get gpio interrupts which happens but not processed."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param None"]
    #[doc = ""]
    #[doc = " @return uint32_t : bitmask for GPIO pending interrupts, BIT(0) for GPIO32."]
    pub fn gpio_intr_pending_high() -> u32;
}
extern "C" {
    #[doc = " @brief Ack gpio interrupts to process pending interrupts."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param uint32_t ack_mask: bitmask for GPIO ack interrupts, BIT(0) for GPIO0."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_intr_ack(ack_mask: u32);
}
extern "C" {
    #[doc = " @brief Ack gpio interrupts to process pending interrupts."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param uint32_t ack_mask: bitmask for GPIO ack interrupts, BIT(0) for GPIO32."]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_intr_ack_high(ack_mask: u32);
}
extern "C" {
    #[doc = " @brief Set GPIO to wakeup the ESP32."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param uint32_t i: gpio number."]
    #[doc = ""]
    #[doc = " @param GPIO_INT_TYPE intr_state : only GPIO_PIN_INTR_LOLEVEL\\GPIO_PIN_INTR_HILEVEL can be used"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pin_wakeup_enable(i: u32, intr_state: GPIO_INT_TYPE);
}
extern "C" {
    #[doc = " @brief disable GPIOs to wakeup the ESP32."]
    #[doc = "        Please do not call this function in SDK."]
    #[doc = ""]
    #[doc = " @param None"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pin_wakeup_disable();
}
extern "C" {
    #[doc = " @brief set gpio input to a signal, one gpio can input to several signals."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio : gpio number, 0~0x2f"]
    #[doc = "                        gpio == 0x3C, input 0 to signal"]
    #[doc = "                        gpio == 0x3A, input nothing to signal"]
    #[doc = "                        gpio == 0x38, input 1 to signal"]
    #[doc = ""]
    #[doc = " @param uint32_t signal_idx : signal index."]
    #[doc = ""]
    #[doc = " @param bool inv : the signal is inv or not"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_matrix_in(gpio: u32, signal_idx: u32, inv: bool);
}
extern "C" {
    #[doc = " @brief set signal output to gpio, one signal can output to several gpios."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @param uint32_t signal_idx : signal index."]
    #[doc = "                        signal_idx == 0x100, cancel output put to the gpio"]
    #[doc = ""]
    #[doc = " @param bool out_inv : the signal output is invert or not"]
    #[doc = ""]
    #[doc = " @param bool oen_inv : the signal output enable is invert or not"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_matrix_out(gpio: u32, signal_idx: u32, out_inv: bool, oen_inv: bool);
}
extern "C" {
    #[doc = " @brief Select pad as a gpio function from IOMUX."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_select_gpio(gpio_num: u32);
}
extern "C" {
    #[doc = " @brief Set pad driver capability."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @param uint32_t drv : 0-3"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_set_drv(gpio_num: u32, drv: u32);
}
extern "C" {
    #[doc = " @brief Pull up the pad from gpio number."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_pullup(gpio_num: u32);
}
extern "C" {
    #[doc = " @brief Pull down the pad from gpio number."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_pulldown(gpio_num: u32);
}
extern "C" {
    #[doc = " @brief Unhold the pad from gpio number."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_unhold(gpio_num: u32);
}
extern "C" {
    #[doc = " @brief Hold the pad from gpio number."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_hold(gpio_num: u32);
}
extern "C" {
    #[doc = " @brief enable gpio pad input."]
    #[doc = ""]
    #[doc = " @param uint32_t gpio_num : gpio number, 0~0x2f"]
    #[doc = ""]
    #[doc = " @return None"]
    pub fn gpio_pad_input_enable(gpio_num: u32);
}
pub type gpio_isr_handle_t = intr_handle_t;
extern "C" {
    #[doc = " @brief GPIO common configuration"]
    #[doc = ""]
    #[doc = "        Configure GPIO's Mode,pull-up,PullDown,IntrType"]
    #[doc = ""]
    #[doc = " @param  pGPIOConfig Pointer to GPIO configure struct"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = ""]
    pub fn gpio_config(pGPIOConfig: *const gpio_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset an gpio to default state (select gpio function, enable pullup and disable input and output)."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number."]
    #[doc = ""]
    #[doc = " @note This function also configures the IOMUX for this pin to the GPIO"]
    #[doc = "       function, and disconnects any other peripheral output configured via GPIO"]
    #[doc = "       Matrix."]
    #[doc = ""]
    #[doc = " @return Always return ESP_OK."]
    pub fn gpio_reset_pin(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  GPIO set interrupt trigger type"]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to set the trigger type of e.g. of GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  intr_type Interrupt type, select from gpio_int_type_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK  Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = ""]
    pub fn gpio_set_intr_type(gpio_num: gpio_num_t, intr_type: gpio_int_type_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Enable GPIO module interrupt signal"]
    #[doc = ""]
    #[doc = " @note Please do not use the interrupt of GPIO36 and GPIO39 when using ADC or Wi-Fi with sleep mode enabled."]
    #[doc = "       Please refer to the comments of `adc1_get_raw`."]
    #[doc = "       Please refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue."]
    #[doc = "       As a workaround, call adc_power_acquire() in the app. This will result in higher power consumption (by ~1mA),"]
    #[doc = "       but will remove the glitches on GPIO36 and GPIO39."]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to enable an interrupt on e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = ""]
    pub fn gpio_intr_enable(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Disable GPIO module interrupt signal"]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to disable the interrupt of e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = ""]
    pub fn gpio_intr_disable(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  GPIO set output level"]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to set the output level of e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  level Output level. 0: low ; 1: high"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG GPIO number error"]
    #[doc = ""]
    pub fn gpio_set_level(gpio_num: gpio_num_t, level: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  GPIO get input level"]
    #[doc = ""]
    #[doc = " @warning If the pad is not configured for input (or input and output) the returned value is always 0."]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to get the logic level of e.g. pin GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - 0 the GPIO input level is 0"]
    #[doc = "     - 1 the GPIO input level is 1"]
    #[doc = ""]
    pub fn gpio_get_level(gpio_num: gpio_num_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief\t GPIO set direction"]
    #[doc = ""]
    #[doc = " Configure GPIO direction,such as output_only,input_only,output_and_input"]
    #[doc = ""]
    #[doc = " @param  gpio_num  Configure GPIO pins number, it should be GPIO number. If you want to set direction of e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  mode GPIO direction"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG GPIO error"]
    #[doc = ""]
    pub fn gpio_set_direction(gpio_num: gpio_num_t, mode: gpio_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Configure GPIO pull-up/pull-down resistors"]
    #[doc = ""]
    #[doc = " Only pins that support both input & output have integrated pull-up and pull-down resistors. Input-only GPIOs 34-39 do not."]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to set pull up or down mode for e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  pull GPIO pull up/down mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG : Parameter error"]
    #[doc = ""]
    pub fn gpio_set_pull_mode(gpio_num: gpio_num_t, pull: gpio_pull_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable GPIO wake-up function."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number."]
    #[doc = ""]
    #[doc = " @param intr_type GPIO wake-up type. Only GPIO_INTR_LOW_LEVEL or GPIO_INTR_HIGH_LEVEL can be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_wakeup_enable(gpio_num: gpio_num_t, intr_type: gpio_int_type_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable GPIO wake-up function."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_wakeup_disable(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Register GPIO interrupt handler, the handler is an ISR."]
    #[doc = "          The handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " This ISR function is called whenever any GPIO interrupt occurs. See"]
    #[doc = " the alternative gpio_install_isr_service() and"]
    #[doc = " gpio_isr_handler_add() API in order to have the driver support"]
    #[doc = " per-GPIO ISRs."]
    #[doc = ""]
    #[doc = " @param  fn  Interrupt handler function."]
    #[doc = " @param  arg  Parameter for handler function"]
    #[doc = " @param  intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "            ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param  handle Pointer to return handle. If non-NULL, a handle for the interrupt will be returned here."]
    #[doc = ""]
    #[doc = " \\verbatim embed:rst:leading-asterisk"]
    #[doc = " To disable or remove the ISR, pass the returned handle to the :doc:`interrupt allocation functions </api-reference/system/intr_alloc>`."]
    #[doc = " \\endverbatim"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success ;"]
    #[doc = "     - ESP_ERR_INVALID_ARG GPIO error"]
    #[doc = "     - ESP_ERR_NOT_FOUND No free interrupt found with the specified flags"]
    pub fn gpio_isr_register(
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut gpio_isr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable pull-up on GPIO."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_pullup_en(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable pull-up on GPIO."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_pullup_dis(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable pull-down on GPIO."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_pulldown_en(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable pull-down on GPIO."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_pulldown_dis(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Install the driver's GPIO ISR handler service, which allows per-pin GPIO interrupt handlers."]
    #[doc = ""]
    #[doc = " This function is incompatible with gpio_isr_register() - if that function is used, a single global ISR is registered for all GPIO interrupts. If this function is used, the ISR service provides a global GPIO ISR and individual pin handlers are registered via the gpio_isr_handler_add() function."]
    #[doc = ""]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "            ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_NO_MEM No memory to install this service"]
    #[doc = "     - ESP_ERR_INVALID_STATE ISR service already installed."]
    #[doc = "     - ESP_ERR_NOT_FOUND No free interrupt found with the specified flags"]
    #[doc = "     - ESP_ERR_INVALID_ARG GPIO error"]
    pub fn gpio_install_isr_service(intr_alloc_flags: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall the driver's GPIO ISR service, freeing related resources."]
    pub fn gpio_uninstall_isr_service();
}
extern "C" {
    #[doc = " @brief Add ISR handler for the corresponding GPIO pin."]
    #[doc = ""]
    #[doc = " Call this function after using gpio_install_isr_service() to"]
    #[doc = " install the driver's GPIO ISR handler service."]
    #[doc = ""]
    #[doc = " The pin ISR handlers no longer need to be declared with IRAM_ATTR,"]
    #[doc = " unless you pass the ESP_INTR_FLAG_IRAM flag when allocating the"]
    #[doc = " ISR in gpio_install_isr_service()."]
    #[doc = ""]
    #[doc = " This ISR handler will be called from an ISR. So there is a stack"]
    #[doc = " size limit (configurable as \"ISR stack size\" in menuconfig). This"]
    #[doc = " limit is smaller compared to a global GPIO interrupt handler due"]
    #[doc = " to the additional level of indirection."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = " @param isr_handler ISR handler function for the corresponding GPIO number."]
    #[doc = " @param args parameter for ISR handler."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Wrong state, the ISR service has not been initialized."]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_isr_handler_add(
        gpio_num: gpio_num_t,
        isr_handler: gpio_isr_t,
        args: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Remove ISR handler for the corresponding GPIO pin."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Wrong state, the ISR service has not been initialized."]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_isr_handler_remove(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set GPIO pad drive capability"]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number, only support output GPIOs"]
    #[doc = " @param strength Drive capability of the pad"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_set_drive_capability(gpio_num: gpio_num_t, strength: gpio_drive_cap_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get GPIO pad drive capability"]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number, only support output GPIOs"]
    #[doc = " @param strength Pointer to accept drive capability of the pad"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_get_drive_capability(
        gpio_num: gpio_num_t,
        strength: *mut gpio_drive_cap_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable gpio pad hold function."]
    #[doc = ""]
    #[doc = " The gpio pad hold function works in both input and output modes, but must be output-capable gpios."]
    #[doc = " If pad hold enabled:"]
    #[doc = "   in output mode: the output level of the pad will be force locked and can not be changed."]
    #[doc = "   in input mode: the input value read will not change, regardless the changes of input signal."]
    #[doc = ""]
    #[doc = " The state of digital gpio cannot be held during Deep-sleep, and it will resume the hold function"]
    #[doc = " when the chip wakes up from Deep-sleep. If the digital gpio also needs to be held during Deep-sleep,"]
    #[doc = " `gpio_deep_sleep_hold_en` should also be called."]
    #[doc = ""]
    #[doc = " Power down or call gpio_hold_dis will disable this function."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number, only support output-capable GPIOs"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_NOT_SUPPORTED Not support pad hold function"]
    pub fn gpio_hold_en(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable gpio pad hold function."]
    #[doc = ""]
    #[doc = " When the chip is woken up from Deep-sleep, the gpio will be set to the default mode, so, the gpio will output"]
    #[doc = " the default level if this function is called. If you don't want the level changes, the gpio should be configured to"]
    #[doc = " a known state before this function is called."]
    #[doc = "  e.g."]
    #[doc = "     If you hold gpio18 high during Deep-sleep, after the chip is woken up and `gpio_hold_dis` is called,"]
    #[doc = "     gpio18 will output low level(because gpio18 is input mode by default). If you don't want this behavior,"]
    #[doc = "     you should configure gpio18 as output mode and set it to hight level before calling `gpio_hold_dis`."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number, only support output-capable GPIOs"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_NOT_SUPPORTED Not support pad hold function"]
    pub fn gpio_hold_dis(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable all digital gpio pad hold function during Deep-sleep."]
    #[doc = ""]
    #[doc = " When the chip is in Deep-sleep mode, all digital gpio will hold the state before sleep, and when the chip is woken up,"]
    #[doc = " the status of digital gpio will not be held. Note that the pad hold feature only works when the chip is in Deep-sleep mode,"]
    #[doc = " when not in sleep mode, the digital gpio state can be changed even you have called this function."]
    #[doc = ""]
    #[doc = " Power down or call gpio_hold_dis will disable this function, otherwise, the digital gpio hold feature works as long as the chip enter Deep-sleep."]
    pub fn gpio_deep_sleep_hold_en();
}
extern "C" {
    #[doc = " @brief Disable all digital gpio pad hold function during Deep-sleep."]
    #[doc = ""]
    pub fn gpio_deep_sleep_hold_dis();
}
extern "C" {
    #[doc = " @brief Set pad input to a peripheral signal through the IOMUX."]
    #[doc = " @param gpio_num GPIO number of the pad."]
    #[doc = " @param signal_idx Peripheral signal id to input. One of the ``*_IN_IDX`` signals in ``soc/gpio_sig_map.h``."]
    pub fn gpio_iomux_in(gpio_num: u32, signal_idx: u32);
}
extern "C" {
    #[doc = " @brief Set peripheral output to an GPIO pad through the IOMUX."]
    #[doc = " @param gpio_num gpio_num GPIO number of the pad."]
    #[doc = " @param func The function number of the peripheral pin to output pin."]
    #[doc = "        One of the ``FUNC_X_*`` of specified pin (X) in ``soc/io_mux_reg.h``."]
    #[doc = " @param oen_inv True if the output enable needs to be inverted, otherwise False."]
    pub fn gpio_iomux_out(gpio_num: u8, func: c_types::c_int, oen_inv: bool);
}
extern "C" {
    #[doc = " @brief Force hold digital and rtc gpio pad."]
    #[doc = " @note GPIO force hold, whether the chip in sleep mode or wakeup mode."]
    pub fn gpio_force_hold_all() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Force unhold digital and rtc gpio pad."]
    #[doc = " @note GPIO force unhold, whether the chip in sleep mode or wakeup mode."]
    pub fn gpio_force_unhold_all() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable SLP_SEL to change GPIO status automantically in lightsleep."]
    #[doc = " @param gpio_num GPIO number of the pad."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = ""]
    pub fn gpio_sleep_sel_en(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable SLP_SEL to change GPIO status automantically in lightsleep."]
    #[doc = " @param gpio_num GPIO number of the pad."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    pub fn gpio_sleep_sel_dis(gpio_num: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief\t GPIO set direction at sleep"]
    #[doc = ""]
    #[doc = " Configure GPIO direction,such as output_only,input_only,output_and_input"]
    #[doc = ""]
    #[doc = " @param  gpio_num  Configure GPIO pins number, it should be GPIO number. If you want to set direction of e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  mode GPIO direction"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG GPIO error"]
    pub fn gpio_sleep_set_direction(gpio_num: gpio_num_t, mode: gpio_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Configure GPIO pull-up/pull-down resistors at sleep"]
    #[doc = ""]
    #[doc = " Only pins that support both input & output have integrated pull-up and pull-down resistors. Input-only GPIOs 34-39 do not."]
    #[doc = ""]
    #[doc = " @param  gpio_num GPIO number. If you want to set pull up or down mode for e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);"]
    #[doc = " @param  pull GPIO pull up/down mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG : Parameter error"]
    pub fn gpio_sleep_set_pull_mode(gpio_num: gpio_num_t, pull: gpio_pull_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable GPIO deep-sleep wake-up function."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number."]
    #[doc = ""]
    #[doc = " @param intr_type GPIO wake-up type. Only GPIO_INTR_LOW_LEVEL or GPIO_INTR_HIGH_LEVEL can be used."]
    #[doc = ""]
    #[doc = " @note Called by the SDK. User shouldn't call this directly in the APP."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_deep_sleep_wakeup_enable(
        gpio_num: gpio_num_t,
        intr_type: gpio_int_type_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable GPIO deep-sleep wake-up function."]
    #[doc = ""]
    #[doc = " @param gpio_num GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn gpio_deep_sleep_wakeup_disable(gpio_num: gpio_num_t) -> esp_err_t;
}
#[doc = "< SAR ADC 1."]
pub const adc_unit_t_ADC_UNIT_1: adc_unit_t = 1;
#[doc = "< SAR ADC 2."]
pub const adc_unit_t_ADC_UNIT_2: adc_unit_t = 2;
#[doc = "< SAR ADC 1 and 2."]
pub const adc_unit_t_ADC_UNIT_BOTH: adc_unit_t = 3;
#[doc = "< SAR ADC 1 and 2 alternative mode."]
pub const adc_unit_t_ADC_UNIT_ALTER: adc_unit_t = 7;
pub const adc_unit_t_ADC_UNIT_MAX: adc_unit_t = 8;
#[doc = " @brief ADC unit enumeration."]
#[doc = ""]
#[doc = " @note  For ADC digital controller (DMA mode), ESP32 doesn't support `ADC_UNIT_2`, `ADC_UNIT_BOTH`, `ADC_UNIT_ALTER`."]
pub type adc_unit_t = c_types::c_uint;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_0: adc_channel_t = 0;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_1: adc_channel_t = 1;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_2: adc_channel_t = 2;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_3: adc_channel_t = 3;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_4: adc_channel_t = 4;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_5: adc_channel_t = 5;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_6: adc_channel_t = 6;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_7: adc_channel_t = 7;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_8: adc_channel_t = 8;
#[doc = "< ADC channel"]
pub const adc_channel_t_ADC_CHANNEL_9: adc_channel_t = 9;
pub const adc_channel_t_ADC_CHANNEL_MAX: adc_channel_t = 10;
#[doc = " @brief ADC channels handle. See ``adc1_channel_t``, ``adc2_channel_t``."]
#[doc = ""]
#[doc = " @note  For ESP32 ADC1, don't use `ADC_CHANNEL_8`, `ADC_CHANNEL_9`. See ``adc1_channel_t``."]
pub type adc_channel_t = c_types::c_uint;
#[doc = "<No input attenumation, ADC can measure up to approx. 800 mV."]
pub const adc_atten_t_ADC_ATTEN_DB_0: adc_atten_t = 0;
#[doc = "<The input voltage of ADC will be attenuated extending the range of measurement by about 2.5 dB (1.33 x)"]
pub const adc_atten_t_ADC_ATTEN_DB_2_5: adc_atten_t = 1;
#[doc = "<The input voltage of ADC will be attenuated extending the range of measurement by about 6 dB (2 x)"]
pub const adc_atten_t_ADC_ATTEN_DB_6: adc_atten_t = 2;
#[doc = "<The input voltage of ADC will be attenuated extending the range of measurement by about 11 dB (3.55 x)"]
pub const adc_atten_t_ADC_ATTEN_DB_11: adc_atten_t = 3;
pub const adc_atten_t_ADC_ATTEN_MAX: adc_atten_t = 4;
#[doc = " @brief ADC attenuation parameter. Different parameters determine the range of the ADC. See ``adc1_config_channel_atten``."]
pub type adc_atten_t = c_types::c_uint;
#[doc = "< ADC capture width is 12Bit."]
pub const adc_bits_width_t_ADC_WIDTH_BIT_12: adc_bits_width_t = 3;
pub const adc_bits_width_t_ADC_WIDTH_MAX: adc_bits_width_t = 4;
#[doc = " @brief ADC resolution setting option."]
#[doc = " @note  Only used in single read mode"]
pub type adc_bits_width_t = c_types::c_uint;
#[doc = "< Only use ADC1 for conversion"]
pub const adc_digi_convert_mode_t_ADC_CONV_SINGLE_UNIT_1: adc_digi_convert_mode_t = 1;
#[doc = "< Only use ADC2 for conversion"]
pub const adc_digi_convert_mode_t_ADC_CONV_SINGLE_UNIT_2: adc_digi_convert_mode_t = 2;
#[doc = "< Use Both ADC1 and ADC2 for conversion simultaneously"]
pub const adc_digi_convert_mode_t_ADC_CONV_BOTH_UNIT: adc_digi_convert_mode_t = 3;
#[doc = "< Use both ADC1 and ADC2 for conversion by turn. e.g. ADC1 -> ADC2 -> ADC1 -> ADC2 ....."]
pub const adc_digi_convert_mode_t_ADC_CONV_ALTER_UNIT: adc_digi_convert_mode_t = 7;
pub const adc_digi_convert_mode_t_ADC_CONV_UNIT_MAX: adc_digi_convert_mode_t = 8;
#[doc = " @brief ADC digital controller (DMA mode) work mode."]
pub type adc_digi_convert_mode_t = c_types::c_uint;
#[doc = "<ADC to DMA data format,                [15:12]-channel, [11: 0]-12 bits ADC data (`adc_digi_output_data_t`). Note: For single convert mode."]
pub const adc_digi_output_format_t_ADC_DIGI_FORMAT_12BIT: adc_digi_output_format_t = 0;
#[doc = "<ADC to DMA data format, [15]-adc unit, [14:11]-channel, [10: 0]-11 bits ADC data (`adc_digi_output_data_t`). Note: For multi or alter convert mode."]
pub const adc_digi_output_format_t_ADC_DIGI_FORMAT_11BIT: adc_digi_output_format_t = 1;
pub const adc_digi_output_format_t_ADC_DIGI_FORMAT_MAX: adc_digi_output_format_t = 2;
#[doc = "< See `adc_digi_output_data_t.type1`"]
pub const adc_digi_output_format_t_ADC_DIGI_OUTPUT_FORMAT_TYPE1: adc_digi_output_format_t = 3;
#[doc = "< See `adc_digi_output_data_t.type2`"]
pub const adc_digi_output_format_t_ADC_DIGI_OUTPUT_FORMAT_TYPE2: adc_digi_output_format_t = 4;
#[doc = " @brief ADC digital controller (DMA mode) output data format option."]
pub type adc_digi_output_format_t = c_types::c_uint;
#[doc = " @brief ADC digital controller pattern configuration"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct adc_digi_pattern_config_t {
    #[doc = "< Attenuation of this ADC channel"]
    pub atten: u8,
    #[doc = "< ADC channel"]
    pub channel: u8,
    #[doc = "< ADC unit"]
    pub unit: u8,
    #[doc = "< ADC output bit width"]
    pub bit_width: u8,
}
#[doc = " @brief ADC digital controller (DMA mode) output data format."]
#[doc = "        Used to analyze the acquired ADC (DMA) data."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct adc_digi_output_data_t {
    pub __bindgen_anon_1: adc_digi_output_data_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union adc_digi_output_data_t__bindgen_ty_1 {
    #[doc = "<When the configured output format is 12bit. `ADC_DIGI_FORMAT_11BIT`"]
    pub type2: adc_digi_output_data_t__bindgen_ty_1__bindgen_ty_1,
    #[doc = "<Raw data value"]
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct adc_digi_output_data_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl adc_digi_output_data_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn channel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn unit(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unit(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17_31(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17_31(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        data: u32,
        reserved12: u32,
        channel: u32,
        unit: u32,
        reserved17_31: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let data: u32 = unsafe { ::core::mem::transmute(data) };
            data as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let channel: u32 = unsafe { ::core::mem::transmute(channel) };
            channel as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let unit: u32 = unsafe { ::core::mem::transmute(unit) };
            unit as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved17_31: u32 = unsafe { ::core::mem::transmute(reserved17_31) };
            reserved17_31 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for adc_digi_output_data_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for adc_digi_output_data_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "<Force shield arbiter, Select the highest priority controller to work."]
pub const adc_arbiter_mode_t_ADC_ARB_MODE_SHIELD: adc_arbiter_mode_t = 0;
#[doc = "<Fixed priority switch controller mode."]
pub const adc_arbiter_mode_t_ADC_ARB_MODE_FIX: adc_arbiter_mode_t = 1;
#[doc = "<Loop priority switch controller mode. Each controller has the same priority,"]
#[doc = "and the arbiter will switch to the next controller after the measurement is completed."]
pub const adc_arbiter_mode_t_ADC_ARB_MODE_LOOP: adc_arbiter_mode_t = 2;
#[doc = " @brief ADC arbiter work mode option."]
#[doc = ""]
#[doc = " @note ESP32-S2: Only ADC2 support arbiter."]
pub type adc_arbiter_mode_t = c_types::c_uint;
#[doc = " @brief ADC arbiter work mode and priority setting."]
#[doc = ""]
#[doc = " @note ESP32-S2: Only ADC2 support arbiter."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adc_arbiter_t {
    #[doc = "<Refer to ``adc_arbiter_mode_t``. Note: only support ADC2."]
    pub mode: adc_arbiter_mode_t,
    #[doc = "<RTC controller priority. Range: 0 ~ 2."]
    pub rtc_pri: u8,
    #[doc = "<Digital controller priority. Range: 0 ~ 2."]
    pub dig_pri: u8,
    #[doc = "<Wi-Fi controller priority. Range: 0 ~ 2."]
    pub pwdet_pri: u8,
}
impl Default for adc_arbiter_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "<The filter index 0."]
#[doc = "For ESP32-S2, It can only be used to filter all enabled channels of ADC1 unit at the same time."]
pub const adc_digi_filter_idx_t_ADC_DIGI_FILTER_IDX0: adc_digi_filter_idx_t = 0;
#[doc = "<The filter index 1."]
#[doc = "For ESP32-S2, It can only be used to filter all enabled channels of ADC2 unit at the same time."]
pub const adc_digi_filter_idx_t_ADC_DIGI_FILTER_IDX1: adc_digi_filter_idx_t = 1;
pub const adc_digi_filter_idx_t_ADC_DIGI_FILTER_IDX_MAX: adc_digi_filter_idx_t = 2;
#[doc = " @brief ADC digital controller (DMA mode) filter index options."]
#[doc = ""]
#[doc = " @note  For ESP32-S2, The filter object of the ADC is fixed."]
pub type adc_digi_filter_idx_t = c_types::c_uint;
#[doc = "< Disable filter"]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_DIS: adc_digi_filter_mode_t = -1;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 2."]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_2: adc_digi_filter_mode_t = 0;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 4."]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_4: adc_digi_filter_mode_t = 1;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 8."]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_8: adc_digi_filter_mode_t = 2;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 16."]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_16: adc_digi_filter_mode_t = 3;
#[doc = "<The filter mode is first-order IIR filter. The coefficient is 64."]
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_64: adc_digi_filter_mode_t = 4;
pub const adc_digi_filter_mode_t_ADC_DIGI_FILTER_IIR_MAX: adc_digi_filter_mode_t = 5;
#[doc = " @brief ADC digital controller (DMA mode) filter type options."]
#[doc = "        Expression: filter_data = (k-1)/k * last_data + new_data / k."]
pub type adc_digi_filter_mode_t = c_types::c_int;
#[doc = " @brief ADC digital controller (DMA mode) filter configuration."]
#[doc = ""]
#[doc = " @note  For ESP32-S2, The filter object of the ADC is fixed."]
#[doc = " @note  For ESP32-S2, The filter object is always all enabled channels."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adc_digi_filter_t {
    #[doc = "<Set adc unit number for filter."]
    #[doc = "For ESP32-S2, Filter IDX0/IDX1 can only be used to filter all enabled channels of ADC1/ADC2 unit at the same time."]
    pub adc_unit: adc_unit_t,
    #[doc = "<Set adc channel number for filter."]
    #[doc = "For ESP32-S2, it's always `ADC_CHANNEL_MAX`"]
    pub channel: adc_channel_t,
    #[doc = "<Set adc filter mode for filter. See ``adc_digi_filter_mode_t``."]
    pub mode: adc_digi_filter_mode_t,
}
impl Default for adc_digi_filter_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "<The monitor index 0."]
#[doc = "For ESP32-S2, It can only be used to monitor all enabled channels of ADC1 unit at the same time."]
pub const adc_digi_monitor_idx_t_ADC_DIGI_MONITOR_IDX0: adc_digi_monitor_idx_t = 0;
#[doc = "<The monitor index 1."]
#[doc = "For ESP32-S2, It can only be used to monitor all enabled channels of ADC2 unit at the same time."]
pub const adc_digi_monitor_idx_t_ADC_DIGI_MONITOR_IDX1: adc_digi_monitor_idx_t = 1;
pub const adc_digi_monitor_idx_t_ADC_DIGI_MONITOR_IDX_MAX: adc_digi_monitor_idx_t = 2;
#[doc = " @brief ADC digital controller (DMA mode) monitor index options."]
#[doc = ""]
#[doc = " @note  For ESP32-S2, The monitor object of the ADC is fixed."]
pub type adc_digi_monitor_idx_t = c_types::c_uint;
#[doc = "<Disable monitor."]
pub const adc_digi_monitor_mode_t_ADC_DIGI_MONITOR_DIS: adc_digi_monitor_mode_t = 0;
#[doc = "<If ADC_OUT <  threshold, Generates monitor interrupt. */"]
pub const adc_digi_monitor_mode_t_ADC_DIGI_MONITOR_EN: adc_digi_monitor_mode_t = 1;
pub const adc_digi_monitor_mode_t_ADC_DIGI_MONITOR_MAX: adc_digi_monitor_mode_t = 2;
#[doc = " @brief Set monitor mode of adc digital controller."]
#[doc = "        MONITOR_HIGH:If ADC_OUT >  threshold, Generates monitor interrupt."]
#[doc = "        MONITOR_LOW: If ADC_OUT <  threshold, Generates monitor interrupt."]
pub type adc_digi_monitor_mode_t = c_types::c_uint;
#[doc = " @brief ADC digital controller (DMA mode) monitor configuration."]
#[doc = ""]
#[doc = " @note  For ESP32-S2, The monitor object of the ADC is fixed."]
#[doc = " @note  For ESP32-S2, The monitor object is always all enabled channels."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adc_digi_monitor_t {
    #[doc = "<Set adc unit number for monitor."]
    #[doc = "For ESP32-S2, monitor IDX0/IDX1 can only be used to monitor all enabled channels of ADC1/ADC2 unit at the same time."]
    pub adc_unit: adc_unit_t,
    #[doc = "<Set adc channel number for monitor."]
    #[doc = "For ESP32-S2, it's always `ADC_CHANNEL_MAX`"]
    pub channel: adc_channel_t,
    #[doc = "<Set adc monitor mode. See ``adc_digi_monitor_mode_t``."]
    pub mode: adc_digi_monitor_mode_t,
    #[doc = "<Set monitor threshold of adc digital controller."]
    pub h_threshold: u32,
    #[doc = "<Set monitor threshold of adc digital controller."]
    pub l_threshold: u32,
}
impl Default for adc_digi_monitor_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< I2S data from GPIO matrix signal"]
pub const adc_i2s_source_t_ADC_I2S_DATA_SRC_IO_SIG: adc_i2s_source_t = 0;
#[doc = "< I2S data from ADC"]
pub const adc_i2s_source_t_ADC_I2S_DATA_SRC_ADC: adc_i2s_source_t = 1;
pub const adc_i2s_source_t_ADC_I2S_DATA_SRC_MAX: adc_i2s_source_t = 2;
pub type adc_i2s_source_t = c_types::c_uint;
#[doc = "< ADC1 channel 0 is GPIO0"]
pub const adc1_channel_t_ADC1_CHANNEL_0: adc1_channel_t = 0;
#[doc = "< ADC1 channel 1 is GPIO1"]
pub const adc1_channel_t_ADC1_CHANNEL_1: adc1_channel_t = 1;
#[doc = "< ADC1 channel 2 is GPIO2"]
pub const adc1_channel_t_ADC1_CHANNEL_2: adc1_channel_t = 2;
#[doc = "< ADC1 channel 3 is GPIO3"]
pub const adc1_channel_t_ADC1_CHANNEL_3: adc1_channel_t = 3;
#[doc = "< ADC1 channel 4 is GPIO4"]
pub const adc1_channel_t_ADC1_CHANNEL_4: adc1_channel_t = 4;
pub const adc1_channel_t_ADC1_CHANNEL_MAX: adc1_channel_t = 5;
#[doc = " `adc1_channel_t` will be deprecated functions, combine into `adc_channel_t`"]
pub type adc1_channel_t = c_types::c_uint;
#[doc = "< ADC2 channel 0 is GPIO5"]
pub const adc2_channel_t_ADC2_CHANNEL_0: adc2_channel_t = 0;
pub const adc2_channel_t_ADC2_CHANNEL_MAX: adc2_channel_t = 1;
#[doc = " `adc2_channel_t` will be deprecated functions, combine into `adc_channel_t`"]
pub type adc2_channel_t = c_types::c_uint;
#[doc = "< ADC to DMA data format,          , [15:12]-channel [11:0]-12 bits ADC data"]
pub const adc_i2s_encode_t_ADC_ENCODE_12BIT: adc_i2s_encode_t = 0;
#[doc = "< ADC to DMA data format, [15]-unit, [14:11]-channel [10:0]-11 bits ADC data"]
pub const adc_i2s_encode_t_ADC_ENCODE_11BIT: adc_i2s_encode_t = 1;
pub const adc_i2s_encode_t_ADC_ENCODE_MAX: adc_i2s_encode_t = 2;
#[doc = " @brief ADC digital controller encode option."]
#[doc = ""]
#[doc = " @deprecated The ESP32-S2 doesn't use I2S DMA. Call ``adc_digi_output_format_t`` instead."]
pub type adc_i2s_encode_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief Enable ADC power"]
    #[doc = " @deprecated Use adc_power_acquire and adc_power_release instead."]
    pub fn adc_power_on();
}
extern "C" {
    #[doc = " @brief Power off SAR ADC"]
    #[doc = " @deprecated Use adc_power_acquire and adc_power_release instead."]
    #[doc = " This function will force power down for ADC."]
    #[doc = " This function is deprecated because forcing power ADC power off may"]
    #[doc = " disrupt operation of other components which may be using the ADC."]
    pub fn adc_power_off();
}
extern "C" {
    #[doc = " @brief Increment the usage counter for ADC module."]
    #[doc = " ADC will stay powered on while the counter is greater than 0."]
    #[doc = " Call adc_power_release when done using the ADC."]
    pub fn adc_power_acquire();
}
extern "C" {
    #[doc = " @brief Decrement the usage counter for ADC module."]
    #[doc = " ADC will stay powered on while the counter is greater than 0."]
    #[doc = " Call this function when done using the ADC."]
    pub fn adc_power_release();
}
extern "C" {
    #[doc = " @brief Get the GPIO number of a specific ADC1 channel."]
    #[doc = ""]
    #[doc = " @param channel Channel to get the GPIO number"]
    #[doc = " @param gpio_num output buffer to hold the GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "   - ESP_OK if success"]
    #[doc = "   - ESP_ERR_INVALID_ARG if channel not valid"]
    pub fn adc1_pad_get_io_num(channel: adc1_channel_t, gpio_num: *mut gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set the attenuation of a particular channel on ADC1, and configure its associated GPIO pin mux."]
    #[doc = ""]
    #[doc = " The default ADC voltage is for attenuation 0 dB and listed in the table below."]
    #[doc = " By setting higher attenuation it is possible to read higher voltages."]
    #[doc = ""]
    #[doc = " Due to ADC characteristics, most accurate results are obtained within the \"suggested range\""]
    #[doc = " shown in the following table."]
    #[doc = ""]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = "     |          | attenuation | suggested range |"]
    #[doc = "     |    SoC   |     (dB)    |      (mV)       |"]
    #[doc = "     +==========+=============+=================+"]
    #[doc = "     |          |       0     |    100 ~  950   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |       2.5   |    100 ~ 1250   |"]
    #[doc = "     |   ESP32  +-------------+-----------------+"]
    #[doc = "     |          |       6     |    150 ~ 1750   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |      11     |    150 ~ 2450   |"]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = "     |          |       0     |      0 ~  750   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |       2.5   |      0 ~ 1050   |"]
    #[doc = "     | ESP32-S2 +-------------+-----------------+"]
    #[doc = "     |          |       6     |      0 ~ 1300   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |      11     |      0 ~ 2500   |"]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = ""]
    #[doc = " For maximum accuracy, use the ADC calibration APIs and measure voltages within these recommended ranges."]
    #[doc = ""]
    #[doc = " @note For any given channel, this function must be called before the first time ``adc1_get_raw()`` is called for that channel."]
    #[doc = ""]
    #[doc = " @note This function can be called multiple times to configure multiple"]
    #[doc = "       ADC channels simultaneously. You may call ``adc1_get_raw()`` only after configuring a channel."]
    #[doc = ""]
    #[doc = " @param channel ADC1 channel to configure"]
    #[doc = " @param atten  Attenuation level"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn adc1_config_channel_atten(channel: adc1_channel_t, atten: adc_atten_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure ADC1 capture width, meanwhile enable output invert for ADC1."]
    #[doc = "        The configuration is for all channels of ADC1"]
    #[doc = " @param width_bit Bit capture width for ADC1"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn adc1_config_width(width_bit: adc_bits_width_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Take an ADC1 reading from a single channel."]
    #[doc = " @note ESP32:"]
    #[doc = "       When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,"]
    #[doc = "       the input of GPIO36 and GPIO39 will be pulled down for about 80ns."]
    #[doc = "       When enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39."]
    #[doc = "       Please refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue."]
    #[doc = "       As a workaround, call adc_power_acquire() in the app. This will result in higher power consumption (by ~1mA),"]
    #[doc = "       but will remove the glitches on GPIO36 and GPIO39."]
    #[doc = ""]
    #[doc = " @note Call ``adc1_config_width()`` before the first time this"]
    #[doc = "       function is called."]
    #[doc = ""]
    #[doc = " @note For any given channel, adc1_config_channel_atten(channel)"]
    #[doc = "       must be called before the first time this function is called. Configuring"]
    #[doc = "       a new channel does not prevent a previously configured channel from being read."]
    #[doc = ""]
    #[doc = " @param  channel ADC1 channel to read"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - -1: Parameter error"]
    #[doc = "     -  Other: ADC1 channel reading."]
    pub fn adc1_get_raw(channel: adc1_channel_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Get the GPIO number of a specific ADC2 channel."]
    #[doc = ""]
    #[doc = " @param channel Channel to get the GPIO number"]
    #[doc = ""]
    #[doc = " @param gpio_num output buffer to hold the GPIO number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "   - ESP_OK if success"]
    #[doc = "   - ESP_ERR_INVALID_ARG if channel not valid"]
    pub fn adc2_pad_get_io_num(channel: adc2_channel_t, gpio_num: *mut gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure the ADC2 channel, including setting attenuation."]
    #[doc = ""]
    #[doc = " The default ADC voltage is for attenuation 0 dB and listed in the table below."]
    #[doc = " By setting higher attenuation it is possible to read higher voltages."]
    #[doc = ""]
    #[doc = " Due to ADC characteristics, most accurate results are obtained within the \"suggested range\""]
    #[doc = " shown in the following table."]
    #[doc = ""]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = "     |          | attenuation | suggested range |"]
    #[doc = "     |    SoC   |     (dB)    |      (mV)       |"]
    #[doc = "     +==========+=============+=================+"]
    #[doc = "     |          |       0     |    100 ~  950   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |       2.5   |    100 ~ 1250   |"]
    #[doc = "     |   ESP32  +-------------+-----------------+"]
    #[doc = "     |          |       6     |    150 ~ 1750   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |      11     |    150 ~ 2450   |"]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = "     |          |       0     |      0 ~  750   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |       2.5   |      0 ~ 1050   |"]
    #[doc = "     | ESP32-S2 +-------------+-----------------+"]
    #[doc = "     |          |       6     |      0 ~ 1300   |"]
    #[doc = "     |          +-------------+-----------------+"]
    #[doc = "     |          |      11     |      0 ~ 2500   |"]
    #[doc = "     +----------+-------------+-----------------+"]
    #[doc = ""]
    #[doc = " For maximum accuracy, use the ADC calibration APIs and measure voltages within these recommended ranges."]
    #[doc = ""]
    #[doc = " @note This function also configures the input GPIO pin mux to"]
    #[doc = "       connect it to the ADC2 channel. It must be called before calling"]
    #[doc = "       ``adc2_get_raw()`` for this channel."]
    #[doc = ""]
    #[doc = " @note For any given channel, this function must be called before the first time ``adc2_get_raw()`` is called for that channel."]
    #[doc = ""]
    #[doc = " @param channel ADC2 channel to configure"]
    #[doc = " @param atten  Attenuation level"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn adc2_config_channel_atten(channel: adc2_channel_t, atten: adc_atten_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Take an ADC2 reading on a single channel"]
    #[doc = ""]
    #[doc = " @note ESP32:"]
    #[doc = "       When the power switch of SARADC1, SARADC2, HALL sensor and AMP sensor is turned on,"]
    #[doc = "       the input of GPIO36 and GPIO39 will be pulled down for about 80ns."]
    #[doc = "       When enabling power for any of these peripherals, ignore input from GPIO36 and GPIO39."]
    #[doc = "       Please refer to section 3.11 of 'ECO_and_Workarounds_for_Bugs_in_ESP32' for the description of this issue."]
    #[doc = "       As a workaround, call adc_power_acquire() in the app. This will result in higher power consumption (by ~1mA),"]
    #[doc = "       but will remove the glitches on GPIO36 and GPIO39."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @note ESP32:"]
    #[doc = "       For a given channel, ``adc2_config_channel_atten()``"]
    #[doc = "       must be called before the first time this function is called. If Wi-Fi is started via ``esp_wifi_start()``, this"]
    #[doc = "       function will always fail with ``ESP_ERR_TIMEOUT``."]
    #[doc = ""]
    #[doc = " @note ESP32-S2:"]
    #[doc = "       ADC2 support hardware arbiter. The arbiter is to improve the use efficiency of ADC2. After the control right is robbed by the high priority,"]
    #[doc = "       the low priority controller will read the invalid ADC2 data. Default priority: Wi-Fi > RTC > Digital;"]
    #[doc = ""]
    #[doc = " @param channel ADC2 channel to read"]
    #[doc = " @param width_bit Bit capture width for ADC2"]
    #[doc = " @param raw_out the variable to hold the output data."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK if success"]
    #[doc = "     - ESP_ERR_TIMEOUT ADC2 is being used by other controller and the request timed out."]
    #[doc = "     - ESP_ERR_INVALID_STATE The controller status is invalid. Please try again."]
    pub fn adc2_get_raw(
        channel: adc2_channel_t,
        width_bit: adc_bits_width_t,
        raw_out: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Output ADC1 or ADC2's reference voltage to ``adc2_channe_t``'s IO."]
    #[doc = ""]
    #[doc = "  This function routes the internal reference voltage of ADCn to one of"]
    #[doc = "  ADC2's channels. This reference voltage can then be manually measured"]
    #[doc = "  for calibration purposes."]
    #[doc = ""]
    #[doc = "  @note  ESP32 only supports output of ADC2's internal reference voltage."]
    #[doc = "  @param[in]  adc_unit ADC unit index"]
    #[doc = "  @param[in]  gpio     GPIO number (Only ADC2's channels IO are supported)"]
    #[doc = ""]
    #[doc = "  @return"]
    #[doc = "                  - ESP_OK: v_ref successfully routed to selected GPIO"]
    #[doc = "                  - ESP_ERR_INVALID_ARG: Unsupported GPIO"]
    pub fn adc_vref_to_gpio(adc_unit: adc_unit_t, gpio: gpio_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = "  @brief Output ADC2 reference voltage to ``adc2_channe_t``'s IO."]
    #[doc = ""]
    #[doc = "  This function routes the internal reference voltage of ADCn to one of"]
    #[doc = "  ADC2's channels. This reference voltage can then be manually measured"]
    #[doc = "  for calibration purposes."]
    #[doc = ""]
    #[doc = "  @deprecated Use ``adc_vref_to_gpio`` instead."]
    #[doc = ""]
    #[doc = "  @param[in]  gpio    GPIO number (ADC2's channels are supported)"]
    #[doc = ""]
    #[doc = "  @return"]
    #[doc = "                  - ESP_OK: v_ref successfully routed to selected GPIO"]
    #[doc = "                  - ESP_ERR_INVALID_ARG: Unsupported GPIO"]
    pub fn adc2_vref_to_gpio(gpio: gpio_num_t) -> esp_err_t;
}
#[doc = " @brief ADC DMA driver configuration"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct adc_digi_init_config_s {
    #[doc = "< Max length of the converted data that driver can store before they are processed."]
    pub max_store_buf_size: u32,
    #[doc = "< Bytes of data that can be converted in 1 interrupt."]
    pub conv_num_each_intr: u32,
    #[doc = "< Channel list of ADC1 to be initialized."]
    pub adc1_chan_mask: u32,
    #[doc = "< Channel list of ADC2 to be initialized."]
    pub adc2_chan_mask: u32,
}
#[doc = " @brief ADC DMA driver configuration"]
pub type adc_digi_init_config_t = adc_digi_init_config_s;
#[doc = " @brief ADC digital controller settings"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adc_digi_configuration_t {
    #[doc = "< To limit ADC conversion times. Conversion stops after finishing `conv_limit_num` times conversion"]
    pub conv_limit_en: bool,
    #[doc = "< Set the upper limit of the number of ADC conversion triggers. Range: 1 ~ 255."]
    pub conv_limit_num: u32,
    #[doc = "< Number of ADC channels that will be used"]
    pub pattern_num: u32,
    #[doc = "< List of configs for each ADC channel that will be used"]
    pub adc_pattern: *mut adc_digi_pattern_config_t,
    #[doc = "< The expected ADC sampling frequency in Hz. Range: 611Hz ~ 83333Hz"]
    #[doc = "Fs = Fd / interval / 2"]
    #[doc = "Fs: sampling frequency;"]
    #[doc = "Fd: digital controller frequency, no larger than 5M for better performance"]
    #[doc = "interval: interval between 2 measurement trigger signal, the smallest interval should not be smaller than the ADC measurement period, the largest interval should not be larger than 4095"]
    pub sample_freq_hz: u32,
    #[doc = "< ADC DMA conversion mode, see `adc_digi_convert_mode_t`."]
    pub conv_mode: adc_digi_convert_mode_t,
    #[doc = "< ADC DMA conversion output format, see `adc_digi_output_format_t`."]
    pub format: adc_digi_output_format_t,
}
impl Default for adc_digi_configuration_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize the Digital ADC."]
    #[doc = ""]
    #[doc = " @param init_config Pointer to Digital ADC initilization config. Refer to ``adc_digi_init_config_t``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   If the combination of arguments is invalid."]
    #[doc = "         - ESP_ERR_NOT_FOUND     No free interrupt found with the specified flags"]
    #[doc = "         - ESP_ERR_NO_MEM        If out of memory"]
    #[doc = "         - ESP_OK                On success"]
    pub fn adc_digi_initialize(init_config: *const adc_digi_init_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read bytes from Digital ADC through DMA."]
    #[doc = ""]
    #[doc = " @param[out] buf                 Buffer to read from ADC."]
    #[doc = " @param[in]  length_max          Expected length of data read from the ADC."]
    #[doc = " @param[out] out_length          Real length of data read from the ADC via this API."]
    #[doc = " @param[in]  timeout_ms          Time to wait for data via this API, in millisecond."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_STATE Driver state is invalid. Usually it means the ADC sampling rate is faster than the task processing rate."]
    #[doc = "         - ESP_ERR_TIMEOUT       Operation timed out"]
    #[doc = "         - ESP_OK                On success"]
    pub fn adc_digi_read_bytes(
        buf: *mut u8,
        length_max: u32,
        out_length: *mut u32,
        timeout_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start the Digital ADC and DMA peripherals. After this, the hardware starts working."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_STATE Driver state is invalid."]
    #[doc = "         - ESP_OK                On success"]
    pub fn adc_digi_start() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stop the Digital ADC and DMA peripherals. After this, the hardware stops working."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_STATE Driver state is invalid."]
    #[doc = "         - ESP_OK                On success"]
    pub fn adc_digi_stop() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deinitialize the Digital ADC."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_STATE Driver state is invalid."]
    #[doc = "         - ESP_OK                On success"]
    pub fn adc_digi_deinitialize() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Setting the digital controller."]
    #[doc = ""]
    #[doc = " @param config Pointer to digital controller paramter. Refer to ``adc_digi_config_t``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_STATE Driver state is invalid."]
    #[doc = "      - ESP_ERR_INVALID_ARG   If the combination of arguments is invalid."]
    #[doc = "      - ESP_OK                On success"]
    pub fn adc_digi_controller_configure(config: *const adc_digi_configuration_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset adc digital controller filter."]
    #[doc = ""]
    #[doc = " @param idx Filter index."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_filter_reset(idx: adc_digi_filter_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set adc digital controller filter configuration."]
    #[doc = ""]
    #[doc = " @note For ESP32S2, Filter IDX0/IDX1 can only be used to filter all enabled channels of ADC1/ADC2 unit at the same time."]
    #[doc = ""]
    #[doc = " @param idx Filter index."]
    #[doc = " @param config See ``adc_digi_filter_t``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_filter_set_config(
        idx: adc_digi_filter_idx_t,
        config: *mut adc_digi_filter_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get adc digital controller filter configuration."]
    #[doc = ""]
    #[doc = " @note For ESP32S2, Filter IDX0/IDX1 can only be used to filter all enabled channels of ADC1/ADC2 unit at the same time."]
    #[doc = ""]
    #[doc = " @param idx Filter index."]
    #[doc = " @param config See ``adc_digi_filter_t``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_filter_get_config(
        idx: adc_digi_filter_idx_t,
        config: *mut adc_digi_filter_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable/disable adc digital controller filter."]
    #[doc = "        Filtering the ADC data to obtain smooth data at higher sampling rates."]
    #[doc = ""]
    #[doc = " @note For ESP32S2, Filter IDX0/IDX1 can only be used to filter all enabled channels of ADC1/ADC2 unit at the same time."]
    #[doc = ""]
    #[doc = " @param idx Filter index."]
    #[doc = " @param enable Enable/Disable filter."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_filter_enable(idx: adc_digi_filter_idx_t, enable: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Config monitor of adc digital controller."]
    #[doc = ""]
    #[doc = " @note For ESP32S2, The monitor will monitor all the enabled channel data of the each ADC unit at the same time."]
    #[doc = ""]
    #[doc = " @param idx Monitor index."]
    #[doc = " @param config See ``adc_digi_monitor_t``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_monitor_set_config(
        idx: adc_digi_monitor_idx_t,
        config: *mut adc_digi_monitor_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable/disable monitor of adc digital controller."]
    #[doc = ""]
    #[doc = " @note For ESP32S2, The monitor will monitor all the enabled channel data of the each ADC unit at the same time."]
    #[doc = ""]
    #[doc = " @param idx Monitor index."]
    #[doc = " @param enable True or false enable monitor."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    pub fn adc_digi_monitor_enable(idx: adc_digi_monitor_idx_t, enable: bool) -> esp_err_t;
}
#[doc = "< Characterization based on reference voltage stored in eFuse"]
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_EFUSE_VREF: esp_adc_cal_value_t = 0;
#[doc = "< Characterization based on Two Point values stored in eFuse"]
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_EFUSE_TP: esp_adc_cal_value_t = 1;
#[doc = "< Characterization based on default reference voltage"]
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_DEFAULT_VREF: esp_adc_cal_value_t = 2;
#[doc = "< Characterization based on Two Point values and fitting curve coefficients stored in eFuse"]
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_EFUSE_TP_FIT: esp_adc_cal_value_t = 3;
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_MAX: esp_adc_cal_value_t = 4;
pub const esp_adc_cal_value_t_ESP_ADC_CAL_VAL_NOT_SUPPORTED: esp_adc_cal_value_t = 4;
#[doc = " @brief Type of calibration value used in characterization"]
pub type esp_adc_cal_value_t = c_types::c_uint;
#[doc = " @brief Structure storing characteristics of an ADC"]
#[doc = ""]
#[doc = " @note Call esp_adc_cal_characterize() to initialize the structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_adc_cal_characteristics_t {
    #[doc = "< ADC number"]
    pub adc_num: adc_unit_t,
    #[doc = "< ADC attenuation"]
    pub atten: adc_atten_t,
    #[doc = "< ADC bit width"]
    pub bit_width: adc_bits_width_t,
    #[doc = "< Gradient of ADC-Voltage curve"]
    pub coeff_a: u32,
    #[doc = "< Offset of ADC-Voltage curve"]
    pub coeff_b: u32,
    #[doc = "< Vref used by lookup table"]
    pub vref: u32,
    #[doc = "< Pointer to low Vref curve of lookup table (NULL if unused)"]
    pub low_curve: *const u32,
    #[doc = "< Pointer to high Vref curve of lookup table (NULL if unused)"]
    pub high_curve: *const u32,
    #[doc = "< ADC Calibration"]
    pub version: u8,
}
impl Default for esp_adc_cal_characteristics_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Checks if ADC calibration values are burned into eFuse"]
    #[doc = ""]
    #[doc = " This function checks if ADC reference voltage or Two Point values have been"]
    #[doc = " burned to the eFuse of the current ESP32"]
    #[doc = ""]
    #[doc = " @param   value_type  Type of calibration value (ESP_ADC_CAL_VAL_EFUSE_VREF or ESP_ADC_CAL_VAL_EFUSE_TP)"]
    #[doc = " @note in ESP32S2, only ESP_ADC_CAL_VAL_EFUSE_TP is supported. Some old ESP32S2s do not support this, either."]
    #[doc = " In which case you have to calibrate it manually, possibly by performing your own two-point calibration on the chip."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: The calibration mode is supported in eFuse"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: Error, eFuse values are not burned"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Error, invalid argument (ESP_ADC_CAL_VAL_DEFAULT_VREF)"]
    pub fn esp_adc_cal_check_efuse(value_type: esp_adc_cal_value_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Characterize an ADC at a particular attenuation"]
    #[doc = ""]
    #[doc = " This function will characterize the ADC at a particular attenuation and generate"]
    #[doc = " the ADC-Voltage curve in the form of [y = coeff_a * x + coeff_b]."]
    #[doc = " Characterization can be based on Two Point values, eFuse Vref, or default Vref"]
    #[doc = " and the calibration values will be prioritized in that order."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = " For ESP32, Two Point values and eFuse Vref calibration can be enabled/disabled using menuconfig."]
    #[doc = " For ESP32s2, only Two Point values calibration and only ADC_WIDTH_BIT_13 is supported. The parameter default_vref is unused."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @param[in]   adc_num         ADC to characterize (ADC_UNIT_1 or ADC_UNIT_2)"]
    #[doc = " @param[in]   atten           Attenuation to characterize"]
    #[doc = " @param[in]   bit_width       Bit width configuration of ADC"]
    #[doc = " @param[in]   default_vref    Default ADC reference voltage in mV (Only in ESP32, used if eFuse values is not available)"]
    #[doc = " @param[out]  chars           Pointer to empty structure used to store ADC characteristics"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_ADC_CAL_VAL_EFUSE_VREF: eFuse Vref used for characterization"]
    #[doc = "      - ESP_ADC_CAL_VAL_EFUSE_TP: Two Point value used for characterization (only in Linear Mode)"]
    #[doc = "      - ESP_ADC_CAL_VAL_DEFAULT_VREF: Default Vref used for characterization"]
    pub fn esp_adc_cal_characterize(
        adc_num: adc_unit_t,
        atten: adc_atten_t,
        bit_width: adc_bits_width_t,
        default_vref: u32,
        chars: *mut esp_adc_cal_characteristics_t,
    ) -> esp_adc_cal_value_t;
}
extern "C" {
    #[doc = " @brief   Convert an ADC reading to voltage in mV"]
    #[doc = ""]
    #[doc = " This function converts an ADC reading to a voltage in mV based on the ADC's"]
    #[doc = " characteristics."]
    #[doc = ""]
    #[doc = " @note    Characteristics structure must be initialized before this function"]
    #[doc = "          is called (call esp_adc_cal_characterize())"]
    #[doc = ""]
    #[doc = " @param[in]   adc_reading     ADC reading"]
    #[doc = " @param[in]   chars           Pointer to initialized structure containing ADC characteristics"]
    #[doc = ""]
    #[doc = " @return      Voltage in mV"]
    pub fn esp_adc_cal_raw_to_voltage(
        adc_reading: u32,
        chars: *const esp_adc_cal_characteristics_t,
    ) -> u32;
}
extern "C" {
    #[doc = " @brief   Reads an ADC and converts the reading to a voltage in mV"]
    #[doc = ""]
    #[doc = " This function reads an ADC then converts the raw reading to a voltage in mV"]
    #[doc = " based on the characteristics provided. The ADC that is read is also"]
    #[doc = " determined by the characteristics."]
    #[doc = ""]
    #[doc = " @note    The Characteristics structure must be initialized before this"]
    #[doc = "          function is called (call esp_adc_cal_characterize())"]
    #[doc = ""]
    #[doc = " @param[in]   channel     ADC Channel to read"]
    #[doc = " @param[in]   chars       Pointer to initialized ADC characteristics structure"]
    #[doc = " @param[out]  voltage     Pointer to store converted voltage"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: ADC read and converted to mV"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Error due to invalid arguments"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Reading result is invalid. Try to read again."]
    pub fn esp_adc_cal_get_voltage(
        channel: adc_channel_t,
        chars: *const esp_adc_cal_characteristics_t,
        voltage: *mut u32,
    ) -> esp_err_t;
}
#[doc = " Type by which queues are referenced.  For example, a call to xQueueCreate()"]
#[doc = " returns an QueueHandle_t variable that can then be used as a parameter to"]
#[doc = " xQueueSend(), xQueueReceive(), etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueDefinition {
    _unused: [u8; 0],
}
pub type QueueHandle_t = *mut QueueDefinition;
#[doc = " Type by which queue sets are referenced.  For example, a call to"]
#[doc = " xQueueCreateSet() returns an xQueueSet variable that can then be used as a"]
#[doc = " parameter to xQueueSelectFromSet(), xQueueAddToSet(), etc."]
pub type QueueSetHandle_t = *mut QueueDefinition;
#[doc = " Queue sets can contain both queues and semaphores, so the"]
#[doc = " QueueSetMemberHandle_t is defined as a type to be used where a parameter or"]
#[doc = " return value can be either an QueueHandle_t or an SemaphoreHandle_t."]
pub type QueueSetMemberHandle_t = *mut QueueDefinition;
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueGenericSend("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  const void * pvItemToQueue,"]
    #[doc = "                                  TickType_t xTicksToWait"]
    #[doc = "                                  BaseType_t xCopyPosition"]
    #[doc = "                              );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSend(), xQueueSendToFront() and"]
    #[doc = " xQueueSendToBack() are used in place of calling this function directly."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  The item is queued by copy, not by reference."]
    #[doc = " This function must not be called from an interrupt service routine."]
    #[doc = " See xQueueSendFromISR () for an alternative which may be used in an ISR."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for space to become available on the queue, should it already"]
    #[doc = " be full.  The call will return immediately if this is set to 0 and the"]
    #[doc = " queue is full.  The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the item was successfully posted, otherwise errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " uint32_t ulVar = 10UL;"]
    #[doc = ""]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " QueueHandle_t xQueue1, xQueue2;"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 uint32_t values."]
    #[doc = "  xQueue1 = xQueueCreate( 10, sizeof( uint32_t ) );"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue2 = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  if( xQueue1 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send an uint32_t.  Wait for 10 ticks for space to become"]
    #[doc = "      // available if necessary."]
    #[doc = "      if( xQueueGenericSend( xQueue1, ( void * ) &ulVar, ( TickType_t ) 10, queueSEND_TO_BACK ) != pdPASS )"]
    #[doc = "      {"]
    #[doc = "          // Failed to post the message, even after 10 ticks."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( xQueue2 != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "      // queue is already full."]
    #[doc = "      pxMessage = & xMessage;"]
    #[doc = "      xQueueGenericSend( xQueue2, ( void * ) &pxMessage, ( TickType_t ) 0, queueSEND_TO_BACK );"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xQueueSend xQueueSend"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xTicksToWait: TickType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueuePeek("]
    #[doc = "                           QueueHandle_t xQueue,"]
    #[doc = "                           void * const pvBuffer,"]
    #[doc = "                           TickType_t xTicksToWait"]
    #[doc = "                       );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " This macro must not be used in an interrupt service routine.  See"]
    #[doc = " xQueuePeekFromISR() for an alternative that can be called from an interrupt"]
    #[doc = " service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. The time is defined in tick periods so the constant"]
    #[doc = " portTICK_PERIOD_MS should be used to convert to real time if this is required."]
    #[doc = " xQueuePeek() will return immediately if xTicksToWait is 0 and the queue"]
    #[doc = " is empty."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to peek the data from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Peek a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueuePeek( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask, but the item still remains on the queue."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xQueuePeek xQueuePeek"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeek(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueuePeekFromISR("]
    #[doc = "                                  QueueHandle_t xQueue,"]
    #[doc = "                                  void *pvBuffer,"]
    #[doc = "                              );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " A version of xQueuePeek() that can be called from an interrupt service"]
    #[doc = " routine (ISR)."]
    #[doc = ""]
    #[doc = " Receive an item from a queue without removing the item from the queue."]
    #[doc = " The item is received by copy so a buffer of adequate size must be"]
    #[doc = " provided.  The number of bytes copied into the buffer was defined when"]
    #[doc = " the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items remain on the queue so will be returned again"]
    #[doc = " by the next call, or a call to xQueueReceive()."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xQueuePeekFromISR xQueuePeekFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueuePeekFromISR(xQueue: QueueHandle_t, pvBuffer: *mut c_types::c_void) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueReceive("]
    #[doc = "                               QueueHandle_t xQueue,"]
    #[doc = "                               void *pvBuffer,"]
    #[doc = "                               TickType_t xTicksToWait"]
    #[doc = "                          );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  The item is received by copy so a buffer of"]
    #[doc = " adequate size must be provided.  The number of bytes copied into the buffer"]
    #[doc = " was defined when the queue was created."]
    #[doc = ""]
    #[doc = " Successfully received items are removed from the queue."]
    #[doc = ""]
    #[doc = " This function must not be used in an interrupt service routine.  See"]
    #[doc = " xQueueReceiveFromISR for an alternative that can."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum amount of time the task should block"]
    #[doc = " waiting for an item to receive should the queue be empty at the time"]
    #[doc = " of the call. xQueueReceive() will return immediately if xTicksToWait"]
    #[doc = " is zero and the queue is empty.  The time is defined in tick periods so the"]
    #[doc = " constant portTICK_PERIOD_MS should be used to convert to real time if this is"]
    #[doc = " required."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = " struct AMessage"]
    #[doc = " {"]
    #[doc = "  char ucMessageID;"]
    #[doc = "  char ucData[ 20 ];"]
    #[doc = " } xMessage;"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Task to create a queue and post a value."]
    #[doc = " void vATask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxMessage;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 pointers to AMessage structures."]
    #[doc = "  // These should be passed by pointer as they contain a lot of data."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( struct AMessage * ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Send a pointer to a struct AMessage object.  Don't block if the"]
    #[doc = "  // queue is already full."]
    #[doc = "  pxMessage = & xMessage;"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &pxMessage, ( TickType_t ) 0 );"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // Task to receive from the queue."]
    #[doc = " void vADifferentTask( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " struct AMessage *pxRxedMessage;"]
    #[doc = ""]
    #[doc = "  if( xQueue != 0 )"]
    #[doc = "  {"]
    #[doc = "      // Receive a message on the created queue.  Block for 10 ticks if a"]
    #[doc = "      // message is not immediately available."]
    #[doc = "      if( xQueueReceive( xQueue, &( pxRxedMessage ), ( TickType_t ) 10 ) )"]
    #[doc = "      {"]
    #[doc = "          // pcRxedMessage now points to the struct AMessage variable posted"]
    #[doc = "          // by vATask."]
    #[doc = "      }"]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ... Rest of task code."]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xQueueReceive xQueueReceive"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Return the number of messages stored in a queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of messages available in the queue."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueMessagesWaiting(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Return the number of free spaces available in a queue.  This is equal to the"]
    #[doc = " number of items that can be sent to the queue before the queue becomes full"]
    #[doc = " if no items are removed."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue being queried."]
    #[doc = ""]
    #[doc = " @return The number of spaces available in the queue."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup uxQueueMessagesWaiting uxQueueMessagesWaiting"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn uxQueueSpacesAvailable(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " void vQueueDelete( QueueHandle_t xQueue );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Delete a queue - freeing all the memory allocated for storing of items"]
    #[doc = " placed on the queue."]
    #[doc = ""]
    #[doc = " @param xQueue A handle to the queue to be deleted."]
    #[doc = ""]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup vQueueDelete vQueueDelete"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn vQueueDelete(xQueue: QueueHandle_t);
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION */"]
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueGenericSendFromISR("]
    #[doc = "                                         QueueHandle_t    xQueue,"]
    #[doc = "                                         const    void    *pvItemToQueue,"]
    #[doc = "                                         BaseType_t  *pxHigherPriorityTaskWoken,"]
    #[doc = "                                         BaseType_t  xCopyPosition"]
    #[doc = "                                     );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " It is preferred that the macros xQueueSendFromISR(),"]
    #[doc = " xQueueSendToFrontFromISR() and xQueueSendToBackFromISR() be used in place"]
    #[doc = " of calling this function directly.  xQueueGiveFromISR() is an"]
    #[doc = " equivalent for use by semaphores that don't actually copy any data."]
    #[doc = ""]
    #[doc = " Post an item on a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " Items are queued by copy not reference so it is preferable to only"]
    #[doc = " queue small items, especially when called from an ISR.  In most cases"]
    #[doc = " it would be preferable to store a pointer to the item being queued."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue on which the item is to be posted."]
    #[doc = ""]
    #[doc = " @param pvItemToQueue A pointer to the item that is to be placed on the"]
    #[doc = " queue.  The size of the items the queue will hold was defined when the"]
    #[doc = " queue was created, so this many bytes will be copied from pvItemToQueue"]
    #[doc = " into the queue storage area."]
    #[doc = ""]
    #[doc = " @param[out] pxHigherPriorityTaskWoken xQueueGenericSendFromISR() will set"]
    #[doc = " *pxHigherPriorityTaskWoken to pdTRUE if sending to the queue caused a task"]
    #[doc = " to unblock, and the unblocked task has a priority higher than the currently"]
    #[doc = " running task.  If xQueueGenericSendFromISR() sets this value to pdTRUE then"]
    #[doc = " a context switch should be requested before the interrupt is exited."]
    #[doc = ""]
    #[doc = " @param xCopyPosition Can take the value queueSEND_TO_BACK to place the"]
    #[doc = " item at the back of the queue, or queueSEND_TO_FRONT to place the item"]
    #[doc = " at the front of the queue (for high priority messages)."]
    #[doc = ""]
    #[doc = " @return pdTRUE if the data was successfully sent to the queue, otherwise"]
    #[doc = " errQUEUE_FULL."]
    #[doc = ""]
    #[doc = " Example usage for buffered IO (where the ISR can obtain more than one value"]
    #[doc = " per call):"]
    #[doc = " @code{c}"]
    #[doc = " void vBufferISR( void )"]
    #[doc = " {"]
    #[doc = " char cIn;"]
    #[doc = " BaseType_t xHigherPriorityTaskWokenByPost;"]
    #[doc = ""]
    #[doc = "  // We have not woken a task at the start of the ISR."]
    #[doc = "  xHigherPriorityTaskWokenByPost = pdFALSE;"]
    #[doc = ""]
    #[doc = "  // Loop until the buffer is empty."]
    #[doc = "  do"]
    #[doc = "  {"]
    #[doc = "      // Obtain a byte from the buffer."]
    #[doc = "      cIn = portINPUT_BYTE( RX_REGISTER_ADDRESS );"]
    #[doc = ""]
    #[doc = "      // Post each byte."]
    #[doc = "      xQueueGenericSendFromISR( xRxQueue, &cIn, &xHigherPriorityTaskWokenByPost, queueSEND_TO_BACK );"]
    #[doc = ""]
    #[doc = "  } while( portINPUT_BYTE( BUFFER_COUNT ) );"]
    #[doc = ""]
    #[doc = "  // Now the buffer is empty we can switch context if necessary.  Note that the"]
    #[doc = "  // name of the yield function required is port specific."]
    #[doc = "  if( xHigherPriorityTaskWokenByPost )"]
    #[doc = "  {"]
    #[doc = "      taskYIELD_YIELD_FROM_ISR();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueGenericSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
        xCopyPosition: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveFromISR(
        xQueue: QueueHandle_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    #[doc = " queue. h"]
    #[doc = " @code{c}"]
    #[doc = " BaseType_t xQueueReceiveFromISR("]
    #[doc = "                                     QueueHandle_t    xQueue,"]
    #[doc = "                                     void             *pvBuffer,"]
    #[doc = "                                     BaseType_t       *pxTaskWoken"]
    #[doc = "                                 );"]
    #[doc = " @endcode"]
    #[doc = " @endcond"]
    #[doc = ""]
    #[doc = " Receive an item from a queue.  It is safe to use this function from within an"]
    #[doc = " interrupt service routine."]
    #[doc = ""]
    #[doc = " @param xQueue The handle to the queue from which the item is to be"]
    #[doc = " received."]
    #[doc = ""]
    #[doc = " @param pvBuffer Pointer to the buffer into which the received item will"]
    #[doc = " be copied."]
    #[doc = ""]
    #[doc = " @param[out] pxHigherPriorityTaskWoken A task may be blocked waiting for space to become"]
    #[doc = " available on the queue.  If xQueueReceiveFromISR causes such a task to"]
    #[doc = " unblock *pxTaskWoken will get set to pdTRUE, otherwise *pxTaskWoken will"]
    #[doc = " remain unchanged."]
    #[doc = ""]
    #[doc = " @return pdTRUE if an item was successfully received from the queue,"]
    #[doc = " otherwise pdFALSE."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = ""]
    #[doc = " QueueHandle_t xQueue;"]
    #[doc = ""]
    #[doc = " // Function to create a queue and post some values."]
    #[doc = " void vAFunction( void *pvParameters )"]
    #[doc = " {"]
    #[doc = " char cValueToPost;"]
    #[doc = " const TickType_t xTicksToWait = ( TickType_t )0xff;"]
    #[doc = ""]
    #[doc = "  // Create a queue capable of containing 10 characters."]
    #[doc = "  xQueue = xQueueCreate( 10, sizeof( char ) );"]
    #[doc = "  if( xQueue == 0 )"]
    #[doc = "  {"]
    #[doc = "      // Failed to create the queue."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  // ..."]
    #[doc = ""]
    #[doc = "  // Post some characters that will be used within an ISR.  If the queue"]
    #[doc = "  // is full then this task will block for xTicksToWait ticks."]
    #[doc = "  cValueToPost = 'a';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = "  cValueToPost = 'b';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = ""]
    #[doc = "  // ... keep posting characters ... this task may block when the queue"]
    #[doc = "  // becomes full."]
    #[doc = ""]
    #[doc = "  cValueToPost = 'c';"]
    #[doc = "  xQueueSend( xQueue, ( void * ) &cValueToPost, xTicksToWait );"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // ISR that outputs all the characters received on the queue."]
    #[doc = " void vISR_Routine( void )"]
    #[doc = " {"]
    #[doc = " BaseType_t xTaskWokenByReceive = pdFALSE;"]
    #[doc = " char cRxedChar;"]
    #[doc = ""]
    #[doc = "  while( xQueueReceiveFromISR( xQueue, ( void * ) &cRxedChar, &xTaskWokenByReceive) )"]
    #[doc = "  {"]
    #[doc = "      // A character was received.  Output the character now."]
    #[doc = "      vOutputCharacter( cRxedChar );"]
    #[doc = ""]
    #[doc = "      // If removing the character from the queue woke the task that was"]
    #[doc = "      // posting onto the queue cTaskWokenByReceive will have been set to"]
    #[doc = "      // pdTRUE.  No matter how many times this loop iterates only one"]
    #[doc = "      // task will be woken."]
    #[doc = "  }"]
    #[doc = ""]
    #[doc = "  if( cTaskWokenByPost != ( char ) pdFALSE;"]
    #[doc = "  {"]
    #[doc = "      taskYIELD ();"]
    #[doc = "  }"]
    #[doc = " }"]
    #[doc = " @endcode"]
    #[doc = " @cond !DOC_SINGLE_GROUP"]
    #[doc = " \\defgroup xQueueReceiveFromISR xQueueReceiveFromISR"]
    #[doc = " @endcond"]
    #[doc = " \\ingroup QueueManagement"]
    pub fn xQueueReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueEmptyFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueIsQueueFullFromISR(xQueue: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn uxQueueMessagesWaitingFromISR(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    pub fn xQueueCRSendFromISR(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xCoRoutinePreviouslyWoken: BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceiveFromISR(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        pxTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRSend(
        xQueue: QueueHandle_t,
        pvItemToQueue: *const c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    pub fn xQueueCRReceive(
        xQueue: QueueHandle_t,
        pvBuffer: *mut c_types::c_void,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " For internal use only.  Use xSemaphoreCreateMutex(),"]
    #[doc = " xSemaphoreCreateCounting() or xSemaphoreGetMutexHolder() instead of calling"]
    #[doc = " these functions directly."]
    pub fn xQueueCreateMutex(ucQueueType: u8) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateMutexStatic(
        ucQueueType: u8,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphore(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueCreateCountingSemaphoreStatic(
        uxMaxCount: UBaseType_t,
        uxInitialCount: UBaseType_t,
        pxStaticQueue: *mut StaticQueue_t,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueSemaphoreTake(xQueue: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGetMutexHolder(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    pub fn xQueueGetMutexHolderFromISR(xSemaphore: QueueHandle_t) -> TaskHandle_t;
}
extern "C" {
    #[doc = " For internal use only.  Use xSemaphoreTakeMutexRecursive() or"]
    #[doc = " xSemaphoreGiveMutexRecursive() instead of calling these functions directly."]
    pub fn xQueueTakeMutexRecursive(xMutex: QueueHandle_t, xTicksToWait: TickType_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGiveMutexRecursive(xMutex: QueueHandle_t) -> BaseType_t;
}
extern "C" {
    pub fn xQueueGenericCreate(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    pub fn xQueueGenericCreateStatic(
        uxQueueLength: UBaseType_t,
        uxItemSize: UBaseType_t,
        pucQueueStorage: *mut u8,
        pxStaticQueue: *mut StaticQueue_t,
        ucQueueType: u8,
    ) -> QueueHandle_t;
}
extern "C" {
    #[doc = " Queue sets provide a mechanism to allow a task to block (pend) on a read"]
    #[doc = " operation from multiple queues or semaphores simultaneously."]
    #[doc = ""]
    #[doc = " See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " A queue set must be explicitly created using a call to xQueueCreateSet()"]
    #[doc = " before it can be used.  Once created, standard FreeRTOS queues and semaphores"]
    #[doc = " can be added to the set using calls to xQueueAddToSet()."]
    #[doc = " xQueueSelectFromSet() is then used to determine which, if any, of the queues"]
    #[doc = " or semaphores contained in the set is in a state where a queue read or"]
    #[doc = " semaphore take operation would be successful."]
    #[doc = ""]
    #[doc = " Note 1:  See the documentation on https://www.FreeRTOS.org/RTOS-queue-sets.html"]
    #[doc = " for reasons why queue sets are very rarely needed in practice as there are"]
    #[doc = " simpler methods of blocking on multiple objects."]
    #[doc = ""]
    #[doc = " Note 2:  Blocking on a queue set that contains a mutex will not cause the"]
    #[doc = " mutex holder to inherit the priority of the blocked task."]
    #[doc = ""]
    #[doc = " Note 3:  An additional 4 bytes of RAM is required for each space in a every"]
    #[doc = " queue added to a queue set.  Therefore counting semaphores that have a high"]
    #[doc = " maximum count value should not be added to a queue set."]
    #[doc = ""]
    #[doc = " Note 4:  A receive (in the case of a queue) or take (in the case of a"]
    #[doc = " semaphore) operation must not be performed on a member of a queue set unless"]
    #[doc = " a call to xQueueSelectFromSet() has first returned a handle to that set member."]
    #[doc = ""]
    #[doc = " @param uxEventQueueLength Queue sets store events that occur on"]
    #[doc = " the queues and semaphores contained in the set.  uxEventQueueLength specifies"]
    #[doc = " the maximum number of events that can be queued at once.  To be absolutely"]
    #[doc = " certain that events are not lost uxEventQueueLength should be set to the"]
    #[doc = " total sum of the length of the queues added to the set, where binary"]
    #[doc = " semaphores and mutexes have a length of 1, and counting semaphores have a"]
    #[doc = " length set by their maximum count value.  Examples:"]
    #[doc = "  + If a queue set is to hold a queue of length 5, another queue of length 12,"]
    #[doc = "    and a binary semaphore, then uxEventQueueLength should be set to"]
    #[doc = "    (5 + 12 + 1), or 18."]
    #[doc = "  + If a queue set is to hold three binary semaphores then uxEventQueueLength"]
    #[doc = "    should be set to (1 + 1 + 1 ), or 3."]
    #[doc = "  + If a queue set is to hold a counting semaphore that has a maximum count of"]
    #[doc = "    5, and a counting semaphore that has a maximum count of 3, then"]
    #[doc = "    uxEventQueueLength should be set to (5 + 3), or 8."]
    #[doc = ""]
    #[doc = " @return If the queue set is created successfully then a handle to the created"]
    #[doc = " queue set is returned.  Otherwise NULL is returned."]
    pub fn xQueueCreateSet(uxEventQueueLength: UBaseType_t) -> QueueSetHandle_t;
}
extern "C" {
    #[doc = " Adds a queue or semaphore to a queue set that was previously created by a"]
    #[doc = " call to xQueueCreateSet()."]
    #[doc = ""]
    #[doc = " See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " Note 1:  A receive (in the case of a queue) or take (in the case of a"]
    #[doc = " semaphore) operation must not be performed on a member of a queue set unless"]
    #[doc = " a call to xQueueSelectFromSet() has first returned a handle to that set member."]
    #[doc = ""]
    #[doc = " @param xQueueOrSemaphore The handle of the queue or semaphore being added to"]
    #[doc = " the queue set (cast to an QueueSetMemberHandle_t type)."]
    #[doc = ""]
    #[doc = " @param xQueueSet The handle of the queue set to which the queue or semaphore"]
    #[doc = " is being added."]
    #[doc = ""]
    #[doc = " @return If the queue or semaphore was successfully added to the queue set"]
    #[doc = " then pdPASS is returned.  If the queue could not be successfully added to the"]
    #[doc = " queue set because it is already a member of a different queue set then pdFAIL"]
    #[doc = " is returned."]
    pub fn xQueueAddToSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " Removes a queue or semaphore from a queue set.  A queue or semaphore can only"]
    #[doc = " be removed from a set if the queue or semaphore is empty."]
    #[doc = ""]
    #[doc = " See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " @param xQueueOrSemaphore The handle of the queue or semaphore being removed"]
    #[doc = " from the queue set (cast to an QueueSetMemberHandle_t type)."]
    #[doc = ""]
    #[doc = " @param xQueueSet The handle of the queue set in which the queue or semaphore"]
    #[doc = " is included."]
    #[doc = ""]
    #[doc = " @return If the queue or semaphore was successfully removed from the queue set"]
    #[doc = " then pdPASS is returned.  If the queue was not in the queue set, or the"]
    #[doc = " queue (or semaphore) was not empty, then pdFAIL is returned."]
    pub fn xQueueRemoveFromSet(
        xQueueOrSemaphore: QueueSetMemberHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " xQueueSelectFromSet() selects from the members of a queue set a queue or"]
    #[doc = " semaphore that either contains data (in the case of a queue) or is available"]
    #[doc = " to take (in the case of a semaphore).  xQueueSelectFromSet() effectively"]
    #[doc = " allows a task to block (pend) on a read operation on all the queues and"]
    #[doc = " semaphores in a queue set simultaneously."]
    #[doc = ""]
    #[doc = " See FreeRTOS/Source/Demo/Common/Minimal/QueueSet.c for an example using this"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " Note 1:  See the documentation on https://www.FreeRTOS.org/RTOS-queue-sets.html"]
    #[doc = " for reasons why queue sets are very rarely needed in practice as there are"]
    #[doc = " simpler methods of blocking on multiple objects."]
    #[doc = ""]
    #[doc = " Note 2:  Blocking on a queue set that contains a mutex will not cause the"]
    #[doc = " mutex holder to inherit the priority of the blocked task."]
    #[doc = ""]
    #[doc = " Note 3:  A receive (in the case of a queue) or take (in the case of a"]
    #[doc = " semaphore) operation must not be performed on a member of a queue set unless"]
    #[doc = " a call to xQueueSelectFromSet() has first returned a handle to that set member."]
    #[doc = ""]
    #[doc = " @param xQueueSet The queue set on which the task will (potentially) block."]
    #[doc = ""]
    #[doc = " @param xTicksToWait The maximum time, in ticks, that the calling task will"]
    #[doc = " remain in the Blocked state (with other tasks executing) to wait for a member"]
    #[doc = " of the queue set to be ready for a successful queue read or semaphore take"]
    #[doc = " operation."]
    #[doc = ""]
    #[doc = " @return xQueueSelectFromSet() will return the handle of a queue (cast to"]
    #[doc = " a QueueSetMemberHandle_t type) contained in the queue set that contains data,"]
    #[doc = " or the handle of a semaphore (cast to a QueueSetMemberHandle_t type) contained"]
    #[doc = " in the queue set that is available, or NULL if no such queue or semaphore"]
    #[doc = " exists before before the specified block time expires."]
    pub fn xQueueSelectFromSet(
        xQueueSet: QueueSetHandle_t,
        xTicksToWait: TickType_t,
    ) -> QueueSetMemberHandle_t;
}
extern "C" {
    #[doc = " A version of xQueueSelectFromSet() that can be used from an ISR."]
    pub fn xQueueSelectFromSetFromISR(xQueueSet: QueueSetHandle_t) -> QueueSetMemberHandle_t;
}
extern "C" {
    #[doc = " @cond !DOC_EXCLUDE_HEADER_SECTION"]
    pub fn vQueueWaitForMessageRestricted(
        xQueue: QueueHandle_t,
        xTicksToWait: TickType_t,
        xWaitIndefinitely: BaseType_t,
    );
}
extern "C" {
    pub fn xQueueGenericReset(xQueue: QueueHandle_t, xNewQueue: BaseType_t) -> BaseType_t;
}
extern "C" {
    pub fn vQueueSetQueueNumber(xQueue: QueueHandle_t, uxQueueNumber: UBaseType_t);
}
extern "C" {
    pub fn uxQueueGetQueueNumber(xQueue: QueueHandle_t) -> UBaseType_t;
}
extern "C" {
    pub fn ucQueueGetQueueType(xQueue: QueueHandle_t) -> u8;
}
pub type SemaphoreHandle_t = QueueHandle_t;
pub type esp_event_base_t = *const c_types::c_char;
pub type esp_event_loop_handle_t = *mut c_types::c_void;
pub type esp_event_handler_t = ::core::option::Option<
    unsafe extern "C" fn(
        event_handler_arg: *mut c_types::c_void,
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
    ),
>;
pub type esp_event_handler_instance_t = *mut c_types::c_void;
#[doc = "< null mode"]
pub const wifi_mode_t_WIFI_MODE_NULL: wifi_mode_t = 0;
#[doc = "< WiFi station mode"]
pub const wifi_mode_t_WIFI_MODE_STA: wifi_mode_t = 1;
#[doc = "< WiFi soft-AP mode"]
pub const wifi_mode_t_WIFI_MODE_AP: wifi_mode_t = 2;
#[doc = "< WiFi station + soft-AP mode"]
pub const wifi_mode_t_WIFI_MODE_APSTA: wifi_mode_t = 3;
pub const wifi_mode_t_WIFI_MODE_MAX: wifi_mode_t = 4;
pub type wifi_mode_t = c_types::c_uint;
pub const wifi_interface_t_WIFI_IF_STA: wifi_interface_t = 0;
pub const wifi_interface_t_WIFI_IF_AP: wifi_interface_t = 1;
pub type wifi_interface_t = c_types::c_uint;
#[doc = "< Country policy is auto, use the country info of AP to which the station is connected"]
pub const wifi_country_policy_t_WIFI_COUNTRY_POLICY_AUTO: wifi_country_policy_t = 0;
#[doc = "< Country policy is manual, always use the configured country info"]
pub const wifi_country_policy_t_WIFI_COUNTRY_POLICY_MANUAL: wifi_country_policy_t = 1;
pub type wifi_country_policy_t = c_types::c_uint;
#[doc = " @brief Structure describing WiFi country-based regional restrictions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_country_t {
    #[doc = "< country code string"]
    pub cc: [c_types::c_char; 3usize],
    #[doc = "< start channel"]
    pub schan: u8,
    #[doc = "< total channel number"]
    pub nchan: u8,
    #[doc = "< This field is used for getting WiFi maximum transmitting power, call esp_wifi_set_max_tx_power to set the maximum transmitting power."]
    pub max_tx_power: i8,
    #[doc = "< country policy"]
    pub policy: wifi_country_policy_t,
}
impl Default for wifi_country_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< authenticate mode : open"]
pub const wifi_auth_mode_t_WIFI_AUTH_OPEN: wifi_auth_mode_t = 0;
#[doc = "< authenticate mode : WEP"]
pub const wifi_auth_mode_t_WIFI_AUTH_WEP: wifi_auth_mode_t = 1;
#[doc = "< authenticate mode : WPA_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA_PSK: wifi_auth_mode_t = 2;
#[doc = "< authenticate mode : WPA2_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA2_PSK: wifi_auth_mode_t = 3;
#[doc = "< authenticate mode : WPA_WPA2_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA_WPA2_PSK: wifi_auth_mode_t = 4;
#[doc = "< authenticate mode : WPA2_ENTERPRISE"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA2_ENTERPRISE: wifi_auth_mode_t = 5;
#[doc = "< authenticate mode : WPA3_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA3_PSK: wifi_auth_mode_t = 6;
#[doc = "< authenticate mode : WPA2_WPA3_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WPA2_WPA3_PSK: wifi_auth_mode_t = 7;
#[doc = "< authenticate mode : WAPI_PSK"]
pub const wifi_auth_mode_t_WIFI_AUTH_WAPI_PSK: wifi_auth_mode_t = 8;
pub const wifi_auth_mode_t_WIFI_AUTH_MAX: wifi_auth_mode_t = 9;
pub type wifi_auth_mode_t = c_types::c_uint;
pub const wifi_err_reason_t_WIFI_REASON_UNSPECIFIED: wifi_err_reason_t = 1;
pub const wifi_err_reason_t_WIFI_REASON_AUTH_EXPIRE: wifi_err_reason_t = 2;
pub const wifi_err_reason_t_WIFI_REASON_AUTH_LEAVE: wifi_err_reason_t = 3;
pub const wifi_err_reason_t_WIFI_REASON_ASSOC_EXPIRE: wifi_err_reason_t = 4;
pub const wifi_err_reason_t_WIFI_REASON_ASSOC_TOOMANY: wifi_err_reason_t = 5;
pub const wifi_err_reason_t_WIFI_REASON_NOT_AUTHED: wifi_err_reason_t = 6;
pub const wifi_err_reason_t_WIFI_REASON_NOT_ASSOCED: wifi_err_reason_t = 7;
pub const wifi_err_reason_t_WIFI_REASON_ASSOC_LEAVE: wifi_err_reason_t = 8;
pub const wifi_err_reason_t_WIFI_REASON_ASSOC_NOT_AUTHED: wifi_err_reason_t = 9;
pub const wifi_err_reason_t_WIFI_REASON_DISASSOC_PWRCAP_BAD: wifi_err_reason_t = 10;
pub const wifi_err_reason_t_WIFI_REASON_DISASSOC_SUPCHAN_BAD: wifi_err_reason_t = 11;
pub const wifi_err_reason_t_WIFI_REASON_BSS_TRANSITION_DISASSOC: wifi_err_reason_t = 12;
pub const wifi_err_reason_t_WIFI_REASON_IE_INVALID: wifi_err_reason_t = 13;
pub const wifi_err_reason_t_WIFI_REASON_MIC_FAILURE: wifi_err_reason_t = 14;
pub const wifi_err_reason_t_WIFI_REASON_4WAY_HANDSHAKE_TIMEOUT: wifi_err_reason_t = 15;
pub const wifi_err_reason_t_WIFI_REASON_GROUP_KEY_UPDATE_TIMEOUT: wifi_err_reason_t = 16;
pub const wifi_err_reason_t_WIFI_REASON_IE_IN_4WAY_DIFFERS: wifi_err_reason_t = 17;
pub const wifi_err_reason_t_WIFI_REASON_GROUP_CIPHER_INVALID: wifi_err_reason_t = 18;
pub const wifi_err_reason_t_WIFI_REASON_PAIRWISE_CIPHER_INVALID: wifi_err_reason_t = 19;
pub const wifi_err_reason_t_WIFI_REASON_AKMP_INVALID: wifi_err_reason_t = 20;
pub const wifi_err_reason_t_WIFI_REASON_UNSUPP_RSN_IE_VERSION: wifi_err_reason_t = 21;
pub const wifi_err_reason_t_WIFI_REASON_INVALID_RSN_IE_CAP: wifi_err_reason_t = 22;
pub const wifi_err_reason_t_WIFI_REASON_802_1X_AUTH_FAILED: wifi_err_reason_t = 23;
pub const wifi_err_reason_t_WIFI_REASON_CIPHER_SUITE_REJECTED: wifi_err_reason_t = 24;
pub const wifi_err_reason_t_WIFI_REASON_INVALID_PMKID: wifi_err_reason_t = 53;
pub const wifi_err_reason_t_WIFI_REASON_BEACON_TIMEOUT: wifi_err_reason_t = 200;
pub const wifi_err_reason_t_WIFI_REASON_NO_AP_FOUND: wifi_err_reason_t = 201;
pub const wifi_err_reason_t_WIFI_REASON_AUTH_FAIL: wifi_err_reason_t = 202;
pub const wifi_err_reason_t_WIFI_REASON_ASSOC_FAIL: wifi_err_reason_t = 203;
pub const wifi_err_reason_t_WIFI_REASON_HANDSHAKE_TIMEOUT: wifi_err_reason_t = 204;
pub const wifi_err_reason_t_WIFI_REASON_CONNECTION_FAIL: wifi_err_reason_t = 205;
pub const wifi_err_reason_t_WIFI_REASON_AP_TSF_RESET: wifi_err_reason_t = 206;
pub const wifi_err_reason_t_WIFI_REASON_ROAMING: wifi_err_reason_t = 207;
pub type wifi_err_reason_t = c_types::c_uint;
#[doc = "< the channel width is HT20"]
pub const wifi_second_chan_t_WIFI_SECOND_CHAN_NONE: wifi_second_chan_t = 0;
#[doc = "< the channel width is HT40 and the secondary channel is above the primary channel"]
pub const wifi_second_chan_t_WIFI_SECOND_CHAN_ABOVE: wifi_second_chan_t = 1;
#[doc = "< the channel width is HT40 and the secondary channel is below the primary channel"]
pub const wifi_second_chan_t_WIFI_SECOND_CHAN_BELOW: wifi_second_chan_t = 2;
pub type wifi_second_chan_t = c_types::c_uint;
#[doc = "< active scan"]
pub const wifi_scan_type_t_WIFI_SCAN_TYPE_ACTIVE: wifi_scan_type_t = 0;
#[doc = "< passive scan"]
pub const wifi_scan_type_t_WIFI_SCAN_TYPE_PASSIVE: wifi_scan_type_t = 1;
pub type wifi_scan_type_t = c_types::c_uint;
#[doc = " @brief Range of active scan times per channel"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_active_scan_time_t {
    #[doc = "< minimum active scan time per channel, units: millisecond"]
    pub min: u32,
    #[doc = "< maximum active scan time per channel, units: millisecond, values above 1500ms may"]
    #[doc = "cause station to disconnect from AP and are not recommended."]
    pub max: u32,
}
#[doc = " @brief Aggregate of active & passive scan time per channel"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_scan_time_t {
    #[doc = "< active scan time per channel, units: millisecond."]
    pub active: wifi_active_scan_time_t,
    #[doc = "< passive scan time per channel, units: millisecond, values above 1500ms may"]
    #[doc = "cause station to disconnect from AP and are not recommended."]
    pub passive: u32,
}
#[doc = " @brief Parameters for an SSID scan."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_scan_config_t {
    #[doc = "< SSID of AP"]
    pub ssid: *mut u8,
    #[doc = "< MAC address of AP"]
    pub bssid: *mut u8,
    #[doc = "< channel, scan the specific channel"]
    pub channel: u8,
    #[doc = "< enable to scan AP whose SSID is hidden"]
    pub show_hidden: bool,
    #[doc = "< scan type, active or passive"]
    pub scan_type: wifi_scan_type_t,
    #[doc = "< scan time per channel"]
    pub scan_time: wifi_scan_time_t,
}
impl Default for wifi_scan_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< the cipher type is none"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_NONE: wifi_cipher_type_t = 0;
#[doc = "< the cipher type is WEP40"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_WEP40: wifi_cipher_type_t = 1;
#[doc = "< the cipher type is WEP104"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_WEP104: wifi_cipher_type_t = 2;
#[doc = "< the cipher type is TKIP"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_TKIP: wifi_cipher_type_t = 3;
#[doc = "< the cipher type is CCMP"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_CCMP: wifi_cipher_type_t = 4;
#[doc = "< the cipher type is TKIP and CCMP"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_TKIP_CCMP: wifi_cipher_type_t = 5;
#[doc = "< the cipher type is AES-CMAC-128"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_AES_CMAC128: wifi_cipher_type_t = 6;
#[doc = "< the cipher type is SMS4"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_SMS4: wifi_cipher_type_t = 7;
#[doc = "< the cipher type is GCMP"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_GCMP: wifi_cipher_type_t = 8;
#[doc = "< the cipher type is GCMP-256"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_GCMP256: wifi_cipher_type_t = 9;
#[doc = "< the cipher type is AES-GMAC-128"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_AES_GMAC128: wifi_cipher_type_t = 10;
#[doc = "< the cipher type is AES-GMAC-256"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_AES_GMAC256: wifi_cipher_type_t = 11;
#[doc = "< the cipher type is unknown"]
pub const wifi_cipher_type_t_WIFI_CIPHER_TYPE_UNKNOWN: wifi_cipher_type_t = 12;
pub type wifi_cipher_type_t = c_types::c_uint;
#[doc = "< WiFi antenna 0"]
pub const wifi_ant_t_WIFI_ANT_ANT0: wifi_ant_t = 0;
#[doc = "< WiFi antenna 1"]
pub const wifi_ant_t_WIFI_ANT_ANT1: wifi_ant_t = 1;
#[doc = "< Invalid WiFi antenna"]
pub const wifi_ant_t_WIFI_ANT_MAX: wifi_ant_t = 2;
#[doc = " @brief WiFi antenna"]
#[doc = ""]
pub type wifi_ant_t = c_types::c_uint;
#[doc = " @brief Description of a WiFi AP"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_ap_record_t {
    #[doc = "< MAC address of AP"]
    pub bssid: [u8; 6usize],
    #[doc = "< SSID of AP"]
    pub ssid: [u8; 33usize],
    #[doc = "< channel of AP"]
    pub primary: u8,
    #[doc = "< secondary channel of AP"]
    pub second: wifi_second_chan_t,
    #[doc = "< signal strength of AP"]
    pub rssi: i8,
    #[doc = "< authmode of AP"]
    pub authmode: wifi_auth_mode_t,
    #[doc = "< pairwise cipher of AP"]
    pub pairwise_cipher: wifi_cipher_type_t,
    #[doc = "< group cipher of AP"]
    pub group_cipher: wifi_cipher_type_t,
    #[doc = "< antenna used to receive beacon from AP"]
    pub ant: wifi_ant_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    #[doc = "< country information of AP"]
    pub country: wifi_country_t,
}
impl Default for wifi_ap_record_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl wifi_ap_record_t {
    #[inline]
    pub fn phy_11b(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11b(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_11g(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11g(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_11n(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11n(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_lr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_lr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wps(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wps(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ftm_responder(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ftm_responder(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ftm_initiator(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ftm_initiator(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        phy_11b: u32,
        phy_11g: u32,
        phy_11n: u32,
        phy_lr: u32,
        wps: u32,
        ftm_responder: u32,
        ftm_initiator: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let phy_11b: u32 = unsafe { ::core::mem::transmute(phy_11b) };
            phy_11b as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let phy_11g: u32 = unsafe { ::core::mem::transmute(phy_11g) };
            phy_11g as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let phy_11n: u32 = unsafe { ::core::mem::transmute(phy_11n) };
            phy_11n as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let phy_lr: u32 = unsafe { ::core::mem::transmute(phy_lr) };
            phy_lr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let wps: u32 = unsafe { ::core::mem::transmute(wps) };
            wps as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ftm_responder: u32 = unsafe { ::core::mem::transmute(ftm_responder) };
            ftm_responder as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ftm_initiator: u32 = unsafe { ::core::mem::transmute(ftm_initiator) };
            ftm_initiator as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "< Do fast scan, scan will end after find SSID match AP"]
pub const wifi_scan_method_t_WIFI_FAST_SCAN: wifi_scan_method_t = 0;
#[doc = "< All channel scan, scan will end after scan all the channel"]
pub const wifi_scan_method_t_WIFI_ALL_CHANNEL_SCAN: wifi_scan_method_t = 1;
pub type wifi_scan_method_t = c_types::c_uint;
#[doc = "< Sort match AP in scan list by RSSI"]
pub const wifi_sort_method_t_WIFI_CONNECT_AP_BY_SIGNAL: wifi_sort_method_t = 0;
#[doc = "< Sort match AP in scan list by security mode"]
pub const wifi_sort_method_t_WIFI_CONNECT_AP_BY_SECURITY: wifi_sort_method_t = 1;
pub type wifi_sort_method_t = c_types::c_uint;
#[doc = " @brief Structure describing parameters for a WiFi fast scan"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_scan_threshold_t {
    #[doc = "< The minimum rssi to accept in the fast scan mode"]
    pub rssi: i8,
    #[doc = "< The weakest authmode to accept in the fast scan mode"]
    pub authmode: wifi_auth_mode_t,
}
impl Default for wifi_scan_threshold_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< No power save"]
pub const wifi_ps_type_t_WIFI_PS_NONE: wifi_ps_type_t = 0;
#[doc = "< Minimum modem power saving. In this mode, station wakes up to receive beacon every DTIM period"]
pub const wifi_ps_type_t_WIFI_PS_MIN_MODEM: wifi_ps_type_t = 1;
#[doc = "< Maximum modem power saving. In this mode, interval to receive beacons is determined by the listen_interval parameter in wifi_sta_config_t"]
pub const wifi_ps_type_t_WIFI_PS_MAX_MODEM: wifi_ps_type_t = 2;
pub type wifi_ps_type_t = c_types::c_uint;
pub const wifi_bandwidth_t_WIFI_BW_HT20: wifi_bandwidth_t = 1;
pub const wifi_bandwidth_t_WIFI_BW_HT40: wifi_bandwidth_t = 2;
pub type wifi_bandwidth_t = c_types::c_uint;
#[doc = " Configuration structure for Protected Management Frame"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_pmf_config_t {
    #[doc = "< Deprecated variable. Device will always connect in PMF mode if other device also advertizes PMF capability."]
    pub capable: bool,
    #[doc = "< Advertizes that Protected Management Frame is required. Device will not associate to non-PMF capable devices."]
    pub required: bool,
}
#[doc = " @brief Soft-AP configuration settings for the ESP32"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_ap_config_t {
    #[doc = "< SSID of ESP32 soft-AP. If ssid_len field is 0, this must be a Null terminated string. Otherwise, length is set according to ssid_len."]
    pub ssid: [u8; 32usize],
    #[doc = "< Password of ESP32 soft-AP."]
    pub password: [u8; 64usize],
    #[doc = "< Optional length of SSID field."]
    pub ssid_len: u8,
    #[doc = "< Channel of ESP32 soft-AP"]
    pub channel: u8,
    #[doc = "< Auth mode of ESP32 soft-AP. Do not support AUTH_WEP in soft-AP mode"]
    pub authmode: wifi_auth_mode_t,
    #[doc = "< Broadcast SSID or not, default 0, broadcast the SSID"]
    pub ssid_hidden: u8,
    #[doc = "< Max number of stations allowed to connect in, default 4, max 10"]
    pub max_connection: u8,
    #[doc = "< Beacon interval which should be multiples of 100. Unit: TU(time unit, 1 TU = 1024 us). Range: 100 ~ 60000. Default value: 100"]
    pub beacon_interval: u16,
    #[doc = "< pairwise cipher of SoftAP, group cipher will be derived using this. cipher values are valid starting from WIFI_CIPHER_TYPE_TKIP, enum values before that will be considered as invalid and default cipher suites(TKIP+CCMP) will be used. Valid cipher suites in softAP mode are WIFI_CIPHER_TYPE_TKIP, WIFI_CIPHER_TYPE_CCMP and WIFI_CIPHER_TYPE_TKIP_CCMP."]
    pub pairwise_cipher: wifi_cipher_type_t,
    #[doc = "< Enable FTM Responder mode"]
    pub ftm_responder: bool,
}
impl Default for wifi_ap_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief STA configuration settings for the ESP32"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_sta_config_t {
    #[doc = "< SSID of target AP."]
    pub ssid: [u8; 32usize],
    #[doc = "< Password of target AP."]
    pub password: [u8; 64usize],
    #[doc = "< do all channel scan or fast scan"]
    pub scan_method: wifi_scan_method_t,
    #[doc = "< whether set MAC address of target AP or not. Generally, station_config.bssid_set needs to be 0; and it needs to be 1 only when users need to check the MAC address of the AP."]
    pub bssid_set: bool,
    #[doc = "< MAC address of target AP"]
    pub bssid: [u8; 6usize],
    #[doc = "< channel of target AP. Set to 1~13 to scan starting from the specified channel before connecting to AP. If the channel of AP is unknown, set it to 0."]
    pub channel: u8,
    #[doc = "< Listen interval for ESP32 station to receive beacon when WIFI_PS_MAX_MODEM is set. Units: AP beacon intervals. Defaults to 3 if set to 0."]
    pub listen_interval: u16,
    #[doc = "< sort the connect AP in the list by rssi or security mode"]
    pub sort_method: wifi_sort_method_t,
    #[doc = "< When sort_method is set, only APs which have an auth mode that is more secure than the selected auth mode and a signal stronger than the minimum RSSI will be used."]
    pub threshold: wifi_scan_threshold_t,
    #[doc = "< Configuration for Protected Management Frame. Will be advertized in RSN Capabilities in RSN IE."]
    pub pmf_cfg: wifi_pmf_config_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl Default for wifi_sta_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl wifi_sta_config_t {
    #[inline]
    pub fn rm_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rm_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn btm_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_btm_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mbo_enabled(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mbo_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rm_enabled: u32,
        btm_enabled: u32,
        mbo_enabled: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rm_enabled: u32 = unsafe { ::core::mem::transmute(rm_enabled) };
            rm_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let btm_enabled: u32 = unsafe { ::core::mem::transmute(btm_enabled) };
            btm_enabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mbo_enabled: u32 = unsafe { ::core::mem::transmute(mbo_enabled) };
            mbo_enabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " @brief Configuration data for ESP32 AP or STA."]
#[doc = ""]
#[doc = " The usage of this union (for ap or sta configuration) is determined by the accompanying"]
#[doc = " interface argument passed to esp_wifi_set_config() or esp_wifi_get_config()"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub union wifi_config_t {
    #[doc = "< configuration of AP"]
    pub ap: wifi_ap_config_t,
    #[doc = "< configuration of STA"]
    pub sta: wifi_sta_config_t,
}
impl Default for wifi_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Description of STA associated with AP"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_sta_info_t {
    #[doc = "< mac address"]
    pub mac: [u8; 6usize],
    #[doc = "< current average rssi of sta connected"]
    pub rssi: i8,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl wifi_sta_info_t {
    #[inline]
    pub fn phy_11b(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11b(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_11g(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11g(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_11n(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_11n(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn phy_lr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_phy_lr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_mesh_child(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_mesh_child(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        phy_11b: u32,
        phy_11g: u32,
        phy_11n: u32,
        phy_lr: u32,
        is_mesh_child: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let phy_11b: u32 = unsafe { ::core::mem::transmute(phy_11b) };
            phy_11b as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let phy_11g: u32 = unsafe { ::core::mem::transmute(phy_11g) };
            phy_11g as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let phy_11n: u32 = unsafe { ::core::mem::transmute(phy_11n) };
            phy_11n as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let phy_lr: u32 = unsafe { ::core::mem::transmute(phy_lr) };
            phy_lr as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_mesh_child: u32 = unsafe { ::core::mem::transmute(is_mesh_child) };
            is_mesh_child as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " @brief List of stations associated with the ESP32 Soft-AP"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_sta_list_t {
    #[doc = "< station list"]
    pub sta: [wifi_sta_info_t; 10usize],
    #[doc = "< number of stations in the list (other entries are invalid)"]
    pub num: c_types::c_int,
}
#[doc = "< all configuration will store in both memory and flash"]
pub const wifi_storage_t_WIFI_STORAGE_FLASH: wifi_storage_t = 0;
#[doc = "< all configuration will only store in the memory"]
pub const wifi_storage_t_WIFI_STORAGE_RAM: wifi_storage_t = 1;
pub type wifi_storage_t = c_types::c_uint;
pub const wifi_vendor_ie_type_t_WIFI_VND_IE_TYPE_BEACON: wifi_vendor_ie_type_t = 0;
pub const wifi_vendor_ie_type_t_WIFI_VND_IE_TYPE_PROBE_REQ: wifi_vendor_ie_type_t = 1;
pub const wifi_vendor_ie_type_t_WIFI_VND_IE_TYPE_PROBE_RESP: wifi_vendor_ie_type_t = 2;
pub const wifi_vendor_ie_type_t_WIFI_VND_IE_TYPE_ASSOC_REQ: wifi_vendor_ie_type_t = 3;
pub const wifi_vendor_ie_type_t_WIFI_VND_IE_TYPE_ASSOC_RESP: wifi_vendor_ie_type_t = 4;
#[doc = " @brief     Vendor Information Element type"]
#[doc = ""]
#[doc = " Determines the frame type that the IE will be associated with."]
pub type wifi_vendor_ie_type_t = c_types::c_uint;
pub const wifi_vendor_ie_id_t_WIFI_VND_IE_ID_0: wifi_vendor_ie_id_t = 0;
pub const wifi_vendor_ie_id_t_WIFI_VND_IE_ID_1: wifi_vendor_ie_id_t = 1;
#[doc = " @brief     Vendor Information Element index"]
#[doc = ""]
#[doc = " Each IE type can have up to two associated vendor ID elements."]
pub type wifi_vendor_ie_id_t = c_types::c_uint;
#[doc = " @brief Vendor Information Element header"]
#[doc = ""]
#[doc = " The first bytes of the Information Element will match this header. Payload follows."]
#[repr(C)]
#[derive(Debug, Default)]
pub struct vendor_ie_data_t {
    #[doc = "< Should be set to WIFI_VENDOR_IE_ELEMENT_ID (0xDD)"]
    pub element_id: u8,
    #[doc = "< Length of all bytes in the element data following this field. Minimum 4."]
    pub length: u8,
    #[doc = "< Vendor identifier (OUI)."]
    pub vendor_oui: [u8; 3usize],
    #[doc = "< Vendor-specific OUI type."]
    pub vendor_oui_type: u8,
    #[doc = "< Payload. Length is equal to value in 'length' field, minus 4."]
    pub payload: __IncompleteArrayField<u8>,
}
#[doc = " @brief Received packet radio metadata header, this is the common header at the beginning of all promiscuous mode RX callback buffers"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wifi_pkt_rx_ctrl_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 48usize]>,
}
impl Default for wifi_pkt_rx_ctrl_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl wifi_pkt_rx_ctrl_t {
    #[inline]
    pub fn rssi(&self) -> c_types::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_rssi(&mut self, val: c_types::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn rate(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rate(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_mode(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sig_mode(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mcs(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_mcs(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn cwb(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cwb(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn smoothing(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_smoothing(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn not_sounding(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_not_sounding(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn aggregation(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(59usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aggregation(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(59usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stbc(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(60usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_stbc(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(60usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fec_coding(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fec_coding(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sgi(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sgi(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ampdu_cnt(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(72usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ampdu_cnt(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(72usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn channel(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(80usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_channel(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(80usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn secondary_channel(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(84usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_secondary_channel(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(84usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn timestamp(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(96usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_timestamp(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(96usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn noise_floor(&self) -> c_types::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(160usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_noise_floor(&mut self, val: c_types::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(160usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ant(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(255usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ant(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(255usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_len(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(352usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_sig_len(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(352usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_state(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(376usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_rx_state(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(376usize, 8u8, val as u64)
        }
    }
}
#[doc = " @brief Payload passed to 'buf' parameter of promiscuous mode RX callback."]
#[repr(C)]
#[derive(Debug)]
pub struct wifi_promiscuous_pkt_t {
    #[doc = "< metadata header"]
    pub rx_ctrl: wifi_pkt_rx_ctrl_t,
    #[doc = "< Data or management payload. Length of payload is described by rx_ctrl.sig_len. Type of content determined by packet type argument of callback."]
    pub payload: __IncompleteArrayField<u8>,
}
impl Default for wifi_promiscuous_pkt_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< Management frame, indicates 'buf' argument is wifi_promiscuous_pkt_t"]
pub const wifi_promiscuous_pkt_type_t_WIFI_PKT_MGMT: wifi_promiscuous_pkt_type_t = 0;
#[doc = "< Control frame, indicates 'buf' argument is wifi_promiscuous_pkt_t"]
pub const wifi_promiscuous_pkt_type_t_WIFI_PKT_CTRL: wifi_promiscuous_pkt_type_t = 1;
#[doc = "< Data frame, indiciates 'buf' argument is wifi_promiscuous_pkt_t"]
pub const wifi_promiscuous_pkt_type_t_WIFI_PKT_DATA: wifi_promiscuous_pkt_type_t = 2;
#[doc = "< Other type, such as MIMO etc. 'buf' argument is wifi_promiscuous_pkt_t but the payload is zero length."]
pub const wifi_promiscuous_pkt_type_t_WIFI_PKT_MISC: wifi_promiscuous_pkt_type_t = 3;
#[doc = " @brief Promiscuous frame type"]
#[doc = ""]
#[doc = " Passed to promiscuous mode RX callback to indicate the type of parameter in the buffer."]
#[doc = ""]
pub type wifi_promiscuous_pkt_type_t = c_types::c_uint;
#[doc = " @brief Mask for filtering different packet types in promiscuous mode."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_promiscuous_filter_t {
    #[doc = "< OR of one or more filter values WIFI_PROMIS_FILTER_*"]
    pub filter_mask: u32,
}
#[doc = " @brief Channel state information(CSI) configuration type"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_csi_config_t {
    #[doc = "< enable to receive legacy long training field(lltf) data. Default enabled"]
    pub lltf_en: bool,
    #[doc = "< enable to receive HT long training field(htltf) data. Default enabled"]
    pub htltf_en: bool,
    #[doc = "< enable to receive space time block code HT long training field(stbc-htltf2) data. Default enabled"]
    pub stbc_htltf2_en: bool,
    #[doc = "< enable to generate htlft data by averaging lltf and ht_ltf data when receiving HT packet. Otherwise, use ht_ltf data directly. Default enabled"]
    pub ltf_merge_en: bool,
    #[doc = "< enable to turn on channel filter to smooth adjacent sub-carrier. Disable it to keep independence of adjacent sub-carrier. Default enabled"]
    pub channel_filter_en: bool,
    #[doc = "< manually scale the CSI data by left shifting or automatically scale the CSI data. If set true, please set the shift bits. false: automatically. true: manually. Default false"]
    pub manu_scale: bool,
    #[doc = "< manually left shift bits of the scale of the CSI data. The range of the left shift bits is 0~15"]
    pub shift: u8,
}
#[doc = " @brief CSI data type"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_csi_info_t {
    #[doc = "< received packet radio metadata header of the CSI data"]
    pub rx_ctrl: wifi_pkt_rx_ctrl_t,
    #[doc = "< source MAC address of the CSI data"]
    pub mac: [u8; 6usize],
    #[doc = "< first four bytes of the CSI data is invalid or not"]
    pub first_word_invalid: bool,
    #[doc = "< buffer of CSI data"]
    pub buf: *mut i8,
    #[doc = "< length of CSI data"]
    pub len: u16,
}
impl Default for wifi_csi_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief WiFi GPIO configuration for antenna selection"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_ant_gpio_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl wifi_ant_gpio_t {
    #[inline]
    pub fn gpio_select(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_gpio_select(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gpio_num(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_gpio_num(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(gpio_select: u8, gpio_num: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let gpio_select: u8 = unsafe { ::core::mem::transmute(gpio_select) };
            gpio_select as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let gpio_num: u8 = unsafe { ::core::mem::transmute(gpio_num) };
            gpio_num as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " @brief WiFi GPIOs configuration for antenna selection"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_ant_gpio_config_t {
    #[doc = "< The configurations of GPIOs that connect to external antenna switch"]
    pub gpio_cfg: [wifi_ant_gpio_t; 4usize],
}
#[doc = "< Enable WiFi antenna 0 only"]
pub const wifi_ant_mode_t_WIFI_ANT_MODE_ANT0: wifi_ant_mode_t = 0;
#[doc = "< Enable WiFi antenna 1 only"]
pub const wifi_ant_mode_t_WIFI_ANT_MODE_ANT1: wifi_ant_mode_t = 1;
#[doc = "< Enable WiFi antenna 0 and 1, automatically select an antenna"]
pub const wifi_ant_mode_t_WIFI_ANT_MODE_AUTO: wifi_ant_mode_t = 2;
#[doc = "< Invalid WiFi enabled antenna"]
pub const wifi_ant_mode_t_WIFI_ANT_MODE_MAX: wifi_ant_mode_t = 3;
#[doc = " @brief WiFi antenna mode"]
#[doc = ""]
pub type wifi_ant_mode_t = c_types::c_uint;
#[doc = " @brief WiFi antenna configuration"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_ant_config_t {
    #[doc = "< WiFi antenna mode for receiving"]
    pub rx_ant_mode: wifi_ant_mode_t,
    #[doc = "< Default antenna mode for receiving, it's ignored if rx_ant_mode is not WIFI_ANT_MODE_AUTO"]
    pub rx_ant_default: wifi_ant_t,
    #[doc = "< WiFi antenna mode for transmission, it can be set to WIFI_ANT_MODE_AUTO only if rx_ant_mode is set to WIFI_ANT_MODE_AUTO"]
    pub tx_ant_mode: wifi_ant_mode_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl Default for wifi_ant_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl wifi_ant_config_t {
    #[inline]
    pub fn enabled_ant0(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_enabled_ant0(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn enabled_ant1(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_enabled_ant1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enabled_ant0: u8,
        enabled_ant1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let enabled_ant0: u8 = unsafe { ::core::mem::transmute(enabled_ant0) };
            enabled_ant0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let enabled_ant1: u8 = unsafe { ::core::mem::transmute(enabled_ant1) };
            enabled_ant1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " @brief     The Rx callback function of Action Tx operations"]
#[doc = ""]
#[doc = " @param     hdr pointer to the IEEE 802.11 Header structure"]
#[doc = " @param     payload pointer to the Payload following 802.11 Header"]
#[doc = " @param     len length of the Payload"]
#[doc = " @param     channel channel number the frame is received on"]
#[doc = ""]
pub type wifi_action_rx_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        hdr: *mut u8,
        payload: *mut u8,
        len: size_t,
        channel: u8,
    ) -> c_types::c_int,
>;
#[doc = " @brief Action Frame Tx Request"]
#[doc = ""]
#[doc = ""]
#[repr(C)]
#[derive(Debug)]
pub struct wifi_action_tx_req_t {
    #[doc = "< WiFi interface to send request to"]
    pub ifx: wifi_interface_t,
    #[doc = "< Destination MAC address"]
    pub dest_mac: [u8; 6usize],
    #[doc = "< Indicates no ack required"]
    pub no_ack: bool,
    #[doc = "< Rx Callback to receive any response"]
    pub rx_cb: wifi_action_rx_cb_t,
    #[doc = "< Length of the appended Data"]
    pub data_len: u32,
    #[doc = "< Appended Data payload"]
    pub data: __IncompleteArrayField<u8>,
}
impl Default for wifi_action_tx_req_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief FTM Initiator configuration"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_ftm_initiator_cfg_t {
    #[doc = "< MAC address of the FTM Responder"]
    pub resp_mac: [u8; 6usize],
    #[doc = "< Primary channel of the FTM Responder"]
    pub channel: u8,
    #[doc = "< No. of FTM frames requested in terms of 4 or 8 bursts (allowed values - 0(No pref), 16, 24, 32, 64)"]
    pub frm_count: u8,
    #[doc = "< Requested time period between consecutive FTM bursts in 100's of milliseconds (0 - No pref)"]
    pub burst_period: u16,
}
#[doc = "< 1 Mbps with long preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_1M_L: wifi_phy_rate_t = 0;
#[doc = "< 2 Mbps with long preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_2M_L: wifi_phy_rate_t = 1;
#[doc = "< 5.5 Mbps with long preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_5M_L: wifi_phy_rate_t = 2;
#[doc = "< 11 Mbps with long preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_11M_L: wifi_phy_rate_t = 3;
#[doc = "< 2 Mbps with short preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_2M_S: wifi_phy_rate_t = 5;
#[doc = "< 5.5 Mbps with short preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_5M_S: wifi_phy_rate_t = 6;
#[doc = "< 11 Mbps with short preamble"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_11M_S: wifi_phy_rate_t = 7;
#[doc = "< 48 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_48M: wifi_phy_rate_t = 8;
#[doc = "< 24 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_24M: wifi_phy_rate_t = 9;
#[doc = "< 12 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_12M: wifi_phy_rate_t = 10;
#[doc = "< 6 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_6M: wifi_phy_rate_t = 11;
#[doc = "< 54 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_54M: wifi_phy_rate_t = 12;
#[doc = "< 36 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_36M: wifi_phy_rate_t = 13;
#[doc = "< 18 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_18M: wifi_phy_rate_t = 14;
#[doc = "< 9 Mbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_9M: wifi_phy_rate_t = 15;
#[doc = "< MCS0 with long GI, 6.5 Mbps for 20MHz, 13.5 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS0_LGI: wifi_phy_rate_t = 16;
#[doc = "< MCS1 with long GI, 13 Mbps for 20MHz, 27 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS1_LGI: wifi_phy_rate_t = 17;
#[doc = "< MCS2 with long GI, 19.5 Mbps for 20MHz, 40.5 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS2_LGI: wifi_phy_rate_t = 18;
#[doc = "< MCS3 with long GI, 26 Mbps for 20MHz, 54 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS3_LGI: wifi_phy_rate_t = 19;
#[doc = "< MCS4 with long GI, 39 Mbps for 20MHz, 81 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS4_LGI: wifi_phy_rate_t = 20;
#[doc = "< MCS5 with long GI, 52 Mbps for 20MHz, 108 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS5_LGI: wifi_phy_rate_t = 21;
#[doc = "< MCS6 with long GI, 58.5 Mbps for 20MHz, 121.5 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS6_LGI: wifi_phy_rate_t = 22;
#[doc = "< MCS7 with long GI, 65 Mbps for 20MHz, 135 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS7_LGI: wifi_phy_rate_t = 23;
#[doc = "< MCS0 with short GI, 7.2 Mbps for 20MHz, 15 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS0_SGI: wifi_phy_rate_t = 24;
#[doc = "< MCS1 with short GI, 14.4 Mbps for 20MHz, 30 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS1_SGI: wifi_phy_rate_t = 25;
#[doc = "< MCS2 with short GI, 21.7 Mbps for 20MHz, 45 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS2_SGI: wifi_phy_rate_t = 26;
#[doc = "< MCS3 with short GI, 28.9 Mbps for 20MHz, 60 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS3_SGI: wifi_phy_rate_t = 27;
#[doc = "< MCS4 with short GI, 43.3 Mbps for 20MHz, 90 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS4_SGI: wifi_phy_rate_t = 28;
#[doc = "< MCS5 with short GI, 57.8 Mbps for 20MHz, 120 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS5_SGI: wifi_phy_rate_t = 29;
#[doc = "< MCS6 with short GI, 65 Mbps for 20MHz, 135 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS6_SGI: wifi_phy_rate_t = 30;
#[doc = "< MCS7 with short GI, 72.2 Mbps for 20MHz, 150 Mbps for 40MHz"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MCS7_SGI: wifi_phy_rate_t = 31;
#[doc = "< 250 Kbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_LORA_250K: wifi_phy_rate_t = 41;
#[doc = "< 500 Kbps"]
pub const wifi_phy_rate_t_WIFI_PHY_RATE_LORA_500K: wifi_phy_rate_t = 42;
pub const wifi_phy_rate_t_WIFI_PHY_RATE_MAX: wifi_phy_rate_t = 43;
#[doc = " @brief WiFi PHY rate encodings"]
#[doc = ""]
pub type wifi_phy_rate_t = c_types::c_uint;
#[doc = "< ESP32 WiFi ready"]
pub const wifi_event_t_WIFI_EVENT_WIFI_READY: wifi_event_t = 0;
#[doc = "< ESP32 finish scanning AP"]
pub const wifi_event_t_WIFI_EVENT_SCAN_DONE: wifi_event_t = 1;
#[doc = "< ESP32 station start"]
pub const wifi_event_t_WIFI_EVENT_STA_START: wifi_event_t = 2;
#[doc = "< ESP32 station stop"]
pub const wifi_event_t_WIFI_EVENT_STA_STOP: wifi_event_t = 3;
#[doc = "< ESP32 station connected to AP"]
pub const wifi_event_t_WIFI_EVENT_STA_CONNECTED: wifi_event_t = 4;
#[doc = "< ESP32 station disconnected from AP"]
pub const wifi_event_t_WIFI_EVENT_STA_DISCONNECTED: wifi_event_t = 5;
#[doc = "< the auth mode of AP connected by ESP32 station changed"]
pub const wifi_event_t_WIFI_EVENT_STA_AUTHMODE_CHANGE: wifi_event_t = 6;
#[doc = "< ESP32 station wps succeeds in enrollee mode"]
pub const wifi_event_t_WIFI_EVENT_STA_WPS_ER_SUCCESS: wifi_event_t = 7;
#[doc = "< ESP32 station wps fails in enrollee mode"]
pub const wifi_event_t_WIFI_EVENT_STA_WPS_ER_FAILED: wifi_event_t = 8;
#[doc = "< ESP32 station wps timeout in enrollee mode"]
pub const wifi_event_t_WIFI_EVENT_STA_WPS_ER_TIMEOUT: wifi_event_t = 9;
#[doc = "< ESP32 station wps pin code in enrollee mode"]
pub const wifi_event_t_WIFI_EVENT_STA_WPS_ER_PIN: wifi_event_t = 10;
#[doc = "< ESP32 station wps overlap in enrollee mode"]
pub const wifi_event_t_WIFI_EVENT_STA_WPS_ER_PBC_OVERLAP: wifi_event_t = 11;
#[doc = "< ESP32 soft-AP start"]
pub const wifi_event_t_WIFI_EVENT_AP_START: wifi_event_t = 12;
#[doc = "< ESP32 soft-AP stop"]
pub const wifi_event_t_WIFI_EVENT_AP_STOP: wifi_event_t = 13;
#[doc = "< a station connected to ESP32 soft-AP"]
pub const wifi_event_t_WIFI_EVENT_AP_STACONNECTED: wifi_event_t = 14;
#[doc = "< a station disconnected from ESP32 soft-AP"]
pub const wifi_event_t_WIFI_EVENT_AP_STADISCONNECTED: wifi_event_t = 15;
#[doc = "< Receive probe request packet in soft-AP interface"]
pub const wifi_event_t_WIFI_EVENT_AP_PROBEREQRECVED: wifi_event_t = 16;
#[doc = "< Receive report of FTM procedure"]
pub const wifi_event_t_WIFI_EVENT_FTM_REPORT: wifi_event_t = 17;
#[doc = "< AP's RSSI crossed configured threshold"]
pub const wifi_event_t_WIFI_EVENT_STA_BSS_RSSI_LOW: wifi_event_t = 18;
#[doc = "< Status indication of Action Tx operation"]
pub const wifi_event_t_WIFI_EVENT_ACTION_TX_STATUS: wifi_event_t = 19;
#[doc = "< Remain-on-Channel operation complete"]
pub const wifi_event_t_WIFI_EVENT_ROC_DONE: wifi_event_t = 20;
#[doc = "< ESP32 station beacon timeout"]
pub const wifi_event_t_WIFI_EVENT_STA_BEACON_TIMEOUT: wifi_event_t = 21;
#[doc = "< Invalid WiFi event ID"]
pub const wifi_event_t_WIFI_EVENT_MAX: wifi_event_t = 22;
#[doc = " WiFi event declarations"]
pub type wifi_event_t = c_types::c_uint;
extern "C" {
    pub static mut WIFI_EVENT: esp_event_base_t;
}
#[doc = " Argument structure for WIFI_EVENT_SCAN_DONE event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_sta_scan_done_t {
    #[doc = "< status of scanning APs: 0 — success, 1 - failure"]
    pub status: u32,
    #[doc = "< number of scan results"]
    pub number: u8,
    #[doc = "< scan sequence number, used for block scan"]
    pub scan_id: u8,
}
#[doc = " Argument structure for WIFI_EVENT_STA_CONNECTED event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_sta_connected_t {
    #[doc = "< SSID of connected AP"]
    pub ssid: [u8; 32usize],
    #[doc = "< SSID length of connected AP"]
    pub ssid_len: u8,
    #[doc = "< BSSID of connected AP"]
    pub bssid: [u8; 6usize],
    #[doc = "< channel of connected AP"]
    pub channel: u8,
    #[doc = "< authentication mode used by AP"]
    pub authmode: wifi_auth_mode_t,
}
impl Default for wifi_event_sta_connected_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Argument structure for WIFI_EVENT_STA_DISCONNECTED event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_sta_disconnected_t {
    #[doc = "< SSID of disconnected AP"]
    pub ssid: [u8; 32usize],
    #[doc = "< SSID length of disconnected AP"]
    pub ssid_len: u8,
    #[doc = "< BSSID of disconnected AP"]
    pub bssid: [u8; 6usize],
    #[doc = "< reason of disconnection"]
    pub reason: u8,
}
#[doc = " Argument structure for WIFI_EVENT_STA_AUTHMODE_CHANGE event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_sta_authmode_change_t {
    #[doc = "< the old auth mode of AP"]
    pub old_mode: wifi_auth_mode_t,
    #[doc = "< the new auth mode of AP"]
    pub new_mode: wifi_auth_mode_t,
}
impl Default for wifi_event_sta_authmode_change_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_PIN event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_sta_wps_er_pin_t {
    #[doc = "< PIN code of station in enrollee mode"]
    pub pin_code: [u8; 8usize],
}
#[doc = "< ESP32 WPS normal fail reason"]
pub const wifi_event_sta_wps_fail_reason_t_WPS_FAIL_REASON_NORMAL:
    wifi_event_sta_wps_fail_reason_t = 0;
#[doc = "< ESP32 WPS receive M2D frame"]
pub const wifi_event_sta_wps_fail_reason_t_WPS_FAIL_REASON_RECV_M2D:
    wifi_event_sta_wps_fail_reason_t = 1;
pub const wifi_event_sta_wps_fail_reason_t_WPS_FAIL_REASON_MAX: wifi_event_sta_wps_fail_reason_t =
    2;
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_FAILED event"]
pub type wifi_event_sta_wps_fail_reason_t = c_types::c_uint;
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_SUCCESS event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_sta_wps_er_success_t {
    #[doc = "< Number of AP credentials received"]
    pub ap_cred_cnt: u8,
    #[doc = "< All AP credentials received from WPS handshake"]
    pub ap_cred: [wifi_event_sta_wps_er_success_t__bindgen_ty_1; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_sta_wps_er_success_t__bindgen_ty_1 {
    #[doc = "< SSID of AP"]
    pub ssid: [u8; 32usize],
    #[doc = "< Passphrase for the AP"]
    pub passphrase: [u8; 64usize],
}
impl Default for wifi_event_sta_wps_er_success_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for wifi_event_sta_wps_er_success_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Argument structure for WIFI_EVENT_AP_STACONNECTED event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_ap_staconnected_t {
    #[doc = "< MAC address of the station connected to ESP32 soft-AP"]
    pub mac: [u8; 6usize],
    #[doc = "< the aid that ESP32 soft-AP gives to the station connected to"]
    pub aid: u8,
    #[doc = "< flag to identify mesh child"]
    pub is_mesh_child: bool,
}
#[doc = " Argument structure for WIFI_EVENT_AP_STADISCONNECTED event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_ap_stadisconnected_t {
    #[doc = "< MAC address of the station disconnects to ESP32 soft-AP"]
    pub mac: [u8; 6usize],
    #[doc = "< the aid that ESP32 soft-AP gave to the station disconnects to"]
    pub aid: u8,
    #[doc = "< flag to identify mesh child"]
    pub is_mesh_child: bool,
}
#[doc = " Argument structure for WIFI_EVENT_AP_PROBEREQRECVED event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_ap_probe_req_rx_t {
    #[doc = "< Received probe request signal strength"]
    pub rssi: c_types::c_int,
    #[doc = "< MAC address of the station which send probe request"]
    pub mac: [u8; 6usize],
}
#[doc = " Argument structure for WIFI_EVENT_STA_BSS_RSSI_LOW event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_bss_rssi_low_t {
    #[doc = "< RSSI value of bss"]
    pub rssi: i32,
}
#[doc = "< FTM exchange is successful"]
pub const wifi_ftm_status_t_FTM_STATUS_SUCCESS: wifi_ftm_status_t = 0;
#[doc = "< Peer does not support FTM"]
pub const wifi_ftm_status_t_FTM_STATUS_UNSUPPORTED: wifi_ftm_status_t = 1;
#[doc = "< Peer rejected FTM configuration in FTM Request"]
pub const wifi_ftm_status_t_FTM_STATUS_CONF_REJECTED: wifi_ftm_status_t = 2;
#[doc = "< Peer did not respond to FTM Requests"]
pub const wifi_ftm_status_t_FTM_STATUS_NO_RESPONSE: wifi_ftm_status_t = 3;
#[doc = "< Unknown error during FTM exchange"]
pub const wifi_ftm_status_t_FTM_STATUS_FAIL: wifi_ftm_status_t = 4;
#[doc = " @brief FTM operation status types"]
#[doc = ""]
pub type wifi_ftm_status_t = c_types::c_uint;
#[doc = " Argument structure for"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_ftm_report_entry_t {
    #[doc = "< Dialog Token of the FTM frame"]
    pub dlog_token: u8,
    #[doc = "< RSSI of the FTM frame received"]
    pub rssi: i8,
    #[doc = "< Round Trip Time in pSec with a peer"]
    pub rtt: u32,
    #[doc = "< Time of departure of FTM frame from FTM Responder in pSec"]
    pub t1: u64,
    #[doc = "< Time of arrival of FTM frame at FTM Initiator in pSec"]
    pub t2: u64,
    #[doc = "< Time of departure of ACK from FTM Initiator in pSec"]
    pub t3: u64,
    #[doc = "< Time of arrival of ACK at FTM Responder in pSec"]
    pub t4: u64,
}
#[doc = " Argument structure for WIFI_EVENT_FTM_REPORT event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_ftm_report_t {
    #[doc = "< MAC address of the FTM Peer"]
    pub peer_mac: [u8; 6usize],
    #[doc = "< Status of the FTM operation"]
    pub status: wifi_ftm_status_t,
    #[doc = "< Raw average Round-Trip-Time with peer in Nano-Seconds"]
    pub rtt_raw: u32,
    #[doc = "< Estimated Round-Trip-Time with peer in Nano-Seconds"]
    pub rtt_est: u32,
    #[doc = "< Estimated one-way distance in Centi-Meters"]
    pub dist_est: u32,
    #[doc = "< Pointer to FTM Report with multiple entries, should be freed after use"]
    pub ftm_report_data: *mut wifi_ftm_report_entry_t,
    #[doc = "< Number of entries in the FTM Report data"]
    pub ftm_report_num_entries: u8,
}
impl Default for wifi_event_ftm_report_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Argument structure for WIFI_EVENT_ACTION_TX_STATUS event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_event_action_tx_status_t {
    #[doc = "< WiFi interface to send request to"]
    pub ifx: wifi_interface_t,
    #[doc = "< Context to identify the request"]
    pub context: u32,
    #[doc = "< Destination MAC address"]
    pub da: [u8; 6usize],
    #[doc = "< Status of the operation"]
    pub status: u8,
}
impl Default for wifi_event_action_tx_status_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Argument structure for WIFI_EVENT_ROC_DONE event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_event_roc_done_t {
    #[doc = "< Context to identify the request"]
    pub context: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_ip6_addr {
    pub addr: [u32; 4usize],
    pub zone: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_ip4_addr {
    pub addr: u32,
}
pub type esp_ip4_addr_t = esp_ip4_addr;
pub type esp_ip6_addr_t = esp_ip6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ip_addr {
    pub u_addr: _ip_addr__bindgen_ty_1,
    pub type_: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ip_addr__bindgen_ty_1 {
    pub ip6: esp_ip6_addr_t,
    pub ip4: esp_ip4_addr_t,
}
impl Default for _ip_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _ip_addr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type esp_ip_addr_t = _ip_addr;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_UNKNOWN: esp_ip6_addr_type_t = 0;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_GLOBAL: esp_ip6_addr_type_t = 1;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_LINK_LOCAL: esp_ip6_addr_type_t = 2;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_SITE_LOCAL: esp_ip6_addr_type_t = 3;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_UNIQUE_LOCAL: esp_ip6_addr_type_t = 4;
pub const esp_ip6_addr_type_t_ESP_IP6_ADDR_IS_IPV4_MAPPED_IPV6: esp_ip6_addr_type_t = 5;
pub type esp_ip6_addr_type_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief  Get the IPv6 address type"]
    #[doc = ""]
    #[doc = " @param[in]  ip6_addr IPv6 type"]
    #[doc = ""]
    #[doc = " @return IPv6 type in form of enum esp_ip6_addr_type_t"]
    pub fn esp_netif_ip6_get_addr_type(ip6_addr: *mut esp_ip6_addr_t) -> esp_ip6_addr_type_t;
}
#[doc = " @brief Type of esp_netif_object server"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_obj {
    _unused: [u8; 0],
}
pub type esp_netif_t = esp_netif_obj;
#[doc = "< DNS main server address"]
pub const esp_netif_dns_type_t_ESP_NETIF_DNS_MAIN: esp_netif_dns_type_t = 0;
#[doc = "< DNS backup server address (Wi-Fi STA and Ethernet only)"]
pub const esp_netif_dns_type_t_ESP_NETIF_DNS_BACKUP: esp_netif_dns_type_t = 1;
#[doc = "< DNS fallback server address (Wi-Fi STA and Ethernet only)"]
pub const esp_netif_dns_type_t_ESP_NETIF_DNS_FALLBACK: esp_netif_dns_type_t = 2;
pub const esp_netif_dns_type_t_ESP_NETIF_DNS_MAX: esp_netif_dns_type_t = 3;
#[doc = " @brief Type of DNS server"]
pub type esp_netif_dns_type_t = c_types::c_uint;
#[doc = " @brief DNS server info"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct esp_netif_dns_info_t {
    #[doc = "< IPV4 address of DNS server"]
    pub ip: esp_ip_addr_t,
}
impl Default for esp_netif_dns_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< DHCP client/server is in initial state (not yet started)"]
pub const esp_netif_dhcp_status_t_ESP_NETIF_DHCP_INIT: esp_netif_dhcp_status_t = 0;
#[doc = "< DHCP client/server has been started"]
pub const esp_netif_dhcp_status_t_ESP_NETIF_DHCP_STARTED: esp_netif_dhcp_status_t = 1;
#[doc = "< DHCP client/server has been stopped"]
pub const esp_netif_dhcp_status_t_ESP_NETIF_DHCP_STOPPED: esp_netif_dhcp_status_t = 2;
pub const esp_netif_dhcp_status_t_ESP_NETIF_DHCP_STATUS_MAX: esp_netif_dhcp_status_t = 3;
#[doc = " @brief Status of DHCP client or DHCP server"]
pub type esp_netif_dhcp_status_t = c_types::c_uint;
pub const esp_netif_dhcp_option_mode_t_ESP_NETIF_OP_START: esp_netif_dhcp_option_mode_t = 0;
#[doc = "< Set option"]
pub const esp_netif_dhcp_option_mode_t_ESP_NETIF_OP_SET: esp_netif_dhcp_option_mode_t = 1;
#[doc = "< Get option"]
pub const esp_netif_dhcp_option_mode_t_ESP_NETIF_OP_GET: esp_netif_dhcp_option_mode_t = 2;
pub const esp_netif_dhcp_option_mode_t_ESP_NETIF_OP_MAX: esp_netif_dhcp_option_mode_t = 3;
#[doc = " @brief Mode for DHCP client or DHCP server option functions"]
pub type esp_netif_dhcp_option_mode_t = c_types::c_uint;
#[doc = "< Network mask"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_SUBNET_MASK: esp_netif_dhcp_option_id_t = 1;
#[doc = "< Domain name server"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_DOMAIN_NAME_SERVER: esp_netif_dhcp_option_id_t = 6;
#[doc = "< Solicitation router address"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_ROUTER_SOLICITATION_ADDRESS:
    esp_netif_dhcp_option_id_t = 32;
#[doc = "< Request specific IP address"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_REQUESTED_IP_ADDRESS: esp_netif_dhcp_option_id_t =
    50;
#[doc = "< Request IP address lease time"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_IP_ADDRESS_LEASE_TIME: esp_netif_dhcp_option_id_t =
    51;
#[doc = "< Request IP address retry counter"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_IP_REQUEST_RETRY_TIME: esp_netif_dhcp_option_id_t =
    52;
#[doc = "< Vendor Class Identifier of a DHCP client"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_VENDOR_CLASS_IDENTIFIER: esp_netif_dhcp_option_id_t =
    60;
#[doc = "< Vendor Specific Information of a DHCP server"]
pub const esp_netif_dhcp_option_id_t_ESP_NETIF_VENDOR_SPECIFIC_INFO: esp_netif_dhcp_option_id_t =
    43;
#[doc = " @brief Supported options for DHCP client or DHCP server"]
pub type esp_netif_dhcp_option_id_t = c_types::c_uint;
#[doc = "< station got IP from connected AP"]
pub const ip_event_t_IP_EVENT_STA_GOT_IP: ip_event_t = 0;
#[doc = "< station lost IP and the IP is reset to 0"]
pub const ip_event_t_IP_EVENT_STA_LOST_IP: ip_event_t = 1;
#[doc = "< soft-AP assign an IP to a connected station"]
pub const ip_event_t_IP_EVENT_AP_STAIPASSIGNED: ip_event_t = 2;
#[doc = "< station or ap or ethernet interface v6IP addr is preferred"]
pub const ip_event_t_IP_EVENT_GOT_IP6: ip_event_t = 3;
#[doc = "< ethernet got IP from connected AP"]
pub const ip_event_t_IP_EVENT_ETH_GOT_IP: ip_event_t = 4;
#[doc = "< ethernet lost IP and the IP is reset to 0"]
pub const ip_event_t_IP_EVENT_ETH_LOST_IP: ip_event_t = 5;
#[doc = "< PPP interface got IP"]
pub const ip_event_t_IP_EVENT_PPP_GOT_IP: ip_event_t = 6;
#[doc = "< PPP interface lost IP"]
pub const ip_event_t_IP_EVENT_PPP_LOST_IP: ip_event_t = 7;
#[doc = " IP event declarations"]
pub type ip_event_t = c_types::c_uint;
extern "C" {
    pub static mut IP_EVENT: esp_event_base_t;
}
#[doc = " Event structure for IP_EVENT_STA_GOT_IP, IP_EVENT_ETH_GOT_IP events"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_netif_ip_info_t {
    #[doc = "< Interface IPV4 address"]
    pub ip: esp_ip4_addr_t,
    #[doc = "< Interface IPV4 netmask"]
    pub netmask: esp_ip4_addr_t,
    #[doc = "< Interface IPV4 gateway address"]
    pub gw: esp_ip4_addr_t,
}
#[doc = " @brief IPV6 IP address information"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_netif_ip6_info_t {
    #[doc = "< Interface IPV6 address"]
    pub ip: esp_ip6_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_event_got_ip_t {
    #[doc = "< Interface index for which the event is received (left for legacy compilation)"]
    pub if_index: c_types::c_int,
    #[doc = "< Pointer to corresponding esp-netif object"]
    pub esp_netif: *mut esp_netif_t,
    #[doc = "< IP address, netmask, gatway IP address"]
    pub ip_info: esp_netif_ip_info_t,
    #[doc = "< Whether the assigned IP has changed or not"]
    pub ip_changed: bool,
}
impl Default for ip_event_got_ip_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Event structure for IP_EVENT_GOT_IP6 event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_event_got_ip6_t {
    #[doc = "< Interface index for which the event is received (left for legacy compilation)"]
    pub if_index: c_types::c_int,
    #[doc = "< Pointer to corresponding esp-netif object"]
    pub esp_netif: *mut esp_netif_t,
    #[doc = "< IPv6 address of the interface"]
    pub ip6_info: esp_netif_ip6_info_t,
    #[doc = "< IPv6 address index"]
    pub ip_index: c_types::c_int,
}
impl Default for ip_event_got_ip6_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Event structure for ADD_IP6 event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_event_add_ip6_t {
    #[doc = "< The address to be added to the interface"]
    pub addr: esp_ip6_addr_t,
    #[doc = "< The default preference of the address"]
    pub preferred: bool,
}
#[doc = " Event structure for IP_EVENT_AP_STAIPASSIGNED event"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_event_ap_staipassigned_t {
    #[doc = "< IP address which was assigned to the station"]
    pub ip: esp_ip4_addr_t,
}
pub const esp_netif_flags_ESP_NETIF_DHCP_CLIENT: esp_netif_flags = 1;
pub const esp_netif_flags_ESP_NETIF_DHCP_SERVER: esp_netif_flags = 2;
pub const esp_netif_flags_ESP_NETIF_FLAG_AUTOUP: esp_netif_flags = 4;
pub const esp_netif_flags_ESP_NETIF_FLAG_GARP: esp_netif_flags = 8;
pub const esp_netif_flags_ESP_NETIF_FLAG_EVENT_IP_MODIFIED: esp_netif_flags = 16;
pub const esp_netif_flags_ESP_NETIF_FLAG_IS_PPP: esp_netif_flags = 32;
pub const esp_netif_flags_ESP_NETIF_FLAG_IS_SLIP: esp_netif_flags = 64;
pub type esp_netif_flags = c_types::c_uint;
pub use self::esp_netif_flags as esp_netif_flags_t;
pub const esp_netif_ip_event_type_ESP_NETIF_IP_EVENT_GOT_IP: esp_netif_ip_event_type = 1;
pub const esp_netif_ip_event_type_ESP_NETIF_IP_EVENT_LOST_IP: esp_netif_ip_event_type = 2;
pub type esp_netif_ip_event_type = c_types::c_uint;
pub use self::esp_netif_ip_event_type as esp_netif_ip_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_inherent_config {
    #[doc = "< flags that define esp-netif behavior"]
    pub flags: esp_netif_flags_t,
    #[doc = "< initial mac address for this interface"]
    pub mac: [u8; 6usize],
    #[doc = "< initial ip address for this interface"]
    pub ip_info: *const esp_netif_ip_info_t,
    #[doc = "< event id to be raised when interface gets an IP"]
    pub get_ip_event: u32,
    #[doc = "< event id to be raised when interface losts its IP"]
    pub lost_ip_event: u32,
    #[doc = "< string identifier of the interface"]
    pub if_key: *const c_types::c_char,
    #[doc = "< textual description of the interface"]
    pub if_desc: *const c_types::c_char,
    #[doc = "< numeric priority of this interface to become a default"]
    #[doc = "routing if (if other netifs are up)."]
    #[doc = "A higher value of route_prio indicates"]
    #[doc = "a higher priority"]
    pub route_prio: c_types::c_int,
}
impl Default for esp_netif_inherent_config {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type esp_netif_inherent_config_t = esp_netif_inherent_config;
#[doc = " @brief  Generic esp_netif configuration"]
pub type esp_netif_config_t = esp_netif_config;
#[doc = " @brief  IO driver handle type"]
pub type esp_netif_iodriver_handle = *mut c_types::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_driver_base_s {
    pub post_attach: ::core::option::Option<
        unsafe extern "C" fn(netif: *mut esp_netif_t, h: esp_netif_iodriver_handle) -> esp_err_t,
    >,
    pub netif: *mut esp_netif_t,
}
impl Default for esp_netif_driver_base_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type esp_netif_driver_base_t = esp_netif_driver_base_s;
#[doc = " @brief  Specific IO driver configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_driver_ifconfig {
    pub handle: esp_netif_iodriver_handle,
    pub transmit: ::core::option::Option<
        unsafe extern "C" fn(
            h: *mut c_types::c_void,
            buffer: *mut c_types::c_void,
            len: size_t,
        ) -> esp_err_t,
    >,
    pub transmit_wrap: ::core::option::Option<
        unsafe extern "C" fn(
            h: *mut c_types::c_void,
            buffer: *mut c_types::c_void,
            len: size_t,
            netstack_buffer: *mut c_types::c_void,
        ) -> esp_err_t,
    >,
    pub driver_free_rx_buffer: ::core::option::Option<
        unsafe extern "C" fn(h: *mut c_types::c_void, buffer: *mut c_types::c_void),
    >,
}
impl Default for esp_netif_driver_ifconfig {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief  Specific IO driver configuration"]
pub type esp_netif_driver_ifconfig_t = esp_netif_driver_ifconfig;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_netstack_config {
    _unused: [u8; 0],
}
#[doc = " @brief  Specific L3 network stack configuration"]
pub type esp_netif_netstack_config_t = esp_netif_netstack_config;
#[doc = " @brief  Generic esp_netif configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_netif_config {
    pub base: *const esp_netif_inherent_config_t,
    pub driver: *const esp_netif_driver_ifconfig_t,
    pub stack: *const esp_netif_netstack_config_t,
}
impl Default for esp_netif_config {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief  ESP-NETIF Receive function type"]
pub type esp_netif_receive_t = ::core::option::Option<
    unsafe extern "C" fn(
        esp_netif: *mut esp_netif_t,
        buffer: *mut c_types::c_void,
        len: size_t,
        eb: *mut c_types::c_void,
    ) -> esp_err_t,
>;
extern "C" {
    pub static mut _g_esp_netif_netstack_default_eth: *const esp_netif_netstack_config_t;
}
extern "C" {
    pub static mut _g_esp_netif_netstack_default_wifi_sta: *const esp_netif_netstack_config_t;
}
extern "C" {
    pub static mut _g_esp_netif_netstack_default_wifi_ap: *const esp_netif_netstack_config_t;
}
extern "C" {
    pub static mut _g_esp_netif_netstack_default_ppp: *const esp_netif_netstack_config_t;
}
extern "C" {
    pub static mut _g_esp_netif_netstack_default_slip: *const esp_netif_netstack_config_t;
}
extern "C" {
    pub static _g_esp_netif_inherent_sta_config: esp_netif_inherent_config_t;
}
extern "C" {
    pub static _g_esp_netif_inherent_ap_config: esp_netif_inherent_config_t;
}
extern "C" {
    pub static _g_esp_netif_inherent_eth_config: esp_netif_inherent_config_t;
}
extern "C" {
    pub static _g_esp_netif_inherent_ppp_config: esp_netif_inherent_config_t;
}
extern "C" {
    pub static _g_esp_netif_inherent_slip_config: esp_netif_inherent_config_t;
}
extern "C" {
    pub static _g_esp_netif_soft_ap_ip: esp_netif_ip_info_t;
}
#[doc = "< Reduced Media Independent Interface"]
pub const eth_data_interface_t_EMAC_DATA_INTERFACE_RMII: eth_data_interface_t = 0;
#[doc = "< Media Independent Interface"]
pub const eth_data_interface_t_EMAC_DATA_INTERFACE_MII: eth_data_interface_t = 1;
#[doc = " @brief Ethernet interface"]
pub type eth_data_interface_t = c_types::c_uint;
#[doc = "< Ethernet link is up"]
pub const eth_link_t_ETH_LINK_UP: eth_link_t = 0;
#[doc = "< Ethernet link is down"]
pub const eth_link_t_ETH_LINK_DOWN: eth_link_t = 1;
#[doc = " @brief Ethernet link status"]
pub type eth_link_t = c_types::c_uint;
#[doc = "< Ethernet speed is 10Mbps"]
pub const eth_speed_t_ETH_SPEED_10M: eth_speed_t = 0;
#[doc = "< Ethernet speed is 100Mbps"]
pub const eth_speed_t_ETH_SPEED_100M: eth_speed_t = 1;
#[doc = "< Max speed mode (for checking purpose)"]
pub const eth_speed_t_ETH_SPEED_MAX: eth_speed_t = 2;
#[doc = " @brief Ethernet speed"]
pub type eth_speed_t = c_types::c_uint;
#[doc = "< Ethernet is in half duplex"]
pub const eth_duplex_t_ETH_DUPLEX_HALF: eth_duplex_t = 0;
#[doc = "< Ethernet is in full duplex"]
pub const eth_duplex_t_ETH_DUPLEX_FULL: eth_duplex_t = 1;
#[doc = " @brief Ethernet duplex mode"]
pub type eth_duplex_t = c_types::c_uint;
#[doc = "< Ethernet checksum calculate by software"]
pub const eth_checksum_t_ETH_CHECKSUM_SW: eth_checksum_t = 0;
#[doc = "< Ethernet checksum calculate by hardware"]
pub const eth_checksum_t_ETH_CHECKSUM_HW: eth_checksum_t = 1;
#[doc = " @brief Ethernet Checksum"]
pub type eth_checksum_t = c_types::c_uint;
#[doc = "< Lowlevel init done"]
pub const esp_eth_state_t_ETH_STATE_LLINIT: esp_eth_state_t = 0;
#[doc = "< Deinit done"]
pub const esp_eth_state_t_ETH_STATE_DEINIT: esp_eth_state_t = 1;
#[doc = "< Link status changed"]
pub const esp_eth_state_t_ETH_STATE_LINK: esp_eth_state_t = 2;
#[doc = "< Speed updated"]
pub const esp_eth_state_t_ETH_STATE_SPEED: esp_eth_state_t = 3;
#[doc = "< Duplex updated"]
pub const esp_eth_state_t_ETH_STATE_DUPLEX: esp_eth_state_t = 4;
#[doc = "< Pause ability updated"]
pub const esp_eth_state_t_ETH_STATE_PAUSE: esp_eth_state_t = 5;
#[doc = " @brief Ethernet driver state"]
pub type esp_eth_state_t = c_types::c_uint;
#[doc = "< Get MAC address"]
pub const esp_eth_io_cmd_t_ETH_CMD_G_MAC_ADDR: esp_eth_io_cmd_t = 0;
#[doc = "< Set MAC address"]
pub const esp_eth_io_cmd_t_ETH_CMD_S_MAC_ADDR: esp_eth_io_cmd_t = 1;
#[doc = "< Get PHY address"]
pub const esp_eth_io_cmd_t_ETH_CMD_G_PHY_ADDR: esp_eth_io_cmd_t = 2;
#[doc = "< Set PHY address"]
pub const esp_eth_io_cmd_t_ETH_CMD_S_PHY_ADDR: esp_eth_io_cmd_t = 3;
#[doc = "< Get Speed"]
pub const esp_eth_io_cmd_t_ETH_CMD_G_SPEED: esp_eth_io_cmd_t = 4;
#[doc = "< Set promiscuous mode"]
pub const esp_eth_io_cmd_t_ETH_CMD_S_PROMISCUOUS: esp_eth_io_cmd_t = 5;
#[doc = "< Set flow control"]
pub const esp_eth_io_cmd_t_ETH_CMD_S_FLOW_CTRL: esp_eth_io_cmd_t = 6;
#[doc = "< Get Duplex mode"]
pub const esp_eth_io_cmd_t_ETH_CMD_G_DUPLEX_MODE: esp_eth_io_cmd_t = 7;
#[doc = "< Set PHY loopback"]
pub const esp_eth_io_cmd_t_ETH_CMD_S_PHY_LOOPBACK: esp_eth_io_cmd_t = 8;
#[doc = " @brief Command list for ioctl API"]
pub type esp_eth_io_cmd_t = c_types::c_uint;
#[doc = " @brief Ethernet mediator"]
pub type esp_eth_mediator_t = esp_eth_mediator_s;
#[doc = " @brief Ethernet mediator"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_eth_mediator_s {
    #[doc = " @brief Read PHY register"]
    #[doc = ""]
    #[doc = " @param[in] eth: mediator of Ethernet driver"]
    #[doc = " @param[in] phy_addr: PHY Chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[out] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: read PHY register successfully"]
    #[doc = "       - ESP_FAIL: read PHY register failed because some error occurred"]
    #[doc = ""]
    pub phy_reg_read: ::core::option::Option<
        unsafe extern "C" fn(
            eth: *mut esp_eth_mediator_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: *mut u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Write PHY register"]
    #[doc = ""]
    #[doc = " @param[in] eth: mediator of Ethernet driver"]
    #[doc = " @param[in] phy_addr: PHY Chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[in] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: write PHY register successfully"]
    #[doc = "       - ESP_FAIL: write PHY register failed because some error occurred"]
    pub phy_reg_write: ::core::option::Option<
        unsafe extern "C" fn(
            eth: *mut esp_eth_mediator_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Deliver packet to upper stack"]
    #[doc = ""]
    #[doc = " @param[in] eth: mediator of Ethernet driver"]
    #[doc = " @param[in] buffer: packet buffer"]
    #[doc = " @param[in] length: length of the packet"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: deliver packet to upper stack successfully"]
    #[doc = "       - ESP_FAIL: deliver packet failed because some error occurred"]
    #[doc = ""]
    pub stack_input: ::core::option::Option<
        unsafe extern "C" fn(
            eth: *mut esp_eth_mediator_t,
            buffer: *mut u8,
            length: u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Callback on Ethernet state changed"]
    #[doc = ""]
    #[doc = " @param[in] eth: mediator of Ethernet driver"]
    #[doc = " @param[in] state: new state"]
    #[doc = " @param[in] args: optional argument for the new state"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: process the new state successfully"]
    #[doc = "       - ESP_FAIL: process the new state failed because some error occurred"]
    #[doc = ""]
    pub on_state_changed: ::core::option::Option<
        unsafe extern "C" fn(
            eth: *mut esp_eth_mediator_t,
            state: esp_eth_state_t,
            args: *mut c_types::c_void,
        ) -> esp_err_t,
    >,
}
#[doc = "< Ethernet driver start"]
pub const eth_event_t_ETHERNET_EVENT_START: eth_event_t = 0;
#[doc = "< Ethernet driver stop"]
pub const eth_event_t_ETHERNET_EVENT_STOP: eth_event_t = 1;
#[doc = "< Ethernet got a valid link"]
pub const eth_event_t_ETHERNET_EVENT_CONNECTED: eth_event_t = 2;
#[doc = "< Ethernet lost a valid link"]
pub const eth_event_t_ETHERNET_EVENT_DISCONNECTED: eth_event_t = 3;
#[doc = " @brief Ethernet event declarations"]
pub type eth_event_t = c_types::c_uint;
extern "C" {
    pub static mut ETH_EVENT: esp_event_base_t;
}
extern "C" {
    #[doc = " @brief Detect PHY address"]
    #[doc = ""]
    #[doc = " @param[in] eth: mediator of Ethernet driver"]
    #[doc = " @param[out] detected_addr: a valid address after detection"]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: detect phy address successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: invalid parameter"]
    #[doc = "       - ESP_ERR_NOT_FOUND: can't detect any PHY device"]
    #[doc = "       - ESP_FAIL: detect phy address failed because some error occurred"]
    pub fn esp_eth_detect_phy_addr(
        eth: *mut esp_eth_mediator_t,
        detected_addr: *mut c_types::c_int,
    ) -> esp_err_t;
}
#[doc = " @brief Ethernet MAC"]
pub type esp_eth_mac_t = esp_eth_mac_s;
#[doc = " @brief Ethernet MAC"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_eth_mac_s {
    #[doc = " @brief Set mediator for Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] eth: Ethernet mediator"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set mediator for Ethernet MAC successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set mediator for Ethernet MAC failed because of invalid argument"]
    #[doc = ""]
    pub set_mediator: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, eth: *mut esp_eth_mediator_t) -> esp_err_t,
    >,
    #[doc = " @brief Initialize Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: initialize Ethernet MAC successfully"]
    #[doc = "      - ESP_ERR_TIMEOUT: initialize Ethernet MAC failed because of timeout"]
    #[doc = "      - ESP_FAIL: initialize Ethernet MAC failed because some other error occurred"]
    #[doc = ""]
    pub init: ::core::option::Option<unsafe extern "C" fn(mac: *mut esp_eth_mac_t) -> esp_err_t>,
    #[doc = " @brief Deinitialize Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: deinitialize Ethernet MAC successfully"]
    #[doc = "      - ESP_FAIL: deinitialize Ethernet MAC failed because some error occurred"]
    #[doc = ""]
    pub deinit: ::core::option::Option<unsafe extern "C" fn(mac: *mut esp_eth_mac_t) -> esp_err_t>,
    #[doc = " @brief Start Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: start Ethernet MAC successfully"]
    #[doc = "      - ESP_FAIL: start Ethernet MAC failed because some other error occurred"]
    #[doc = ""]
    pub start: ::core::option::Option<unsafe extern "C" fn(mac: *mut esp_eth_mac_t) -> esp_err_t>,
    #[doc = " @brief Stop Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: stop Ethernet MAC successfully"]
    #[doc = "      - ESP_FAIL: stop Ethernet MAC failed because some error occurred"]
    #[doc = ""]
    pub stop: ::core::option::Option<unsafe extern "C" fn(mac: *mut esp_eth_mac_t) -> esp_err_t>,
    #[doc = " @brief Transmit packet from Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] buf: packet buffer to transmit"]
    #[doc = " @param[in] length: length of packet"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: transmit packet successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: transmit packet failed because of invalid argument"]
    #[doc = "      - ESP_ERR_INVALID_STATE: transmit packet failed because of wrong state of MAC"]
    #[doc = "      - ESP_FAIL: transmit packet failed because some other error occurred"]
    #[doc = ""]
    pub transmit: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, buf: *mut u8, length: u32) -> esp_err_t,
    >,
    #[doc = " @brief Receive packet from Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[out] buf: packet buffer which will preserve the received frame"]
    #[doc = " @param[out] length: length of the received packet"]
    #[doc = ""]
    #[doc = " @note Memory of buf is allocated in the Layer2, make sure it get free after process."]
    #[doc = " @note Before this function got invoked, the value of \"length\" should set by user, equals the size of buffer."]
    #[doc = "       After the function returned, the value of \"length\" means the real length of received data."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: receive packet successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: receive packet failed because of invalid argument"]
    #[doc = "      - ESP_ERR_INVALID_SIZE: input buffer size is not enough to hold the incoming data."]
    #[doc = "                              in this case, value of returned \"length\" indicates the real size of incoming data."]
    #[doc = "      - ESP_FAIL: receive packet failed because some other error occurred"]
    #[doc = ""]
    pub receive: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, buf: *mut u8, length: *mut u32) -> esp_err_t,
    >,
    #[doc = " @brief Read PHY register"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] phy_addr: PHY chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[out] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: read PHY register successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: read PHY register failed because of invalid argument"]
    #[doc = "      - ESP_ERR_INVALID_STATE: read PHY register failed because of wrong state of MAC"]
    #[doc = "      - ESP_ERR_TIMEOUT: read PHY register failed because of timeout"]
    #[doc = "      - ESP_FAIL: read PHY register failed because some other error occurred"]
    #[doc = ""]
    pub read_phy_reg: ::core::option::Option<
        unsafe extern "C" fn(
            mac: *mut esp_eth_mac_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: *mut u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Write PHY register"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] phy_addr: PHY chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[in] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: write PHY register successfully"]
    #[doc = "      - ESP_ERR_INVALID_STATE: write PHY register failed because of wrong state of MAC"]
    #[doc = "      - ESP_ERR_TIMEOUT: write PHY register failed because of timeout"]
    #[doc = "      - ESP_FAIL: write PHY register failed because some other error occurred"]
    #[doc = ""]
    pub write_phy_reg: ::core::option::Option<
        unsafe extern "C" fn(
            mac: *mut esp_eth_mac_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Set MAC address"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] addr: MAC address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set MAC address successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set MAC address failed because of invalid argument"]
    #[doc = "      - ESP_FAIL: set MAC address failed because some other error occurred"]
    #[doc = ""]
    pub set_addr: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, addr: *mut u8) -> esp_err_t,
    >,
    #[doc = " @brief Get MAC address"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[out] addr: MAC address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: get MAC address successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: get MAC address failed because of invalid argument"]
    #[doc = "      - ESP_FAIL: get MAC address failed because some other error occurred"]
    #[doc = ""]
    pub get_addr: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, addr: *mut u8) -> esp_err_t,
    >,
    #[doc = " @brief Set speed of MAC"]
    #[doc = ""]
    #[doc = " @param[in] ma:c Ethernet MAC instance"]
    #[doc = " @param[in] speed: MAC speed"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set MAC speed successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set MAC speed failed because of invalid argument"]
    #[doc = "      - ESP_FAIL: set MAC speed failed because some other error occurred"]
    #[doc = ""]
    pub set_speed: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, speed: eth_speed_t) -> esp_err_t,
    >,
    #[doc = " @brief Set duplex mode of MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] duplex: MAC duplex"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set MAC duplex mode successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set MAC duplex failed because of invalid argument"]
    #[doc = "      - ESP_FAIL: set MAC duplex failed because some other error occurred"]
    #[doc = ""]
    pub set_duplex: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, duplex: eth_duplex_t) -> esp_err_t,
    >,
    #[doc = " @brief Set link status of MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] link: Link status"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set link status successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set link status failed because of invalid argument"]
    #[doc = "      - ESP_FAIL: set link status failed because some other error occurred"]
    #[doc = ""]
    pub set_link: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, link: eth_link_t) -> esp_err_t,
    >,
    #[doc = " @brief Set promiscuous of MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] enable: set true to enable promiscuous mode; set false to disable promiscuous mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set promiscuous mode successfully"]
    #[doc = "      - ESP_FAIL: set promiscuous mode failed because some error occurred"]
    #[doc = ""]
    pub set_promiscuous: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, enable: bool) -> esp_err_t,
    >,
    #[doc = " @brief Enable flow control on MAC layer or not"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] enable: set true to enable flow control; set false to disable flow control"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set flow control successfully"]
    #[doc = "      - ESP_FAIL: set flow control failed because some error occurred"]
    #[doc = ""]
    pub enable_flow_ctrl: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, enable: bool) -> esp_err_t,
    >,
    #[doc = " @brief Set the PAUSE ability of peer node"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = " @param[in] ability: zero indicates that pause function is supported by link partner; non-zero indicates that pause function is not supported by link partner"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set peer pause ability successfully"]
    #[doc = "      - ESP_FAIL: set peer pause ability failed because some error occurred"]
    pub set_peer_pause_ability: ::core::option::Option<
        unsafe extern "C" fn(mac: *mut esp_eth_mac_t, ability: u32) -> esp_err_t,
    >,
    #[doc = " @brief Free memory of Ethernet MAC"]
    #[doc = ""]
    #[doc = " @param[in] mac: Ethernet MAC instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: free Ethernet MAC instance successfully"]
    #[doc = "      - ESP_FAIL: free Ethernet MAC instance failed because some error occurred"]
    #[doc = ""]
    pub del: ::core::option::Option<unsafe extern "C" fn(mac: *mut esp_eth_mac_t) -> esp_err_t>,
}
#[doc = " @brief Default values configured using Kconfig are going to be used when \"Default\" selected."]
#[doc = ""]
pub const emac_rmii_clock_mode_t_EMAC_CLK_DEFAULT: emac_rmii_clock_mode_t = 0;
#[doc = " @brief Input RMII Clock from external. EMAC Clock GPIO number needs to be configured when this option is selected."]
#[doc = ""]
#[doc = " @note MAC will get RMII clock from outside. Note that ESP32 only supports GPIO0 to input the RMII clock."]
#[doc = ""]
pub const emac_rmii_clock_mode_t_EMAC_CLK_EXT_IN: emac_rmii_clock_mode_t = 1;
#[doc = " @brief Output RMII Clock from internal APLL Clock. EMAC Clock GPIO number needs to be configured when this option is selected."]
#[doc = ""]
pub const emac_rmii_clock_mode_t_EMAC_CLK_OUT: emac_rmii_clock_mode_t = 2;
#[doc = " @brief RMII Clock Mode Options"]
#[doc = ""]
pub type emac_rmii_clock_mode_t = c_types::c_uint;
#[doc = " @brief MAC will get RMII clock from outside at this GPIO."]
#[doc = ""]
#[doc = " @note ESP32 only supports GPIO0 to input the RMII clock."]
#[doc = ""]
pub const emac_rmii_clock_gpio_t_EMAC_CLK_IN_GPIO: emac_rmii_clock_gpio_t = 0;
#[doc = " @brief Output RMII Clock from internal APLL Clock available at GPIO0"]
#[doc = ""]
#[doc = " @note GPIO0 can be set to output a pre-divided PLL clock (test only!). Enabling this option will configure GPIO0 to output a 50MHz clock."]
#[doc = " In fact this clock doesn’t have directly relationship with EMAC peripheral. Sometimes this clock won’t work well with your PHY chip."]
#[doc = " You might need to add some extra devices after GPIO0 (e.g. inverter). Note that outputting RMII clock on GPIO0 is an experimental practice."]
#[doc = " If you want the Ethernet to work with WiFi, don’t select GPIO0 output mode for stability."]
#[doc = ""]
pub const emac_rmii_clock_gpio_t_EMAC_APPL_CLK_OUT_GPIO: emac_rmii_clock_gpio_t = 0;
#[doc = " @brief Output RMII Clock from internal APLL Clock available at GPIO16"]
#[doc = ""]
pub const emac_rmii_clock_gpio_t_EMAC_CLK_OUT_GPIO: emac_rmii_clock_gpio_t = 16;
#[doc = " @brief Inverted Output RMII Clock from internal APLL Clock available at GPIO17"]
#[doc = ""]
pub const emac_rmii_clock_gpio_t_EMAC_CLK_OUT_180_GPIO: emac_rmii_clock_gpio_t = 17;
#[doc = " @brief RMII Clock GPIO number Options"]
#[doc = ""]
pub type emac_rmii_clock_gpio_t = c_types::c_uint;
#[doc = " @brief Ethernet MAC Clock Configuration"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub union eth_mac_clock_config_t {
    #[doc = "< EMAC MII Clock Configuration"]
    pub mii: eth_mac_clock_config_t__bindgen_ty_1,
    #[doc = "< EMAC RMII Clock Configuration"]
    pub rmii: eth_mac_clock_config_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct eth_mac_clock_config_t__bindgen_ty_1 {}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eth_mac_clock_config_t__bindgen_ty_2 {
    #[doc = "< RMII Clock Mode Configuration"]
    pub clock_mode: emac_rmii_clock_mode_t,
    #[doc = "< RMII Clock GPIO Configuration"]
    pub clock_gpio: emac_rmii_clock_gpio_t,
}
impl Default for eth_mac_clock_config_t__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for eth_mac_clock_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Configuration of Ethernet MAC object"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct eth_mac_config_t {
    #[doc = "< Software reset timeout value (Unit: ms)"]
    pub sw_reset_timeout_ms: u32,
    #[doc = "< Stack size of the receive task"]
    pub rx_task_stack_size: u32,
    #[doc = "< Priority of the receive task"]
    pub rx_task_prio: u32,
    #[doc = "< SMI MDC GPIO number, set to -1 could bypass the SMI GPIO configuration"]
    pub smi_mdc_gpio_num: c_types::c_int,
    #[doc = "< SMI MDIO GPIO number, set to -1 could bypass the SMI GPIO configuration"]
    pub smi_mdio_gpio_num: c_types::c_int,
    #[doc = "< Flags that specify extra capability for mac driver"]
    pub flags: u32,
    #[doc = "< EMAC Data interface to PHY (MII/RMII)"]
    pub interface: eth_data_interface_t,
    #[doc = "< EMAC Interface clock configuration"]
    pub clock_config: eth_mac_clock_config_t,
}
impl Default for eth_mac_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Ethernet PHY"]
pub type esp_eth_phy_t = esp_eth_phy_s;
#[doc = " @brief Ethernet PHY"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_eth_phy_s {
    #[doc = " @brief Set mediator for PHY"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[in] mediator: mediator of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set mediator for Ethernet PHY instance successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: set mediator for Ethernet PHY instance failed because of some invalid arguments"]
    #[doc = ""]
    pub set_mediator: ::core::option::Option<
        unsafe extern "C" fn(
            phy: *mut esp_eth_phy_t,
            mediator: *mut esp_eth_mediator_t,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Software Reset Ethernet PHY"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: reset Ethernet PHY successfully"]
    #[doc = "      - ESP_FAIL: reset Ethernet PHY failed because some error occurred"]
    #[doc = ""]
    pub reset: ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Hardware Reset Ethernet PHY"]
    #[doc = ""]
    #[doc = " @note Hardware reset is mostly done by pull down and up PHY's nRST pin"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: reset Ethernet PHY successfully"]
    #[doc = "      - ESP_FAIL: reset Ethernet PHY failed because some error occurred"]
    #[doc = ""]
    pub reset_hw:
        ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Initialize Ethernet PHY"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: initialize Ethernet PHY successfully"]
    #[doc = "      - ESP_FAIL: initialize Ethernet PHY failed because some error occurred"]
    #[doc = ""]
    pub init: ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Deinitialize Ethernet PHY"]
    #[doc = ""]
    #[doc = " @param[in] phyL Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: deinitialize Ethernet PHY successfully"]
    #[doc = "      - ESP_FAIL: deinitialize Ethernet PHY failed because some error occurred"]
    #[doc = ""]
    pub deinit: ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Start auto negotiation"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: restart auto negotiation successfully"]
    #[doc = "      - ESP_FAIL: restart auto negotiation failed because some error occurred"]
    #[doc = ""]
    pub negotiate:
        ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Get Ethernet PHY link status"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: get Ethernet PHY link status successfully"]
    #[doc = "      - ESP_FAIL: get Ethernet PHY link status failed because some error occurred"]
    #[doc = ""]
    pub get_link:
        ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
    #[doc = " @brief Power control of Ethernet PHY"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[in] enable: set true to power on Ethernet PHY; ser false to power off Ethernet PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: control Ethernet PHY power successfully"]
    #[doc = "      - ESP_FAIL: control Ethernet PHY power failed because some error occurred"]
    #[doc = ""]
    pub pwrctl: ::core::option::Option<
        unsafe extern "C" fn(phy: *mut esp_eth_phy_t, enable: bool) -> esp_err_t,
    >,
    #[doc = " @brief Set PHY chip address"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[in] addr: PHY chip address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: set Ethernet PHY address successfully"]
    #[doc = "      - ESP_FAIL: set Ethernet PHY address failed because some error occurred"]
    #[doc = ""]
    pub set_addr: ::core::option::Option<
        unsafe extern "C" fn(phy: *mut esp_eth_phy_t, addr: u32) -> esp_err_t,
    >,
    #[doc = " @brief Get PHY chip address"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[out] addr: PHY chip address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: get Ethernet PHY address successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: get Ethernet PHY address failed because of invalid argument"]
    #[doc = ""]
    pub get_addr: ::core::option::Option<
        unsafe extern "C" fn(phy: *mut esp_eth_phy_t, addr: *mut u32) -> esp_err_t,
    >,
    #[doc = " @brief Advertise pause function supported by MAC layer"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[out] addr: Pause ability"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Advertise pause ability successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Advertise pause ability failed because of invalid argument"]
    #[doc = ""]
    pub advertise_pause_ability: ::core::option::Option<
        unsafe extern "C" fn(phy: *mut esp_eth_phy_t, ability: u32) -> esp_err_t,
    >,
    #[doc = " @brief"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = " @param[in] enable: enables or disables PHY loopback"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: configures PHY instance loopback function successfully"]
    #[doc = "      - ESP_FAIL: PHY instance loopback configuration failed because some error occurred"]
    #[doc = ""]
    pub loopback: ::core::option::Option<
        unsafe extern "C" fn(phy: *mut esp_eth_phy_t, enable: bool) -> esp_err_t,
    >,
    #[doc = " @brief Free memory of Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @param[in] phy: Ethernet PHY instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: free PHY instance successfully"]
    #[doc = "      - ESP_FAIL: free PHY instance failed because some error occurred"]
    #[doc = ""]
    pub del: ::core::option::Option<unsafe extern "C" fn(phy: *mut esp_eth_phy_t) -> esp_err_t>,
}
#[doc = " @brief Ethernet PHY configuration"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct eth_phy_config_t {
    #[doc = "< PHY address, set -1 to enable PHY address detection at initialization stage"]
    pub phy_addr: i32,
    #[doc = "< Reset timeout value (Unit: ms)"]
    pub reset_timeout_ms: u32,
    #[doc = "< Auto-negotiation timeout value (Unit: ms)"]
    pub autonego_timeout_ms: u32,
    #[doc = "< Reset GPIO number, -1 means no hardware reset"]
    pub reset_gpio_num: c_types::c_int,
}
extern "C" {
    #[doc = " @brief Create a PHY instance of IP101"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_ip101(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
extern "C" {
    #[doc = " @brief Create a PHY instance of RTL8201"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_rtl8201(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
extern "C" {
    #[doc = " @brief Create a PHY instance of LAN87xx"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_lan87xx(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
extern "C" {
    #[doc = " @brief Create a PHY instance of DP83848"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_dp83848(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
extern "C" {
    #[doc = " @brief Create a PHY instance of KSZ8041"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_ksz8041(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
extern "C" {
    #[doc = " @brief Create a PHY instance of KSZ8081"]
    #[doc = ""]
    #[doc = " @param[in] config: configuration of PHY"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - instance: create PHY instance successfully"]
    #[doc = "      - NULL: create PHY instance failed because some error occurred"]
    pub fn esp_eth_phy_new_ksz8081(config: *const eth_phy_config_t) -> *mut esp_eth_phy_t;
}
#[doc = " @brief Handle of Ethernet driver"]
pub type esp_eth_handle_t = *mut c_types::c_void;
#[doc = " @brief Configuration of Ethernet driver"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_eth_config_t {
    #[doc = " @brief Ethernet MAC object"]
    #[doc = ""]
    pub mac: *mut esp_eth_mac_t,
    #[doc = " @brief Ethernet PHY object"]
    #[doc = ""]
    pub phy: *mut esp_eth_phy_t,
    #[doc = " @brief Period time of checking Ethernet link status"]
    #[doc = ""]
    pub check_link_period_ms: u32,
    #[doc = " @brief Input frame buffer to user's stack"]
    #[doc = ""]
    #[doc = " @param[in] eth_handle: handle of Ethernet driver"]
    #[doc = " @param[in] buffer: frame buffer that will get input to upper stack"]
    #[doc = " @param[in] length: length of the frame buffer"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: input frame buffer to upper stack successfully"]
    #[doc = "      - ESP_FAIL: error occurred when inputting buffer to upper stack"]
    #[doc = ""]
    pub stack_input: ::core::option::Option<
        unsafe extern "C" fn(
            eth_handle: esp_eth_handle_t,
            buffer: *mut u8,
            length: u32,
            priv_: *mut c_types::c_void,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Callback function invoked when lowlevel initialization is finished"]
    #[doc = ""]
    #[doc = " @param[in] eth_handle: handle of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: process extra lowlevel initialization successfully"]
    #[doc = "       - ESP_FAIL: error occurred when processing extra lowlevel initialization"]
    pub on_lowlevel_init_done:
        ::core::option::Option<unsafe extern "C" fn(eth_handle: esp_eth_handle_t) -> esp_err_t>,
    #[doc = " @brief Callback function invoked when lowlevel deinitialization is finished"]
    #[doc = ""]
    #[doc = " @param[in] eth_handle: handle of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: process extra lowlevel deinitialization successfully"]
    #[doc = "       - ESP_FAIL: error occurred when processing extra lowlevel deinitialization"]
    pub on_lowlevel_deinit_done:
        ::core::option::Option<unsafe extern "C" fn(eth_handle: esp_eth_handle_t) -> esp_err_t>,
    #[doc = " @brief Read PHY register"]
    #[doc = ""]
    #[doc = " @note Usually the PHY register read/write function is provided by MAC (SMI interface),"]
    #[doc = "       but if the PHY device is managed by other interface (e.g. I2C), then user needs to"]
    #[doc = "       implement the corresponding read/write."]
    #[doc = "       Setting this to NULL means your PHY device is managed by MAC's SMI interface."]
    #[doc = ""]
    #[doc = " @param[in] eth_handle: handle of Ethernet driver"]
    #[doc = " @param[in] phy_addr: PHY chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[out] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: read PHY register successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: read PHY register failed because of invalid argument"]
    #[doc = "      - ESP_ERR_TIMEOUT: read PHY register failed because of timeout"]
    #[doc = "      - ESP_FAIL: read PHY register failed because some other error occurred"]
    pub read_phy_reg: ::core::option::Option<
        unsafe extern "C" fn(
            eth_handle: esp_eth_handle_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: *mut u32,
        ) -> esp_err_t,
    >,
    #[doc = " @brief Write PHY register"]
    #[doc = ""]
    #[doc = " @note Usually the PHY register read/write function is provided by MAC (SMI interface),"]
    #[doc = "       but if the PHY device is managed by other interface (e.g. I2C), then user needs to"]
    #[doc = "       implement the corresponding read/write."]
    #[doc = "       Setting this to NULL means your PHY device is managed by MAC's SMI interface."]
    #[doc = ""]
    #[doc = " @param[in] eth_handle: handle of Ethernet driver"]
    #[doc = " @param[in] phy_addr: PHY chip address (0~31)"]
    #[doc = " @param[in] phy_reg: PHY register index code"]
    #[doc = " @param[in] reg_value: PHY register value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: write PHY register successfully"]
    #[doc = "      - ESP_ERR_INVALID_ARG: read PHY register failed because of invalid argument"]
    #[doc = "      - ESP_ERR_TIMEOUT: write PHY register failed because of timeout"]
    #[doc = "      - ESP_FAIL: write PHY register failed because some other error occurred"]
    pub write_phy_reg: ::core::option::Option<
        unsafe extern "C" fn(
            eth_handle: esp_eth_handle_t,
            phy_addr: u32,
            phy_reg: u32,
            reg_value: u32,
        ) -> esp_err_t,
    >,
}
impl Default for esp_eth_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Install Ethernet driver"]
    #[doc = ""]
    #[doc = " @param[in]  config: configuration of the Ethernet driver"]
    #[doc = " @param[out] out_hdl: handle of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: install esp_eth driver successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: install esp_eth driver failed because of some invalid argument"]
    #[doc = "       - ESP_ERR_NO_MEM: install esp_eth driver failed because there's no memory for driver"]
    #[doc = "       - ESP_FAIL: install esp_eth driver failed because some other error occurred"]
    pub fn esp_eth_driver_install(
        config: *const esp_eth_config_t,
        out_hdl: *mut esp_eth_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall Ethernet driver"]
    #[doc = " @note It's not recommended to uninstall Ethernet driver unless it won't get used any more in application code."]
    #[doc = "       To uninstall Ethernet driver, you have to make sure, all references to the driver are released."]
    #[doc = "       Ethernet driver can only be uninstalled successfully when reference counter equals to one."]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: uninstall esp_eth driver successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: uninstall esp_eth driver failed because of some invalid argument"]
    #[doc = "       - ESP_ERR_INVALID_STATE: uninstall esp_eth driver failed because it has more than one reference"]
    #[doc = "       - ESP_FAIL: uninstall esp_eth driver failed because some other error occurred"]
    pub fn esp_eth_driver_uninstall(hdl: esp_eth_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start Ethernet driver **ONLY** in standalone mode (i.e. without TCP/IP stack)"]
    #[doc = ""]
    #[doc = " @note This API will start driver state machine and internal software timer (for checking link status)."]
    #[doc = ""]
    #[doc = " @param[in] hdl handle of Ethernet driver"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: start esp_eth driver successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: start esp_eth driver failed because of some invalid argument"]
    #[doc = "       - ESP_ERR_INVALID_STATE: start esp_eth driver failed because driver has started already"]
    #[doc = "       - ESP_FAIL: start esp_eth driver failed because some other error occurred"]
    pub fn esp_eth_start(hdl: esp_eth_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stop Ethernet driver"]
    #[doc = ""]
    #[doc = " @note This function does the oppsite operation of `esp_eth_start`."]
    #[doc = ""]
    #[doc = " @param[in] hdl handle of Ethernet driver"]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: stop esp_eth driver successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: stop esp_eth driver failed because of some invalid argument"]
    #[doc = "       - ESP_ERR_INVALID_STATE: stop esp_eth driver failed because driver has not started yet"]
    #[doc = "       - ESP_FAIL: stop esp_eth driver failed because some other error occurred"]
    pub fn esp_eth_stop(hdl: esp_eth_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Update Ethernet data input path (i.e. specify where to pass the input buffer)"]
    #[doc = ""]
    #[doc = " @note After install driver, Ethernet still don't know where to deliver the input buffer."]
    #[doc = "       In fact, this API registers a callback function which get invoked when Ethernet received new packets."]
    #[doc = ""]
    #[doc = " @param[in] hdl handle of Ethernet driver"]
    #[doc = " @param[in] stack_input function pointer, which does the actual process on incoming packets"]
    #[doc = " @param[in] priv private resource, which gets passed to `stack_input` callback without any modification"]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: update input path successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: update input path failed because of some invalid argument"]
    #[doc = "       - ESP_FAIL: update input path failed because some other error occurred"]
    pub fn esp_eth_update_input_path(
        hdl: esp_eth_handle_t,
        stack_input: ::core::option::Option<
            unsafe extern "C" fn(
                hdl: esp_eth_handle_t,
                buffer: *mut u8,
                length: u32,
                priv_: *mut c_types::c_void,
            ) -> esp_err_t,
        >,
        priv_: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief General Transmit"]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = " @param[in] buf: buffer of the packet to transfer"]
    #[doc = " @param[in] length: length of the buffer to transfer"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: transmit frame buffer successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: transmit frame buffer failed because of some invalid argument"]
    #[doc = "       - ESP_FAIL: transmit frame buffer failed because some other error occurred"]
    pub fn esp_eth_transmit(
        hdl: esp_eth_handle_t,
        buf: *mut c_types::c_void,
        length: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief General Receive is deprecated and shall not be accessed from app code,"]
    #[doc = "        as polling is not supported by Ethernet."]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = " @param[out] buf: buffer to preserve the received packet"]
    #[doc = " @param[out] length: length of the received packet"]
    #[doc = ""]
    #[doc = " @note Before this function got invoked, the value of \"length\" should set by user, equals the size of buffer."]
    #[doc = "       After the function returned, the value of \"length\" means the real length of received data."]
    #[doc = " @note This API was exposed by accident, users should not use this API in their applications."]
    #[doc = "       Ethernet driver is interrupt driven, and doesn't support polling mode."]
    #[doc = "       Instead, users should register input callback with ``esp_eth_update_input_path``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: receive frame buffer successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: receive frame buffer failed because of some invalid argument"]
    #[doc = "       - ESP_ERR_INVALID_SIZE: input buffer size is not enough to hold the incoming data."]
    #[doc = "                               in this case, value of returned \"length\" indicates the real size of incoming data."]
    #[doc = "       - ESP_FAIL: receive frame buffer failed because some other error occurred"]
    pub fn esp_eth_receive(hdl: esp_eth_handle_t, buf: *mut u8, length: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Misc IO function of Etherent driver"]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = " @param[in] cmd: IO control command"]
    #[doc = " @param[in, out] data: address of data for `set` command or address where to store the data when used with `get` command"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: process io command successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: process io command failed because of some invalid argument"]
    #[doc = "       - ESP_FAIL: process io command failed because some other error occurred"]
    #[doc = ""]
    #[doc = " The following IO control commands are supported:"]
    #[doc = " @li @c ETH_CMD_S_MAC_ADDR sets Ethernet interface MAC address. @c data argument is pointer to MAC address buffer with expected size of 6 bytes."]
    #[doc = " @li @c ETH_CMD_G_MAC_ADDR gets Ethernet interface MAC address. @c data argument is pointer to a buffer to which MAC address is to be copied. The buffer size must be at least 6 bytes."]
    #[doc = " @li @c ETH_CMD_S_PHY_ADDR sets PHY address in range of <0-31>. @c data argument is pointer to memory of uint32_t datatype from where the configuration option is read."]
    #[doc = " @li @c ETH_CMD_G_PHY_ADDR gets PHY address. @c data argument is pointer to memory of uint32_t datatype to which the PHY address is to be stored."]
    #[doc = " @li @c ETH_CMD_G_SPEED gets current Ethernet link speed. @c data argument is pointer to memory of eth_speed_t datatype to which the speed is to be stored."]
    #[doc = " @li @c ETH_CMD_S_PROMISCUOUS sets/resets Ethernet interface promiscuous mode. @c data argument is pointer to memory of bool datatype from which the configuration option is read."]
    #[doc = " @li @c ETH_CMD_S_FLOW_CTRL sets/resets Ethernet interface flow control. @c data argument is pointer to memory of bool datatype from which the configuration option is read."]
    #[doc = " @li @c ETH_CMD_G_DUPLEX_MODE gets current Ethernet link duplex mode.  @c data argument is pointer to memory of eth_duplex_t datatype to which the duplex mode is to be stored."]
    #[doc = " @li @c ETH_CMD_S_PHY_LOOPBACK sets/resets PHY to/from loopback mode. @c data argument is pointer to memory of bool datatype from which the configuration option is read."]
    pub fn esp_eth_ioctl(
        hdl: esp_eth_handle_t,
        cmd: esp_eth_io_cmd_t,
        data: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Increase Ethernet driver reference"]
    #[doc = " @note Ethernet driver handle can be obtained by os timer, netif, etc."]
    #[doc = "       It's dangerous when thread A is using Ethernet but thread B uninstall the driver."]
    #[doc = "       Using reference counter can prevent such risk, but care should be taken, when you obtain Ethernet driver,"]
    #[doc = "       this API must be invoked so that the driver won't be uninstalled during your using time."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: increase reference successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: increase reference failed because of some invalid argument"]
    pub fn esp_eth_increase_reference(hdl: esp_eth_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Decrease Ethernet driver reference"]
    #[doc = ""]
    #[doc = " @param[in] hdl: handle of Ethernet driver"]
    #[doc = " @return"]
    #[doc = "       - ESP_OK: increase reference successfully"]
    #[doc = "       - ESP_ERR_INVALID_ARG: increase reference failed because of some invalid argument"]
    pub fn esp_eth_decrease_reference(hdl: esp_eth_handle_t) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_eth_netif_glue_t {
    _unused: [u8; 0],
}
#[doc = " @brief Handle of netif glue - an intermediate layer between netif and Ethernet driver"]
#[doc = ""]
pub type esp_eth_netif_glue_handle_t = *mut esp_eth_netif_glue_t;
extern "C" {
    #[doc = " @brief Create a netif glue for Ethernet driver"]
    #[doc = " @note netif glue is used to attach io driver to TCP/IP netif"]
    #[doc = ""]
    #[doc = " @param eth_hdl Ethernet driver handle"]
    #[doc = " @return glue object, which inherits esp_netif_driver_base_t"]
    pub fn esp_eth_new_netif_glue(eth_hdl: esp_eth_handle_t) -> esp_eth_netif_glue_handle_t;
}
extern "C" {
    #[doc = " @brief Delete netif glue of Ethernet driver"]
    #[doc = ""]
    #[doc = " @param eth_netif_glue netif glue"]
    #[doc = " @return -ESP_OK: delete netif glue successfully"]
    pub fn esp_eth_del_netif_glue(eth_netif_glue: esp_eth_netif_glue_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register default IP layer handlers for Ethernet"]
    #[doc = ""]
    #[doc = " @note: Ethernet handle might not yet properly initialized when setting up these default handlers"]
    #[doc = " @warning: This function is deprecated and is kept here only for compatibility reasons. Registration"]
    #[doc = "           of default IP layer handlers for Ethernet is now handled automatically. Do not call this"]
    #[doc = "           function if you want to use multiple Ethernet instances at a time."]
    #[doc = ""]
    #[doc = " @param[in] esp_netif esp network interface handle created for Ethernet driver"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameter (esp_netif is NULL)"]
    #[doc = "      - ESP_OK: set default IP layer handlers successfully"]
    #[doc = "      - others: other failure occurred during register esp_event handler"]
    pub fn esp_eth_set_default_handlers(esp_netif: *mut c_types::c_void) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unregister default IP layer handlers for Ethernet"]
    #[doc = ""]
    #[doc = " @warning: This function is deprecated and is kept here only for compatibility reasons. Unregistration"]
    #[doc = "           of default IP layer handlers for Ethernet is now handled automatically if not registered"]
    #[doc = "           by calling esp_eth_set_default_handlers."]
    #[doc = ""]
    #[doc = " @param[in] esp_netif esp network interface handle created for Ethernet driver"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameter (esp_netif is NULL)"]
    #[doc = "      - ESP_OK: clear default IP layer handlers successfully"]
    #[doc = "      - others: other failure occurred during unregister esp_event handler"]
    pub fn esp_eth_clear_default_handlers(esp_netif: *mut c_types::c_void) -> esp_err_t;
}
extern "C" {
    pub static mut environ: *mut *mut c_types::c_char;
}
extern "C" {
    pub fn _exit(__status: c_types::c_int);
}
extern "C" {
    pub fn access(__path: *const c_types::c_char, __amode: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn alarm(__secs: c_types::c_uint) -> c_types::c_uint;
}
extern "C" {
    pub fn chdir(__path: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn chmod(__path: *const c_types::c_char, __mode: mode_t) -> c_types::c_int;
}
extern "C" {
    pub fn chown(__path: *const c_types::c_char, __owner: uid_t, __group: gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn chroot(__path: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn close(__fildes: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn confstr(__name: c_types::c_int, __buf: *mut c_types::c_char, __len: size_t) -> size_t;
}
extern "C" {
    pub fn daemon(nochdir: c_types::c_int, noclose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn dup(__fildes: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn dup2(__fildes: c_types::c_int, __fildes2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execl(
        __path: *const c_types::c_char,
        arg1: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const c_types::c_char,
        arg1: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const c_types::c_char,
        arg1: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execlpe(
        __file: *const c_types::c_char,
        arg1: *const c_types::c_char,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const c_types::c_char,
        __argv: *const *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execve(
        __path: *const c_types::c_char,
        __argv: *const *mut c_types::c_char,
        __envp: *const *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const c_types::c_char,
        __argv: *const *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn faccessat(
        __dirfd: c_types::c_int,
        __path: *const c_types::c_char,
        __mode: c_types::c_int,
        __flags: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fchdir(__fildes: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn fchmod(__fildes: c_types::c_int, __mode: mode_t) -> c_types::c_int;
}
extern "C" {
    pub fn fchown(__fildes: c_types::c_int, __owner: uid_t, __group: gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn fchownat(
        __dirfd: c_types::c_int,
        __path: *const c_types::c_char,
        __owner: uid_t,
        __group: gid_t,
        __flags: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: c_types::c_int,
        __argv: *const *mut c_types::c_char,
        __envp: *const *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(__fd: c_types::c_int, __name: c_types::c_int) -> c_types::c_long;
}
extern "C" {
    pub fn fsync(__fd: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn fdatasync(__fd: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut c_types::c_char, __size: size_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn getdomainname(__name: *mut c_types::c_char, __len: size_t) -> c_types::c_int;
}
extern "C" {
    pub fn getentropy(arg1: *mut c_types::c_void, arg2: size_t) -> c_types::c_int;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(__gidsetsize: c_types::c_int, __grouplist: *mut gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn gethostid() -> c_types::c_long;
}
extern "C" {
    pub fn getlogin() -> *mut c_types::c_char;
}
extern "C" {
    pub fn getpass(__prompt: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn getpagesize() -> c_types::c_int;
}
extern "C" {
    pub fn getpeereid(arg1: c_types::c_int, arg2: *mut uid_t, arg3: *mut gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn getusershell() -> *mut c_types::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn iruserok(
        raddr: c_types::c_ulong,
        superuser: c_types::c_int,
        ruser: *const c_types::c_char,
        luser: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn isatty(__fildes: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn issetugid() -> c_types::c_int;
}
extern "C" {
    pub fn lchown(__path: *const c_types::c_char, __owner: uid_t, __group: gid_t)
        -> c_types::c_int;
}
extern "C" {
    pub fn link(__path1: *const c_types::c_char, __path2: *const c_types::c_char)
        -> c_types::c_int;
}
extern "C" {
    pub fn linkat(
        __dirfd1: c_types::c_int,
        __path1: *const c_types::c_char,
        __dirfd2: c_types::c_int,
        __path2: *const c_types::c_char,
        __flags: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn nice(__nice_value: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn lseek(__fildes: c_types::c_int, __offset: off_t, __whence: c_types::c_int) -> off_t;
}
extern "C" {
    pub fn lockf(__fd: c_types::c_int, __cmd: c_types::c_int, __len: off_t) -> c_types::c_int;
}
extern "C" {
    pub fn pathconf(__path: *const c_types::c_char, __name: c_types::c_int) -> c_types::c_long;
}
extern "C" {
    pub fn pause() -> c_types::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        arg1: ::core::option::Option<unsafe extern "C" fn()>,
        arg2: ::core::option::Option<unsafe extern "C" fn()>,
        arg3: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pipe(__fildes: *mut c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn pread(
        __fd: c_types::c_int,
        __buf: *mut c_types::c_void,
        __nbytes: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: c_types::c_int,
        __buf: *const c_types::c_void,
        __nbytes: size_t,
        __offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn read(__fd: c_types::c_int, __buf: *mut c_types::c_void, __nbyte: size_t) -> _ssize_t;
}
extern "C" {
    pub fn rresvport(__alport: *mut c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn revoke(__path: *mut c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn ruserok(
        rhost: *const c_types::c_char,
        superuser: c_types::c_int,
        ruser: *const c_types::c_char,
        luser: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn sbrk(__incr: isize) -> *mut c_types::c_void;
}
extern "C" {
    pub fn setegid(__gid: gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn seteuid(__uid: uid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setgid(__gid: gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setgroups(ngroups: c_types::c_int, grouplist: *const gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn sethostname(arg1: *const c_types::c_char, arg2: size_t) -> c_types::c_int;
}
extern "C" {
    pub fn setpgid(__pid: pid_t, __pgid: pid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setpgrp() -> c_types::c_int;
}
extern "C" {
    pub fn setregid(__rgid: gid_t, __egid: gid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: uid_t, __euid: uid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(__uid: uid_t) -> c_types::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn sleep(__seconds: c_types::c_uint) -> c_types::c_uint;
}
extern "C" {
    pub fn sysconf(__name: c_types::c_int) -> c_types::c_long;
}
extern "C" {
    pub fn tcgetpgrp(__fildes: c_types::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fildes: c_types::c_int, __pgrp_id: pid_t) -> c_types::c_int;
}
extern "C" {
    pub fn ttyname(__fildes: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: c_types::c_int,
        arg2: *mut c_types::c_char,
        arg3: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn unlink(__path: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn usleep(__useconds: useconds_t) -> c_types::c_int;
}
extern "C" {
    pub fn vhangup() -> c_types::c_int;
}
extern "C" {
    pub fn write(__fd: c_types::c_int, __buf: *const c_types::c_void, __nbyte: size_t) -> _ssize_t;
}
extern "C" {
    pub static mut optarg: *mut c_types::c_char;
}
extern "C" {
    pub static mut optind: c_types::c_int;
}
extern "C" {
    pub static mut opterr: c_types::c_int;
}
extern "C" {
    pub static mut optopt: c_types::c_int;
}
extern "C" {
    pub fn getopt(
        arg1: c_types::c_int,
        arg2: *const *mut c_types::c_char,
        arg3: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub static mut optreset: c_types::c_int;
}
extern "C" {
    pub fn vfork() -> c_types::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: c_types::c_int, __length: off_t) -> c_types::c_int;
}
extern "C" {
    pub fn truncate(arg1: *const c_types::c_char, __length: off_t) -> c_types::c_int;
}
extern "C" {
    pub fn getdtablesize() -> c_types::c_int;
}
extern "C" {
    pub fn ualarm(__useconds: useconds_t, __interval: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn gethostname(__name: *mut c_types::c_char, __len: size_t) -> c_types::c_int;
}
extern "C" {
    pub fn setdtablesize(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn readlink(
        __path: *const c_types::c_char,
        __buf: *mut c_types::c_char,
        __buflen: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlink(
        __name1: *const c_types::c_char,
        __name2: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn readlinkat(
        __dirfd1: c_types::c_int,
        __path: *const c_types::c_char,
        __buf: *mut c_types::c_char,
        __buflen: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const c_types::c_char,
        arg2: c_types::c_int,
        arg3: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: c_types::c_int,
    ) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flock {
    pub l_type: c_types::c_short,
    pub l_whence: c_types::c_short,
    pub l_start: c_types::c_long,
    pub l_len: c_types::c_long,
    pub l_pid: c_types::c_short,
    pub l_xxx: c_types::c_short,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct eflock {
    pub l_type: c_types::c_short,
    pub l_whence: c_types::c_short,
    pub l_start: c_types::c_long,
    pub l_len: c_types::c_long,
    pub l_pid: c_types::c_short,
    pub l_xxx: c_types::c_short,
    pub l_rpid: c_types::c_long,
    pub l_rsys: c_types::c_long,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_size: off_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub st_blksize: blksize_t,
    pub st_blocks: blkcnt_t,
    pub st_spare4: [c_types::c_long; 2usize],
}
extern "C" {
    pub fn fstat(__fd: c_types::c_int, __sbuf: *mut stat) -> c_types::c_int;
}
extern "C" {
    pub fn mkdir(_path: *const c_types::c_char, __mode: mode_t) -> c_types::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const c_types::c_char, __mode: mode_t) -> c_types::c_int;
}
extern "C" {
    pub fn stat(__path: *const c_types::c_char, __sbuf: *mut stat) -> c_types::c_int;
}
extern "C" {
    pub fn umask(__mask: mode_t) -> mode_t;
}
extern "C" {
    pub fn fchmodat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: mode_t,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn fstatat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: *mut stat,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mkdirat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: mode_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mkfifoat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: mode_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mknodat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: mode_t,
        arg4: dev_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn utimensat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: *const timespec,
        arg4: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn futimens(arg1: c_types::c_int, arg2: *const timespec) -> c_types::c_int;
}
extern "C" {
    pub fn open(arg1: *const c_types::c_char, arg2: c_types::c_int, ...) -> c_types::c_int;
}
extern "C" {
    pub fn openat(
        arg1: c_types::c_int,
        arg2: *const c_types::c_char,
        arg3: c_types::c_int,
        ...
    ) -> c_types::c_int;
}
extern "C" {
    pub fn creat(arg1: *const c_types::c_char, arg2: mode_t) -> c_types::c_int;
}
extern "C" {
    pub fn fcntl(arg1: c_types::c_int, arg2: c_types::c_int, ...) -> c_types::c_int;
}
extern "C" {
    pub fn flock(arg1: c_types::c_int, arg2: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn ioctl(fd: c_types::c_int, request: c_types::c_int, ...) -> c_types::c_int;
}
extern "C" {
    pub fn dhcp_ip_addr_restore(netif: *mut c_types::c_void) -> bool;
}
extern "C" {
    pub fn dhcp_ip_addr_store(netif: *mut c_types::c_void);
}
extern "C" {
    pub fn dhcp_ip_addr_erase(esp_netif: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Get the sync interval of SNTP operation"]
    #[doc = ""]
    #[doc = " @return  the sync interval"]
    pub fn sntp_get_sync_interval() -> u32;
}
extern "C" {
    #[doc = " @brief system time setter used in the sntp module"]
    #[doc = " @note The lwip sntp uses u32_t types for sec and us arguments"]
    pub fn sntp_set_system_time(sec: u32, us: u32);
}
extern "C" {
    #[doc = " @brief system time getter used in the sntp module"]
    #[doc = " @note The lwip sntp uses u32_t types for sec and us arguments"]
    pub fn sntp_get_system_time(sec: *mut u32, us: *mut u32);
}
pub type error_t = c_types::c_int;
extern "C" {
    pub fn __errno() -> *mut c_types::c_int;
}
extern "C" {
    pub static mut _sys_errlist: [*const c_types::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_lwip_sockets_register();
}
pub type sys_sem_t = SemaphoreHandle_t;
pub type sys_mutex_t = SemaphoreHandle_t;
pub type sys_thread_t = TaskHandle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sys_mbox_s {
    pub os_mbox: QueueHandle_t,
    pub owner: *mut c_types::c_void,
}
impl Default for sys_mbox_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sys_mbox_t = *mut sys_mbox_s;
extern "C" {
    pub fn sys_delay_ms(ms: u32);
}
extern "C" {
    pub fn sys_thread_sem_init() -> *mut sys_sem_t;
}
extern "C" {
    pub fn sys_thread_sem_deinit();
}
extern "C" {
    pub fn sys_thread_sem_get() -> *mut sys_sem_t;
}
pub type u8_t = u8;
pub type s8_t = i8;
pub type u16_t = u16;
pub type s16_t = i16;
pub type u32_t = u32;
pub type s32_t = i32;
pub type sys_prot_t = c_types::c_int;
pub type u64_t = u64;
pub type s64_t = i64;
pub type mem_ptr_t = usize;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(numer: intmax_t, denomer: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        arg1: *const c_types::c_char,
        arg2: *mut *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut *mut c_types::c_char,
        arg4: c_types::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        arg1: *const c_types::c_char,
        arg2: *mut *mut c_types::c_char,
        arg3: c_types::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: *mut *mut c_types::c_char,
        arg4: c_types::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: c_types::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_r(
        arg1: *mut _reent,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
        arg4: c_types::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: c_types::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_r(
        arg1: *mut _reent,
        arg2: *const wchar_t,
        arg3: *mut *mut wchar_t,
        arg4: c_types::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn strtoimax_l(
        arg1: *const c_types::c_char,
        _restrict: *mut *mut c_types::c_char,
        arg2: c_types::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax_l(
        arg1: *const c_types::c_char,
        _restrict: *mut *mut c_types::c_char,
        arg2: c_types::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax_l(
        arg1: *const wchar_t,
        _restrict: *mut *mut wchar_t,
        arg2: c_types::c_int,
        arg3: locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax_l(
        arg1: *const wchar_t,
        _restrict: *mut *mut wchar_t,
        arg2: c_types::c_int,
        arg3: locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn isalnum(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isalpha(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn iscntrl(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isdigit(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isgraph(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn islower(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isprint(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn ispunct(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isspace(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isupper(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isxdigit(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn tolower(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn toupper(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isblank(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isascii(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn toascii(__c: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn isalnum_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isalpha_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isblank_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn iscntrl_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isdigit_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isgraph_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn islower_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isprint_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn ispunct_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isspace_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isupper_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isxdigit_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn tolower_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn toupper_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn isascii_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub fn toascii_l(__c: c_types::c_int, __l: locale_t) -> c_types::c_int;
}
extern "C" {
    pub static mut _ctype_: [c_types::c_char; 0usize];
}
extern "C" {
    pub fn lwip_htons(x: u16_t) -> u16_t;
}
extern "C" {
    pub fn lwip_htonl(x: u32_t) -> u32_t;
}
extern "C" {
    pub fn lwip_itoa(result: *mut c_types::c_char, bufsize: size_t, number: c_types::c_int);
}
extern "C" {
    pub fn lwip_strnicmp(
        str1: *const c_types::c_char,
        str2: *const c_types::c_char,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_stricmp(
        str1: *const c_types::c_char,
        str2: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_strnstr(
        buffer: *const c_types::c_char,
        token: *const c_types::c_char,
        n: size_t,
    ) -> *mut c_types::c_char;
}
#[doc = " This is the aligned version of ip4_addr_t,"]
#[doc = "used as local variable, on the stack, etc."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip4_addr {
    pub addr: u32_t,
}
#[doc = " This is the aligned version of ip4_addr_t,"]
#[doc = "used as local variable, on the stack, etc."]
pub type ip4_addr_t = ip4_addr;
extern "C" {
    pub fn ip4_addr_isbroadcast_u32(addr: u32_t, netif: *const netif) -> u8_t;
}
extern "C" {
    pub fn ip4_addr_netmask_valid(netmask: u32_t) -> u8_t;
}
extern "C" {
    pub fn ipaddr_addr(cp: *const c_types::c_char) -> u32_t;
}
extern "C" {
    pub fn ip4addr_aton(cp: *const c_types::c_char, addr: *mut ip4_addr_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " returns ptr to static buffer; not reentrant!"]
    pub fn ip4addr_ntoa(addr: *const ip4_addr_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ip4addr_ntoa_r(
        addr: *const ip4_addr_t,
        buf: *mut c_types::c_char,
        buflen: c_types::c_int,
    ) -> *mut c_types::c_char;
}
#[doc = " Unknown"]
pub const lwip_ipv6_scope_type_IP6_UNKNOWN: lwip_ipv6_scope_type = 0;
#[doc = " Unicast"]
pub const lwip_ipv6_scope_type_IP6_UNICAST: lwip_ipv6_scope_type = 1;
#[doc = " Multicast"]
pub const lwip_ipv6_scope_type_IP6_MULTICAST: lwip_ipv6_scope_type = 2;
#[doc = " Symbolic constants for the 'type' parameters in some of the macros."]
#[doc = " These exist for efficiency only, allowing the macros to avoid certain tests"]
#[doc = " when the address is known not to be of a certain type. Dead code elimination"]
#[doc = " will do the rest. IP6_MULTICAST is supported but currently not optimized."]
#[doc = " @see ip6_addr_has_scope, ip6_addr_assign_zone, ip6_addr_lacks_zone."]
pub type lwip_ipv6_scope_type = c_types::c_uint;
#[doc = " This is the aligned version of ip6_addr_t,"]
#[doc = "used as local variable, on the stack, etc."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip6_addr {
    pub addr: [u32_t; 4usize],
    pub zone: u8_t,
}
#[doc = " This is the aligned version of ip6_addr_t,"]
#[doc = "used as local variable, on the stack, etc."]
pub type ip6_addr_t = ip6_addr;
extern "C" {
    pub fn ip6addr_aton(cp: *const c_types::c_char, addr: *mut ip6_addr_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " returns ptr to static buffer; not reentrant!"]
    pub fn ip6addr_ntoa(addr: *const ip6_addr_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ip6addr_ntoa_r(
        addr: *const ip6_addr_t,
        buf: *mut c_types::c_char,
        buflen: c_types::c_int,
    ) -> *mut c_types::c_char;
}
#[doc = " IPv4"]
pub const lwip_ip_addr_type_IPADDR_TYPE_V4: lwip_ip_addr_type = 0;
#[doc = " IPv6"]
pub const lwip_ip_addr_type_IPADDR_TYPE_V6: lwip_ip_addr_type = 6;
#[doc = " IPv4+IPv6 (\"dual-stack\")"]
pub const lwip_ip_addr_type_IPADDR_TYPE_ANY: lwip_ip_addr_type = 46;
#[doc = " @ingroup ipaddr"]
#[doc = " IP address types for use in ip_addr_t.type member."]
#[doc = " @see tcp_new_ip_type(), udp_new_ip_type(), raw_new_ip_type()."]
pub type lwip_ip_addr_type = c_types::c_uint;
#[doc = " @ingroup ipaddr"]
#[doc = " A union struct for both IP version's addresses."]
#[doc = " ATTENTION: watch out for its size when adding IPv6 address scope!"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_addr {
    pub u_addr: ip_addr__bindgen_ty_1,
    #[doc = " @ref lwip_ip_addr_type"]
    pub type_: u8_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_addr__bindgen_ty_1 {
    pub ip6: ip6_addr_t,
    pub ip4: ip4_addr_t,
}
impl Default for ip_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ip_addr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @ingroup ipaddr"]
#[doc = " A union struct for both IP version's addresses."]
#[doc = " ATTENTION: watch out for its size when adding IPv6 address scope!"]
pub type ip_addr_t = ip_addr;
extern "C" {
    pub static ip_addr_any_type: ip_addr_t;
}
extern "C" {
    pub fn ipaddr_ntoa(addr: *const ip_addr_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ipaddr_ntoa_r(
        addr: *const ip_addr_t,
        buf: *mut c_types::c_char,
        buflen: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn ipaddr_aton(cp: *const c_types::c_char, addr: *mut ip_addr_t) -> c_types::c_int;
}
extern "C" {
    pub static ip_addr_any: ip_addr_t;
}
extern "C" {
    pub static ip_addr_broadcast: ip_addr_t;
}
extern "C" {
    pub static ip6_addr_any: ip_addr_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dhcps_state {
    pub state: s16_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dhcps_msg {
    pub op: u8_t,
    pub htype: u8_t,
    pub hlen: u8_t,
    pub hops: u8_t,
    pub xid: [u8_t; 4usize],
    pub secs: u16_t,
    pub flags: u16_t,
    pub ciaddr: [u8_t; 4usize],
    pub yiaddr: [u8_t; 4usize],
    pub siaddr: [u8_t; 4usize],
    pub giaddr: [u8_t; 4usize],
    pub chaddr: [u8_t; 16usize],
    pub sname: [u8_t; 64usize],
    pub file: [u8_t; 128usize],
    pub options: [u8_t; 312usize],
}
impl Default for dhcps_msg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dhcps_lease_t {
    pub enable: bool,
    pub start_ip: ip4_addr_t,
    pub end_ip: ip4_addr_t,
}
pub const dhcps_offer_option_OFFER_START: dhcps_offer_option = 0;
pub const dhcps_offer_option_OFFER_ROUTER: dhcps_offer_option = 1;
pub const dhcps_offer_option_OFFER_DNS: dhcps_offer_option = 2;
pub const dhcps_offer_option_OFFER_END: dhcps_offer_option = 3;
pub type dhcps_offer_option = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dhcps_pool {
    pub ip: ip4_addr_t,
    pub mac: [u8_t; 6usize],
    pub lease_timer: u32_t,
}
pub type dhcps_time_t = u32_t;
pub type dhcps_offer_t = u8_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dhcps_options_t {
    pub dhcps_offer: dhcps_offer_t,
    pub dhcps_dns: dhcps_offer_t,
    pub dhcps_time: dhcps_time_t,
    pub dhcps_poll: dhcps_lease_t,
}
pub type dhcps_cb_t = ::core::option::Option<unsafe extern "C" fn(client_ip: *mut u8_t)>;
extern "C" {
    pub fn dhcps_start(netif: *mut netif, ip: ip4_addr_t);
}
extern "C" {
    pub fn dhcps_stop(netif: *mut netif);
}
extern "C" {
    pub fn dhcps_option_info(op_id: u8_t, opt_len: u32_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn dhcps_set_option_info(op_id: u8_t, opt_info: *mut c_types::c_void, opt_len: u32_t);
}
extern "C" {
    pub fn dhcp_search_ip_on_mac(mac: *mut u8_t, ip: *mut ip4_addr_t) -> bool;
}
extern "C" {
    pub fn dhcps_dns_setserver(dnsserver: *const ip_addr_t);
}
extern "C" {
    pub fn dhcps_dns_getserver() -> ip4_addr_t;
}
extern "C" {
    pub fn dhcps_set_new_lease_cb(cb: dhcps_cb_t);
}
#[doc = " @brief station list info element"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_netif_sta_info_t {
    #[doc = "< Station MAC address"]
    pub mac: [u8; 6usize],
    #[doc = "< Station assigned IP address"]
    pub ip: esp_ip4_addr_t,
}
#[doc = " @brief station list structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_netif_sta_list_t {
    #[doc = "< Connected stations"]
    pub sta: [esp_netif_sta_info_t; 10usize],
    #[doc = "< Number of connected stations"]
    pub num: c_types::c_int,
}
extern "C" {
    #[doc = " @brief  Get IP information for stations connected to the Wi-Fi AP interface"]
    #[doc = ""]
    #[doc = " @param[in]   wifi_sta_list Wi-Fi station info list, returned from esp_wifi_ap_get_sta_list()"]
    #[doc = " @param[out]  netif_sta_list IP layer station info list, corresponding to MAC addresses provided in wifi_sta_list"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_NO_MEM"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_get_sta_list(
        wifi_sta_list: *const wifi_sta_list_t,
        netif_sta_list: *mut esp_netif_sta_list_t,
    ) -> esp_err_t;
}
#[doc = "< Wi-Fi STA (station) interface"]
pub const tcpip_adapter_if_t_TCPIP_ADAPTER_IF_STA: tcpip_adapter_if_t = 0;
#[doc = "< Wi-Fi soft-AP interface"]
pub const tcpip_adapter_if_t_TCPIP_ADAPTER_IF_AP: tcpip_adapter_if_t = 1;
#[doc = "< Ethernet interface"]
pub const tcpip_adapter_if_t_TCPIP_ADAPTER_IF_ETH: tcpip_adapter_if_t = 2;
#[doc = "< tcpip stack test interface"]
pub const tcpip_adapter_if_t_TCPIP_ADAPTER_IF_TEST: tcpip_adapter_if_t = 3;
pub const tcpip_adapter_if_t_TCPIP_ADAPTER_IF_MAX: tcpip_adapter_if_t = 4;
pub type tcpip_adapter_if_t = c_types::c_uint;
#[doc = " @brief legacy ip_info type"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tcpip_adapter_ip_info_t {
    #[doc = "< Interface IPV4 address"]
    pub ip: ip4_addr_t,
    #[doc = "< Interface IPV4 netmask"]
    pub netmask: ip4_addr_t,
    #[doc = "< Interface IPV4 gateway address"]
    pub gw: ip4_addr_t,
}
#[doc = " @brief Status of DHCP client or DHCP server"]
pub use self::esp_netif_dhcp_status_t as tcpip_adapter_dhcp_status_t;
pub type tcpip_adapter_dhcps_lease_t = dhcps_lease_t;
#[doc = " @brief Supported options for DHCP client or DHCP server"]
pub use self::esp_netif_dhcp_option_id_t as tcpip_adapter_dhcp_option_id_t;
#[doc = " @brief Mode for DHCP client or DHCP server option functions"]
pub use self::esp_netif_dhcp_option_mode_t as tcpip_adapter_dhcp_option_mode_t;
#[doc = " @brief Type of DNS server"]
pub use self::esp_netif_dns_type_t as tcpip_adapter_dns_type_t;
#[doc = " @brief DNS server info"]
pub type tcpip_adapter_dns_info_t = esp_netif_dns_info_t;
#[doc = " @brief station list structure"]
pub type tcpip_adapter_sta_list_t = esp_netif_sta_list_t;
#[doc = " @brief station list info element"]
pub type tcpip_adapter_sta_info_t = esp_netif_sta_info_t;
extern "C" {
    #[doc = " @brief tcpip adapter legacy init. It is used only to set the compatibility mode of esp-netif, which"]
    #[doc = " will enable backward compatibility of esp-netif."]
    pub fn tcpip_adapter_init();
}
extern "C" {
    #[doc = " @brief Compatiblity mode: convert the esp-netif handle to tcpip_adapter legacy interface enum"]
    #[doc = ""]
    #[doc = " @param esp_netif"]
    #[doc = ""]
    #[doc = " @return corresponding interface if valid or known esp_netif provided, TCPIP_ADAPTER_IF_MAX otherwise"]
    pub fn tcpip_adapter_if_from_esp_netif(esp_netif: *mut esp_netif_t) -> tcpip_adapter_if_t;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_get_ip_info"]
    #[doc = ""]
    #[doc = " @param tcpip_if Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @param ip_info See esp_netif_get_ip_info"]
    #[doc = " @return See esp_netif_get_ip_info"]
    pub fn tcpip_adapter_get_ip_info(
        tcpip_if: tcpip_adapter_if_t,
        ip_info: *mut tcpip_adapter_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_get_ip6_linklocal"]
    #[doc = ""]
    #[doc = " @param tcpip_if  Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @param if_ip6 See esp_netif_get_ip6_linklocal"]
    #[doc = " @return See esp_netif_get_ip6_linklocal"]
    pub fn tcpip_adapter_get_ip6_linklocal(
        tcpip_if: tcpip_adapter_if_t,
        if_ip6: *mut ip6_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_get_ip6_global"]
    #[doc = ""]
    #[doc = " @param tcpip_if  Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @param if_ip6 See esp_netif_get_ip6_global"]
    #[doc = " @return See esp_netif_get_ip6_global"]
    pub fn tcpip_adapter_get_ip6_global(
        tcpip_if: tcpip_adapter_if_t,
        if_ip6: *mut ip6_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief`Translates to esp_netif_dhcpc_get_status"]
    #[doc = " @param tcpip_if Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @param status"]
    #[doc = " @return See esp_netif_dhcpc_get_status"]
    pub fn tcpip_adapter_dhcpc_get_status(
        tcpip_if: tcpip_adapter_if_t,
        status: *mut tcpip_adapter_dhcp_status_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_is_netif_up"]
    #[doc = " @param tcpip_if Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @return see esp_netif_is_netif_up"]
    pub fn tcpip_adapter_is_netif_up(tcpip_if: tcpip_adapter_if_t) -> bool;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_get_netif"]
    #[doc = " @param tcpip_if Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @param netif"]
    #[doc = " @return see esp_netif_get_netif"]
    pub fn tcpip_adapter_get_netif(
        tcpip_if: tcpip_adapter_if_t,
        netif: *mut *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Translates to esp_netif_create_ip6_linklocal"]
    #[doc = " @param tcpip_if Interface type corresponding to appropriate instance of esp-netif"]
    #[doc = " @return see esp_netif_create_ip6_linklocal"]
    pub fn tcpip_adapter_create_ip6_linklocal(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of setting ethernet default handlers"]
    #[doc = " @note Compatible version of wifi handlers are provided in a separate header,"]
    #[doc = " as this used to be called privately from wifi_init()"]
    #[doc = " @return ESP_OK on success"]
    pub fn tcpip_adapter_set_default_eth_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of network stack input function. Translates to esp_netif_receive()"]
    pub fn tcpip_adapter_eth_input(
        buffer: *mut c_types::c_void,
        len: u16,
        eb: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of network stack input function. Translates to esp_netif_receive()"]
    pub fn tcpip_adapter_sta_input(
        buffer: *mut c_types::c_void,
        len: u16,
        eb: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of network stack input function. Translates to esp_netif_receive()"]
    pub fn tcpip_adapter_ap_input(
        buffer: *mut c_types::c_void,
        len: u16,
        eb: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API to clear default WIFI handlers"]
    #[doc = " @return ESP_OK on success"]
    pub fn tcpip_adapter_clear_default_wifi_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API to clear default ethernet handlers"]
    #[doc = " @return ESP_OK on success"]
    pub fn tcpip_adapter_clear_default_eth_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcps_stop"]
    pub fn tcpip_adapter_dhcps_stop(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcpc_stop"]
    pub fn tcpip_adapter_dhcpc_stop(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcps_start"]
    pub fn tcpip_adapter_dhcps_start(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcpc_start"]
    pub fn tcpip_adapter_dhcpc_start(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcps_get_status"]
    pub fn tcpip_adapter_dhcps_get_status(
        tcpip_if: tcpip_adapter_if_t,
        status: *mut tcpip_adapter_dhcp_status_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcps_option"]
    pub fn tcpip_adapter_dhcps_option(
        opt_op: tcpip_adapter_dhcp_option_mode_t,
        opt_id: tcpip_adapter_dhcp_option_id_t,
        opt_val: *mut c_types::c_void,
        opt_len: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_dhcpc_option"]
    pub fn tcpip_adapter_dhcpc_option(
        opt_op: tcpip_adapter_dhcp_option_mode_t,
        opt_id: tcpip_adapter_dhcp_option_id_t,
        opt_val: *mut c_types::c_void,
        opt_len: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_set_ip_info"]
    pub fn tcpip_adapter_set_ip_info(
        tcpip_if: tcpip_adapter_if_t,
        ip_info: *const tcpip_adapter_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_dns_info"]
    pub fn tcpip_adapter_get_dns_info(
        tcpip_if: tcpip_adapter_if_t,
        type_: tcpip_adapter_dns_type_t,
        dns: *mut tcpip_adapter_dns_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_set_dns_info"]
    pub fn tcpip_adapter_set_dns_info(
        tcpip_if: tcpip_adapter_if_t,
        type_: tcpip_adapter_dns_type_t,
        dns: *mut tcpip_adapter_dns_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_netif_impl_index"]
    pub fn tcpip_adapter_get_netif_index(tcpip_if: tcpip_adapter_if_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_sta_list"]
    pub fn tcpip_adapter_get_sta_list(
        wifi_sta_list: *const wifi_sta_list_t,
        tcpip_sta_list: *mut tcpip_adapter_sta_list_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_action_start for default ethernet"]
    pub fn tcpip_adapter_eth_start(
        mac: *mut u8,
        ip_info: *mut tcpip_adapter_ip_info_t,
        args: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_action_start for default station"]
    pub fn tcpip_adapter_sta_start(
        mac: *mut u8,
        ip_info: *mut tcpip_adapter_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_action_start for default softAP"]
    pub fn tcpip_adapter_ap_start(mac: *mut u8, ip_info: *mut tcpip_adapter_ip_info_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_action_stop"]
    pub fn tcpip_adapter_stop(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_up"]
    pub fn tcpip_adapter_up(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_down"]
    pub fn tcpip_adapter_down(tcpip_if: tcpip_adapter_if_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_old_ip_info"]
    pub fn tcpip_adapter_get_old_ip_info(
        tcpip_if: tcpip_adapter_if_t,
        ip_info: *mut tcpip_adapter_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_set_old_ip_info"]
    pub fn tcpip_adapter_set_old_ip_info(
        tcpip_if: tcpip_adapter_if_t,
        ip_info: *const tcpip_adapter_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_handle_from_netif_impl"]
    pub fn tcpip_adapter_get_esp_if(dev: *mut c_types::c_void) -> esp_interface_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_set_hostname"]
    pub fn tcpip_adapter_set_hostname(
        tcpip_if: tcpip_adapter_if_t,
        hostname: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Compatible version of former tcpip_adapter API of esp_netif_get_hostname"]
    pub fn tcpip_adapter_get_hostname(
        tcpip_if: tcpip_adapter_if_t,
        hostname: *mut *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief This function is called from wifi_init to assure backward compatibility mode"]
    #[doc = " of tcpip_adapter. In case of legacy use, default instances of ap and sta"]
    #[doc = " are created and handlers are registered"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    pub fn tcpip_adapter_set_default_wifi_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Initialize the underlying TCP/IP stack"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK on success"]
    #[doc = "         - ESP_FAIL if initializing failed"]
    #[doc = ""]
    #[doc = " @note This function should be called exactly once from application code, when the application starts up."]
    pub fn esp_netif_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Deinitialize the esp-netif component (and the underlying TCP/IP stack)"]
    #[doc = ""]
    #[doc = "          Note: Deinitialization is not supported yet"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_STATE if esp_netif not initialized"]
    #[doc = "         - ESP_ERR_NOT_SUPPORTED otherwise"]
    pub fn esp_netif_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Creates an instance of new esp-netif object based on provided config"]
    #[doc = ""]
    #[doc = " @param[in]     esp_netif_config pointer esp-netif configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - pointer to esp-netif object on success"]
    #[doc = "         - NULL otherwise"]
    pub fn esp_netif_new(esp_netif_config: *const esp_netif_config_t) -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief   Destroys the esp_netif object"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif pointer to the object to be deleted"]
    pub fn esp_netif_destroy(esp_netif: *mut esp_netif_t);
}
extern "C" {
    #[doc = " @brief   Configures driver related options of esp_netif object"]
    #[doc = ""]
    #[doc = " @param[inout]  esp_netif pointer to the object to be configured"]
    #[doc = " @param[in]     driver_config pointer esp-netif io driver related configuration"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK on success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS if invalid parameters provided"]
    #[doc = ""]
    pub fn esp_netif_set_driver_config(
        esp_netif: *mut esp_netif_t,
        driver_config: *const esp_netif_driver_ifconfig_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Attaches esp_netif instance to the io driver handle"]
    #[doc = ""]
    #[doc = " Calling this function enables connecting specific esp_netif object"]
    #[doc = " with already initialized io driver to update esp_netif object with driver"]
    #[doc = " specific configuration (i.e. calls post_attach callback, which typically"]
    #[doc = " sets io driver callbacks to esp_netif instance and starts the driver)"]
    #[doc = ""]
    #[doc = " @param[inout]  esp_netif pointer to esp_netif object to be attached"]
    #[doc = " @param[in]  driver_handle pointer to the driver handle"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK on success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DRIVER_ATTACH_FAILED if driver's pot_attach callback failed"]
    pub fn esp_netif_attach(
        esp_netif: *mut esp_netif_t,
        driver_handle: esp_netif_iodriver_handle,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Passes the raw packets from communication media to the appropriate TCP/IP stack"]
    #[doc = ""]
    #[doc = " This function is called from the configured (peripheral) driver layer."]
    #[doc = " The data are then forwarded as frames to the TCP/IP stack."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]  buffer Received data"]
    #[doc = " @param[in]  len Length of the data frame"]
    #[doc = " @param[in]  eb Pointer to internal buffer (used in Wi-Fi driver)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    pub fn esp_netif_receive(
        esp_netif: *mut esp_netif_t,
        buffer: *mut c_types::c_void,
        len: size_t,
        eb: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IO driver start event"]
    #[doc = " Creates network interface, if AUTOUP enabled turns the interface on,"]
    #[doc = " if DHCPS enabled starts dhcp server"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_start(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IO driver stop event"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_stop(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IO driver connected event"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_connected(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IO driver disconnected event"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_disconnected(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon network got IP event"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_got_ip(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IPv6 multicast group join"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_join_ip6_multicast_group(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IPv6 multicast group leave"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_leave_ip6_multicast_group(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IPv6 address added by the underlying stack"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_add_ip6_address(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Default building block for network interface action upon IPv6 address removed by the underlying stack"]
    #[doc = ""]
    #[doc = " @note This API can be directly used as event handler"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param base"]
    #[doc = " @param event_id"]
    #[doc = " @param data"]
    pub fn esp_netif_action_remove_ip6_address(
        esp_netif: *mut c_types::c_void,
        base: esp_event_base_t,
        event_id: i32,
        data: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " @brief Set the mac address for the interface instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]  mac Desired mac address for the related network interface"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK - success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_IF_NOT_READY - interface status error"]
    #[doc = "         - ESP_ERR_NOT_SUPPORTED - mac not supported on this interface"]
    pub fn esp_netif_set_mac(esp_netif: *mut esp_netif_t, mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the mac address for the interface instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]  mac Resultant mac address for the related network interface"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK - success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_IF_NOT_READY - interface status error"]
    #[doc = "         - ESP_ERR_NOT_SUPPORTED - mac not supported on this interface"]
    pub fn esp_netif_get_mac(esp_netif: *mut esp_netif_t, mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set the hostname of an interface"]
    #[doc = ""]
    #[doc = " The configured hostname overrides the default configuration value CONFIG_LWIP_LOCAL_HOSTNAME."]
    #[doc = " Please note that when the hostname is altered after interface started/connected the changes"]
    #[doc = " would only be reflected once the interface restarts/reconnects"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]   hostname New hostname for the interface. Maximum length 32 bytes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK - success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_IF_NOT_READY - interface status error"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS - parameter error"]
    pub fn esp_netif_set_hostname(
        esp_netif: *mut esp_netif_t,
        hostname: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get interface hostname."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]   hostname Returns a pointer to the hostname. May be NULL if no hostname is set. If set non-NULL, pointer remains valid (and string may change if the hostname changes)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK - success"]
    #[doc = "         - ESP_ERR_ESP_NETIF_IF_NOT_READY - interface status error"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS - parameter error"]
    pub fn esp_netif_get_hostname(
        esp_netif: *mut esp_netif_t,
        hostname: *mut *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Test if supplied interface is up or down"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - true - Interface is up"]
    #[doc = "         - false - Interface is down"]
    pub fn esp_netif_is_netif_up(esp_netif: *mut esp_netif_t) -> bool;
}
extern "C" {
    #[doc = " @brief  Get interface's IP address information"]
    #[doc = ""]
    #[doc = " If the interface is up, IP information is read directly from the TCP/IP stack."]
    #[doc = " If the interface is down, IP information is read from a copy kept in the ESP-NETIF instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]  ip_info If successful, IP information will be returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_get_ip_info(
        esp_netif: *mut esp_netif_t,
        ip_info: *mut esp_netif_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get interface's old IP information"]
    #[doc = ""]
    #[doc = " Returns an \"old\" IP address previously stored for the interface when the valid IP changed."]
    #[doc = ""]
    #[doc = " If the IP lost timer has expired (meaning the interface was down for longer than the configured interval)"]
    #[doc = " then the old IP information will be zero."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]  ip_info If successful, IP information will be returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_get_old_ip_info(
        esp_netif: *mut esp_netif_t,
        ip_info: *mut esp_netif_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set interface's IP address information"]
    #[doc = ""]
    #[doc = " This function is mainly used to set a static IP on an interface."]
    #[doc = ""]
    #[doc = " If the interface is up, the new IP information is set directly in the TCP/IP stack."]
    #[doc = ""]
    #[doc = " The copy of IP information kept in the ESP-NETIF instance is also updated (this"]
    #[doc = " copy is returned if the IP is queried while the interface is still down.)"]
    #[doc = ""]
    #[doc = " @note DHCP client/server must be stopped (if enabled for this interface) before setting new IP information."]
    #[doc = ""]
    #[doc = " @note Calling this interface for may generate a SYSTEM_EVENT_STA_GOT_IP or SYSTEM_EVENT_ETH_GOT_IP event."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in] ip_info IP information to set on the specified interface"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK"]
    #[doc = "      - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "      - ESP_ERR_ESP_NETIF_DHCP_NOT_STOPPED If DHCP server or client is still running"]
    pub fn esp_netif_set_ip_info(
        esp_netif: *mut esp_netif_t,
        ip_info: *const esp_netif_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set interface old IP information"]
    #[doc = ""]
    #[doc = " This function is called from the DHCP client (if enabled), before a new IP is set."]
    #[doc = " It is also called from the default handlers for the SYSTEM_EVENT_STA_CONNECTED and SYSTEM_EVENT_ETH_CONNECTED events."]
    #[doc = ""]
    #[doc = " Calling this function stores the previously configured IP, which can be used to determine if the IP changes in the future."]
    #[doc = ""]
    #[doc = " If the interface is disconnected or down for too long, the \"IP lost timer\" will expire (after the configured interval) and set the old IP information to zero."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]  ip_info Store the old IP information for the specified interface"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_set_old_ip_info(
        esp_netif: *mut esp_netif_t,
        ip_info: *const esp_netif_ip_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get net interface index from network stack implementation"]
    #[doc = ""]
    #[doc = " @note This index could be used in `setsockopt()` to bind socket with multicast interface"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         implementation specific index of interface represented with supplied esp_netif"]
    pub fn esp_netif_get_netif_impl_index(esp_netif: *mut esp_netif_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief  Get net interface name from network stack implementation"]
    #[doc = ""]
    #[doc = " @note This name could be used in `setsockopt()` to bind socket with appropriate interface"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]  name Interface name as specified in underlying TCP/IP stack. Note that the"]
    #[doc = " actual name will be copied to the specified buffer, which must be allocated to hold"]
    #[doc = " maximum interface name size (6 characters for lwIP)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_get_netif_impl_name(
        esp_netif: *mut esp_netif_t,
        name: *mut c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set or Get DHCP server option"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in] opt_op ESP_NETIF_OP_SET to set an option, ESP_NETIF_OP_GET to get an option."]
    #[doc = " @param[in] opt_id Option index to get or set, must be one of the supported enum values."]
    #[doc = " @param[inout] opt_val Pointer to the option parameter."]
    #[doc = " @param[in] opt_len Length of the option parameter."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STOPPED"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STARTED"]
    pub fn esp_netif_dhcps_option(
        esp_netif: *mut esp_netif_t,
        opt_op: esp_netif_dhcp_option_mode_t,
        opt_id: esp_netif_dhcp_option_id_t,
        opt_val: *mut c_types::c_void,
        opt_len: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set or Get DHCP client option"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in] opt_op ESP_NETIF_OP_SET to set an option, ESP_NETIF_OP_GET to get an option."]
    #[doc = " @param[in] opt_id Option index to get or set, must be one of the supported enum values."]
    #[doc = " @param[inout] opt_val Pointer to the option parameter."]
    #[doc = " @param[in] opt_len Length of the option parameter."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STOPPED"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STARTED"]
    pub fn esp_netif_dhcpc_option(
        esp_netif: *mut esp_netif_t,
        opt_op: esp_netif_dhcp_option_mode_t,
        opt_id: esp_netif_dhcp_option_id_t,
        opt_val: *mut c_types::c_void,
        opt_len: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start DHCP client (only if enabled in interface object)"]
    #[doc = ""]
    #[doc = " @note The default event handlers for the SYSTEM_EVENT_STA_CONNECTED and SYSTEM_EVENT_ETH_CONNECTED events call this function."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STARTED"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCPC_START_FAILED"]
    pub fn esp_netif_dhcpc_start(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Stop DHCP client (only if enabled in interface object)"]
    #[doc = ""]
    #[doc = " @note Calling action_netif_stop() will also stop the DHCP Client if it is running."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK"]
    #[doc = "      - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "      - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STOPPED"]
    #[doc = "      - ESP_ERR_ESP_NETIF_IF_NOT_READY"]
    pub fn esp_netif_dhcpc_stop(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get DHCP client status"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out] status If successful, the status of DHCP client will be returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    pub fn esp_netif_dhcpc_get_status(
        esp_netif: *mut esp_netif_t,
        status: *mut esp_netif_dhcp_status_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get DHCP Server status"]
    #[doc = ""]
    #[doc = " @param[in]   esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out]  status If successful, the status of the DHCP server will be returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    pub fn esp_netif_dhcps_get_status(
        esp_netif: *mut esp_netif_t,
        status: *mut esp_netif_dhcp_status_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Start DHCP server (only if enabled in interface object)"]
    #[doc = ""]
    #[doc = " @param[in]   esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "         - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STARTED"]
    pub fn esp_netif_dhcps_start(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Stop DHCP server (only if enabled in interface object)"]
    #[doc = ""]
    #[doc = " @param[in]   esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK"]
    #[doc = "      - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    #[doc = "      - ESP_ERR_ESP_NETIF_DHCP_ALREADY_STOPPED"]
    #[doc = "      - ESP_ERR_ESP_NETIF_IF_NOT_READY"]
    pub fn esp_netif_dhcps_stop(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set DNS Server information"]
    #[doc = ""]
    #[doc = " This function behaves differently if DHCP server or client is enabled"]
    #[doc = ""]
    #[doc = "   If DHCP client is enabled, main and backup DNS servers will be updated automatically"]
    #[doc = "   from the DHCP lease if the relevant DHCP options are set. Fallback DNS Server is never updated from the DHCP lease"]
    #[doc = "   and is designed to be set via this API."]
    #[doc = "   If DHCP client is disabled, all DNS server types can be set via this API only."]
    #[doc = ""]
    #[doc = "   If DHCP server is enabled, the Main DNS Server setting is used by the DHCP server to provide a DNS Server option"]
    #[doc = "   to DHCP clients (Wi-Fi stations)."]
    #[doc = "   - The default Main DNS server is typically the IP of the Wi-Fi AP interface itself."]
    #[doc = "   - This function can override it by setting server type ESP_NETIF_DNS_MAIN."]
    #[doc = "   - Other DNS Server types are not supported for the Wi-Fi AP interface."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]  type Type of DNS Server to set: ESP_NETIF_DNS_MAIN, ESP_NETIF_DNS_BACKUP, ESP_NETIF_DNS_FALLBACK"]
    #[doc = " @param[in]  dns  DNS Server address to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_ESP_NETIF_INVALID_PARAMS invalid params"]
    pub fn esp_netif_set_dns_info(
        esp_netif: *mut esp_netif_t,
        type_: esp_netif_dns_type_t,
        dns: *mut esp_netif_dns_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get DNS Server information"]
    #[doc = ""]
    #[doc = " Return the currently configured DNS Server address for the specified interface and Server type."]
    #[doc = ""]
    #[doc = " This may be result of a previous call to esp_netif_set_dns_info(). If the interface's DHCP client is enabled,"]
    #[doc = " the Main or Backup DNS Server may be set by the current DHCP lease."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[in]  type Type of DNS Server to get: ESP_NETIF_DNS_MAIN, ESP_NETIF_DNS_BACKUP, ESP_NETIF_DNS_FALLBACK"]
    #[doc = " @param[out] dns  DNS Server result is written here on success"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_ESP_NETIF_INVALID_PARAMS invalid params"]
    pub fn esp_netif_get_dns_info(
        esp_netif: *mut esp_netif_t,
        type_: esp_netif_dns_type_t,
        dns: *mut esp_netif_dns_info_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Create interface link-local IPv6 address"]
    #[doc = ""]
    #[doc = " Cause the TCP/IP stack to create a link-local IPv6 address for the specified interface."]
    #[doc = ""]
    #[doc = " This function also registers a callback for the specified interface, so that if the link-local address becomes"]
    #[doc = " verified as the preferred address then a SYSTEM_EVENT_GOT_IP6 event will be sent."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_OK"]
    #[doc = "         - ESP_ERR_ESP_NETIF_INVALID_PARAMS"]
    pub fn esp_netif_create_ip6_linklocal(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get interface link-local IPv6 address"]
    #[doc = ""]
    #[doc = " If the specified interface is up and a preferred link-local IPv6 address"]
    #[doc = " has been created for the interface, return a copy of it."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out] if_ip6 IPv6 information will be returned in this argument if successful."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK"]
    #[doc = "      - ESP_FAIL If interface is down, does not have a link-local IPv6 address,"]
    #[doc = "        or the link-local IPv6 address is not a preferred address."]
    pub fn esp_netif_get_ip6_linklocal(
        esp_netif: *mut esp_netif_t,
        if_ip6: *mut esp_ip6_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get interface global IPv6 address"]
    #[doc = ""]
    #[doc = " If the specified interface is up and a preferred global IPv6 address"]
    #[doc = " has been created for the interface, return a copy of it."]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out] if_ip6 IPv6 information will be returned in this argument if successful."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK"]
    #[doc = "      - ESP_FAIL If interface is down, does not have a global IPv6 address,"]
    #[doc = "        or the global IPv6 address is not a preferred address."]
    pub fn esp_netif_get_ip6_global(
        esp_netif: *mut esp_netif_t,
        if_ip6: *mut esp_ip6_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get all IPv6 addresses of the specified interface"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = " @param[out] if_ip6 Array of IPv6 addresses will be copied to the argument"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      number of returned IPv6 addresses"]
    pub fn esp_netif_get_all_ip6(
        esp_netif: *mut esp_netif_t,
        if_ip6: *mut esp_ip6_addr_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Sets IPv4 address to the specified octets"]
    #[doc = ""]
    #[doc = " @param[out] addr IP address to be set"]
    #[doc = " @param a the first octet (127 for IP 127.0.0.1)"]
    #[doc = " @param b"]
    #[doc = " @param c"]
    #[doc = " @param d"]
    pub fn esp_netif_set_ip4_addr(addr: *mut esp_ip4_addr_t, a: u8, b: u8, c: u8, d: u8);
}
extern "C" {
    #[doc = " @brief Converts numeric IP address into decimal dotted ASCII representation."]
    #[doc = ""]
    #[doc = " @param addr ip address in network order to convert"]
    #[doc = " @param buf target buffer where the string is stored"]
    #[doc = " @param buflen length of buf"]
    #[doc = " @return either pointer to buf which now holds the ASCII"]
    #[doc = "         representation of addr or NULL if buf was too small"]
    pub fn esp_ip4addr_ntoa(
        addr: *const esp_ip4_addr_t,
        buf: *mut c_types::c_char,
        buflen: c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    #[doc = " @brief Ascii internet address interpretation routine"]
    #[doc = " The value returned is in network order."]
    #[doc = ""]
    #[doc = " @param addr IP address in ascii representation (e.g. \"127.0.0.1\")"]
    #[doc = " @return ip address in network order"]
    pub fn esp_ip4addr_aton(addr: *const c_types::c_char) -> u32;
}
extern "C" {
    #[doc = " @brief Converts Ascii internet IPv4 address into esp_ip4_addr_t"]
    #[doc = ""]
    #[doc = " @param[in] src IPv4 address in ascii representation (e.g. \"127.0.0.1\")"]
    #[doc = " @param[out] dst Address of the target esp_ip4_addr_t structure to receive converted address"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK on success"]
    #[doc = "         - ESP_FAIL if conversion failed"]
    #[doc = "         - ESP_ERR_INVALID_ARG if invalid parameter is passed into"]
    pub fn esp_netif_str_to_ip4(src: *const c_types::c_char, dst: *mut esp_ip4_addr_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Converts Ascii internet IPv6 address into esp_ip4_addr_t"]
    #[doc = " Zeros in the IP address can be stripped or completely ommited: \"2001:db8:85a3:0:0:0:2:1\" or \"2001:db8::2:1\")"]
    #[doc = ""]
    #[doc = " @param[in] src IPv6 address in ascii representation (e.g. \"\"2001:0db8:85a3:0000:0000:0000:0002:0001\")"]
    #[doc = " @param[out] dst Address of the target esp_ip6_addr_t structure to receive converted address"]
    #[doc = " @return"]
    #[doc = "         - ESP_OK on success"]
    #[doc = "         - ESP_FAIL if conversion failed"]
    #[doc = "         - ESP_ERR_INVALID_ARG if invalid parameter is passed into"]
    pub fn esp_netif_str_to_ip6(src: *const c_types::c_char, dst: *mut esp_ip6_addr_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Gets media driver handle for this esp-netif instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return opaque pointer of related IO driver"]
    pub fn esp_netif_get_io_driver(esp_netif: *mut esp_netif_t) -> esp_netif_iodriver_handle;
}
extern "C" {
    #[doc = " @brief Searches over a list of created objects to find an instance with supplied if key"]
    #[doc = ""]
    #[doc = " @param if_key Textual description of network interface"]
    #[doc = ""]
    #[doc = " @return Handle to esp-netif instance"]
    pub fn esp_netif_get_handle_from_ifkey(if_key: *const c_types::c_char) -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief Returns configured flags for this interface"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return Configuration flags"]
    pub fn esp_netif_get_flags(esp_netif: *mut esp_netif_t) -> esp_netif_flags_t;
}
extern "C" {
    #[doc = " @brief Returns configured interface key for this esp-netif instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return Textual description of related interface"]
    pub fn esp_netif_get_ifkey(esp_netif: *mut esp_netif_t) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " @brief Returns configured interface type for this esp-netif instance"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return Enumerated type of this interface, such as station, AP, ethernet"]
    pub fn esp_netif_get_desc(esp_netif: *mut esp_netif_t) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " @brief Returns configured routing priority number"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return Integer representing the instance's route-prio, or -1 if invalid paramters"]
    pub fn esp_netif_get_route_prio(esp_netif: *mut esp_netif_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Returns configured event for this esp-netif instance and supplied event type"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @param event_type (either get or lost IP)"]
    #[doc = ""]
    #[doc = " @return specific event id which is configured to be raised if the interface lost or acquired IP address"]
    #[doc = "         -1 if supplied event_type is not known"]
    pub fn esp_netif_get_event_id(
        esp_netif: *mut esp_netif_t,
        event_type: esp_netif_ip_event_type_t,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Iterates over list of interfaces. Returns first netif if NULL given as parameter"]
    #[doc = ""]
    #[doc = " @param[in]  esp_netif Handle to esp-netif instance"]
    #[doc = ""]
    #[doc = " @return First netif from the list if supplied parameter is NULL, next one otherwise"]
    pub fn esp_netif_next(esp_netif: *mut esp_netif_t) -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief Returns number of registered esp_netif objects"]
    #[doc = ""]
    #[doc = " @return Number of esp_netifs"]
    pub fn esp_netif_get_nr_of_ifs() -> size_t;
}
extern "C" {
    #[doc = " @brief increase the reference counter of net stack buffer"]
    #[doc = ""]
    #[doc = " @param[in]  netstack_buf the net stack buffer"]
    #[doc = ""]
    pub fn esp_netif_netstack_buf_ref(netstack_buf: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief free the netstack buffer"]
    #[doc = ""]
    #[doc = " @param[in]  netstack_buf the net stack buffer"]
    #[doc = ""]
    pub fn esp_netif_netstack_buf_free(netstack_buf: *mut c_types::c_void);
}
#[doc = "< ESP32 WiFi ready"]
pub const system_event_id_t_SYSTEM_EVENT_WIFI_READY: system_event_id_t = 0;
#[doc = "< ESP32 finish scanning AP"]
pub const system_event_id_t_SYSTEM_EVENT_SCAN_DONE: system_event_id_t = 1;
#[doc = "< ESP32 station start"]
pub const system_event_id_t_SYSTEM_EVENT_STA_START: system_event_id_t = 2;
#[doc = "< ESP32 station stop"]
pub const system_event_id_t_SYSTEM_EVENT_STA_STOP: system_event_id_t = 3;
#[doc = "< ESP32 station connected to AP"]
pub const system_event_id_t_SYSTEM_EVENT_STA_CONNECTED: system_event_id_t = 4;
#[doc = "< ESP32 station disconnected from AP"]
pub const system_event_id_t_SYSTEM_EVENT_STA_DISCONNECTED: system_event_id_t = 5;
#[doc = "< the auth mode of AP connected by ESP32 station changed"]
pub const system_event_id_t_SYSTEM_EVENT_STA_AUTHMODE_CHANGE: system_event_id_t = 6;
#[doc = "< ESP32 station got IP from connected AP"]
pub const system_event_id_t_SYSTEM_EVENT_STA_GOT_IP: system_event_id_t = 7;
#[doc = "< ESP32 station lost IP and the IP is reset to 0"]
pub const system_event_id_t_SYSTEM_EVENT_STA_LOST_IP: system_event_id_t = 8;
#[doc = "< ESP32 station connected BSS rssi goes below threshold"]
pub const system_event_id_t_SYSTEM_EVENT_STA_BSS_RSSI_LOW: system_event_id_t = 9;
#[doc = "< ESP32 station wps succeeds in enrollee mode"]
pub const system_event_id_t_SYSTEM_EVENT_STA_WPS_ER_SUCCESS: system_event_id_t = 10;
#[doc = "< ESP32 station wps fails in enrollee mode"]
pub const system_event_id_t_SYSTEM_EVENT_STA_WPS_ER_FAILED: system_event_id_t = 11;
#[doc = "< ESP32 station wps timeout in enrollee mode"]
pub const system_event_id_t_SYSTEM_EVENT_STA_WPS_ER_TIMEOUT: system_event_id_t = 12;
#[doc = "< ESP32 station wps pin code in enrollee mode"]
pub const system_event_id_t_SYSTEM_EVENT_STA_WPS_ER_PIN: system_event_id_t = 13;
#[doc = "< ESP32 station wps overlap in enrollee mode"]
pub const system_event_id_t_SYSTEM_EVENT_STA_WPS_ER_PBC_OVERLAP: system_event_id_t = 14;
#[doc = "< ESP32 soft-AP start"]
pub const system_event_id_t_SYSTEM_EVENT_AP_START: system_event_id_t = 15;
#[doc = "< ESP32 soft-AP stop"]
pub const system_event_id_t_SYSTEM_EVENT_AP_STOP: system_event_id_t = 16;
#[doc = "< a station connected to ESP32 soft-AP"]
pub const system_event_id_t_SYSTEM_EVENT_AP_STACONNECTED: system_event_id_t = 17;
#[doc = "< a station disconnected from ESP32 soft-AP"]
pub const system_event_id_t_SYSTEM_EVENT_AP_STADISCONNECTED: system_event_id_t = 18;
#[doc = "< ESP32 soft-AP assign an IP to a connected station"]
pub const system_event_id_t_SYSTEM_EVENT_AP_STAIPASSIGNED: system_event_id_t = 19;
#[doc = "< Receive probe request packet in soft-AP interface"]
pub const system_event_id_t_SYSTEM_EVENT_AP_PROBEREQRECVED: system_event_id_t = 20;
#[doc = "< Receive status of Action frame transmitted"]
pub const system_event_id_t_SYSTEM_EVENT_ACTION_TX_STATUS: system_event_id_t = 21;
#[doc = "< Indicates the completion of Remain-on-Channel operation status"]
pub const system_event_id_t_SYSTEM_EVENT_ROC_DONE: system_event_id_t = 22;
#[doc = "< ESP32 station beacon timeout"]
pub const system_event_id_t_SYSTEM_EVENT_STA_BEACON_TIMEOUT: system_event_id_t = 23;
#[doc = "< Receive report of FTM procedure"]
pub const system_event_id_t_SYSTEM_EVENT_FTM_REPORT: system_event_id_t = 24;
#[doc = "< ESP32 station or ap or ethernet interface v6IP addr is preferred"]
pub const system_event_id_t_SYSTEM_EVENT_GOT_IP6: system_event_id_t = 25;
#[doc = "< ESP32 ethernet start"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_START: system_event_id_t = 26;
#[doc = "< ESP32 ethernet stop"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_STOP: system_event_id_t = 27;
#[doc = "< ESP32 ethernet phy link up"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_CONNECTED: system_event_id_t = 28;
#[doc = "< ESP32 ethernet phy link down"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_DISCONNECTED: system_event_id_t = 29;
#[doc = "< ESP32 ethernet got IP from connected AP"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_GOT_IP: system_event_id_t = 30;
#[doc = "< ESP32 ethernet lost IP and the IP is reset to 0"]
pub const system_event_id_t_SYSTEM_EVENT_ETH_LOST_IP: system_event_id_t = 31;
#[doc = "< Number of members in this enum"]
pub const system_event_id_t_SYSTEM_EVENT_MAX: system_event_id_t = 32;
#[doc = " System event types enumeration"]
pub type system_event_id_t = c_types::c_uint;
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_FAILED event"]
pub use self::wifi_event_sta_wps_fail_reason_t as system_event_sta_wps_fail_reason_t;
#[doc = " Argument structure for WIFI_EVENT_SCAN_DONE event"]
pub type system_event_sta_scan_done_t = wifi_event_sta_scan_done_t;
#[doc = " Argument structure for WIFI_EVENT_STA_CONNECTED event"]
pub type system_event_sta_connected_t = wifi_event_sta_connected_t;
#[doc = " Argument structure for WIFI_EVENT_STA_DISCONNECTED event"]
pub type system_event_sta_disconnected_t = wifi_event_sta_disconnected_t;
#[doc = " Argument structure for WIFI_EVENT_STA_AUTHMODE_CHANGE event"]
pub type system_event_sta_authmode_change_t = wifi_event_sta_authmode_change_t;
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_PIN event"]
pub type system_event_sta_wps_er_pin_t = wifi_event_sta_wps_er_pin_t;
#[doc = " Argument structure for WIFI_EVENT_STA_WPS_ER_SUCCESS event"]
pub type system_event_sta_wps_er_success_t = wifi_event_sta_wps_er_success_t;
#[doc = " Argument structure for WIFI_EVENT_AP_STACONNECTED event"]
pub type system_event_ap_staconnected_t = wifi_event_ap_staconnected_t;
#[doc = " Argument structure for WIFI_EVENT_AP_STADISCONNECTED event"]
pub type system_event_ap_stadisconnected_t = wifi_event_ap_stadisconnected_t;
#[doc = " Argument structure for WIFI_EVENT_AP_PROBEREQRECVED event"]
pub type system_event_ap_probe_req_rx_t = wifi_event_ap_probe_req_rx_t;
#[doc = " Argument structure for WIFI_EVENT_FTM_REPORT event"]
pub type system_event_ftm_report_t = wifi_event_ftm_report_t;
#[doc = " Event structure for IP_EVENT_AP_STAIPASSIGNED event"]
pub type system_event_ap_staipassigned_t = ip_event_ap_staipassigned_t;
#[doc = " Argument structure of  event"]
pub type system_event_sta_got_ip_t = ip_event_got_ip_t;
#[doc = " Event structure for IP_EVENT_GOT_IP6 event"]
pub type system_event_got_ip6_t = ip_event_got_ip6_t;
#[doc = " Union of all possible system_event argument structures"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union system_event_info_t {
    #[doc = "< ESP32 station connected to AP"]
    pub connected: system_event_sta_connected_t,
    #[doc = "< ESP32 station disconnected to AP"]
    pub disconnected: system_event_sta_disconnected_t,
    #[doc = "< ESP32 station scan (APs) done"]
    pub scan_done: system_event_sta_scan_done_t,
    #[doc = "< the auth mode of AP ESP32 station connected to changed"]
    pub auth_change: system_event_sta_authmode_change_t,
    #[doc = "< ESP32 station got IP, first time got IP or when IP is changed"]
    pub got_ip: system_event_sta_got_ip_t,
    #[doc = "< ESP32 station WPS enrollee mode PIN code received"]
    pub sta_er_pin: system_event_sta_wps_er_pin_t,
    #[doc = "< ESP32 station WPS enrollee mode failed reason code received"]
    pub sta_er_fail_reason: system_event_sta_wps_fail_reason_t,
    #[doc = "< ESP32 station WPS enrollee success"]
    pub sta_er_success: system_event_sta_wps_er_success_t,
    #[doc = "< a station connected to ESP32 soft-AP"]
    pub sta_connected: system_event_ap_staconnected_t,
    #[doc = "< a station disconnected to ESP32 soft-AP"]
    pub sta_disconnected: system_event_ap_stadisconnected_t,
    #[doc = "< ESP32 soft-AP receive probe request packet"]
    pub ap_probereqrecved: system_event_ap_probe_req_rx_t,
    #[doc = "< Report of FTM procedure"]
    pub ftm_report: system_event_ftm_report_t,
    #[doc = "< ESP32 soft-AP assign an IP to the station"]
    pub ap_staipassigned: system_event_ap_staipassigned_t,
    #[doc = "< ESP32 station\u{3000}or ap or ethernet ipv6 addr state change to preferred"]
    pub got_ip6: system_event_got_ip6_t,
}
impl Default for system_event_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Event, as a tagged enum"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct system_event_t {
    #[doc = "< event ID"]
    pub event_id: system_event_id_t,
    #[doc = "< event information"]
    pub event_info: system_event_info_t,
}
impl Default for system_event_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Event handler function type"]
pub type system_event_handler_t = ::core::option::Option<
    unsafe extern "C" fn(
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t,
>;
extern "C" {
    #[doc = " @brief  Send a event to event task"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    #[doc = ""]
    #[doc = " Other task/modules, such as the tcpip_adapter, can call this API to send an event to event task"]
    #[doc = ""]
    #[doc = " @param event Event to send"]
    #[doc = ""]
    #[doc = " @return ESP_OK : succeed"]
    #[doc = " @return others : fail"]
    pub fn esp_event_send(event: *mut system_event_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Send a event to event task"]
    #[doc = ""]
    #[doc = " @note This API is used by WiFi Driver only."]
    #[doc = ""]
    #[doc = " Other task/modules, such as the tcpip_adapter, can call this API to send an event to event task"]
    #[doc = ""]
    #[doc = " @param[in] event_base the event base that identifies the event"]
    #[doc = " @param[in] event_id the event id that identifies the event"]
    #[doc = " @param[in] event_data the data, specific to the event occurence, that gets passed to the handler"]
    #[doc = " @param[in] event_data_size the size of the event data"]
    #[doc = " @param[in] ticks_to_wait number of ticks to block on a full event queue"]
    #[doc = ""]
    #[doc = " @return ESP_OK : succeed"]
    #[doc = " @return others : fail"]
    pub fn esp_event_send_internal(
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Default event handler for system events"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    #[doc = ""]
    #[doc = " This function performs default handling of system events."]
    #[doc = " When using esp_event_loop APIs, it is called automatically before invoking the user-provided"]
    #[doc = " callback function."]
    #[doc = ""]
    #[doc = " Applications which implement a custom event loop must call this function"]
    #[doc = " as part of event processing."]
    #[doc = ""]
    #[doc = " @param  event   pointer to event to be handled"]
    #[doc = " @return ESP_OK if an event was handled successfully"]
    pub fn esp_event_process_default(event: *mut system_event_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Install default event handlers for Ethernet interface"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    #[doc = ""]
    pub fn esp_event_set_default_eth_handlers();
}
extern "C" {
    #[doc = " @brief  Install default event handlers for Wi-Fi interfaces (station and AP)"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    pub fn esp_event_set_default_wifi_handlers();
}
#[doc = " @brief  Application specified event callback function"]
#[doc = ""]
#[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
#[doc = ""]
#[doc = ""]
#[doc = " @param  ctx    reserved for user"]
#[doc = " @param  event  event type defined in this file"]
#[doc = ""]
#[doc = " @return"]
#[doc = "    - ESP_OK: succeed"]
#[doc = "    - others: fail"]
pub type system_event_cb_t = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut c_types::c_void, event: *mut system_event_t) -> esp_err_t,
>;
extern "C" {
    #[doc = " @brief  Initialize event loop"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    #[doc = ""]
    #[doc = " Create the event handler and task"]
    #[doc = ""]
    #[doc = " @param  cb   application specified event callback, it can be modified by call esp_event_set_cb"]
    #[doc = " @param  ctx  reserved for user"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: fail"]
    pub fn esp_event_loop_init(cb: system_event_cb_t, ctx: *mut c_types::c_void) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set application specified event callback function"]
    #[doc = ""]
    #[doc = " @note This API is part of the legacy event system. New code should use event library API in esp_event.h"]
    #[doc = ""]
    #[doc = " @attention 1. If cb is NULL, means application don't need to handle"]
    #[doc = "               If cb is not NULL, it will be call when an event is received, after the default event callback is completed"]
    #[doc = ""]
    #[doc = " @param  cb   application callback function"]
    #[doc = " @param  ctx  argument to be passed to callback"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return old callback"]
    pub fn esp_event_loop_set_cb(
        cb: system_event_cb_t,
        ctx: *mut c_types::c_void,
    ) -> system_event_cb_t;
}
#[doc = " Configuration for creating event loops"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_event_loop_args_t {
    #[doc = "< size of the event loop queue"]
    pub queue_size: i32,
    #[doc = "< name of the event loop task; if NULL,"]
    #[doc = "a dedicated task is not created for event loop"]
    pub task_name: *const c_types::c_char,
    #[doc = "< priority of the event loop task, ignored if task name is NULL"]
    pub task_priority: UBaseType_t,
    #[doc = "< stack size of the event loop task, ignored if task name is NULL"]
    pub task_stack_size: u32,
    #[doc = "< core to which the event loop task is pinned to,"]
    #[doc = "ignored if task name is NULL"]
    pub task_core_id: BaseType_t,
}
impl Default for esp_event_loop_args_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Create a new event loop."]
    #[doc = ""]
    #[doc = " @param[in] event_loop_args configuration structure for the event loop to create"]
    #[doc = " @param[out] event_loop handle to the created event loop"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_INVALID_ARG: event_loop_args or event_loop was NULL"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for event loops list"]
    #[doc = "  - ESP_FAIL: Failed to create task loop"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_loop_create(
        event_loop_args: *const esp_event_loop_args_t,
        event_loop: *mut esp_event_loop_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete an existing event loop."]
    #[doc = ""]
    #[doc = " @param[in] event_loop event loop to delete, must not be NULL"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_loop_delete(event_loop: esp_event_loop_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Create default event loop"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for event loops list"]
    #[doc = "  - ESP_FAIL: Failed to create task loop"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_loop_create_default() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete the default event loop"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_loop_delete_default() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Dispatch events posted to an event loop."]
    #[doc = ""]
    #[doc = " This function is used to dispatch events posted to a loop with no dedicated task, i.e task name was set to NULL"]
    #[doc = " in event_loop_args argument during loop creation. This function includes an argument to limit the amount of time"]
    #[doc = " it runs, returning control to the caller when that time expires (or some time afterwards). There is no guarantee"]
    #[doc = " that a call to this function will exit at exactly the time of expiry. There is also no guarantee that events have"]
    #[doc = " been dispatched during the call, as the function might have spent all of the alloted time waiting on the event queue."]
    #[doc = " Once an event has been unqueued, however, it is guaranteed to be dispatched. This guarantee contributes to not being"]
    #[doc = " able to exit exactly at time of expiry as (1) blocking on internal mutexes is necessary for dispatching the unqueued"]
    #[doc = " event, and (2) during  dispatch of the unqueued event there is no way to control the time occupied by handler code"]
    #[doc = " execution. The guaranteed time of exit is therefore the alloted time + amount of time required to dispatch"]
    #[doc = " the last unqueued event."]
    #[doc = ""]
    #[doc = " In cases where waiting on the queue times out, ESP_OK is returned and not ESP_ERR_TIMEOUT, since it is"]
    #[doc = " normal behavior."]
    #[doc = ""]
    #[doc = " @param[in] event_loop event loop to dispatch posted events from, must not be NULL"]
    #[doc = " @param[in] ticks_to_run number of ticks to run the loop"]
    #[doc = ""]
    #[doc = " @note encountering an unknown event that has been posted to the loop will only generate a warning, not an error."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_loop_run(
        event_loop: esp_event_loop_handle_t,
        ticks_to_run: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register an event handler to the system event loop (legacy)."]
    #[doc = ""]
    #[doc = " @note This function is obsolete and will be deprecated soon, please use esp_event_handler_instance_register()"]
    #[doc = "       instead."]
    #[doc = ""]
    #[doc = " This function can be used to register a handler for either: (1) specific events,"]
    #[doc = " (2) all events of a certain event base, or (3) all events known by the system event loop."]
    #[doc = ""]
    #[doc = "  - specific events: specify exact event_base and event_id"]
    #[doc = "  - all events of a certain base: specify exact event_base and use ESP_EVENT_ANY_ID as the event_id"]
    #[doc = "  - all events known by the loop: use ESP_EVENT_ANY_BASE for event_base and ESP_EVENT_ANY_ID as the event_id"]
    #[doc = ""]
    #[doc = " Registering multiple handlers to events is possible. Registering a single handler to multiple events is"]
    #[doc = " also possible. However, registering the same handler to the same event multiple times would cause the"]
    #[doc = " previous registrations to be overwritten."]
    #[doc = ""]
    #[doc = " @param[in] event_base the base id of the event to register the handler for"]
    #[doc = " @param[in] event_id the id of the event to register the handler for"]
    #[doc = " @param[in] event_handler the handler function which gets called when the event is dispatched"]
    #[doc = " @param[in] event_handler_arg data, aside from event data, that is passed to the handler when it is called"]
    #[doc = ""]
    #[doc = " @note the event loop library does not maintain a copy of event_handler_arg, therefore the user should"]
    #[doc = " ensure that event_handler_arg still points to a valid location by the time the handler gets called"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_register(
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register an event handler to a specific loop (legacy)."]
    #[doc = ""]
    #[doc = " @note This function is obsolete and will be deprecated soon, please use esp_event_handler_instance_register_with()"]
    #[doc = "       instead."]
    #[doc = ""]
    #[doc = " This function behaves in the same manner as esp_event_handler_register, except the additional"]
    #[doc = " specification of the event loop to register the handler to."]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop to register this handler function to, must not be NULL"]
    #[doc = " @param[in] event_base the base id of the event to register the handler for"]
    #[doc = " @param[in] event_id the id of the event to register the handler for"]
    #[doc = " @param[in] event_handler the handler function which gets called when the event is dispatched"]
    #[doc = " @param[in] event_handler_arg data, aside from event data, that is passed to the handler when it is called"]
    #[doc = ""]
    #[doc = " @note the event loop library does not maintain a copy of event_handler_arg, therefore the user should"]
    #[doc = " ensure that event_handler_arg still points to a valid location by the time the handler gets called"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_register_with(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register an instance of event handler to a specific loop."]
    #[doc = ""]
    #[doc = " This function can be used to register a handler for either: (1) specific events,"]
    #[doc = " (2) all events of a certain event base, or (3) all events known by the system event loop."]
    #[doc = ""]
    #[doc = "  - specific events: specify exact event_base and event_id"]
    #[doc = "  - all events of a certain base: specify exact event_base and use ESP_EVENT_ANY_ID as the event_id"]
    #[doc = "  - all events known by the loop: use ESP_EVENT_ANY_BASE for event_base and ESP_EVENT_ANY_ID as the event_id"]
    #[doc = ""]
    #[doc = " Besides the error, the function returns an instance object as output parameter to identify each registration."]
    #[doc = " This is necessary to remove (unregister) the registration before the event loop is deleted."]
    #[doc = ""]
    #[doc = " Registering multiple handlers to events, registering a single handler to multiple events as well as registering"]
    #[doc = " the same handler to the same event multiple times is possible."]
    #[doc = " Each registration yields a distinct instance object which identifies it over the registration"]
    #[doc = " lifetime."]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop to register this handler function to, must not be NULL"]
    #[doc = " @param[in] event_base the base id of the event to register the handler for"]
    #[doc = " @param[in] event_id the id of the event to register the handler for"]
    #[doc = " @param[in] event_handler the handler function which gets called when the event is dispatched"]
    #[doc = " @param[in] event_handler_arg data, aside from event data, that is passed to the handler when it is called"]
    #[doc = " @param[out] instance An event handler instance object related to the registered event handler and data, can be NULL."]
    #[doc = "             This needs to be kept if the specific callback instance should be unregistered before deleting the whole"]
    #[doc = "             event loop. Registering the same event handler multiple times is possible and yields distinct instance"]
    #[doc = "             objects. The data can be the same for all registrations."]
    #[doc = "             If no unregistration is needed but the handler should be deleted when the event loop is deleted,"]
    #[doc = "             instance can be NULL."]
    #[doc = ""]
    #[doc = " @note the event loop library does not maintain a copy of event_handler_arg, therefore the user should"]
    #[doc = " ensure that event_handler_arg still points to a valid location by the time the handler gets called"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id or instance is NULL"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_instance_register_with(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
        instance: *mut esp_event_handler_instance_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register an instance of event handler to the default loop."]
    #[doc = ""]
    #[doc = " This function does the same as esp_event_handler_instance_register_with, except that it registers the"]
    #[doc = " handler to the default event loop."]
    #[doc = ""]
    #[doc = " @param[in] event_base the base id of the event to register the handler for"]
    #[doc = " @param[in] event_id the id of the event to register the handler for"]
    #[doc = " @param[in] event_handler the handler function which gets called when the event is dispatched"]
    #[doc = " @param[in] event_handler_arg data, aside from event data, that is passed to the handler when it is called"]
    #[doc = " @param[out] instance An event handler instance object related to the registered event handler and data, can be NULL."]
    #[doc = "             This needs to be kept if the specific callback instance should be unregistered before deleting the whole"]
    #[doc = "             event loop. Registering the same event handler multiple times is possible and yields distinct instance"]
    #[doc = "             objects. The data can be the same for all registrations."]
    #[doc = "             If no unregistration is needed but the handler should be deleted when the event loop is deleted,"]
    #[doc = "             instance can be NULL."]
    #[doc = ""]
    #[doc = " @note the event loop library does not maintain a copy of event_handler_arg, therefore the user should"]
    #[doc = " ensure that event_handler_arg still points to a valid location by the time the handler gets called"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id or instance is NULL"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_instance_register(
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
        instance: *mut esp_event_handler_instance_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unregister a handler with the system event loop (legacy)."]
    #[doc = ""]
    #[doc = " @note This function is obsolete and will be deprecated soon, please use esp_event_handler_instance_unregister()"]
    #[doc = "       instead."]
    #[doc = ""]
    #[doc = " Unregisters a handler so it will no longer be called during dispatch."]
    #[doc = " Handlers can be unregistered for any combination of event_base and event_id which were previously registered."]
    #[doc = " To unregister a handler, the event_base and event_id arguments must match exactly the arguments passed to"]
    #[doc = " esp_event_handler_register() when that handler was registered. Passing ESP_EVENT_ANY_BASE and/or ESP_EVENT_ANY_ID"]
    #[doc = " will only unregister handlers that were registered with the same wildcard arguments."]
    #[doc = ""]
    #[doc = " @note When using ESP_EVENT_ANY_ID, handlers registered to specific event IDs using the same base will not be"]
    #[doc = "       unregistered. When using ESP_EVENT_ANY_BASE, events registered to specific bases will also not be"]
    #[doc = "       unregistered. This avoids accidental unregistration of handlers registered by other users or components."]
    #[doc = ""]
    #[doc = " @param[in] event_base the base of the event with which to unregister the handler"]
    #[doc = " @param[in] event_id the id of the event with which to unregister the handler"]
    #[doc = " @param[in] event_handler the handler to unregister"]
    #[doc = ""]
    #[doc = " @return ESP_OK success"]
    #[doc = " @return ESP_ERR_INVALID_ARG invalid combination of event base and event id"]
    #[doc = " @return others fail"]
    pub fn esp_event_handler_unregister(
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unregister a handler from a specific event loop (legacy)."]
    #[doc = ""]
    #[doc = " @note This function is obsolete and will be deprecated soon, please use esp_event_handler_instance_unregister_with()"]
    #[doc = "       instead."]
    #[doc = ""]
    #[doc = " This function behaves in the same manner as esp_event_handler_unregister, except the additional specification of"]
    #[doc = " the event loop to unregister the handler with."]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop with which to unregister this handler function, must not be NULL"]
    #[doc = " @param[in] event_base the base of the event with which to unregister the handler"]
    #[doc = " @param[in] event_id the id of the event with which to unregister the handler"]
    #[doc = " @param[in] event_handler the handler to unregister"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_unregister_with(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        event_handler: esp_event_handler_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unregister a handler instance from a specific event loop."]
    #[doc = ""]
    #[doc = " Unregisters a handler instance so it will no longer be called during dispatch."]
    #[doc = " Handler instances can be unregistered for any combination of event_base and event_id which were previously"]
    #[doc = " registered. To unregister a handler instance, the event_base and event_id arguments must match exactly the"]
    #[doc = " arguments passed to esp_event_handler_instance_register() when that handler instance was registered."]
    #[doc = " Passing ESP_EVENT_ANY_BASE and/or ESP_EVENT_ANY_ID will only unregister handler instances that were registered"]
    #[doc = " with the same wildcard arguments."]
    #[doc = ""]
    #[doc = " @note When using ESP_EVENT_ANY_ID, handlers registered to specific event IDs using the same base will not be"]
    #[doc = "       unregistered. When using ESP_EVENT_ANY_BASE, events registered to specific bases will also not be"]
    #[doc = "       unregistered. This avoids accidental unregistration of handlers registered by other users or components."]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop with which to unregister this handler function, must not be NULL"]
    #[doc = " @param[in] event_base the base of the event with which to unregister the handler"]
    #[doc = " @param[in] event_id the id of the event with which to unregister the handler"]
    #[doc = " @param[in] instance the instance object of the registration to be unregistered"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_instance_unregister_with(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        instance: esp_event_handler_instance_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unregister a handler from the system event loop."]
    #[doc = ""]
    #[doc = " This function does the same as esp_event_handler_instance_unregister_with, except that it unregisters the"]
    #[doc = " handler instance from the default event loop."]
    #[doc = ""]
    #[doc = " @param[in] event_base the base of the event with which to unregister the handler"]
    #[doc = " @param[in] event_id the id of the event with which to unregister the handler"]
    #[doc = " @param[in] instance the instance object of the registration to be unregistered"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_handler_instance_unregister(
        event_base: esp_event_base_t,
        event_id: i32,
        instance: esp_event_handler_instance_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Posts an event to the system default event loop. The event loop library keeps a copy of event_data and manages"]
    #[doc = " the copy's lifetime automatically (allocation + deletion); this ensures that the data the"]
    #[doc = " handler recieves is always valid."]
    #[doc = ""]
    #[doc = " @param[in] event_base the event base that identifies the event"]
    #[doc = " @param[in] event_id the event id that identifies the event"]
    #[doc = " @param[in] event_data the data, specific to the event occurence, that gets passed to the handler"]
    #[doc = " @param[in] event_data_size the size of the event data"]
    #[doc = " @param[in] ticks_to_wait number of ticks to block on a full event queue"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_TIMEOUT: Time to wait for event queue to unblock expired,"]
    #[doc = "                      queue full when posting from ISR"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_post(
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Posts an event to the specified event loop. The event loop library keeps a copy of event_data and manages"]
    #[doc = " the copy's lifetime automatically (allocation + deletion); this ensures that the data the"]
    #[doc = " handler recieves is always valid."]
    #[doc = ""]
    #[doc = " This function behaves in the same manner as esp_event_post_to, except the additional specification of the event loop"]
    #[doc = " to post the event to."]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop to post to, must not be NULL"]
    #[doc = " @param[in] event_base the event base that identifies the event"]
    #[doc = " @param[in] event_id the event id that identifies the event"]
    #[doc = " @param[in] event_data the data, specific to the event occurence, that gets passed to the handler"]
    #[doc = " @param[in] event_data_size the size of the event data"]
    #[doc = " @param[in] ticks_to_wait number of ticks to block on a full event queue"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_TIMEOUT: Time to wait for event queue to unblock expired,"]
    #[doc = "                      queue full when posting from ISR"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_post_to(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Special variant of esp_event_post for posting events from interrupt handlers."]
    #[doc = ""]
    #[doc = " @param[in] event_base the event base that identifies the event"]
    #[doc = " @param[in] event_id the event id that identifies the event"]
    #[doc = " @param[in] event_data the data, specific to the event occurence, that gets passed to the handler"]
    #[doc = " @param[in] event_data_size the size of the event data; max is 4 bytes"]
    #[doc = " @param[out] task_unblocked an optional parameter (can be NULL) which indicates that an event task with"]
    #[doc = "                            higher priority than currently running task has been unblocked by the posted event;"]
    #[doc = "                            a context switch should be requested before the interrupt is existed."]
    #[doc = ""]
    #[doc = " @note this function is only available when CONFIG_ESP_EVENT_POST_FROM_ISR is enabled"]
    #[doc = " @note when this function is called from an interrupt handler placed in IRAM, this function should"]
    #[doc = "       be placed in IRAM as well by enabling CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_FAIL: Event queue for the default event loop full"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id,"]
    #[doc = "                          data size of more than 4 bytes"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_isr_post(
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        task_unblocked: *mut BaseType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Special variant of esp_event_post_to for posting events from interrupt handlers"]
    #[doc = ""]
    #[doc = " @param[in] event_loop the event loop to post to, must not be NULL"]
    #[doc = " @param[in] event_base the event base that identifies the event"]
    #[doc = " @param[in] event_id the event id that identifies the event"]
    #[doc = " @param[in] event_data the data, specific to the event occurence, that gets passed to the handler"]
    #[doc = " @param[in] event_data_size the size of the event data"]
    #[doc = " @param[out] task_unblocked an optional parameter (can be NULL) which indicates that an event task with"]
    #[doc = "                            higher priority than currently running task has been unblocked by the posted event;"]
    #[doc = "                            a context switch should be requested before the interrupt is existed."]
    #[doc = ""]
    #[doc = " @note this function is only available when CONFIG_ESP_EVENT_POST_FROM_ISR is enabled"]
    #[doc = " @note when this function is called from an interrupt handler placed in IRAM, this function should"]
    #[doc = "       be placed in IRAM as well by enabling CONFIG_ESP_EVENT_POST_FROM_IRAM_ISR"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_FAIL: Event queue for the loop full"]
    #[doc = "  - ESP_ERR_INVALID_ARG: Invalid combination of event base and event id,"]
    #[doc = "                          data size of more than 4 bytes"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_isr_post_to(
        event_loop: esp_event_loop_handle_t,
        event_base: esp_event_base_t,
        event_id: i32,
        event_data: *mut c_types::c_void,
        event_data_size: size_t,
        task_unblocked: *mut BaseType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Dumps statistics of all event loops."]
    #[doc = ""]
    #[doc = " Dumps event loop info in the format:"]
    #[doc = ""]
    #[doc = "@verbatim"]
    #[doc = "event loop"]
    #[doc = "handler"]
    #[doc = "handler"]
    #[doc = "..."]
    #[doc = "event loop"]
    #[doc = "handler"]
    #[doc = "handler"]
    #[doc = "..."]
    #[doc = ""]
    #[doc = "where:"]
    #[doc = ""]
    #[doc = "event loop"]
    #[doc = "format: address,name rx:total_recieved dr:total_dropped"]
    #[doc = "where:"]
    #[doc = "address - memory address of the event loop"]
    #[doc = "name - name of the event loop, 'none' if no dedicated task"]
    #[doc = "total_recieved - number of successfully posted events"]
    #[doc = "total_dropped - number of events unsuccessfully posted due to queue being full"]
    #[doc = ""]
    #[doc = "handler"]
    #[doc = "format: address ev:base,id inv:total_invoked run:total_runtime"]
    #[doc = "where:"]
    #[doc = "address - address of the handler function"]
    #[doc = "base,id - the event specified by event base and id this handler executes"]
    #[doc = "total_invoked - number of times this handler has been invoked"]
    #[doc = "total_runtime - total amount of time used for invoking this handler"]
    #[doc = ""]
    #[doc = "@endverbatim"]
    #[doc = ""]
    #[doc = " @param[in] file the file stream to output to"]
    #[doc = ""]
    #[doc = " @note this function is a noop when CONFIG_ESP_EVENT_LOOP_PROFILING is disabled"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: Success"]
    #[doc = "  - ESP_ERR_NO_MEM: Cannot allocate memory for event loops list"]
    #[doc = "  - Others: Fail"]
    pub fn esp_event_dump(file: *mut FILE) -> esp_err_t;
}
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_MD5: esp_crypto_hash_alg_t = 0;
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_SHA1: esp_crypto_hash_alg_t = 1;
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_HMAC_MD5: esp_crypto_hash_alg_t = 2;
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_HMAC_SHA1: esp_crypto_hash_alg_t = 3;
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_SHA256: esp_crypto_hash_alg_t = 4;
pub const esp_crypto_hash_alg_t_ESP_CRYPTO_HASH_ALG_HMAC_SHA256: esp_crypto_hash_alg_t = 5;
pub type esp_crypto_hash_alg_t = c_types::c_uint;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_NULL: esp_crypto_cipher_alg_t = 0;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_ALG_AES: esp_crypto_cipher_alg_t = 1;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_ALG_3DES: esp_crypto_cipher_alg_t = 2;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_ALG_DES: esp_crypto_cipher_alg_t = 3;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_ALG_RC2: esp_crypto_cipher_alg_t = 4;
pub const esp_crypto_cipher_alg_t_ESP_CRYPTO_CIPHER_ALG_RC4: esp_crypto_cipher_alg_t = 5;
pub type esp_crypto_cipher_alg_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_hash {
    _unused: [u8; 0],
}
pub type esp_crypto_hash_t = crypto_hash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crypto_cipher {
    _unused: [u8; 0],
}
pub type esp_crypto_cipher_t = crypto_cipher;
#[doc = " @brief The AES callback function when do WPS connect."]
#[doc = ""]
#[doc = " @param key  Encryption key."]
#[doc = " @param iv  Encryption IV for CBC mode (16 bytes)."]
#[doc = " @param data  Data to encrypt in-place."]
#[doc = " @param data_len  Length of data in bytes (must be divisible by 16)"]
pub type esp_aes_128_encrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        iv: *const c_types::c_uchar,
        data: *mut c_types::c_uchar,
        data_len: c_types::c_int,
    ) -> c_types::c_int,
>;
#[doc = " @brief The AES callback function when do WPS connect."]
#[doc = ""]
#[doc = " @param key  Decryption key."]
#[doc = " @param iv  Decryption IV for CBC mode (16 bytes)."]
#[doc = " @param data  Data to decrypt in-place."]
#[doc = " @param data_len  Length of data in bytes (must be divisible by 16)"]
#[doc = ""]
pub type esp_aes_128_decrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        iv: *const c_types::c_uchar,
        data: *mut c_types::c_uchar,
        data_len: c_types::c_int,
    ) -> c_types::c_int,
>;
#[doc = " @brief The AES callback function when do STA connect."]
#[doc = ""]
#[doc = " @param kek  16-octet Key encryption key (KEK)."]
#[doc = " @param n  Length of the plaintext key in 64-bit units;"]
#[doc = " @param plain  Plaintext key to be wrapped, n * 64 bits"]
#[doc = " @param cipher  Wrapped key, (n + 1) * 64 bits"]
#[doc = ""]
pub type esp_aes_wrap_t = ::core::option::Option<
    unsafe extern "C" fn(
        kek: *const c_types::c_uchar,
        n: c_types::c_int,
        plain: *const c_types::c_uchar,
        cipher: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief The AES callback function when do STA connect."]
#[doc = ""]
#[doc = " @param kek  16-octet Key decryption key (KEK)."]
#[doc = " @param n  Length of the plaintext key in 64-bit units;"]
#[doc = " @param cipher  Wrapped key to be unwrapped, (n + 1) * 64 bits"]
#[doc = " @param plain  Plaintext key, n * 64 bits"]
#[doc = ""]
pub type esp_aes_unwrap_t = ::core::option::Option<
    unsafe extern "C" fn(
        kek: *const c_types::c_uchar,
        n: c_types::c_int,
        cipher: *const c_types::c_uchar,
        plain: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief The SHA256 callback function when do WPS connect."]
#[doc = ""]
#[doc = " @param key  Key for HMAC operations."]
#[doc = " @param key_len  Length of the key in bytes."]
#[doc = " @param num_elem  Number of elements in the data vector."]
#[doc = " @param addr  Pointers to the data areas."]
#[doc = " @param len  Lengths of the data blocks."]
#[doc = " @param mac  Buffer for the hash (32 bytes)."]
#[doc = ""]
pub type esp_hmac_sha256_vector_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_int,
        num_elem: c_types::c_int,
        addr: *mut *const c_types::c_uchar,
        len: *const c_types::c_int,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief The AES callback function when do STA connect."]
#[doc = ""]
#[doc = " @param key  Key for PRF."]
#[doc = " @param key_len  Length of the key in bytes."]
#[doc = " @param label  A unique label for each purpose of the PRF."]
#[doc = " @param data  Extra data to bind into the key."]
#[doc = " @param data_len  Length of the data."]
#[doc = " @param buf  Buffer for the generated pseudo-random key."]
#[doc = " @param buf_len  Number of bytes of key to generate."]
#[doc = ""]
pub type esp_sha256_prf_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_int,
        label: *const c_types::c_char,
        data: *const c_types::c_uchar,
        data_len: c_types::c_int,
        buf: *mut c_types::c_uchar,
        buf_len: c_types::c_int,
    ) -> c_types::c_int,
>;
#[doc = " @brief HMAC-MD5 over data buffer (RFC 2104)'"]
#[doc = ""]
#[doc = " @key: Key for HMAC operations"]
#[doc = " @key_len: Length of the key in bytes"]
#[doc = " @data: Pointers to the data area"]
#[doc = " @data_len: Length of the data area"]
#[doc = " @mac: Buffer for the hash (16 bytes)"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_hmac_md5_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_uint,
        data: *const c_types::c_uchar,
        data_len: c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief HMAC-MD5 over data vector (RFC 2104)"]
#[doc = ""]
#[doc = " @key: Key for HMAC operations"]
#[doc = " @key_len: Length of the key in bytes"]
#[doc = " @num_elem: Number of elements in the data vector"]
#[doc = " @addr: Pointers to the data areas"]
#[doc = " @len: Lengths of the data blocks"]
#[doc = " @mac: Buffer for the hash (16 bytes)"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_hmac_md5_vector_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_uint,
        num_elem: c_types::c_uint,
        addr: *mut *const c_types::c_uchar,
        len: *const c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief HMAC-SHA1 over data buffer (RFC 2104)"]
#[doc = ""]
#[doc = " @key: Key for HMAC operations"]
#[doc = " @key_len: Length of the key in bytes"]
#[doc = " @data: Pointers to the data area"]
#[doc = " @data_len: Length of the data area"]
#[doc = " @mac: Buffer for the hash (20 bytes)"]
#[doc = " Returns: 0 on success, -1 of failure"]
pub type esp_hmac_sha1_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_uint,
        data: *const c_types::c_uchar,
        data_len: c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief HMAC-SHA1 over data vector (RFC 2104)"]
#[doc = ""]
#[doc = " @key: Key for HMAC operations"]
#[doc = " @key_len: Length of the key in bytes"]
#[doc = " @num_elem: Number of elements in the data vector"]
#[doc = " @addr: Pointers to the data areas"]
#[doc = " @len: Lengths of the data blocks"]
#[doc = " @mac: Buffer for the hash (20 bytes)"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_hmac_sha1_vector_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_uint,
        num_elem: c_types::c_uint,
        addr: *mut *const c_types::c_uchar,
        len: *const c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief SHA1-based Pseudo-Random Function (PRF) (IEEE 802.11i, 8.5.1.1)"]
#[doc = ""]
#[doc = " @key: Key for PRF"]
#[doc = " @key_len: Length of the key in bytes"]
#[doc = " @label: A unique label for each purpose of the PRF"]
#[doc = " @data: Extra data to bind into the key"]
#[doc = " @data_len: Length of the data"]
#[doc = " @buf: Buffer for the generated pseudo-random key"]
#[doc = " @buf_len: Number of bytes of key to generate"]
#[doc = " Returns: 0 on success, -1 of failure"]
#[doc = ""]
#[doc = " This function is used to derive new, cryptographically separate keys from a"]
#[doc = " given key (e.g., PMK in IEEE 802.11i)."]
pub type esp_sha1_prf_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        key_len: c_types::c_uint,
        label: *const c_types::c_char,
        data: *const c_types::c_uchar,
        data_len: c_types::c_uint,
        buf: *mut c_types::c_uchar,
        buf_len: c_types::c_uint,
    ) -> c_types::c_int,
>;
#[doc = " @brief SHA-1 hash for data vector"]
#[doc = ""]
#[doc = " @num_elem: Number of elements in the data vector"]
#[doc = " @addr: Pointers to the data areas"]
#[doc = " @len: Lengths of the data blocks"]
#[doc = " @mac: Buffer for the hash"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_sha1_vector_t = ::core::option::Option<
    unsafe extern "C" fn(
        num_elem: c_types::c_uint,
        addr: *mut *const c_types::c_uchar,
        len: *const c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief SHA1-based key derivation function (PBKDF2) for IEEE 802.11i"]
#[doc = ""]
#[doc = " @passphrase: ASCII passphrase"]
#[doc = " @ssid: SSID"]
#[doc = " @ssid_len: SSID length in bytes"]
#[doc = " @iterations: Number of iterations to run"]
#[doc = " @buf: Buffer for the generated key"]
#[doc = " @buflen: Length of the buffer in bytes"]
#[doc = " Returns: 0 on success, -1 of failure"]
#[doc = ""]
#[doc = " This function is used to derive PSK for WPA-PSK. For this protocol,"]
#[doc = " iterations is set to 4096 and buflen to 32. This function is described in"]
#[doc = " IEEE Std 802.11-2004, Clause H.4. The main construction is from PKCS#5 v2.0."]
pub type esp_pbkdf2_sha1_t = ::core::option::Option<
    unsafe extern "C" fn(
        passphrase: *const c_types::c_char,
        ssid: *const c_types::c_char,
        ssid_len: c_types::c_uint,
        iterations: c_types::c_int,
        buf: *mut c_types::c_uchar,
        buflen: c_types::c_uint,
    ) -> c_types::c_int,
>;
#[doc = " @brief XOR RC4 stream to given data with skip-stream-start"]
#[doc = ""]
#[doc = " @key: RC4 key"]
#[doc = " @keylen: RC4 key length"]
#[doc = " @skip: number of bytes to skip from the beginning of the RC4 stream"]
#[doc = " @data: data to be XOR'ed with RC4 stream"]
#[doc = " @data_len: buf length"]
#[doc = " Returns: 0 on success, -1 on failure"]
#[doc = ""]
#[doc = " Generate RC4 pseudo random stream for the given key, skip beginning of the"]
#[doc = " stream, and XOR the end result with the data buffer to perform RC4"]
#[doc = " encryption/decryption."]
pub type esp_rc4_skip_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        keylen: c_types::c_uint,
        skip: c_types::c_uint,
        data: *mut c_types::c_uchar,
        data_len: c_types::c_uint,
    ) -> c_types::c_int,
>;
#[doc = " @brief MD5 hash for data vector"]
#[doc = ""]
#[doc = " @num_elem: Number of elements in the data vector"]
#[doc = " @addr: Pointers to the data areas"]
#[doc = " @len: Lengths of the data blocks"]
#[doc = " @mac: Buffer for the hash"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_md5_vector_t = ::core::option::Option<
    unsafe extern "C" fn(
        num_elem: c_types::c_uint,
        addr: *mut *const c_types::c_uchar,
        len: *const c_types::c_uint,
        mac: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
#[doc = " @brief Encrypt one AES block"]
#[doc = ""]
#[doc = " @ctx: Context pointer from aes_encrypt_init()"]
#[doc = " @plain: Plaintext data to be encrypted (16 bytes)"]
#[doc = " @crypt: Buffer for the encrypted data (16 bytes)"]
pub type esp_aes_encrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        plain: *const c_types::c_uchar,
        crypt: *mut c_types::c_uchar,
    ),
>;
#[doc = " @brief Initialize AES for encryption"]
#[doc = ""]
#[doc = " @key: Encryption key"]
#[doc = " @len: Key length in bytes (usually 16, i.e., 128 bits)"]
#[doc = " Returns: Pointer to context data or %NULL on failure"]
pub type esp_aes_encrypt_init_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        len: c_types::c_uint,
    ) -> *mut c_types::c_void,
>;
#[doc = " @brief Deinitialize AES encryption"]
#[doc = ""]
#[doc = " @ctx: Context pointer from aes_encrypt_init()"]
pub type esp_aes_encrypt_deinit_t =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut c_types::c_void)>;
#[doc = " @brief Decrypt one AES block"]
#[doc = ""]
#[doc = " @ctx: Context pointer from aes_encrypt_init()"]
#[doc = " @crypt: Encrypted data (16 bytes)"]
#[doc = " @plain: Buffer for the decrypted data (16 bytes)"]
pub type esp_aes_decrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        crypt: *const c_types::c_uchar,
        plain: *mut c_types::c_uchar,
    ),
>;
#[doc = " @brief Initialize AES for decryption"]
#[doc = ""]
#[doc = " @key: Decryption key"]
#[doc = " @len: Key length in bytes (usually 16, i.e., 128 bits)"]
#[doc = " Returns: Pointer to context data or %NULL on failure"]
pub type esp_aes_decrypt_init_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const c_types::c_uchar,
        len: c_types::c_uint,
    ) -> *mut c_types::c_void,
>;
#[doc = " @brief Deinitialize AES decryption"]
#[doc = ""]
#[doc = " @ctx: Context pointer from aes_encrypt_init()"]
pub type esp_aes_decrypt_deinit_t =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut c_types::c_void)>;
#[doc = " @brief One-Key CBC MAC (OMAC1) hash with AES-128 for MIC computation"]
#[doc = ""]
#[doc = " @key: 128-bit key for the hash operation"]
#[doc = " @data: Data buffer for which a MIC is computed"]
#[doc = " @data_len: Length of data buffer in bytes"]
#[doc = " @mic: Buffer for MIC (128 bits, i.e., 16 bytes)"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_omac1_aes_128_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const u8,
        data: *const u8,
        data_len: size_t,
        mic: *mut u8,
    ) -> c_types::c_int,
>;
#[doc = " @brief Decrypt data using CCMP (Counter Mode CBC-MAC Protocol OR"]
#[doc = "        Counter Mode Cipher Block Chaining Message Authentication"]
#[doc = "        Code Protocol) which is used in IEEE 802.11i RSN standard."]
#[doc = " @tk: 128-bit Temporal Key for obtained during 4-way handshake"]
#[doc = " @hdr: Pointer to IEEE802.11 frame headeri needed for AAD"]
#[doc = " @data: Pointer to encrypted data buffer"]
#[doc = " @data_len: Encrypted data length in bytes"]
#[doc = " @decrypted_len: Length of decrypted data"]
#[doc = " @espnow_pkt: Indicates if it's an ESPNOW packet"]
#[doc = " Returns: Pointer to decrypted data on success, NULL on failure"]
pub type esp_ccmp_decrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        tk: *const u8,
        ieee80211_hdr: *const u8,
        data: *const u8,
        data_len: size_t,
        decrypted_len: *mut size_t,
        espnow_pkt: bool,
    ) -> *mut u8,
>;
#[doc = " @brief Encrypt data using CCMP (Counter Mode CBC-MAC Protocol OR"]
#[doc = "        Counter Mode Cipher Block Chaining Message Authentication"]
#[doc = "        Code Protocol) which is used in IEEE 802.11i RSN standard."]
#[doc = " @tk: 128-bit Temporal Key for obtained during 4-way handshake"]
#[doc = " @frame: Pointer to IEEE802.11 frame including header"]
#[doc = " @len: Length of the frame including header"]
#[doc = " @hdrlen: Length of the header"]
#[doc = " @pn: Packet Number counter"]
#[doc = " @keyid: Key ID to be mentioned in CCMP Vector"]
#[doc = " @encrypted_len: Length of the encrypted frame including header"]
pub type esp_ccmp_encrypt_t = ::core::option::Option<
    unsafe extern "C" fn(
        tk: *const u8,
        frame: *mut u8,
        len: size_t,
        hdrlen: size_t,
        pn: *mut u8,
        keyid: c_types::c_int,
        encrypted_len: *mut size_t,
    ) -> *mut u8,
>;
#[doc = " @brief One-Key GMAC hash with AES for MIC computation"]
#[doc = ""]
#[doc = " @key: key for the hash operation"]
#[doc = " @keylen: key length"]
#[doc = " @iv: initialization vector"]
#[doc = " @iv_len: initialization vector length"]
#[doc = " @aad: aad"]
#[doc = " @aad_len: aad length"]
#[doc = " @mic: Buffer for MIC (128 bits, i.e., 16 bytes)"]
#[doc = " Returns: 0 on success, -1 on failure"]
pub type esp_aes_gmac_t = ::core::option::Option<
    unsafe extern "C" fn(
        key: *const u8,
        keylen: size_t,
        iv: *const u8,
        iv_len: size_t,
        aad: *const u8,
        aad_len: size_t,
        mic: *mut u8,
    ) -> c_types::c_int,
>;
#[doc = " @brief The crypto callback function structure used when do station security connect."]
#[doc = "        The structure can be set as software crypto or the crypto optimized by ESP32"]
#[doc = "        hardware."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wpa_crypto_funcs_t {
    pub size: u32,
    pub version: u32,
    #[doc = "< station connect function used when send EAPOL frame"]
    pub aes_wrap: esp_aes_wrap_t,
    #[doc = "< station connect function used when decrypt key data"]
    pub aes_unwrap: esp_aes_unwrap_t,
    #[doc = "< station connect function used when check MIC"]
    pub hmac_sha256_vector: esp_hmac_sha256_vector_t,
    #[doc = "< station connect function used when check MIC"]
    pub sha256_prf: esp_sha256_prf_t,
    pub hmac_md5: esp_hmac_md5_t,
    pub hamc_md5_vector: esp_hmac_md5_vector_t,
    pub hmac_sha1: esp_hmac_sha1_t,
    pub hmac_sha1_vector: esp_hmac_sha1_vector_t,
    pub sha1_prf: esp_sha1_prf_t,
    pub sha1_vector: esp_sha1_vector_t,
    pub pbkdf2_sha1: esp_pbkdf2_sha1_t,
    pub rc4_skip: esp_rc4_skip_t,
    pub md5_vector: esp_md5_vector_t,
    pub aes_encrypt: esp_aes_encrypt_t,
    pub aes_encrypt_init: esp_aes_encrypt_init_t,
    pub aes_encrypt_deinit: esp_aes_encrypt_deinit_t,
    pub aes_decrypt: esp_aes_decrypt_t,
    pub aes_decrypt_init: esp_aes_decrypt_init_t,
    pub aes_decrypt_deinit: esp_aes_decrypt_deinit_t,
    pub aes_128_encrypt: esp_aes_128_encrypt_t,
    pub aes_128_decrypt: esp_aes_128_decrypt_t,
    pub omac1_aes_128: esp_omac1_aes_128_t,
    pub ccmp_decrypt: esp_ccmp_decrypt_t,
    pub ccmp_encrypt: esp_ccmp_encrypt_t,
    pub aes_gmac: esp_aes_gmac_t,
}
#[doc = " @brief The crypto callback function structure used in mesh vendor IE encryption. The"]
#[doc = "        structure can be set as software crypto or the crypto optimized by ESP32"]
#[doc = "        hardware."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mesh_crypto_funcs_t {
    #[doc = "< function used in mesh vendor IE encryption"]
    pub aes_128_encrypt: esp_aes_128_encrypt_t,
    #[doc = "< function used in mesh vendor IE decryption"]
    pub aes_128_decrypt: esp_aes_128_decrypt_t,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wifi_osi_funcs_t {
    pub _version: i32,
    pub _env_is_chip: ::core::option::Option<unsafe extern "C" fn() -> bool>,
    pub _set_intr: ::core::option::Option<
        unsafe extern "C" fn(cpu_no: i32, intr_source: u32, intr_num: u32, intr_prio: i32),
    >,
    pub _clear_intr: ::core::option::Option<unsafe extern "C" fn(intr_source: u32, intr_num: u32)>,
    pub _set_isr: ::core::option::Option<
        unsafe extern "C" fn(n: i32, f: *mut c_types::c_void, arg: *mut c_types::c_void),
    >,
    pub _ints_on: ::core::option::Option<unsafe extern "C" fn(mask: u32)>,
    pub _ints_off: ::core::option::Option<unsafe extern "C" fn(mask: u32)>,
    pub _is_from_isr: ::core::option::Option<unsafe extern "C" fn() -> bool>,
    pub _spin_lock_create: ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _spin_lock_delete: ::core::option::Option<unsafe extern "C" fn(lock: *mut c_types::c_void)>,
    pub _wifi_int_disable:
        ::core::option::Option<unsafe extern "C" fn(wifi_int_mux: *mut c_types::c_void) -> u32>,
    pub _wifi_int_restore:
        ::core::option::Option<unsafe extern "C" fn(wifi_int_mux: *mut c_types::c_void, tmp: u32)>,
    pub _task_yield_from_isr: ::core::option::Option<unsafe extern "C" fn()>,
    pub _semphr_create:
        ::core::option::Option<unsafe extern "C" fn(max: u32, init: u32) -> *mut c_types::c_void>,
    pub _semphr_delete: ::core::option::Option<unsafe extern "C" fn(semphr: *mut c_types::c_void)>,
    pub _semphr_take: ::core::option::Option<
        unsafe extern "C" fn(semphr: *mut c_types::c_void, block_time_tick: u32) -> i32,
    >,
    pub _semphr_give:
        ::core::option::Option<unsafe extern "C" fn(semphr: *mut c_types::c_void) -> i32>,
    pub _wifi_thread_semphr_get:
        ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _mutex_create: ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _recursive_mutex_create:
        ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _mutex_delete: ::core::option::Option<unsafe extern "C" fn(mutex: *mut c_types::c_void)>,
    pub _mutex_lock:
        ::core::option::Option<unsafe extern "C" fn(mutex: *mut c_types::c_void) -> i32>,
    pub _mutex_unlock:
        ::core::option::Option<unsafe extern "C" fn(mutex: *mut c_types::c_void) -> i32>,
    pub _queue_create: ::core::option::Option<
        unsafe extern "C" fn(queue_len: u32, item_size: u32) -> *mut c_types::c_void,
    >,
    pub _queue_delete: ::core::option::Option<unsafe extern "C" fn(queue: *mut c_types::c_void)>,
    pub _queue_send: ::core::option::Option<
        unsafe extern "C" fn(
            queue: *mut c_types::c_void,
            item: *mut c_types::c_void,
            block_time_tick: u32,
        ) -> i32,
    >,
    pub _queue_send_from_isr: ::core::option::Option<
        unsafe extern "C" fn(
            queue: *mut c_types::c_void,
            item: *mut c_types::c_void,
            hptw: *mut c_types::c_void,
        ) -> i32,
    >,
    pub _queue_send_to_back: ::core::option::Option<
        unsafe extern "C" fn(
            queue: *mut c_types::c_void,
            item: *mut c_types::c_void,
            block_time_tick: u32,
        ) -> i32,
    >,
    pub _queue_send_to_front: ::core::option::Option<
        unsafe extern "C" fn(
            queue: *mut c_types::c_void,
            item: *mut c_types::c_void,
            block_time_tick: u32,
        ) -> i32,
    >,
    pub _queue_recv: ::core::option::Option<
        unsafe extern "C" fn(
            queue: *mut c_types::c_void,
            item: *mut c_types::c_void,
            block_time_tick: u32,
        ) -> i32,
    >,
    pub _queue_msg_waiting:
        ::core::option::Option<unsafe extern "C" fn(queue: *mut c_types::c_void) -> u32>,
    pub _event_group_create: ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _event_group_delete:
        ::core::option::Option<unsafe extern "C" fn(event: *mut c_types::c_void)>,
    pub _event_group_set_bits:
        ::core::option::Option<unsafe extern "C" fn(event: *mut c_types::c_void, bits: u32) -> u32>,
    pub _event_group_clear_bits:
        ::core::option::Option<unsafe extern "C" fn(event: *mut c_types::c_void, bits: u32) -> u32>,
    pub _event_group_wait_bits: ::core::option::Option<
        unsafe extern "C" fn(
            event: *mut c_types::c_void,
            bits_to_wait_for: u32,
            clear_on_exit: c_types::c_int,
            wait_for_all_bits: c_types::c_int,
            block_time_tick: u32,
        ) -> u32,
    >,
    pub _task_create_pinned_to_core: ::core::option::Option<
        unsafe extern "C" fn(
            task_func: *mut c_types::c_void,
            name: *const c_types::c_char,
            stack_depth: u32,
            param: *mut c_types::c_void,
            prio: u32,
            task_handle: *mut c_types::c_void,
            core_id: u32,
        ) -> i32,
    >,
    pub _task_create: ::core::option::Option<
        unsafe extern "C" fn(
            task_func: *mut c_types::c_void,
            name: *const c_types::c_char,
            stack_depth: u32,
            param: *mut c_types::c_void,
            prio: u32,
            task_handle: *mut c_types::c_void,
        ) -> i32,
    >,
    pub _task_delete:
        ::core::option::Option<unsafe extern "C" fn(task_handle: *mut c_types::c_void)>,
    pub _task_delay: ::core::option::Option<unsafe extern "C" fn(tick: u32)>,
    pub _task_ms_to_tick: ::core::option::Option<unsafe extern "C" fn(ms: u32) -> i32>,
    pub _task_get_current_task:
        ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _task_get_max_priority: ::core::option::Option<unsafe extern "C" fn() -> i32>,
    pub _malloc:
        ::core::option::Option<unsafe extern "C" fn(size: c_types::c_uint) -> *mut c_types::c_void>,
    pub _free: ::core::option::Option<unsafe extern "C" fn(p: *mut c_types::c_void)>,
    pub _event_post: ::core::option::Option<
        unsafe extern "C" fn(
            event_base: *const c_types::c_char,
            event_id: i32,
            event_data: *mut c_types::c_void,
            event_data_size: size_t,
            ticks_to_wait: u32,
        ) -> i32,
    >,
    pub _get_free_heap_size: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _rand: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _dport_access_stall_other_cpu_start_wrap: ::core::option::Option<unsafe extern "C" fn()>,
    pub _dport_access_stall_other_cpu_end_wrap: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_apb80m_request: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_apb80m_release: ::core::option::Option<unsafe extern "C" fn()>,
    pub _phy_disable: ::core::option::Option<unsafe extern "C" fn()>,
    pub _phy_enable: ::core::option::Option<unsafe extern "C" fn()>,
    pub _phy_update_country_info: ::core::option::Option<
        unsafe extern "C" fn(country: *const c_types::c_char) -> c_types::c_int,
    >,
    pub _read_mac:
        ::core::option::Option<unsafe extern "C" fn(mac: *mut u8, type_: u32) -> c_types::c_int>,
    pub _timer_arm: ::core::option::Option<
        unsafe extern "C" fn(timer: *mut c_types::c_void, tmout: u32, repeat: bool),
    >,
    pub _timer_disarm: ::core::option::Option<unsafe extern "C" fn(timer: *mut c_types::c_void)>,
    pub _timer_done: ::core::option::Option<unsafe extern "C" fn(ptimer: *mut c_types::c_void)>,
    pub _timer_setfn: ::core::option::Option<
        unsafe extern "C" fn(
            ptimer: *mut c_types::c_void,
            pfunction: *mut c_types::c_void,
            parg: *mut c_types::c_void,
        ),
    >,
    pub _timer_arm_us: ::core::option::Option<
        unsafe extern "C" fn(ptimer: *mut c_types::c_void, us: u32, repeat: bool),
    >,
    pub _wifi_reset_mac: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_clock_enable: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_clock_disable: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_rtc_enable_iso: ::core::option::Option<unsafe extern "C" fn()>,
    pub _wifi_rtc_disable_iso: ::core::option::Option<unsafe extern "C" fn()>,
    pub _esp_timer_get_time: ::core::option::Option<unsafe extern "C" fn() -> i64>,
    pub _nvs_set_i8: ::core::option::Option<
        unsafe extern "C" fn(handle: u32, key: *const c_types::c_char, value: i8) -> c_types::c_int,
    >,
    pub _nvs_get_i8: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            out_value: *mut i8,
        ) -> c_types::c_int,
    >,
    pub _nvs_set_u8: ::core::option::Option<
        unsafe extern "C" fn(handle: u32, key: *const c_types::c_char, value: u8) -> c_types::c_int,
    >,
    pub _nvs_get_u8: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            out_value: *mut u8,
        ) -> c_types::c_int,
    >,
    pub _nvs_set_u16: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            value: u16,
        ) -> c_types::c_int,
    >,
    pub _nvs_get_u16: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            out_value: *mut u16,
        ) -> c_types::c_int,
    >,
    pub _nvs_open: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const c_types::c_char,
            open_mode: u32,
            out_handle: *mut u32,
        ) -> c_types::c_int,
    >,
    pub _nvs_close: ::core::option::Option<unsafe extern "C" fn(handle: u32)>,
    pub _nvs_commit: ::core::option::Option<unsafe extern "C" fn(handle: u32) -> c_types::c_int>,
    pub _nvs_set_blob: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            value: *const c_types::c_void,
            length: size_t,
        ) -> c_types::c_int,
    >,
    pub _nvs_get_blob: ::core::option::Option<
        unsafe extern "C" fn(
            handle: u32,
            key: *const c_types::c_char,
            out_value: *mut c_types::c_void,
            length: *mut size_t,
        ) -> c_types::c_int,
    >,
    pub _nvs_erase_key: ::core::option::Option<
        unsafe extern "C" fn(handle: u32, key: *const c_types::c_char) -> c_types::c_int,
    >,
    pub _get_random:
        ::core::option::Option<unsafe extern "C" fn(buf: *mut u8, len: size_t) -> c_types::c_int>,
    pub _get_time:
        ::core::option::Option<unsafe extern "C" fn(t: *mut c_types::c_void) -> c_types::c_int>,
    pub _random: ::core::option::Option<unsafe extern "C" fn() -> c_types::c_ulong>,
    pub _slowclk_cal_get: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _log_write: ::core::option::Option<
        unsafe extern "C" fn(
            level: u32,
            tag: *const c_types::c_char,
            format: *const c_types::c_char,
            ...
        ),
    >,
    pub _log_writev: ::core::option::Option<
        unsafe extern "C" fn(
            level: u32,
            tag: *const c_types::c_char,
            format: *const c_types::c_char,
            args: va_list,
        ),
    >,
    pub _log_timestamp: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _malloc_internal:
        ::core::option::Option<unsafe extern "C" fn(size: size_t) -> *mut c_types::c_void>,
    pub _realloc_internal: ::core::option::Option<
        unsafe extern "C" fn(ptr: *mut c_types::c_void, size: size_t) -> *mut c_types::c_void,
    >,
    pub _calloc_internal: ::core::option::Option<
        unsafe extern "C" fn(n: size_t, size: size_t) -> *mut c_types::c_void,
    >,
    pub _zalloc_internal:
        ::core::option::Option<unsafe extern "C" fn(size: size_t) -> *mut c_types::c_void>,
    pub _wifi_malloc:
        ::core::option::Option<unsafe extern "C" fn(size: size_t) -> *mut c_types::c_void>,
    pub _wifi_realloc: ::core::option::Option<
        unsafe extern "C" fn(ptr: *mut c_types::c_void, size: size_t) -> *mut c_types::c_void,
    >,
    pub _wifi_calloc: ::core::option::Option<
        unsafe extern "C" fn(n: size_t, size: size_t) -> *mut c_types::c_void,
    >,
    pub _wifi_zalloc:
        ::core::option::Option<unsafe extern "C" fn(size: size_t) -> *mut c_types::c_void>,
    pub _wifi_create_queue: ::core::option::Option<
        unsafe extern "C" fn(
            queue_len: c_types::c_int,
            item_size: c_types::c_int,
        ) -> *mut c_types::c_void,
    >,
    pub _wifi_delete_queue:
        ::core::option::Option<unsafe extern "C" fn(queue: *mut c_types::c_void)>,
    pub _coex_init: ::core::option::Option<unsafe extern "C" fn() -> c_types::c_int>,
    pub _coex_deinit: ::core::option::Option<unsafe extern "C" fn()>,
    pub _coex_enable: ::core::option::Option<unsafe extern "C" fn() -> c_types::c_int>,
    pub _coex_disable: ::core::option::Option<unsafe extern "C" fn()>,
    pub _coex_status_get: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _coex_condition_set:
        ::core::option::Option<unsafe extern "C" fn(type_: u32, dissatisfy: bool)>,
    pub _coex_wifi_request: ::core::option::Option<
        unsafe extern "C" fn(event: u32, latency: u32, duration: u32) -> c_types::c_int,
    >,
    pub _coex_wifi_release:
        ::core::option::Option<unsafe extern "C" fn(event: u32) -> c_types::c_int>,
    pub _coex_wifi_channel_set:
        ::core::option::Option<unsafe extern "C" fn(primary: u8, secondary: u8) -> c_types::c_int>,
    pub _coex_event_duration_get: ::core::option::Option<
        unsafe extern "C" fn(event: u32, duration: *mut u32) -> c_types::c_int,
    >,
    pub _coex_pti_get:
        ::core::option::Option<unsafe extern "C" fn(event: u32, pti: *mut u8) -> c_types::c_int>,
    pub _coex_schm_status_bit_clear:
        ::core::option::Option<unsafe extern "C" fn(type_: u32, status: u32)>,
    pub _coex_schm_status_bit_set:
        ::core::option::Option<unsafe extern "C" fn(type_: u32, status: u32)>,
    pub _coex_schm_interval_set:
        ::core::option::Option<unsafe extern "C" fn(interval: u32) -> c_types::c_int>,
    pub _coex_schm_interval_get: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub _coex_schm_curr_period_get: ::core::option::Option<unsafe extern "C" fn() -> u8>,
    pub _coex_schm_curr_phase_get:
        ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    pub _coex_schm_curr_phase_idx_set:
        ::core::option::Option<unsafe extern "C" fn(idx: c_types::c_int) -> c_types::c_int>,
    pub _coex_schm_curr_phase_idx_get:
        ::core::option::Option<unsafe extern "C" fn() -> c_types::c_int>,
    pub _magic: i32,
}
extern "C" {
    pub static mut g_wifi_osi_funcs: wifi_osi_funcs_t;
}
extern "C" {
    #[doc = " @brief Attaches wifi station interface to supplied netif"]
    #[doc = ""]
    #[doc = " @param esp_netif instance to attach the wifi station to"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success"]
    #[doc = "  - ESP_FAIL if attach failed"]
    pub fn esp_netif_attach_wifi_station(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Attaches wifi soft AP interface to supplied netif"]
    #[doc = ""]
    #[doc = " @param esp_netif instance to attach the wifi AP to"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success"]
    #[doc = "  - ESP_FAIL if attach failed"]
    pub fn esp_netif_attach_wifi_ap(esp_netif: *mut esp_netif_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Sets default wifi event handlers for STA interface"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success, error returned from esp_event_handler_register if failed"]
    pub fn esp_wifi_set_default_wifi_sta_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Sets default wifi event handlers for AP interface"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success, error returned from esp_event_handler_register if failed"]
    pub fn esp_wifi_set_default_wifi_ap_handlers() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clears default wifi event handlers for supplied network interface"]
    #[doc = ""]
    #[doc = " @param esp_netif instance of corresponding if object"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on success, error returned from esp_event_handler_register if failed"]
    pub fn esp_wifi_clear_default_wifi_driver_and_handlers(
        esp_netif: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Creates default WIFI AP. In case of any init error this API aborts."]
    #[doc = ""]
    #[doc = " @note The API creates esp_netif object with default WiFi access point config,"]
    #[doc = " attaches the netif to wifi and registers default wifi handlers."]
    #[doc = ""]
    #[doc = " @return pointer to esp-netif instance"]
    pub fn esp_netif_create_default_wifi_ap() -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief Creates default WIFI STA. In case of any init error this API aborts."]
    #[doc = ""]
    #[doc = " @note The API creates esp_netif object with default WiFi station config,"]
    #[doc = " attaches the netif to wifi and registers default wifi handlers."]
    #[doc = ""]
    #[doc = " @return pointer to esp-netif instance"]
    pub fn esp_netif_create_default_wifi_sta() -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief Destroys default WIFI netif created with esp_netif_create_default_wifi_...() API."]
    #[doc = ""]
    #[doc = " @param[in] esp_netif object to detach from WiFi and destroy"]
    #[doc = ""]
    #[doc = " @note This API unregisters wifi handlers and detaches the created object from the wifi."]
    #[doc = " (this function is a no-operation if esp_netif is NULL)"]
    pub fn esp_netif_destroy_default_wifi(esp_netif: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief Creates esp_netif WiFi object based on the custom configuration."]
    #[doc = ""]
    #[doc = " @attention This API DOES NOT register default handlers!"]
    #[doc = ""]
    #[doc = " @param[in] wifi_if type of wifi interface"]
    #[doc = " @param[in] esp_netif_config inherent esp-netif configuration pointer"]
    #[doc = ""]
    #[doc = " @return pointer to esp-netif instance"]
    pub fn esp_netif_create_wifi(
        wifi_if: wifi_interface_t,
        esp_netif_config: *mut esp_netif_inherent_config_t,
    ) -> *mut esp_netif_t;
}
extern "C" {
    #[doc = " @brief Creates default STA and AP network interfaces for esp-mesh."]
    #[doc = ""]
    #[doc = " Both netifs are almost identical to the default station and softAP, but with"]
    #[doc = " DHCP client and server disabled. Please note that the DHCP client is typically"]
    #[doc = " enabled only if the device is promoted to a root node."]
    #[doc = ""]
    #[doc = " Returns created interfaces which could be ignored setting parameters to NULL"]
    #[doc = " if an application code does not need to save the interface instances"]
    #[doc = " for further processing."]
    #[doc = ""]
    #[doc = " @param[out] p_netif_sta pointer where the resultant STA interface is saved (if non NULL)"]
    #[doc = " @param[out] p_netif_ap pointer where the resultant AP interface is saved (if non NULL)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    pub fn esp_netif_create_default_wifi_mesh_netifs(
        p_netif_sta: *mut *mut esp_netif_t,
        p_netif_ap: *mut *mut esp_netif_t,
    ) -> esp_err_t;
}
#[doc = " @brief WiFi stack configuration parameters passed to esp_wifi_init call."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_init_config_t {
    #[doc = "< WiFi event handler"]
    pub event_handler: system_event_handler_t,
    #[doc = "< WiFi OS functions"]
    pub osi_funcs: *mut wifi_osi_funcs_t,
    #[doc = "< WiFi station crypto functions when connect"]
    pub wpa_crypto_funcs: wpa_crypto_funcs_t,
    #[doc = "< WiFi static RX buffer number"]
    pub static_rx_buf_num: c_types::c_int,
    #[doc = "< WiFi dynamic RX buffer number"]
    pub dynamic_rx_buf_num: c_types::c_int,
    #[doc = "< WiFi TX buffer type"]
    pub tx_buf_type: c_types::c_int,
    #[doc = "< WiFi static TX buffer number"]
    pub static_tx_buf_num: c_types::c_int,
    #[doc = "< WiFi dynamic TX buffer number"]
    pub dynamic_tx_buf_num: c_types::c_int,
    #[doc = "< WiFi TX cache buffer number"]
    pub cache_tx_buf_num: c_types::c_int,
    #[doc = "< WiFi channel state information enable flag"]
    pub csi_enable: c_types::c_int,
    #[doc = "< WiFi AMPDU RX feature enable flag"]
    pub ampdu_rx_enable: c_types::c_int,
    #[doc = "< WiFi AMPDU TX feature enable flag"]
    pub ampdu_tx_enable: c_types::c_int,
    #[doc = "< WiFi AMSDU TX feature enable flag"]
    pub amsdu_tx_enable: c_types::c_int,
    #[doc = "< WiFi NVS flash enable flag"]
    pub nvs_enable: c_types::c_int,
    #[doc = "< Nano option for printf/scan family enable flag"]
    pub nano_enable: c_types::c_int,
    #[doc = "< WiFi Block Ack RX window size"]
    pub rx_ba_win: c_types::c_int,
    #[doc = "< WiFi Task Core ID"]
    pub wifi_task_core_id: c_types::c_int,
    #[doc = "< WiFi softAP maximum length of the beacon"]
    pub beacon_max_len: c_types::c_int,
    #[doc = "< WiFi management short buffer number, the minimum value is 6, the maximum value is 32"]
    pub mgmt_sbuf_num: c_types::c_int,
    #[doc = "< Enables additional WiFi features and capabilities"]
    pub feature_caps: u64,
    #[doc = "< WiFi Power Management for station at disconnected status"]
    pub sta_disconnected_pm: bool,
    #[doc = "< WiFi init magic number, it should be the last field"]
    pub magic: c_types::c_int,
}
impl Default for wifi_init_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static g_wifi_default_wpa_crypto_funcs: wpa_crypto_funcs_t;
}
extern "C" {
    pub static mut g_wifi_feature_caps: u64;
}
extern "C" {
    #[doc = " @brief  Initialize WiFi"]
    #[doc = "         Allocate resource for WiFi driver, such as WiFi control structure, RX/TX buffer,"]
    #[doc = "         WiFi NVS structure etc. This WiFi also starts WiFi task"]
    #[doc = ""]
    #[doc = " @attention 1. This API must be called before all other WiFi API can be called"]
    #[doc = " @attention 2. Always use WIFI_INIT_CONFIG_DEFAULT macro to initialize the configuration to default values, this can"]
    #[doc = "               guarantee all the fields get correct value when more fields are added into wifi_init_config_t"]
    #[doc = "               in future release. If you want to set your own initial values, overwrite the default values"]
    #[doc = "               which are set by WIFI_INIT_CONFIG_DEFAULT. Please be notified that the field 'magic' of"]
    #[doc = "               wifi_init_config_t should always be WIFI_INIT_CONFIG_MAGIC!"]
    #[doc = ""]
    #[doc = " @param  config pointer to WiFi initialized configuration structure; can point to a temporary variable."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_NO_MEM: out of memory"]
    #[doc = "    - others: refer to error code esp_err.h"]
    pub fn esp_wifi_init(config: *const wifi_init_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Deinit WiFi"]
    #[doc = "         Free all resource allocated in esp_wifi_init and stop WiFi task"]
    #[doc = ""]
    #[doc = " @attention 1. This API should be called if you want to remove WiFi driver from the system"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set the WiFi operating mode"]
    #[doc = ""]
    #[doc = "            Set the WiFi operating mode as station, soft-AP or station+soft-AP,"]
    #[doc = "            The default mode is station mode."]
    #[doc = ""]
    #[doc = " @param     mode  WiFi operating mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - others: refer to error code in esp_err.h"]
    pub fn esp_wifi_set_mode(mode: wifi_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Get current operating mode of WiFi"]
    #[doc = ""]
    #[doc = " @param[out]  mode  store current WiFi mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_mode(mode: *mut wifi_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Start WiFi according to current configuration"]
    #[doc = "         If mode is WIFI_MODE_STA, it create station control block and start station"]
    #[doc = "         If mode is WIFI_MODE_AP, it create soft-AP control block and start soft-AP"]
    #[doc = "         If mode is WIFI_MODE_APSTA, it create soft-AP and station control block and start soft-AP and station"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_NO_MEM: out of memory"]
    #[doc = "    - ESP_ERR_WIFI_CONN: WiFi internal error, station or soft-AP control block wrong"]
    #[doc = "    - ESP_FAIL: other WiFi internal errors"]
    pub fn esp_wifi_start() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Stop WiFi"]
    #[doc = "         If mode is WIFI_MODE_STA, it stop station and free station control block"]
    #[doc = "         If mode is WIFI_MODE_AP, it stop soft-AP and free soft-AP control block"]
    #[doc = "         If mode is WIFI_MODE_APSTA, it stop station/soft-AP and free station/soft-AP control block"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_stop() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Restore WiFi stack persistent settings to default values"]
    #[doc = ""]
    #[doc = " This function will reset settings made using the following APIs:"]
    #[doc = " - esp_wifi_set_bandwidth,"]
    #[doc = " - esp_wifi_set_protocol,"]
    #[doc = " - esp_wifi_set_config related"]
    #[doc = " - esp_wifi_set_mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_restore() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Connect the ESP32 WiFi station to the AP."]
    #[doc = ""]
    #[doc = " @attention 1. This API only impact WIFI_MODE_STA or WIFI_MODE_APSTA mode"]
    #[doc = " @attention 2. If the ESP32 is connected to an AP, call esp_wifi_disconnect to disconnect."]
    #[doc = " @attention 3. The scanning triggered by esp_wifi_start_scan() will not be effective until connection between ESP32 and the AP is established."]
    #[doc = "               If ESP32 is scanning and connecting at the same time, ESP32 will abort scanning and return a warning message and error"]
    #[doc = "               number ESP_ERR_WIFI_STATE."]
    #[doc = "               If you want to do reconnection after ESP32 received disconnect event, remember to add the maximum retry time, otherwise the called"]
    #[doc = "               scan will not work. This is especially true when the AP doesn't exist, and you still try reconnection after ESP32 received disconnect"]
    #[doc = "               event with the reason code WIFI_REASON_NO_AP_FOUND."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_WIFI_CONN: WiFi internal error, station or soft-AP control block wrong"]
    #[doc = "    - ESP_ERR_WIFI_SSID: SSID of AP which station connects is invalid"]
    pub fn esp_wifi_connect() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Disconnect the ESP32 WiFi station from the AP."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi was not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi was not started by esp_wifi_start"]
    #[doc = "    - ESP_FAIL: other WiFi internal errors"]
    pub fn esp_wifi_disconnect() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Currently this API is just an stub API"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: fail"]
    pub fn esp_wifi_clear_fast_connect() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     deauthenticate all stations or associated id equals to aid"]
    #[doc = ""]
    #[doc = " @param     aid  when aid is 0, deauthenticate all stations, otherwise deauthenticate station whose associated id is aid"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi was not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_MODE: WiFi mode is wrong"]
    pub fn esp_wifi_deauth_sta(aid: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Scan all available APs."]
    #[doc = ""]
    #[doc = " @attention If this API is called, the found APs are stored in WiFi driver dynamic allocated memory and the"]
    #[doc = "            will be freed in esp_wifi_scan_get_ap_records, so generally, call esp_wifi_scan_get_ap_records to cause"]
    #[doc = "            the memory to be freed once the scan is done"]
    #[doc = " @attention The values of maximum active scan time and passive scan time per channel are limited to 1500 milliseconds."]
    #[doc = "            Values above 1500ms may cause station to disconnect from AP and are not recommended."]
    #[doc = ""]
    #[doc = " @param     config  configuration of scanning"]
    #[doc = " @param     block if block is true, this API will block the caller until the scan is done, otherwise"]
    #[doc = "                         it will return immediately"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi was not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_WIFI_TIMEOUT: blocking scan is timeout"]
    #[doc = "    - ESP_ERR_WIFI_STATE: wifi still connecting when invoke esp_wifi_scan_start"]
    #[doc = "    - others: refer to error code in esp_err.h"]
    pub fn esp_wifi_scan_start(config: *const wifi_scan_config_t, block: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Stop the scan in process"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start"]
    pub fn esp_wifi_scan_stop() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get number of APs found in last scan"]
    #[doc = ""]
    #[doc = " @param[out] number  store number of APIs found in last scan"]
    #[doc = ""]
    #[doc = " @attention This API can only be called when the scan is completed, otherwise it may get wrong value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_scan_get_ap_num(number: *mut u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get AP list found in last scan"]
    #[doc = ""]
    #[doc = " @param[inout]  number As input param, it stores max AP number ap_records can hold."]
    #[doc = "                As output param, it receives the actual AP number this API returns."]
    #[doc = " @param         ap_records  wifi_ap_record_t array to hold the found APs"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_NO_MEM: out of memory"]
    pub fn esp_wifi_scan_get_ap_records(
        number: *mut u16,
        ap_records: *mut wifi_ap_record_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get information of AP which the ESP32 station is associated with"]
    #[doc = ""]
    #[doc = " @attention When the obtained country information is empty, it means that the AP does not carry country information"]
    #[doc = ""]
    #[doc = " @param     ap_info  the wifi_ap_record_t to hold AP information"]
    #[doc = "            sta can get the connected ap's phy mode info through the struct member"]
    #[doc = "            phy_11b，phy_11g，phy_11n，phy_lr in the wifi_ap_record_t struct."]
    #[doc = "            For example, phy_11b = 1 imply that ap support 802.11b mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_CONN: The station interface don't initialized"]
    #[doc = "    - ESP_ERR_WIFI_NOT_CONNECT: The station is in disconnect status"]
    pub fn esp_wifi_sta_get_ap_info(ap_info: *mut wifi_ap_record_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set current WiFi power save type"]
    #[doc = ""]
    #[doc = " @attention Default power save type is WIFI_PS_MIN_MODEM."]
    #[doc = ""]
    #[doc = " @param     type  power save type"]
    #[doc = ""]
    #[doc = " @return    ESP_OK: succeed"]
    pub fn esp_wifi_set_ps(type_: wifi_ps_type_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get current WiFi power save type"]
    #[doc = ""]
    #[doc = " @attention Default power save type is WIFI_PS_MIN_MODEM."]
    #[doc = ""]
    #[doc = " @param[out]  type: store current power save type"]
    #[doc = ""]
    #[doc = " @return    ESP_OK: succeed"]
    pub fn esp_wifi_get_ps(type_: *mut wifi_ps_type_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set protocol type of specified interface"]
    #[doc = "            The default protocol is (WIFI_PROTOCOL_11B|WIFI_PROTOCOL_11G|WIFI_PROTOCOL_11N)"]
    #[doc = ""]
    #[doc = " @attention Currently we only support 802.11b or 802.11bg or 802.11bgn mode"]
    #[doc = ""]
    #[doc = " @param     ifx  interfaces"]
    #[doc = " @param     protocol_bitmap  WiFi protocol bitmap"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - others: refer to error codes in esp_err.h"]
    pub fn esp_wifi_set_protocol(ifx: wifi_interface_t, protocol_bitmap: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the current protocol bitmap of the specified interface"]
    #[doc = ""]
    #[doc = " @param     ifx  interface"]
    #[doc = " @param[out] protocol_bitmap  store current WiFi protocol bitmap of interface ifx"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - others: refer to error codes in esp_err.h"]
    pub fn esp_wifi_get_protocol(ifx: wifi_interface_t, protocol_bitmap: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set the bandwidth of ESP32 specified interface"]
    #[doc = ""]
    #[doc = " @attention 1. API return false if try to configure an interface that is not enabled"]
    #[doc = " @attention 2. WIFI_BW_HT40 is supported only when the interface support 11N"]
    #[doc = ""]
    #[doc = " @param     ifx  interface to be configured"]
    #[doc = " @param     bw  bandwidth"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - others: refer to error codes in esp_err.h"]
    pub fn esp_wifi_set_bandwidth(ifx: wifi_interface_t, bw: wifi_bandwidth_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the bandwidth of ESP32 specified interface"]
    #[doc = ""]
    #[doc = " @attention 1. API return false if try to get a interface that is not enable"]
    #[doc = ""]
    #[doc = " @param     ifx interface to be configured"]
    #[doc = " @param[out] bw  store bandwidth of interface ifx"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_bandwidth(ifx: wifi_interface_t, bw: *mut wifi_bandwidth_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set primary/secondary channel of ESP32"]
    #[doc = ""]
    #[doc = " @attention 1. This API should be called after esp_wifi_start()"]
    #[doc = " @attention 2. When ESP32 is in STA mode, this API should not be called when STA is scanning or connecting to an external AP"]
    #[doc = " @attention 3. When ESP32 is in softAP mode, this API should not be called when softAP has connected to external STAs"]
    #[doc = " @attention 4. When ESP32 is in STA+softAP mode, this API should not be called when in the scenarios described above"]
    #[doc = ""]
    #[doc = " @param     primary  for HT20, primary is the channel number, for HT40, primary is the primary channel"]
    #[doc = " @param     second   for HT20, second is ignored, for HT40, second is the second channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_channel(primary: u8, second: wifi_second_chan_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the primary/secondary channel of ESP32"]
    #[doc = ""]
    #[doc = " @attention 1. API return false if try to get a interface that is not enable"]
    #[doc = ""]
    #[doc = " @param     primary   store current primary channel"]
    #[doc = " @param[out]  second  store current second channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_channel(primary: *mut u8, second: *mut wifi_second_chan_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     configure country info"]
    #[doc = ""]
    #[doc = " @attention 1. It is discouraged to call this API since this doesn't validate the per-country rules,"]
    #[doc = "               it's up to the user to fill in all fields according to local regulations."]
    #[doc = "               Please use esp_wifi_set_country_code instead."]
    #[doc = " @attention 2. The default country is CHINA {.cc=\"CN\", .schan=1, .nchan=13, policy=WIFI_COUNTRY_POLICY_AUTO}"]
    #[doc = " @attention 3. When the country policy is WIFI_COUNTRY_POLICY_AUTO, the country info of the AP to which"]
    #[doc = "               the station is connected is used. E.g. if the configured country info is {.cc=\"USA\", .schan=1, .nchan=11}"]
    #[doc = "               and the country info of the AP to which the station is connected is {.cc=\"JP\", .schan=1, .nchan=14}"]
    #[doc = "               then the country info that will be used is {.cc=\"JP\", .schan=1, .nchan=14}. If the station disconnected"]
    #[doc = "               from the AP the country info is set back to the country info of the station automatically,"]
    #[doc = "               {.cc=\"US\", .schan=1, .nchan=11} in the example."]
    #[doc = " @attention 4. When the country policy is WIFI_COUNTRY_POLICY_MANUAL, then the configured country info is used always."]
    #[doc = " @attention 5. When the country info is changed because of configuration or because the station connects to a different"]
    #[doc = "               external AP, the country IE in probe response/beacon of the soft-AP is also changed."]
    #[doc = " @attention 6. The country configuration is stored into flash."]
    #[doc = " @attention 7. When this API is called, the PHY init data will switch to the PHY init data type corresponding to the"]
    #[doc = "               country info."]
    #[doc = ""]
    #[doc = " @param     country   the configured country info"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_country(country: *const wifi_country_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     get the current country info"]
    #[doc = ""]
    #[doc = " @param     country  country info"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_country(country: *mut wifi_country_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set MAC address of the ESP32 WiFi station or the soft-AP interface."]
    #[doc = ""]
    #[doc = " @attention 1. This API can only be called when the interface is disabled"]
    #[doc = " @attention 2. ESP32 soft-AP and station have different MAC addresses, do not set them to be the same."]
    #[doc = " @attention 3. The bit 0 of the first byte of ESP32 MAC address can not be 1. For example, the MAC address"]
    #[doc = "      can set to be \"1a:XX:XX:XX:XX:XX\", but can not be \"15:XX:XX:XX:XX:XX\"."]
    #[doc = ""]
    #[doc = " @param     ifx  interface"]
    #[doc = " @param     mac  the MAC address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_WIFI_MAC: invalid mac address"]
    #[doc = "    - ESP_ERR_WIFI_MODE: WiFi mode is wrong"]
    #[doc = "    - others: refer to error codes in esp_err.h"]
    pub fn esp_wifi_set_mac(ifx: wifi_interface_t, mac: *const u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get mac of specified interface"]
    #[doc = ""]
    #[doc = " @param      ifx  interface"]
    #[doc = " @param[out] mac  store mac of the interface ifx"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    pub fn esp_wifi_get_mac(ifx: wifi_interface_t, mac: *mut u8) -> esp_err_t;
}
#[doc = " @brief The RX callback function in the promiscuous mode."]
#[doc = "        Each time a packet is received, the callback function will be called."]
#[doc = ""]
#[doc = " @param buf  Data received. Type of data in buffer (wifi_promiscuous_pkt_t or wifi_pkt_rx_ctrl_t) indicated by 'type' parameter."]
#[doc = " @param type  promiscuous packet type."]
#[doc = ""]
pub type wifi_promiscuous_cb_t = ::core::option::Option<
    unsafe extern "C" fn(buf: *mut c_types::c_void, type_: wifi_promiscuous_pkt_type_t),
>;
extern "C" {
    #[doc = " @brief Register the RX callback function in the promiscuous mode."]
    #[doc = ""]
    #[doc = " Each time a packet is received, the registered callback function will be called."]
    #[doc = ""]
    #[doc = " @param cb  callback"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_promiscuous_rx_cb(cb: wifi_promiscuous_cb_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Enable the promiscuous mode."]
    #[doc = ""]
    #[doc = " @param     en  false - disable, true - enable"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_promiscuous(en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the promiscuous mode."]
    #[doc = ""]
    #[doc = " @param[out] en  store the current status of promiscuous mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_promiscuous(en: *mut bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable the promiscuous mode packet type filter."]
    #[doc = ""]
    #[doc = " @note The default filter is to filter all packets except WIFI_PKT_MISC"]
    #[doc = ""]
    #[doc = " @param filter the packet type filtered in promiscuous mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_promiscuous_filter(filter: *const wifi_promiscuous_filter_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the promiscuous filter."]
    #[doc = ""]
    #[doc = " @param[out] filter  store the current status of promiscuous filter"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_promiscuous_filter(filter: *mut wifi_promiscuous_filter_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable subtype filter of the control packet in promiscuous mode."]
    #[doc = ""]
    #[doc = " @note The default filter is to filter none control packet."]
    #[doc = ""]
    #[doc = " @param filter the subtype of the control packet filtered in promiscuous mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_promiscuous_ctrl_filter(
        filter: *const wifi_promiscuous_filter_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the subtype filter of the control packet in promiscuous mode."]
    #[doc = ""]
    #[doc = " @param[out] filter  store the current status of subtype filter of the control packet in promiscuous mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument"]
    pub fn esp_wifi_get_promiscuous_ctrl_filter(
        filter: *mut wifi_promiscuous_filter_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set the configuration of the ESP32 STA or AP"]
    #[doc = ""]
    #[doc = " @attention 1. This API can be called only when specified interface is enabled, otherwise, API fail"]
    #[doc = " @attention 2. For station configuration, bssid_set needs to be 0; and it needs to be 1 only when users need to check the MAC address of the AP."]
    #[doc = " @attention 3. ESP32 is limited to only one channel, so when in the soft-AP+station mode, the soft-AP will adjust its channel automatically to be the same as"]
    #[doc = "               the channel of the ESP32 station."]
    #[doc = ""]
    #[doc = " @param     interface  interface"]
    #[doc = " @param     conf  station or soft-AP configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    #[doc = "    - ESP_ERR_WIFI_MODE: invalid mode"]
    #[doc = "    - ESP_ERR_WIFI_PASSWORD: invalid password"]
    #[doc = "    - ESP_ERR_WIFI_NVS: WiFi internal NVS error"]
    #[doc = "    - others: refer to the erro code in esp_err.h"]
    pub fn esp_wifi_set_config(interface: wifi_interface_t, conf: *mut wifi_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get configuration of specified interface"]
    #[doc = ""]
    #[doc = " @param     interface  interface"]
    #[doc = " @param[out]  conf  station or soft-AP configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_IF: invalid interface"]
    pub fn esp_wifi_get_config(interface: wifi_interface_t, conf: *mut wifi_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get STAs associated with soft-AP"]
    #[doc = ""]
    #[doc = " @attention SSC only API"]
    #[doc = ""]
    #[doc = " @param[out] sta  station list"]
    #[doc = "             ap can get the connected sta's phy mode info through the struct member"]
    #[doc = "             phy_11b，phy_11g，phy_11n，phy_lr in the wifi_sta_info_t struct."]
    #[doc = "             For example, phy_11b = 1 imply that sta support 802.11b mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_WIFI_MODE: WiFi mode is wrong"]
    #[doc = "    - ESP_ERR_WIFI_CONN: WiFi internal error, the station/soft-AP control block is invalid"]
    pub fn esp_wifi_ap_get_sta_list(sta: *mut wifi_sta_list_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get AID of STA connected with soft-AP"]
    #[doc = ""]
    #[doc = " @param     mac  STA's mac address"]
    #[doc = " @param[out]  aid  Store the AID corresponding to STA mac"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    #[doc = "    - ESP_ERR_NOT_FOUND: Requested resource not found"]
    #[doc = "    - ESP_ERR_WIFI_MODE: WiFi mode is wrong"]
    #[doc = "    - ESP_ERR_WIFI_CONN: WiFi internal error, the station/soft-AP control block is invalid"]
    pub fn esp_wifi_ap_get_sta_aid(mac: *const u8, aid: *mut u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set the WiFi API configuration storage type"]
    #[doc = ""]
    #[doc = " @attention 1. The default value is WIFI_STORAGE_FLASH"]
    #[doc = ""]
    #[doc = " @param     storage : storage type"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "   - ESP_OK: succeed"]
    #[doc = "   - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "   - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_storage(storage: wifi_storage_t) -> esp_err_t;
}
#[doc = " @brief     Function signature for received Vendor-Specific Information Element callback."]
#[doc = " @param     ctx Context argument, as passed to esp_wifi_set_vendor_ie_cb() when registering callback."]
#[doc = " @param     type Information element type, based on frame type received."]
#[doc = " @param     sa Source 802.11 address."]
#[doc = " @param     vnd_ie Pointer to the vendor specific element data received."]
#[doc = " @param     rssi Received signal strength indication."]
pub type esp_vendor_ie_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        type_: wifi_vendor_ie_type_t,
        sa: *const u8,
        vnd_ie: *const vendor_ie_data_t,
        rssi: c_types::c_int,
    ),
>;
extern "C" {
    #[doc = " @brief     Set 802.11 Vendor-Specific Information Element"]
    #[doc = ""]
    #[doc = " @param     enable If true, specified IE is enabled. If false, specified IE is removed."]
    #[doc = " @param     type Information Element type. Determines the frame type to associate with the IE."]
    #[doc = " @param     idx  Index to set or clear. Each IE type can be associated with up to two elements (indices 0 & 1)."]
    #[doc = " @param     vnd_ie Pointer to vendor specific element data. First 6 bytes should be a header with fields matching vendor_ie_data_t."]
    #[doc = "            If enable is false, this argument is ignored and can be NULL. Data does not need to remain valid after the function returns."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init()"]
    #[doc = "    - ESP_ERR_INVALID_ARG: Invalid argument, including if first byte of vnd_ie is not WIFI_VENDOR_IE_ELEMENT_ID (0xDD)"]
    #[doc = "      or second byte is an invalid length."]
    #[doc = "    - ESP_ERR_NO_MEM: Out of memory"]
    pub fn esp_wifi_set_vendor_ie(
        enable: bool,
        type_: wifi_vendor_ie_type_t,
        idx: wifi_vendor_ie_id_t,
        vnd_ie: *const c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Register Vendor-Specific Information Element monitoring callback."]
    #[doc = ""]
    #[doc = " @param     cb   Callback function"]
    #[doc = " @param     ctx  Context argument, passed to callback function."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_vendor_ie_cb(
        cb: esp_vendor_ie_cb_t,
        ctx: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set maximum transmitting power after WiFi start."]
    #[doc = ""]
    #[doc = " @attention 1. Maximum power before wifi startup is limited by PHY init data bin."]
    #[doc = " @attention 2. The value set by this API will be mapped to the max_tx_power of the structure wifi_country_t variable."]
    #[doc = " @attention 3. Mapping Table {Power, max_tx_power} = {{8,   2}, {20,  5}, {28,  7}, {34,  8}, {44, 11},"]
    #[doc = "                                                      {52, 13}, {56, 14}, {60, 15}, {66, 16}, {72, 18}, {80, 20}}."]
    #[doc = " @attention 4. Param power unit is 0.25dBm, range is [8, 84] corresponding to 2dBm - 20dBm."]
    #[doc = " @attention 5. Relationship between set value and actual value. As follows: {set value range, actual value} = {{[8,  19],8}, {[20, 27],20}, {[28, 33],28}, {[34, 43],34}, {[44, 51],44}, {[52, 55],52}, {[56, 59],56}, {[60, 65],60}, {[66, 71],66}, {[72, 79],72}, {[80, 84],80}}."]
    #[doc = ""]
    #[doc = " @param     power  Maximum WiFi transmitting power."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_START: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument, e.g. parameter is out of range"]
    pub fn esp_wifi_set_max_tx_power(power: i8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get maximum transmiting power after WiFi start"]
    #[doc = ""]
    #[doc = " @param     power Maximum WiFi transmitting power, unit is 0.25dBm."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_START: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument"]
    pub fn esp_wifi_get_max_tx_power(power: *mut i8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set mask to enable or disable some WiFi events"]
    #[doc = ""]
    #[doc = " @attention 1. Mask can be created by logical OR of various WIFI_EVENT_MASK_ constants."]
    #[doc = "               Events which have corresponding bit set in the mask will not be delivered to the system event handler."]
    #[doc = " @attention 2. Default WiFi event mask is WIFI_EVENT_MASK_AP_PROBEREQRECVED."]
    #[doc = " @attention 3. There may be lots of stations sending probe request data around."]
    #[doc = "               Don't unmask this event unless you need to receive probe request data."]
    #[doc = ""]
    #[doc = " @param     mask  WiFi event mask."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_event_mask(mask: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get mask of WiFi events"]
    #[doc = ""]
    #[doc = " @param     mask  WiFi event mask."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument"]
    pub fn esp_wifi_get_event_mask(mask: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Send raw ieee80211 data"]
    #[doc = ""]
    #[doc = " @attention Currently only support for sending beacon/probe request/probe response/action and non-QoS"]
    #[doc = "            data frame"]
    #[doc = ""]
    #[doc = " @param     ifx interface if the Wi-Fi mode is Station, the ifx should be WIFI_IF_STA. If the Wi-Fi"]
    #[doc = "            mode is SoftAP, the ifx should be WIFI_IF_AP. If the Wi-Fi mode is Station+SoftAP, the"]
    #[doc = "            ifx should be WIFI_IF_STA or WIFI_IF_AP. If the ifx is wrong, the API returns ESP_ERR_WIFI_IF."]
    #[doc = " @param     buffer raw ieee80211 buffer"]
    #[doc = " @param     len the length of raw buffer, the len must be <= 1500 Bytes and >= 24 Bytes"]
    #[doc = " @param     en_sys_seq indicate whether use the internal sequence number. If en_sys_seq is false, the"]
    #[doc = "            sequence in raw buffer is unchanged, otherwise it will be overwritten by WiFi driver with"]
    #[doc = "            the system sequence number."]
    #[doc = "            Generally, if esp_wifi_80211_tx is called before the Wi-Fi connection has been set up, both"]
    #[doc = "            en_sys_seq==true and en_sys_seq==false are fine. However, if the API is called after the Wi-Fi"]
    #[doc = "            connection has been set up, en_sys_seq must be true, otherwise ESP_ERR_WIFI_ARG is returned."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: success"]
    #[doc = "    - ESP_ERR_WIFI_IF: Invalid interface"]
    #[doc = "    - ESP_ERR_INVALID_ARG: Invalid parameter"]
    #[doc = "    - ESP_ERR_WIFI_NO_MEM: out of memory"]
    pub fn esp_wifi_80211_tx(
        ifx: wifi_interface_t,
        buffer: *const c_types::c_void,
        len: c_types::c_int,
        en_sys_seq: bool,
    ) -> esp_err_t;
}
#[doc = " @brief The RX callback function of Channel State Information(CSI)  data."]
#[doc = ""]
#[doc = "        Each time a CSI data is received, the callback function will be called."]
#[doc = ""]
#[doc = " @param ctx context argument, passed to esp_wifi_set_csi_rx_cb() when registering callback function."]
#[doc = " @param data CSI data received. The memory that it points to will be deallocated after callback function returns."]
#[doc = ""]
pub type wifi_csi_cb_t = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut c_types::c_void, data: *mut wifi_csi_info_t),
>;
extern "C" {
    #[doc = " @brief Register the RX callback function of CSI data."]
    #[doc = ""]
    #[doc = "        Each time a CSI data is received, the callback function will be called."]
    #[doc = ""]
    #[doc = " @param cb  callback"]
    #[doc = " @param ctx context argument, passed to callback function"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    pub fn esp_wifi_set_csi_rx_cb(cb: wifi_csi_cb_t, ctx: *mut c_types::c_void) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set CSI data configuration"]
    #[doc = ""]
    #[doc = " @param config configuration"]
    #[doc = ""]
    #[doc = " return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_START: WiFi is not started by esp_wifi_start or promiscuous mode is not enabled"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_csi_config(config: *const wifi_csi_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable or disable CSI"]
    #[doc = ""]
    #[doc = " @param en true - enable, false - disable"]
    #[doc = ""]
    #[doc = " return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_START: WiFi is not started by esp_wifi_start or promiscuous mode is not enabled"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_csi(en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set antenna GPIO configuration"]
    #[doc = ""]
    #[doc = " @param     config  Antenna GPIO configuration."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: Invalid argument, e.g. parameter is NULL, invalid GPIO number etc"]
    pub fn esp_wifi_set_ant_gpio(config: *const wifi_ant_gpio_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get current antenna GPIO configuration"]
    #[doc = ""]
    #[doc = " @param     config  Antenna GPIO configuration."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument, e.g. parameter is NULL"]
    pub fn esp_wifi_get_ant_gpio(config: *mut wifi_ant_gpio_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set antenna configuration"]
    #[doc = ""]
    #[doc = " @param     config  Antenna configuration."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: Invalid argument, e.g. parameter is NULL, invalid antenna mode or invalid GPIO number"]
    pub fn esp_wifi_set_ant(config: *const wifi_ant_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get current antenna configuration"]
    #[doc = ""]
    #[doc = " @param     config  Antenna configuration."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument, e.g. parameter is NULL"]
    pub fn esp_wifi_get_ant(config: *mut wifi_ant_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get the TSF time"]
    #[doc = "             In Station mode or SoftAP+Station mode if station is not connected or station doesn't receive at least"]
    #[doc = "             one beacon after connected, will return 0"]
    #[doc = ""]
    #[doc = " @attention  Enabling power save may cause the return value inaccurate, except WiFi modem sleep"]
    #[doc = ""]
    #[doc = " @param      interface The interface whose tsf_time is to be retrieved."]
    #[doc = ""]
    #[doc = " @return     0 or the TSF time"]
    pub fn esp_wifi_get_tsf_time(interface: wifi_interface_t) -> i64;
}
extern "C" {
    #[doc = " @brief     Set the inactive time of the ESP32 STA or AP"]
    #[doc = ""]
    #[doc = " @attention 1. For Station, If the station does not receive a beacon frame from the connected SoftAP during the inactive time,"]
    #[doc = "               disconnect from SoftAP. Default 6s."]
    #[doc = " @attention 2. For SoftAP, If the softAP doesn't receive any data from the connected STA during inactive time,"]
    #[doc = "               the softAP will force deauth the STA. Default is 300s."]
    #[doc = " @attention 3. The inactive time configuration is not stored into flash"]
    #[doc = ""]
    #[doc = " @param     ifx  interface to be configured."]
    #[doc = " @param     sec  Inactive time. Unit seconds."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_NOT_STARTED: WiFi is not started by esp_wifi_start"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument, For Station, if sec is less than 3. For SoftAP, if sec is less than 10."]
    pub fn esp_wifi_set_inactive_time(ifx: wifi_interface_t, sec: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get inactive time of specified interface"]
    #[doc = ""]
    #[doc = " @param     ifx  Interface to be configured."]
    #[doc = " @param     sec  Inactive time. Unit seconds."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument"]
    pub fn esp_wifi_get_inactive_time(ifx: wifi_interface_t, sec: *mut u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Dump WiFi statistics"]
    #[doc = ""]
    #[doc = " @param     modules statistic modules to be dumped"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_statis_dump(modules: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set RSSI threshold below which APP will get an event"]
    #[doc = ""]
    #[doc = " @attention  This API needs to be called every time after WIFI_EVENT_STA_BSS_RSSI_LOW event is received."]
    #[doc = ""]
    #[doc = " @param      rssi threshold value in dbm between -100 to 0"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_WIFI_ARG: invalid argument"]
    pub fn esp_wifi_set_rssi_threshold(rssi: i32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Start an FTM Initiator session by sending FTM request"]
    #[doc = "             If successful, event WIFI_EVENT_FTM_REPORT is generated with the result of the FTM procedure"]
    #[doc = ""]
    #[doc = " @attention  Use this API only in Station mode"]
    #[doc = ""]
    #[doc = " @param      cfg  FTM Initiator session configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_ftm_initiate_session(cfg: *mut wifi_ftm_initiator_cfg_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      End the ongoing FTM Initiator session"]
    #[doc = ""]
    #[doc = " @attention  This API works only on FTM Initiator"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_ftm_end_session() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set offset in cm for FTM Responder. An equivalent offset is calculated in picoseconds"]
    #[doc = "             and added in TOD of FTM Measurement frame (T1)."]
    #[doc = ""]
    #[doc = " @attention  Use this API only in AP mode before performing FTM as responder"]
    #[doc = ""]
    #[doc = " @param      offset_cm  T1 Offset to be added in centimeters"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_ftm_resp_set_offset(offset_cm: i16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Enable or disable 11b rate of specified interface"]
    #[doc = ""]
    #[doc = " @attention  1. This API should be called after esp_wifi_init() and before esp_wifi_start()."]
    #[doc = " @attention  2. Only when really need to disable 11b rate call this API otherwise don't call this."]
    #[doc = ""]
    #[doc = " @param      ifx  Interface to be configured."]
    #[doc = " @param      disable true means disable 11b rate while false means enable 11b rate."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_config_11b_rate(ifx: wifi_interface_t, disable: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Config ESPNOW rate of specified interface"]
    #[doc = ""]
    #[doc = " @attention  1. This API should be called after esp_wifi_init() and before esp_wifi_start()."]
    #[doc = ""]
    #[doc = " @param      ifx  Interface to be configured."]
    #[doc = " @param      rate Phy rate to be configured."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_config_espnow_rate(ifx: wifi_interface_t, rate: wifi_phy_rate_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set interval for station to wake up periodically at disconnected."]
    #[doc = ""]
    #[doc = " @attention 1. Only when ESP_WIFI_STA_DISCONNECTED_PM_ENABLE is enabled, this configuration could work"]
    #[doc = " @attention 2. This configuration only work for station mode and disconnected status"]
    #[doc = " @attention 3. This configuration would influence nothing until some module configure wake_window"]
    #[doc = " @attention 4. A sensible interval which is not too small is recommended (e.g. 100ms)"]
    #[doc = ""]
    #[doc = " @param      interval  how much micriosecond would the chip wake up, from 1 to 65535."]
    pub fn esp_wifi_set_connectionless_wake_interval(interval: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     configure country"]
    #[doc = ""]
    #[doc = " @attention 1. When ieee80211d_enabled, the country info of the AP to which"]
    #[doc = "               the station is connected is used. E.g. if the configured country is US"]
    #[doc = "               and the country info of the AP to which the station is connected is JP"]
    #[doc = "               then the country info that will be used is JP. If the station disconnected"]
    #[doc = "               from the AP the country info is set back to the country info of the station automatically,"]
    #[doc = "               US in the example."]
    #[doc = " @attention 2. When ieee80211d_enabled is disabled, then the configured country info is used always."]
    #[doc = " @attention 3. When the country info is changed because of configuration or because the station connects to a different"]
    #[doc = "               external AP, the country IE in probe response/beacon of the soft-AP is also changed."]
    #[doc = " @attention 4. The country configuration is stored into flash."]
    #[doc = " @attention 5. When this API is called, the PHY init data will switch to the PHY init data type corresponding to the"]
    #[doc = "               country info."]
    #[doc = " @attention 6. Supported country codes are \"01\"(world safe mode) \"AT\",\"AU\",\"BE\",\"BG\",\"BR\","]
    #[doc = "               \"CA\",\"CH\",\"CN\",\"CY\",\"CZ\",\"DE\",\"DK\",\"EE\",\"ES\",\"FI\",\"FR\",\"GB\",\"GR\",\"HK\",\"HR\",\"HU\","]
    #[doc = "               \"IE\",\"IN\",\"IS\",\"IT\",\"JP\",\"KR\",\"LI\",\"LT\",\"LU\",\"LV\",\"MT\",\"MX\",\"NL\",\"NO\",\"NZ\",\"PL\",\"PT\","]
    #[doc = "               \"RO\",\"SE\",\"SI\",\"SK\",\"TW\",\"US\""]
    #[doc = ""]
    #[doc = " @attention 7. When country code \"01\" (world safe mode) is set, SoftAP mode won't contain country IE."]
    #[doc = " @attention 8. The default country is \"CN\" and ieee80211d_enabled is TRUE."]
    #[doc = ""]
    #[doc = " @param     country   the configured country ISO code"]
    #[doc = " @param     ieee80211d_enabled   802.11d is enabled or not"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_set_country_code(
        country: *const c_types::c_char,
        ieee80211d_enabled: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     get the current country code"]
    #[doc = ""]
    #[doc = " @param     country  country code"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - ESP_ERR_WIFI_NOT_INIT: WiFi is not initialized by esp_wifi_init"]
    #[doc = "    - ESP_ERR_INVALID_ARG: invalid argument"]
    pub fn esp_wifi_get_country_code(country: *mut c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Config 80211 tx rate of specified interface"]
    #[doc = ""]
    #[doc = " @attention  1. This API should be called after esp_wifi_init() and before esp_wifi_start()."]
    #[doc = ""]
    #[doc = " @param      ifx  Interface to be configured."]
    #[doc = " @param      rate Phy rate to be configured."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_config_80211_tx_rate(ifx: wifi_interface_t, rate: wifi_phy_rate_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Disable PMF configuration for specified interface"]
    #[doc = ""]
    #[doc = " @attention  This API should be called after esp_wifi_set_config() and before esp_wifi_start()."]
    #[doc = ""]
    #[doc = " @param      ifx  Interface to be configured."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: succeed"]
    #[doc = "    - others: failed"]
    pub fn esp_wifi_disable_pmf_config(ifx: wifi_interface_t) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wifi_netif_driver {
    _unused: [u8; 0],
}
#[doc = " @brief Forward declaration of WiFi interface handle"]
pub type wifi_netif_driver_t = *mut wifi_netif_driver;
extern "C" {
    #[doc = " @brief Creates wifi driver instance to be used with esp-netif"]
    #[doc = ""]
    #[doc = " @param wifi_if wifi interface type (station, softAP)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - pointer to wifi interface handle on success"]
    #[doc = "  - NULL otherwise"]
    pub fn esp_wifi_create_if_driver(wifi_if: wifi_interface_t) -> wifi_netif_driver_t;
}
extern "C" {
    #[doc = " @brief Destroys wifi driver instance"]
    #[doc = ""]
    #[doc = " @param h pointer to wifi interface handle"]
    #[doc = ""]
    pub fn esp_wifi_destroy_if_driver(h: wifi_netif_driver_t);
}
extern "C" {
    #[doc = " @brief Return mac of specified wifi driver instance"]
    #[doc = ""]
    #[doc = " @param[in] ifx pointer to wifi interface handle"]
    #[doc = " @param[out] mac output mac address"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = ""]
    pub fn esp_wifi_get_if_mac(ifx: wifi_netif_driver_t, mac: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Return true if the supplied interface instance is ready after start."]
    #[doc = " Typically used when registering on receive callback, which ought to be"]
    #[doc = " installed as soon as AP started, but once STA gets connected."]
    #[doc = ""]
    #[doc = " @param[in] ifx pointer to wifi interface handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - true if ready after intertace started (typically Access Point type)"]
    #[doc = "      - false if ready once intertace connected (typically for Station type)"]
    pub fn esp_wifi_is_if_ready_when_started(ifx: wifi_netif_driver_t) -> bool;
}
extern "C" {
    #[doc = " @brief Register interface receive callback function with argument"]
    #[doc = ""]
    #[doc = " @param[in] ifx pointer to wifi interface handle"]
    #[doc = " @param[in] fn  funtion to be registered (typically esp_netif_receive)"]
    #[doc = " @param[in] arg argument to be supplied to registered function (typically esp_netif ptr)"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = ""]
    pub fn esp_wifi_register_if_rxcb(
        ifx: wifi_netif_driver_t,
        fn_: esp_netif_receive_t,
        arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
#[doc = "< Send ESPNOW data successfully"]
pub const esp_now_send_status_t_ESP_NOW_SEND_SUCCESS: esp_now_send_status_t = 0;
#[doc = "< Send ESPNOW data fail"]
pub const esp_now_send_status_t_ESP_NOW_SEND_FAIL: esp_now_send_status_t = 1;
#[doc = " @brief Status of sending ESPNOW data ."]
pub type esp_now_send_status_t = c_types::c_uint;
#[doc = " @brief ESPNOW peer information parameters."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_now_peer_info {
    #[doc = "< ESPNOW peer MAC address that is also the MAC address of station or softap"]
    pub peer_addr: [u8; 6usize],
    #[doc = "< ESPNOW peer local master key that is used to encrypt data"]
    pub lmk: [u8; 16usize],
    #[doc = "< Wi-Fi channel that peer uses to send/receive ESPNOW data. If the value is 0,"]
    #[doc = "use the current channel which station or softap is on. Otherwise, it must be"]
    #[doc = "set as the channel that station or softap is on."]
    pub channel: u8,
    #[doc = "< Wi-Fi interface that peer uses to send/receive ESPNOW data"]
    pub ifidx: wifi_interface_t,
    #[doc = "< ESPNOW data that this peer sends/receives is encrypted or not"]
    pub encrypt: bool,
    #[doc = "< ESPNOW peer private data"]
    pub priv_: *mut c_types::c_void,
}
impl Default for esp_now_peer_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief ESPNOW peer information parameters."]
pub type esp_now_peer_info_t = esp_now_peer_info;
#[doc = " @brief Number of ESPNOW peers which exist currently."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_now_peer_num {
    #[doc = "< Total number of ESPNOW peers, maximum value is ESP_NOW_MAX_TOTAL_PEER_NUM"]
    pub total_num: c_types::c_int,
    #[doc = "< Number of encrypted ESPNOW peers, maximum value is ESP_NOW_MAX_ENCRYPT_PEER_NUM"]
    pub encrypt_num: c_types::c_int,
}
#[doc = " @brief Number of ESPNOW peers which exist currently."]
pub type esp_now_peer_num_t = esp_now_peer_num;
#[doc = " @brief     Callback function of receiving ESPNOW data"]
#[doc = " @param     mac_addr peer MAC address"]
#[doc = " @param     data received data"]
#[doc = " @param     data_len length of received data"]
pub type esp_now_recv_cb_t = ::core::option::Option<
    unsafe extern "C" fn(mac_addr: *const u8, data: *const u8, data_len: c_types::c_int),
>;
#[doc = " @brief     Callback function of sending ESPNOW data"]
#[doc = " @param     mac_addr peer MAC address"]
#[doc = " @param     status status of sending ESPNOW data (succeed or fail)"]
pub type esp_now_send_cb_t = ::core::option::Option<
    unsafe extern "C" fn(mac_addr: *const u8, status: esp_now_send_status_t),
>;
extern "C" {
    #[doc = " @brief     Initialize ESPNOW function"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_INTERNAL : Internal error"]
    pub fn esp_now_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     De-initialize ESPNOW function"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    pub fn esp_now_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get the version of ESPNOW"]
    #[doc = ""]
    #[doc = " @param     version  ESPNOW version"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    pub fn esp_now_get_version(version: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Register callback function of receiving ESPNOW data"]
    #[doc = ""]
    #[doc = " @param     cb  callback function of receiving ESPNOW data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_INTERNAL : internal error"]
    pub fn esp_now_register_recv_cb(cb: esp_now_recv_cb_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Unregister callback function of receiving ESPNOW data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    pub fn esp_now_unregister_recv_cb() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Register callback function of sending ESPNOW data"]
    #[doc = ""]
    #[doc = " @param     cb  callback function of sending ESPNOW data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_INTERNAL : internal error"]
    pub fn esp_now_register_send_cb(cb: esp_now_send_cb_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Unregister callback function of sending ESPNOW data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    pub fn esp_now_unregister_send_cb() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Send ESPNOW data"]
    #[doc = ""]
    #[doc = " @attention 1. If peer_addr is not NULL, send data to the peer whose MAC address matches peer_addr"]
    #[doc = " @attention 2. If peer_addr is NULL, send data to all of the peers that are added to the peer list"]
    #[doc = " @attention 3. The maximum length of data must be less than ESP_NOW_MAX_DATA_LEN"]
    #[doc = " @attention 4. The buffer pointed to by data argument does not need to be valid after esp_now_send returns"]
    #[doc = ""]
    #[doc = " @param     peer_addr  peer MAC address"]
    #[doc = " @param     data  data to send"]
    #[doc = " @param     len  length of data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_INTERNAL : internal error"]
    #[doc = "          - ESP_ERR_ESPNOW_NO_MEM : out of memory"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_FOUND : peer is not found"]
    #[doc = "          - ESP_ERR_ESPNOW_IF : current WiFi interface doesn't match that of peer"]
    pub fn esp_now_send(peer_addr: *const u8, data: *const u8, len: size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Add a peer to peer list"]
    #[doc = ""]
    #[doc = " @param     peer  peer information"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_FULL : peer list is full"]
    #[doc = "          - ESP_ERR_ESPNOW_NO_MEM : out of memory"]
    #[doc = "          - ESP_ERR_ESPNOW_EXIST : peer has existed"]
    pub fn esp_now_add_peer(peer: *const esp_now_peer_info_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Delete a peer from peer list"]
    #[doc = ""]
    #[doc = " @param     peer_addr  peer MAC address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_FOUND : peer is not found"]
    pub fn esp_now_del_peer(peer_addr: *const u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Modify a peer"]
    #[doc = ""]
    #[doc = " @param     peer  peer information"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_FULL : peer list is full"]
    pub fn esp_now_mod_peer(peer: *const esp_now_peer_info_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Get a peer whose MAC address matches peer_addr from peer list"]
    #[doc = ""]
    #[doc = " @param     peer_addr  peer MAC address"]
    #[doc = " @param     peer  peer information"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_FOUND : peer is not found"]
    pub fn esp_now_get_peer(peer_addr: *const u8, peer: *mut esp_now_peer_info_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Fetch a peer from peer list. Only return the peer which address is unicast, for the multicast/broadcast address, the function will ignore and try to find the next in the peer list."]
    #[doc = ""]
    #[doc = " @param     from_head  fetch from head of list or not"]
    #[doc = " @param     peer  peer information"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_FOUND : peer is not found"]
    pub fn esp_now_fetch_peer(from_head: bool, peer: *mut esp_now_peer_info_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Peer exists or not"]
    #[doc = ""]
    #[doc = " @param     peer_addr  peer MAC address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - true : peer exists"]
    #[doc = "          - false : peer not exists"]
    pub fn esp_now_is_peer_exist(peer_addr: *const u8) -> bool;
}
extern "C" {
    #[doc = " @brief     Get the number of peers"]
    #[doc = ""]
    #[doc = " @param     num  number of peers"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    pub fn esp_now_get_peer_num(num: *mut esp_now_peer_num_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set the primary master key"]
    #[doc = ""]
    #[doc = " @param     pmk  primary master key"]
    #[doc = ""]
    #[doc = " @attention 1. primary master key is used to encrypt local master key"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    #[doc = "          - ESP_ERR_ESPNOW_ARG : invalid argument"]
    pub fn esp_now_set_pmk(pmk: *const u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     Set esp_now wake window for sta_disconnected power management"]
    #[doc = ""]
    #[doc = " @param     window  how much microsecond would the chip keep waked each interval, vary from 0 to 65535"]
    #[doc = ""]
    #[doc = " @attention 1. Only when ESP_WIFI_STA_DISCONNECTED_PM_ENABLE is enabled, this configuration could work"]
    #[doc = " @attention 2. This configuration only work for station mode and disconnected status"]
    #[doc = " @attention 3. If more than one module has configured its wake_window, chip would choose the largest one to stay waked"]
    #[doc = " @attention 4. If the gap between interval and window is smaller than 5ms, the chip would keep waked all the time"]
    #[doc = " @attention 5. If never configured wake_window, the chip would keep waked at disconnected once it uses esp_now"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK : succeed"]
    #[doc = "          - ESP_ERR_ESPNOW_NOT_INIT : ESPNOW is not initialized"]
    pub fn esp_now_set_wake_window(window: u16) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: c_types::c_int,
    pub tz_dsttime: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bintime {
    pub sec: time_t,
    pub frac: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
extern "C" {
    pub fn utimes(__path: *const c_types::c_char, __tvp: *const timeval) -> c_types::c_int;
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> c_types::c_int;
}
extern "C" {
    pub fn futimes(arg1: c_types::c_int, arg2: *const timeval) -> c_types::c_int;
}
extern "C" {
    pub fn lutimes(arg1: *const c_types::c_char, arg2: *const timeval) -> c_types::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> c_types::c_int;
}
extern "C" {
    pub fn getitimer(__which: c_types::c_int, __value: *mut itimerval) -> c_types::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: c_types::c_int,
        __value: *const itimerval,
        __ovalue: *mut itimerval,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn gettimeofday(__p: *mut timeval, __tz: *mut c_types::c_void) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
extern "C" {
    pub fn utime(path: *const c_types::c_char, times: *const utimbuf) -> c_types::c_int;
}
#[doc = " Restart output."]
pub type cc_t = u8;
pub type speed_t = u32;
pub type tcflag_t = u16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    #[doc = " Input modes"]
    pub c_oflag: tcflag_t,
    #[doc = " Output modes"]
    pub c_cflag: tcflag_t,
    #[doc = " Control modes"]
    pub c_lflag: tcflag_t,
    #[doc = " Local modes"]
    pub c_cc: [cc_t; 11usize],
    #[doc = " Control characters"]
    pub c_ispeed: speed_t,
    #[doc = " input baud rate"]
    pub c_ospeed: speed_t,
}
extern "C" {
    #[doc = " @brief Extracts the input baud rate from the input structure exactly (without interpretation)."]
    #[doc = ""]
    #[doc = " @param p input termios structure"]
    #[doc = " @return input baud rate"]
    pub fn cfgetispeed(p: *const termios) -> speed_t;
}
extern "C" {
    #[doc = " @brief Extracts the output baud rate from the input structure exactly (without interpretation)."]
    #[doc = ""]
    #[doc = " @param p input termios structure"]
    #[doc = " @return output baud rate"]
    pub fn cfgetospeed(p: *const termios) -> speed_t;
}
extern "C" {
    #[doc = " @brief Set input baud rate in the termios structure"]
    #[doc = ""]
    #[doc = " There is no effect in hardware until a subsequent call of tcsetattr()."]
    #[doc = ""]
    #[doc = " @param p input termios structure"]
    #[doc = " @param sp input baud rate"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn cfsetispeed(p: *mut termios, sp: speed_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Set output baud rate in the termios structure"]
    #[doc = ""]
    #[doc = " There is no effect in hardware until a subsequent call of tcsetattr()."]
    #[doc = ""]
    #[doc = " @param p input termios structure"]
    #[doc = " @param sp output baud rate"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn cfsetospeed(p: *mut termios, sp: speed_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Wait for transmission of output"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcdrain(fd: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Suspend or restart the transmission or reception of data"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @param action selects actions to do"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcflow(fd: c_types::c_int, action: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Flush non-transmitted output data and non-read input data"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @param select selects what should be flushed"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcflush(fd: c_types::c_int, select: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Gets the parameters of the terminal"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @param p output termios structure"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcgetattr(fd: c_types::c_int, p: *mut termios) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Get process group ID for session leader for controlling terminal"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @return process group ID when successful, -1 otherwise with errno set"]
    pub fn tcgetsid(fd: c_types::c_int) -> pid_t;
}
extern "C" {
    #[doc = " @brief Send a break for a specific duration"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @param duration duration of break"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcsendbreak(fd: c_types::c_int, duration: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Sets the parameters of the terminal"]
    #[doc = ""]
    #[doc = " @param fd file descriptor of the terminal"]
    #[doc = " @param optional_actions optional actions"]
    #[doc = " @param p input termios structure"]
    #[doc = " @return 0 when successful, -1 otherwise with errno set"]
    pub fn tcsetattr(
        fd: c_types::c_int,
        optional_actions: c_types::c_int,
        p: *const termios,
    ) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pollfd {
    pub fd: c_types::c_int,
    pub events: c_types::c_short,
    pub revents: c_types::c_short,
}
pub type nfds_t = c_types::c_uint;
extern "C" {
    pub fn poll(fds: *mut pollfd, nfds: nfds_t, timeout: c_types::c_int) -> c_types::c_int;
}
#[doc = " @brief Opaque directory structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct DIR {
    #[doc = "< VFS index, not to be used by applications"]
    pub dd_vfs_idx: u16,
    #[doc = "< field reserved for future extension"]
    pub dd_rsv: u16,
}
#[doc = " @brief Directory entry structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    #[doc = "< file number"]
    pub d_ino: c_types::c_int,
    #[doc = "< not defined in POSIX, but present in BSD and Linux"]
    pub d_type: u8,
    #[doc = "< zero-terminated file name"]
    pub d_name: [c_types::c_char; 256usize],
}
impl Default for dirent {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn opendir(name: *const c_types::c_char) -> *mut DIR;
}
extern "C" {
    pub fn readdir(pdir: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn telldir(pdir: *mut DIR) -> c_types::c_long;
}
extern "C" {
    pub fn seekdir(pdir: *mut DIR, loc: c_types::c_long);
}
extern "C" {
    pub fn rewinddir(pdir: *mut DIR);
}
extern "C" {
    pub fn closedir(pdir: *mut DIR) -> c_types::c_int;
}
extern "C" {
    pub fn readdir_r(
        pdir: *mut DIR,
        entry: *mut dirent,
        out_dirent: *mut *mut dirent,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const c_types::c_void, arg2: *mut c_types::c_void, arg3: size_t);
}
extern "C" {
    pub fn bzero(arg1: *mut c_types::c_void, arg2: c_types::c_uint);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut c_types::c_void, arg2: size_t);
}
extern "C" {
    pub fn ffs(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn ffsl(arg1: c_types::c_long) -> c_types::c_int;
}
extern "C" {
    pub fn ffsll(arg1: c_types::c_longlong) -> c_types::c_int;
}
extern "C" {
    pub fn fls(arg1: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn flsl(arg1: c_types::c_long) -> c_types::c_int;
}
extern "C" {
    pub fn flsll(arg1: c_types::c_longlong) -> c_types::c_int;
}
extern "C" {
    pub fn index(arg1: *const c_types::c_char, arg2: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const c_types::c_char, arg2: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const c_types::c_char, arg2: *const c_types::c_char)
        -> c_types::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: locale_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const c_types::c_void,
        arg2: c_types::c_int,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut c_types::c_void,
        arg2: c_types::c_int,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut c_types::c_char, arg2: *const c_types::c_char)
        -> *mut c_types::c_char;
}
extern "C" {
    pub fn strchr(arg1: *const c_types::c_char, arg2: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut c_types::c_char, arg2: *const c_types::c_char)
        -> *mut c_types::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> c_types::c_uint;
}
extern "C" {
    pub fn strerror(arg1: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const c_types::c_char) -> c_types::c_uint;
}
extern "C" {
    pub fn strncat(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const c_types::c_char, arg2: c_types::c_int) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const c_types::c_char, arg2: *const c_types::c_char) -> c_types::c_uint;
}
extern "C" {
    pub fn strstr(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut c_types::c_char, arg2: *const c_types::c_char)
        -> *mut c_types::c_char;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> c_types::c_uint;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: locale_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn strerror_l(arg1: c_types::c_int, arg2: locale_t) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: size_t,
        arg4: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: *mut *mut c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        arg1: *const c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn timingsafe_memcmp(
        arg1: *const c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut c_types::c_void,
        arg2: *const c_types::c_void,
        arg3: c_types::c_int,
        arg4: c_types::c_uint,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn stpcpy(arg1: *mut c_types::c_char, arg2: *const c_types::c_char)
        -> *mut c_types::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strdup(arg1: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _strdup_r(arg1: *mut _reent, arg2: *const c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const c_types::c_char, arg2: c_types::c_uint) -> *mut c_types::c_char;
}
extern "C" {
    pub fn _strndup_r(
        arg1: *mut _reent,
        arg2: *const c_types::c_char,
        arg3: size_t,
    ) -> *mut c_types::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        arg1: c_types::c_int,
        arg2: *mut c_types::c_char,
        arg3: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn _strerror_r(
        arg1: *mut _reent,
        arg2: c_types::c_int,
        arg3: c_types::c_int,
        arg4: *mut c_types::c_int,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> c_types::c_uint;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: c_types::c_uint,
    ) -> c_types::c_uint;
}
extern "C" {
    pub fn strnlen(arg1: *const c_types::c_char, arg2: size_t) -> size_t;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut c_types::c_char,
        arg2: *const c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strnstr(
        arg1: *const c_types::c_char,
        arg2: *const c_types::c_char,
        arg3: size_t,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strlwr(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strupr(arg1: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn strsignal(__signo: c_types::c_int) -> *mut c_types::c_char;
}
pub type esp_vfs_id_t = c_types::c_int;
#[doc = " @brief VFS semaphore type for select()"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_vfs_select_sem_t {
    #[doc = "< type of \"sem\" is SemaphoreHandle_t when true, defined by socket driver otherwise"]
    pub is_sem_local: bool,
    #[doc = "< semaphore instance"]
    pub sem: *mut c_types::c_void,
}
impl Default for esp_vfs_select_sem_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief VFS definition structure"]
#[doc = ""]
#[doc = " This structure should be filled with pointers to corresponding"]
#[doc = " FS driver functions."]
#[doc = ""]
#[doc = " VFS component will translate all FDs so that the filesystem implementation"]
#[doc = " sees them starting at zero. The caller sees a global FD which is prefixed"]
#[doc = " with an pre-filesystem-implementation."]
#[doc = ""]
#[doc = " Some FS implementations expect some state (e.g. pointer to some structure)"]
#[doc = " to be passed in as a first argument. For these implementations,"]
#[doc = " populate the members of this structure which have _p suffix, set"]
#[doc = " flags member to ESP_VFS_FLAG_CONTEXT_PTR and provide the context pointer"]
#[doc = " to esp_vfs_register function."]
#[doc = " If the implementation doesn't use this extra argument, populate the"]
#[doc = " members without _p suffix and set flags member to ESP_VFS_FLAG_DEFAULT."]
#[doc = ""]
#[doc = " If the FS driver doesn't provide some of the functions, set corresponding"]
#[doc = " members to NULL."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct esp_vfs_t {
    #[doc = "< ESP_VFS_FLAG_CONTEXT_PTR or ESP_VFS_FLAG_DEFAULT"]
    pub flags: c_types::c_int,
    pub __bindgen_anon_1: esp_vfs_t__bindgen_ty_1,
    pub __bindgen_anon_2: esp_vfs_t__bindgen_ty_2,
    pub __bindgen_anon_3: esp_vfs_t__bindgen_ty_3,
    pub __bindgen_anon_4: esp_vfs_t__bindgen_ty_4,
    pub __bindgen_anon_5: esp_vfs_t__bindgen_ty_5,
    pub __bindgen_anon_6: esp_vfs_t__bindgen_ty_6,
    pub __bindgen_anon_7: esp_vfs_t__bindgen_ty_7,
    pub __bindgen_anon_8: esp_vfs_t__bindgen_ty_8,
    pub __bindgen_anon_9: esp_vfs_t__bindgen_ty_9,
    pub __bindgen_anon_10: esp_vfs_t__bindgen_ty_10,
    pub __bindgen_anon_11: esp_vfs_t__bindgen_ty_11,
    pub __bindgen_anon_12: esp_vfs_t__bindgen_ty_12,
    pub __bindgen_anon_13: esp_vfs_t__bindgen_ty_13,
    pub __bindgen_anon_14: esp_vfs_t__bindgen_ty_14,
    pub __bindgen_anon_15: esp_vfs_t__bindgen_ty_15,
    pub __bindgen_anon_16: esp_vfs_t__bindgen_ty_16,
    pub __bindgen_anon_17: esp_vfs_t__bindgen_ty_17,
    pub __bindgen_anon_18: esp_vfs_t__bindgen_ty_18,
    pub __bindgen_anon_19: esp_vfs_t__bindgen_ty_19,
    pub __bindgen_anon_20: esp_vfs_t__bindgen_ty_20,
    pub __bindgen_anon_21: esp_vfs_t__bindgen_ty_21,
    pub __bindgen_anon_22: esp_vfs_t__bindgen_ty_22,
    pub __bindgen_anon_23: esp_vfs_t__bindgen_ty_23,
    pub __bindgen_anon_24: esp_vfs_t__bindgen_ty_24,
    pub __bindgen_anon_25: esp_vfs_t__bindgen_ty_25,
    pub __bindgen_anon_26: esp_vfs_t__bindgen_ty_26,
    pub __bindgen_anon_27: esp_vfs_t__bindgen_ty_27,
    pub __bindgen_anon_28: esp_vfs_t__bindgen_ty_28,
    pub __bindgen_anon_29: esp_vfs_t__bindgen_ty_29,
    pub __bindgen_anon_30: esp_vfs_t__bindgen_ty_30,
    pub __bindgen_anon_31: esp_vfs_t__bindgen_ty_31,
    pub __bindgen_anon_32: esp_vfs_t__bindgen_ty_32,
    pub __bindgen_anon_33: esp_vfs_t__bindgen_ty_33,
    pub __bindgen_anon_34: esp_vfs_t__bindgen_ty_34,
    #[doc = " start_select is called for setting up synchronous I/O multiplexing of the desired file descriptors in the given VFS"]
    pub start_select: ::core::option::Option<
        unsafe extern "C" fn(
            nfds: c_types::c_int,
            readfds: *mut _types_fd_set,
            writefds: *mut _types_fd_set,
            exceptfds: *mut _types_fd_set,
            sem: esp_vfs_select_sem_t,
            end_select_args: *mut *mut c_types::c_void,
        ) -> esp_err_t,
    >,
    #[doc = " socket select function for socket FDs with the functionality of POSIX select(); this should be set only for the socket VFS"]
    pub socket_select: ::core::option::Option<
        unsafe extern "C" fn(
            nfds: c_types::c_int,
            readfds: *mut _types_fd_set,
            writefds: *mut _types_fd_set,
            errorfds: *mut _types_fd_set,
            timeout: *mut timeval,
        ) -> c_types::c_int,
    >,
    #[doc = " called by VFS to interrupt the socket_select call when select is activated from a non-socket VFS driver; set only for the socket driver"]
    pub stop_socket_select: ::core::option::Option<unsafe extern "C" fn(sem: *mut c_types::c_void)>,
    #[doc = " stop_socket_select which can be called from ISR; set only for the socket driver"]
    pub stop_socket_select_isr: ::core::option::Option<
        unsafe extern "C" fn(sem: *mut c_types::c_void, woken: *mut BaseType_t),
    >,
    #[doc = " end_select is called to stop the I/O multiplexing and deinitialize the environment created by start_select for the given VFS"]
    pub get_socket_select_semaphore:
        ::core::option::Option<unsafe extern "C" fn() -> *mut c_types::c_void>,
    #[doc = " get_socket_select_semaphore returns semaphore allocated in the socket driver; set only for the socket driver"]
    pub end_select: ::core::option::Option<
        unsafe extern "C" fn(end_select_args: *mut c_types::c_void) -> esp_err_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_1 {
    #[doc = "< Write with context pointer"]
    pub write_p: ::core::option::Option<
        unsafe extern "C" fn(
            p: *mut c_types::c_void,
            fd: c_types::c_int,
            data: *const c_types::c_void,
            size: size_t,
        ) -> ssize_t,
    >,
    #[doc = "< Write without context pointer"]
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            data: *const c_types::c_void,
            size: size_t,
        ) -> ssize_t,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_2 {
    #[doc = "< Seek with context pointer"]
    pub lseek_p: ::core::option::Option<
        unsafe extern "C" fn(
            p: *mut c_types::c_void,
            fd: c_types::c_int,
            size: off_t,
            mode: c_types::c_int,
        ) -> off_t,
    >,
    #[doc = "< Seek without context pointer"]
    pub lseek: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, size: off_t, mode: c_types::c_int) -> off_t,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_3 {
    #[doc = "< Read with context pointer"]
    pub read_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            dst: *mut c_types::c_void,
            size: size_t,
        ) -> ssize_t,
    >,
    #[doc = "< Read without context pointer"]
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            dst: *mut c_types::c_void,
            size: size_t,
        ) -> ssize_t,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_4 {
    #[doc = "< pread with context pointer"]
    pub pread_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            dst: *mut c_types::c_void,
            size: size_t,
            offset: off_t,
        ) -> ssize_t,
    >,
    #[doc = "< pread without context pointer"]
    pub pread: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            dst: *mut c_types::c_void,
            size: size_t,
            offset: off_t,
        ) -> ssize_t,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_5 {
    #[doc = "< pwrite with context pointer"]
    pub pwrite_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            src: *const c_types::c_void,
            size: size_t,
            offset: off_t,
        ) -> ssize_t,
    >,
    #[doc = "< pwrite without context pointer"]
    pub pwrite: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            src: *const c_types::c_void,
            size: size_t,
            offset: off_t,
        ) -> ssize_t,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_6 {
    #[doc = "< open with context pointer"]
    pub open_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
            flags: c_types::c_int,
            mode: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< open without context pointer"]
    pub open: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const c_types::c_char,
            flags: c_types::c_int,
            mode: c_types::c_int,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_7 {
    #[doc = "< close with context pointer"]
    pub close_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, fd: c_types::c_int) -> c_types::c_int,
    >,
    #[doc = "< close without context pointer"]
    pub close: ::core::option::Option<unsafe extern "C" fn(fd: c_types::c_int) -> c_types::c_int>,
}
impl Default for esp_vfs_t__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_8 {
    #[doc = "< fstat with context pointer"]
    pub fstat_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            st: *mut stat,
        ) -> c_types::c_int,
    >,
    #[doc = "< fstat without context pointer"]
    pub fstat: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, st: *mut stat) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_9 {
    #[doc = "< stat with context pointer"]
    pub stat_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
            st: *mut stat,
        ) -> c_types::c_int,
    >,
    #[doc = "< stat without context pointer"]
    pub stat: ::core::option::Option<
        unsafe extern "C" fn(path: *const c_types::c_char, st: *mut stat) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_10 {
    #[doc = "< link with context pointer"]
    pub link_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            n1: *const c_types::c_char,
            n2: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
    #[doc = "< link without context pointer"]
    pub link: ::core::option::Option<
        unsafe extern "C" fn(
            n1: *const c_types::c_char,
            n2: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_11 {
    #[doc = "< unlink with context pointer"]
    pub unlink_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
    #[doc = "< unlink without context pointer"]
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(path: *const c_types::c_char) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_12 {
    #[doc = "< rename with context pointer"]
    pub rename_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            src: *const c_types::c_char,
            dst: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
    #[doc = "< rename without context pointer"]
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            src: *const c_types::c_char,
            dst: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_13 {
    #[doc = "< opendir with context pointer"]
    pub opendir_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, name: *const c_types::c_char) -> *mut DIR,
    >,
    #[doc = "< opendir without context pointer"]
    pub opendir:
        ::core::option::Option<unsafe extern "C" fn(name: *const c_types::c_char) -> *mut DIR>,
}
impl Default for esp_vfs_t__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_14 {
    #[doc = "< readdir with context pointer"]
    pub readdir_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, pdir: *mut DIR) -> *mut dirent,
    >,
    #[doc = "< readdir without context pointer"]
    pub readdir: ::core::option::Option<unsafe extern "C" fn(pdir: *mut DIR) -> *mut dirent>,
}
impl Default for esp_vfs_t__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_15 {
    #[doc = "< readdir_r with context pointer"]
    pub readdir_r_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            pdir: *mut DIR,
            entry: *mut dirent,
            out_dirent: *mut *mut dirent,
        ) -> c_types::c_int,
    >,
    #[doc = "< readdir_r without context pointer"]
    pub readdir_r: ::core::option::Option<
        unsafe extern "C" fn(
            pdir: *mut DIR,
            entry: *mut dirent,
            out_dirent: *mut *mut dirent,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_16 {
    #[doc = "< telldir with context pointer"]
    pub telldir_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, pdir: *mut DIR) -> c_types::c_long,
    >,
    #[doc = "< telldir without context pointer"]
    pub telldir: ::core::option::Option<unsafe extern "C" fn(pdir: *mut DIR) -> c_types::c_long>,
}
impl Default for esp_vfs_t__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_17 {
    #[doc = "< seekdir with context pointer"]
    pub seekdir_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, pdir: *mut DIR, offset: c_types::c_long),
    >,
    #[doc = "< seekdir without context pointer"]
    pub seekdir:
        ::core::option::Option<unsafe extern "C" fn(pdir: *mut DIR, offset: c_types::c_long)>,
}
impl Default for esp_vfs_t__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_18 {
    #[doc = "< closedir with context pointer"]
    pub closedir_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, pdir: *mut DIR) -> c_types::c_int,
    >,
    #[doc = "< closedir without context pointer"]
    pub closedir: ::core::option::Option<unsafe extern "C" fn(pdir: *mut DIR) -> c_types::c_int>,
}
impl Default for esp_vfs_t__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_19 {
    #[doc = "< mkdir with context pointer"]
    pub mkdir_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            name: *const c_types::c_char,
            mode: mode_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< mkdir without context pointer"]
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(name: *const c_types::c_char, mode: mode_t) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_20 {
    #[doc = "< rmdir with context pointer"]
    pub rmdir_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            name: *const c_types::c_char,
        ) -> c_types::c_int,
    >,
    #[doc = "< rmdir without context pointer"]
    pub rmdir: ::core::option::Option<
        unsafe extern "C" fn(name: *const c_types::c_char) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_21 {
    #[doc = "< fcntl with context pointer"]
    pub fcntl_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            cmd: c_types::c_int,
            arg: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< fcntl without context pointer"]
    pub fcntl: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            cmd: c_types::c_int,
            arg: c_types::c_int,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_22 {
    #[doc = "< ioctl with context pointer"]
    pub ioctl_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            cmd: c_types::c_int,
            args: va_list,
        ) -> c_types::c_int,
    >,
    #[doc = "< ioctl without context pointer"]
    pub ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            cmd: c_types::c_int,
            args: va_list,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_23 {
    #[doc = "< fsync with context pointer"]
    pub fsync_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, fd: c_types::c_int) -> c_types::c_int,
    >,
    #[doc = "< fsync without context pointer"]
    pub fsync: ::core::option::Option<unsafe extern "C" fn(fd: c_types::c_int) -> c_types::c_int>,
}
impl Default for esp_vfs_t__bindgen_ty_23 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_24 {
    #[doc = "< access with context pointer"]
    pub access_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
            amode: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< access without context pointer"]
    pub access: ::core::option::Option<
        unsafe extern "C" fn(path: *const c_types::c_char, amode: c_types::c_int) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_24 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_25 {
    #[doc = "< truncate with context pointer"]
    pub truncate_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
            length: off_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< truncate without context pointer"]
    pub truncate: ::core::option::Option<
        unsafe extern "C" fn(path: *const c_types::c_char, length: off_t) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_25 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_26 {
    #[doc = "< ftruncate with context pointer"]
    pub ftruncate_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            length: off_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< ftruncate without context pointer"]
    pub ftruncate: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, length: off_t) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_26 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_27 {
    #[doc = "< utime with context pointer"]
    pub utime_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            path: *const c_types::c_char,
            times: *const utimbuf,
        ) -> c_types::c_int,
    >,
    #[doc = "< utime without context pointer"]
    pub utime: ::core::option::Option<
        unsafe extern "C" fn(path: *const c_types::c_char, times: *const utimbuf) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_27 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_28 {
    #[doc = "< tcsetattr with context pointer"]
    pub tcsetattr_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            optional_actions: c_types::c_int,
            p: *const termios,
        ) -> c_types::c_int,
    >,
    #[doc = "< tcsetattr without context pointer"]
    pub tcsetattr: ::core::option::Option<
        unsafe extern "C" fn(
            fd: c_types::c_int,
            optional_actions: c_types::c_int,
            p: *const termios,
        ) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_28 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_29 {
    #[doc = "< tcgetattr with context pointer"]
    pub tcgetattr_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            p: *mut termios,
        ) -> c_types::c_int,
    >,
    #[doc = "< tcgetattr without context pointer"]
    pub tcgetattr: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, p: *mut termios) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_29 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_30 {
    #[doc = "< tcdrain with context pointer"]
    pub tcdrain_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, fd: c_types::c_int) -> c_types::c_int,
    >,
    #[doc = "< tcdrain without context pointer"]
    pub tcdrain: ::core::option::Option<unsafe extern "C" fn(fd: c_types::c_int) -> c_types::c_int>,
}
impl Default for esp_vfs_t__bindgen_ty_30 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_31 {
    #[doc = "< tcflush with context pointer"]
    pub tcflush_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            select: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< tcflush without context pointer"]
    pub tcflush: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, select: c_types::c_int) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_31 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_32 {
    #[doc = "< tcflow with context pointer"]
    pub tcflow_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            action: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< tcflow without context pointer"]
    pub tcflow: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, action: c_types::c_int) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_33 {
    #[doc = "< tcgetsid with context pointer"]
    pub tcgetsid_p: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut c_types::c_void, fd: c_types::c_int) -> pid_t,
    >,
    #[doc = "< tcgetsid without context pointer"]
    pub tcgetsid: ::core::option::Option<unsafe extern "C" fn(fd: c_types::c_int) -> pid_t>,
}
impl Default for esp_vfs_t__bindgen_ty_33 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_vfs_t__bindgen_ty_34 {
    #[doc = "< tcsendbreak with context pointer"]
    pub tcsendbreak_p: ::core::option::Option<
        unsafe extern "C" fn(
            ctx: *mut c_types::c_void,
            fd: c_types::c_int,
            duration: c_types::c_int,
        ) -> c_types::c_int,
    >,
    #[doc = "< tcsendbreak without context pointer"]
    pub tcsendbreak: ::core::option::Option<
        unsafe extern "C" fn(fd: c_types::c_int, duration: c_types::c_int) -> c_types::c_int,
    >,
}
impl Default for esp_vfs_t__bindgen_ty_34 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for esp_vfs_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " Register a virtual filesystem for given path prefix."]
    #[doc = ""]
    #[doc = " @param base_path  file path prefix associated with the filesystem."]
    #[doc = "                   Must be a zero-terminated C string, may be empty."]
    #[doc = "                   If not empty, must be up to ESP_VFS_PATH_MAX"]
    #[doc = "                   characters long, and at least 2 characters long."]
    #[doc = "                   Name must start with a \"/\" and must not end with \"/\"."]
    #[doc = "                   For example, \"/data\" or \"/dev/spi\" are valid."]
    #[doc = "                   These VFSes would then be called to handle file paths such as"]
    #[doc = "                   \"/data/myfile.txt\" or \"/dev/spi/0\"."]
    #[doc = "                   In the special case of an empty base_path, a \"fallback\""]
    #[doc = "                   VFS is registered. Such VFS will handle paths which are not"]
    #[doc = "                   matched by any other registered VFS."]
    #[doc = " @param vfs  Pointer to esp_vfs_t, a structure which maps syscalls to"]
    #[doc = "             the filesystem driver functions. VFS component doesn't"]
    #[doc = "             assume ownership of this pointer."]
    #[doc = " @param ctx  If vfs->flags has ESP_VFS_FLAG_CONTEXT_PTR set, a pointer"]
    #[doc = "             which should be passed to VFS functions. Otherwise, NULL."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if successful, ESP_ERR_NO_MEM if too many VFSes are"]
    #[doc = "          registered."]
    pub fn esp_vfs_register(
        base_path: *const c_types::c_char,
        vfs: *const esp_vfs_t,
        ctx: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Special case function for registering a VFS that uses a method other than"]
    #[doc = " open() to open new file descriptors from the interval <min_fd; max_fd)."]
    #[doc = ""]
    #[doc = " This is a special-purpose function intended for registering LWIP sockets to VFS."]
    #[doc = ""]
    #[doc = " @param vfs Pointer to esp_vfs_t. Meaning is the same as for esp_vfs_register()."]
    #[doc = " @param ctx Pointer to context structure. Meaning is the same as for esp_vfs_register()."]
    #[doc = " @param min_fd The smallest file descriptor this VFS will use."]
    #[doc = " @param max_fd Upper boundary for file descriptors this VFS will use (the biggest file descriptor plus one)."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if successful, ESP_ERR_NO_MEM if too many VFSes are"]
    #[doc = "          registered, ESP_ERR_INVALID_ARG if the file descriptor boundaries"]
    #[doc = "          are incorrect."]
    pub fn esp_vfs_register_fd_range(
        vfs: *const esp_vfs_t,
        ctx: *mut c_types::c_void,
        min_fd: c_types::c_int,
        max_fd: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Special case function for registering a VFS that uses a method other than"]
    #[doc = " open() to open new file descriptors. In comparison with"]
    #[doc = " esp_vfs_register_fd_range, this function doesn't pre-registers an interval"]
    #[doc = " of file descriptors. File descriptors can be registered later, by using"]
    #[doc = " esp_vfs_register_fd."]
    #[doc = ""]
    #[doc = " @param vfs Pointer to esp_vfs_t. Meaning is the same as for esp_vfs_register()."]
    #[doc = " @param ctx Pointer to context structure. Meaning is the same as for esp_vfs_register()."]
    #[doc = " @param vfs_id Here will be written the VFS ID which can be passed to"]
    #[doc = "               esp_vfs_register_fd for registering file descriptors."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if successful, ESP_ERR_NO_MEM if too many VFSes are"]
    #[doc = "          registered, ESP_ERR_INVALID_ARG if the file descriptor boundaries"]
    #[doc = "          are incorrect."]
    pub fn esp_vfs_register_with_id(
        vfs: *const esp_vfs_t,
        ctx: *mut c_types::c_void,
        vfs_id: *mut esp_vfs_id_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Unregister a virtual filesystem for given path prefix"]
    #[doc = ""]
    #[doc = " @param base_path  file prefix previously used in esp_vfs_register call"]
    #[doc = " @return ESP_OK if successful, ESP_ERR_INVALID_STATE if VFS for given prefix"]
    #[doc = "         hasn't been registered"]
    pub fn esp_vfs_unregister(base_path: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " Unregister a virtual filesystem with the given index"]
    #[doc = ""]
    #[doc = " @param vfs_id  The VFS ID returned by esp_vfs_register_with_id"]
    #[doc = " @return ESP_OK if successful, ESP_ERR_INVALID_STATE if VFS for the given index"]
    #[doc = "         hasn't been registered"]
    pub fn esp_vfs_unregister_with_id(vfs_id: esp_vfs_id_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Special function for registering another file descriptor for a VFS registered"]
    #[doc = " by esp_vfs_register_with_id."]
    #[doc = ""]
    #[doc = " @param vfs_id VFS identificator returned by esp_vfs_register_with_id."]
    #[doc = " @param fd The registered file descriptor will be written to this address."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if the registration is successful,"]
    #[doc = "          ESP_ERR_NO_MEM if too many file descriptors are registered,"]
    #[doc = "          ESP_ERR_INVALID_ARG if the arguments are incorrect."]
    pub fn esp_vfs_register_fd(vfs_id: esp_vfs_id_t, fd: *mut c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " Special function for registering another file descriptor with given local_fd"]
    #[doc = " for a VFS registered by esp_vfs_register_with_id."]
    #[doc = ""]
    #[doc = " @param vfs_id VFS identificator returned by esp_vfs_register_with_id."]
    #[doc = " @param local_fd The fd in the local vfs. Passing -1 will set the local fd as the (*fd) value."]
    #[doc = " @param permanent Whether the fd should be treated as permannet (not removed after close())"]
    #[doc = " @param fd The registered file descriptor will be written to this address."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if the registration is successful,"]
    #[doc = "          ESP_ERR_NO_MEM if too many file descriptors are registered,"]
    #[doc = "          ESP_ERR_INVALID_ARG if the arguments are incorrect."]
    pub fn esp_vfs_register_fd_with_local_fd(
        vfs_id: esp_vfs_id_t,
        local_fd: c_types::c_int,
        permanent: bool,
        fd: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Special function for unregistering a file descriptor belonging to a VFS"]
    #[doc = " registered by esp_vfs_register_with_id."]
    #[doc = ""]
    #[doc = " @param vfs_id VFS identificator returned by esp_vfs_register_with_id."]
    #[doc = " @param fd File descriptor which should be unregistered."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if the registration is successful,"]
    #[doc = "          ESP_ERR_INVALID_ARG if the arguments are incorrect."]
    pub fn esp_vfs_unregister_fd(vfs_id: esp_vfs_id_t, fd: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " These functions are to be used in newlib syscall table. They will be called by"]
    #[doc = " newlib when it needs to use any of the syscalls."]
    pub fn esp_vfs_write(
        r: *mut _reent,
        fd: c_types::c_int,
        data: *const c_types::c_void,
        size: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn esp_vfs_lseek(
        r: *mut _reent,
        fd: c_types::c_int,
        size: off_t,
        mode: c_types::c_int,
    ) -> off_t;
}
extern "C" {
    pub fn esp_vfs_read(
        r: *mut _reent,
        fd: c_types::c_int,
        dst: *mut c_types::c_void,
        size: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn esp_vfs_open(
        r: *mut _reent,
        path: *const c_types::c_char,
        flags: c_types::c_int,
        mode: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_close(r: *mut _reent, fd: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_fstat(r: *mut _reent, fd: c_types::c_int, st: *mut stat) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_stat(
        r: *mut _reent,
        path: *const c_types::c_char,
        st: *mut stat,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_link(
        r: *mut _reent,
        n1: *const c_types::c_char,
        n2: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_unlink(r: *mut _reent, path: *const c_types::c_char) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_rename(
        r: *mut _reent,
        src: *const c_types::c_char,
        dst: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn esp_vfs_utime(path: *const c_types::c_char, times: *const utimbuf) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Synchronous I/O multiplexing which implements the functionality of POSIX select() for VFS"]
    #[doc = " @param nfds      Specifies the range of descriptors which should be checked."]
    #[doc = "                  The first nfds descriptors will be checked in each set."]
    #[doc = " @param readfds   If not NULL, then points to a descriptor set that on input"]
    #[doc = "                  specifies which descriptors should be checked for being"]
    #[doc = "                  ready to read, and on output indicates which descriptors"]
    #[doc = "                  are ready to read."]
    #[doc = " @param writefds  If not NULL, then points to a descriptor set that on input"]
    #[doc = "                  specifies which descriptors should be checked for being"]
    #[doc = "                  ready to write, and on output indicates which descriptors"]
    #[doc = "                  are ready to write."]
    #[doc = " @param errorfds  If not NULL, then points to a descriptor set that on input"]
    #[doc = "                  specifies which descriptors should be checked for error"]
    #[doc = "                  conditions, and on output indicates which descriptors"]
    #[doc = "                  have error conditions."]
    #[doc = " @param timeout   If not NULL, then points to timeval structure which"]
    #[doc = "                  specifies the time period after which the functions should"]
    #[doc = "                  time-out and return. If it is NULL, then the function will"]
    #[doc = "                  not time-out. Note that the timeout period is rounded up to"]
    #[doc = "                  the system tick and incremented by one."]
    #[doc = ""]
    #[doc = " @return      The number of descriptors set in the descriptor sets, or -1"]
    #[doc = "              when an error (specified by errno) have occurred."]
    pub fn esp_vfs_select(
        nfds: c_types::c_int,
        readfds: *mut _types_fd_set,
        writefds: *mut _types_fd_set,
        errorfds: *mut _types_fd_set,
        timeout: *mut timeval,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Notification from a VFS driver about a read/write/error condition"]
    #[doc = ""]
    #[doc = " This function is called when the VFS driver detects a read/write/error"]
    #[doc = " condition as it was requested by the previous call to start_select."]
    #[doc = ""]
    #[doc = " @param sem semaphore structure which was passed to the driver by the start_select call"]
    pub fn esp_vfs_select_triggered(sem: esp_vfs_select_sem_t);
}
extern "C" {
    #[doc = " @brief Notification from a VFS driver about a read/write/error condition (ISR version)"]
    #[doc = ""]
    #[doc = " This function is called when the VFS driver detects a read/write/error"]
    #[doc = " condition as it was requested by the previous call to start_select."]
    #[doc = ""]
    #[doc = " @param sem semaphore structure which was passed to the driver by the start_select call"]
    #[doc = " @param woken is set to pdTRUE if the function wakes up a task with higher priority"]
    pub fn esp_vfs_select_triggered_isr(sem: esp_vfs_select_sem_t, woken: *mut BaseType_t);
}
extern "C" {
    #[doc = " @brief Implements the VFS layer of POSIX pread()"]
    #[doc = ""]
    #[doc = " @param fd         File descriptor used for read"]
    #[doc = " @param dst        Pointer to the buffer where the output will be written"]
    #[doc = " @param size       Number of bytes to be read"]
    #[doc = " @param offset     Starting offset of the read"]
    #[doc = ""]
    #[doc = " @return           A positive return value indicates the number of bytes read. -1 is return on failure and errno is"]
    #[doc = "                   set accordingly."]
    pub fn esp_vfs_pread(
        fd: c_types::c_int,
        dst: *mut c_types::c_void,
        size: size_t,
        offset: off_t,
    ) -> ssize_t;
}
extern "C" {
    #[doc = " @brief Implements the VFS layer of POSIX pwrite()"]
    #[doc = ""]
    #[doc = " @param fd         File descriptor used for write"]
    #[doc = " @param src        Pointer to the buffer from where the output will be read"]
    #[doc = " @param size       Number of bytes to write"]
    #[doc = " @param offset     Starting offset of the write"]
    #[doc = ""]
    #[doc = " @return           A positive return value indicates the number of bytes written. -1 is return on failure and errno is"]
    #[doc = "                   set accordingly."]
    pub fn esp_vfs_pwrite(
        fd: c_types::c_int,
        src: *const c_types::c_void,
        size: size_t,
        offset: off_t,
    ) -> ssize_t;
}
#[doc = "!< CR + LF"]
pub const esp_line_endings_t_ESP_LINE_ENDINGS_CRLF: esp_line_endings_t = 0;
#[doc = "!< CR"]
pub const esp_line_endings_t_ESP_LINE_ENDINGS_CR: esp_line_endings_t = 1;
#[doc = "!< LF"]
pub const esp_line_endings_t_ESP_LINE_ENDINGS_LF: esp_line_endings_t = 2;
#[doc = " @brief Line ending settings"]
pub type esp_line_endings_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief add /dev/cdcacm virtual filesystem driver"]
    #[doc = ""]
    #[doc = " This function is called from startup code to enable console output"]
    pub fn esp_vfs_dev_cdcacm_register() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set the line endings expected to be received"]
    #[doc = ""]
    #[doc = " This specifies the conversion between line endings received and"]
    #[doc = " newlines ('\\n', LF) passed into stdin:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert CRLF to LF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert CR to LF"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. reading"]
    #[doc = ""]
    #[doc = " @param mode line endings expected"]
    pub fn esp_vfs_dev_cdcacm_set_rx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief Set the line endings to sent"]
    #[doc = ""]
    #[doc = " This specifies the conversion between newlines ('\\n', LF) on stdout and line"]
    #[doc = " endings sent:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert LF to CRLF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert LF to CR"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. writing"]
    #[doc = ""]
    #[doc = " @param mode line endings to send"]
    pub fn esp_vfs_dev_cdcacm_set_tx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief add /dev/uart virtual filesystem driver"]
    #[doc = ""]
    #[doc = " This function is called from startup code to enable serial output"]
    pub fn esp_vfs_dev_uart_register();
}
extern "C" {
    #[doc = " @brief Set the line endings expected to be received on UART"]
    #[doc = ""]
    #[doc = " This specifies the conversion between line endings received on UART and"]
    #[doc = " newlines ('\\n', LF) passed into stdin:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert CRLF to LF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert CR to LF"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. reading from UART"]
    #[doc = ""]
    #[doc = " @param mode line endings expected on UART"]
    pub fn esp_vfs_dev_uart_set_rx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief Set the line endings to sent to UART"]
    #[doc = ""]
    #[doc = " This specifies the conversion between newlines ('\\n', LF) on stdout and line"]
    #[doc = " endings sent over UART:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert LF to CRLF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert LF to CR"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. writing to UART"]
    #[doc = ""]
    #[doc = " @param mode line endings to send to UART"]
    pub fn esp_vfs_dev_uart_set_tx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief Set the line endings expected to be received on specified UART"]
    #[doc = ""]
    #[doc = " This specifies the conversion between line endings received on UART and"]
    #[doc = " newlines ('\\n', LF) passed into stdin:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert CRLF to LF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert CR to LF"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. reading from UART"]
    #[doc = ""]
    #[doc = " @param uart_num the UART number"]
    #[doc = " @param mode line endings to send to UART"]
    #[doc = " @return  0 if successed, or -1"]
    #[doc = "              when an error (specified by errno) have occurred."]
    pub fn esp_vfs_dev_uart_port_set_rx_line_endings(
        uart_num: c_types::c_int,
        mode: esp_line_endings_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Set the line endings to sent to specified UART"]
    #[doc = ""]
    #[doc = " This specifies the conversion between newlines ('\\n', LF) on stdout and line"]
    #[doc = " endings sent over UART:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert LF to CRLF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert LF to CR"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. writing to UART"]
    #[doc = ""]
    #[doc = " @param uart_num the UART number"]
    #[doc = " @param mode line endings to send to UART"]
    #[doc = " @return  0 if successed, or -1"]
    #[doc = "              when an error (specified by errno) have occurred."]
    pub fn esp_vfs_dev_uart_port_set_tx_line_endings(
        uart_num: c_types::c_int,
        mode: esp_line_endings_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief set VFS to use simple functions for reading and writing UART"]
    #[doc = " Read is non-blocking, write is busy waiting until TX FIFO has enough space."]
    #[doc = " These functions are used by default."]
    #[doc = " @param uart_num UART peripheral number"]
    pub fn esp_vfs_dev_uart_use_nonblocking(uart_num: c_types::c_int);
}
extern "C" {
    #[doc = " @brief set VFS to use UART driver for reading and writing"]
    #[doc = " @note application must configure UART driver before calling these functions"]
    #[doc = " With these functions, read and write are blocking and interrupt-driven."]
    #[doc = " @param uart_num UART peripheral number"]
    pub fn esp_vfs_dev_uart_use_driver(uart_num: c_types::c_int);
}
extern "C" {
    #[doc = " @brief set VFS to use USB-SERIAL-JTAG driver for reading and writing"]
    #[doc = " @note application must configure USB-SERIAL-JTAG driver before calling these functions"]
    #[doc = " With these functions, read and write are blocking and interrupt-driven."]
    pub fn esp_vfs_usb_serial_jtag_use_driver();
}
extern "C" {
    #[doc = " @brief set VFS to use simple functions for reading and writing UART"]
    #[doc = " Read is non-blocking, write is busy waiting until TX FIFO has enough space."]
    #[doc = " These functions are used by default."]
    pub fn esp_vfs_usb_serial_jtag_use_nonblocking();
}
extern "C" {
    #[doc = " @brief add virtual filesystem semihosting driver"]
    #[doc = ""]
    #[doc = " @param base_path VFS path to mount host directory"]
    #[doc = " @param host_path host path to mount; if NULL default dirctory will be used (see OpenOCD configuration)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if esp_vfs_semihost_register was already called for specified VFS path"]
    #[doc = "      - ESP_ERR_NO_MEM if there are no slots to register new mount point"]
    pub fn esp_vfs_semihost_register(
        base_path: *const c_types::c_char,
        host_path: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Un-register semihosting driver from VFS"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if semihosting driver is not registered in VFS at that path"]
    pub fn esp_vfs_semihost_unregister(base_path: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief add /dev/usbserjtag virtual filesystem driver"]
    #[doc = ""]
    #[doc = " This function is called from startup code to enable console output"]
    pub fn esp_vfs_dev_usb_serial_jtag_register() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set the line endings expected to be received"]
    #[doc = ""]
    #[doc = " This specifies the conversion between line endings received and"]
    #[doc = " newlines ('\\n', LF) passed into stdin:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert CRLF to LF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert CR to LF"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. reading"]
    #[doc = ""]
    #[doc = " @param mode line endings expected"]
    pub fn esp_vfs_dev_usb_serial_jtag_set_rx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief Set the line endings to sent"]
    #[doc = ""]
    #[doc = " This specifies the conversion between newlines ('\\n', LF) on stdout and line"]
    #[doc = " endings sent:"]
    #[doc = ""]
    #[doc = " - ESP_LINE_ENDINGS_CRLF: convert LF to CRLF"]
    #[doc = " - ESP_LINE_ENDINGS_CR: convert LF to CR"]
    #[doc = " - ESP_LINE_ENDINGS_LF: no modification"]
    #[doc = ""]
    #[doc = " @note this function is not thread safe w.r.t. writing"]
    #[doc = ""]
    #[doc = " @param mode line endings to send"]
    pub fn esp_vfs_dev_usb_serial_jtag_set_tx_line_endings(mode: esp_line_endings_t);
}
extern "C" {
    #[doc = " @brief add uart/usb_serial_jtag/usb_otg_acmcdc virtual filesystem driver"]
    #[doc = ""]
    #[doc = " This function is called from startup code to enable serial output"]
    pub fn esp_vfs_console_register() -> esp_err_t;
}
#[doc = " @brief Eventfd vfs initialization settings"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_vfs_eventfd_config_t {
    #[doc = "< The maxinum number of eventfds supported"]
    pub max_fds: size_t,
}
extern "C" {
    #[doc = " @brief  Registers the event vfs."]
    #[doc = ""]
    #[doc = " @return  ESP_OK if successful, ESP_ERR_NO_MEM if too many VFSes are"]
    #[doc = "          registered."]
    pub fn esp_vfs_eventfd_register(config: *const esp_vfs_eventfd_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Unregisters the event vfs."]
    #[doc = ""]
    #[doc = " @return ESP_OK if successful, ESP_ERR_INVALID_STATE if VFS for given prefix"]
    #[doc = "         hasn't been registered"]
    pub fn esp_vfs_eventfd_unregister() -> esp_err_t;
}
extern "C" {
    pub fn eventfd(initval: c_types::c_uint, flags: c_types::c_int) -> c_types::c_int;
}
#[doc = " @brief Configuration structure for esp_vfs_spiffs_register"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_vfs_spiffs_conf_t {
    #[doc = "< File path prefix associated with the filesystem."]
    pub base_path: *const c_types::c_char,
    #[doc = "< Optional, label of SPIFFS partition to use. If set to NULL, first partition with subtype=spiffs will be used."]
    pub partition_label: *const c_types::c_char,
    #[doc = "< Maximum files that could be open at the same time."]
    pub max_files: size_t,
    #[doc = "< If true, it will format the file system if it fails to mount."]
    pub format_if_mount_failed: bool,
}
impl Default for esp_vfs_spiffs_conf_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " Register and mount SPIFFS to VFS with given path prefix."]
    #[doc = ""]
    #[doc = " @param   conf                      Pointer to esp_vfs_spiffs_conf_t configuration structure"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK                  if success"]
    #[doc = "          - ESP_ERR_NO_MEM          if objects could not be allocated"]
    #[doc = "          - ESP_ERR_INVALID_STATE   if already mounted or partition is encrypted"]
    #[doc = "          - ESP_ERR_NOT_FOUND       if partition for SPIFFS was not found"]
    #[doc = "          - ESP_FAIL                if mount or format fails"]
    pub fn esp_vfs_spiffs_register(conf: *const esp_vfs_spiffs_conf_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Unregister and unmount SPIFFS from VFS"]
    #[doc = ""]
    #[doc = " @param partition_label  Same label as passed to esp_vfs_spiffs_register."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK if successful"]
    #[doc = "          - ESP_ERR_INVALID_STATE already unregistered"]
    pub fn esp_vfs_spiffs_unregister(partition_label: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " Check if SPIFFS is mounted"]
    #[doc = ""]
    #[doc = " @param partition_label  Optional, label of the partition to check."]
    #[doc = "                         If not specified, first partition with subtype=spiffs is used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - true    if mounted"]
    #[doc = "          - false   if not mounted"]
    pub fn esp_spiffs_mounted(partition_label: *const c_types::c_char) -> bool;
}
extern "C" {
    #[doc = " Format the SPIFFS partition"]
    #[doc = ""]
    #[doc = " @param partition_label  Same label as passed to esp_vfs_spiffs_register."]
    #[doc = " @return"]
    #[doc = "          - ESP_OK      if successful"]
    #[doc = "          - ESP_FAIL    on error"]
    pub fn esp_spiffs_format(partition_label: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " Get information for SPIFFS"]
    #[doc = ""]
    #[doc = " @param partition_label           Same label as passed to esp_vfs_spiffs_register"]
    #[doc = " @param[out] total_bytes          Size of the file system"]
    #[doc = " @param[out] used_bytes           Current used bytes in the file system"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          - ESP_OK                  if success"]
    #[doc = "          - ESP_ERR_INVALID_STATE   if not mounted"]
    pub fn esp_spiffs_info(
        partition_label: *const c_types::c_char,
        total_bytes: *mut size_t,
        used_bytes: *mut size_t,
    ) -> esp_err_t;
}
#[doc = " Decoded values from SD card Card Specific Data register"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sdmmc_csd_t {
    #[doc = "< CSD structure format"]
    pub csd_ver: c_types::c_int,
    #[doc = "< MMC version (for CID format)"]
    pub mmc_ver: c_types::c_int,
    #[doc = "< total number of sectors"]
    pub capacity: c_types::c_int,
    #[doc = "< sector size in bytes"]
    pub sector_size: c_types::c_int,
    #[doc = "< block length for reads"]
    pub read_block_len: c_types::c_int,
    #[doc = "< Card Command Class for SD"]
    pub card_command_class: c_types::c_int,
    #[doc = "< Max transfer speed"]
    pub tr_speed: c_types::c_int,
}
#[doc = " Decoded values from SD card Card IDentification register"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sdmmc_cid_t {
    #[doc = "< manufacturer identification number"]
    pub mfg_id: c_types::c_int,
    #[doc = "< OEM/product identification number"]
    pub oem_id: c_types::c_int,
    #[doc = "< product name (MMC v1 has the longest)"]
    pub name: [c_types::c_char; 8usize],
    #[doc = "< product revision"]
    pub revision: c_types::c_int,
    #[doc = "< product serial number"]
    pub serial: c_types::c_int,
    #[doc = "< manufacturing date"]
    pub date: c_types::c_int,
}
#[doc = " Decoded values from SD Configuration Register"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sdmmc_scr_t {
    #[doc = "< SD Physical layer specification version, reported by card"]
    pub sd_spec: c_types::c_int,
    #[doc = "< bus widths supported by card: BIT(0) — 1-bit bus, BIT(2) — 4-bit bus"]
    pub bus_width: c_types::c_int,
}
#[doc = " Decoded values of Extended Card Specific Data"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sdmmc_ext_csd_t {
    #[doc = "< Power class used by the card"]
    pub power_class: u8,
}
#[doc = " SD/MMC command response buffer"]
pub type sdmmc_response_t = [u32; 4usize];
#[doc = " SD SWITCH_FUNC response buffer"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sdmmc_switch_func_rsp_t {
    #[doc = "< response data"]
    pub data: [u32; 16usize],
}
#[doc = " SD/MMC command information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdmmc_command_t {
    #[doc = "< SD or MMC command index"]
    pub opcode: u32,
    #[doc = "< SD/MMC command argument"]
    pub arg: u32,
    #[doc = "< response buffer"]
    pub response: sdmmc_response_t,
    #[doc = "< buffer to send or read into"]
    pub data: *mut c_types::c_void,
    #[doc = "< length of data buffer"]
    pub datalen: size_t,
    #[doc = "< block length"]
    pub blklen: size_t,
    #[doc = "< see below"]
    pub flags: c_types::c_int,
    #[doc = "< error returned from transfer"]
    pub error: esp_err_t,
    #[doc = "< response timeout, in milliseconds"]
    pub timeout_ms: c_types::c_int,
}
impl Default for sdmmc_command_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " SD/MMC Host description"]
#[doc = ""]
#[doc = " This structure defines properties of SD/MMC host and functions"]
#[doc = " of SD/MMC host which can be used by upper layers."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sdmmc_host_t {
    #[doc = "< flags defining host properties"]
    pub flags: u32,
    #[doc = "< slot number, to be passed to host functions"]
    pub slot: c_types::c_int,
    #[doc = "< max frequency supported by the host"]
    pub max_freq_khz: c_types::c_int,
    #[doc = "< I/O voltage used by the controller (voltage switching is not supported)"]
    pub io_voltage: f32,
    #[doc = "< Host function to initialize the driver"]
    pub init: ::core::option::Option<unsafe extern "C" fn() -> esp_err_t>,
    #[doc = "< host function to set bus width"]
    pub set_bus_width: ::core::option::Option<
        unsafe extern "C" fn(slot: c_types::c_int, width: size_t) -> esp_err_t,
    >,
    #[doc = "< host function to get bus width"]
    pub get_bus_width: ::core::option::Option<unsafe extern "C" fn(slot: c_types::c_int) -> size_t>,
    #[doc = "< host function to set DDR mode"]
    pub set_bus_ddr_mode: ::core::option::Option<
        unsafe extern "C" fn(slot: c_types::c_int, ddr_enable: bool) -> esp_err_t,
    >,
    #[doc = "< host function to set card clock frequency"]
    pub set_card_clk: ::core::option::Option<
        unsafe extern "C" fn(slot: c_types::c_int, freq_khz: u32) -> esp_err_t,
    >,
    #[doc = "< host function to do a transaction"]
    pub do_transaction: ::core::option::Option<
        unsafe extern "C" fn(slot: c_types::c_int, cmdinfo: *mut sdmmc_command_t) -> esp_err_t,
    >,
    pub __bindgen_anon_1: sdmmc_host_t__bindgen_ty_1,
    #[doc = "< Host function to enable SDIO interrupt line"]
    pub io_int_enable:
        ::core::option::Option<unsafe extern "C" fn(slot: c_types::c_int) -> esp_err_t>,
    #[doc = "< Host function to wait for SDIO interrupt line to be active"]
    pub io_int_wait: ::core::option::Option<
        unsafe extern "C" fn(slot: c_types::c_int, timeout_ticks: TickType_t) -> esp_err_t,
    >,
    #[doc = "< timeout, in milliseconds, of a single command. Set to 0 to use the default value."]
    pub command_timeout_ms: c_types::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sdmmc_host_t__bindgen_ty_1 {
    #[doc = "< host function to deinitialize the driver"]
    pub deinit: ::core::option::Option<unsafe extern "C" fn() -> esp_err_t>,
    #[doc = "< host function to deinitialize the driver, called with the `slot`"]
    pub deinit_p: ::core::option::Option<unsafe extern "C" fn(slot: c_types::c_int) -> esp_err_t>,
}
impl Default for sdmmc_host_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sdmmc_host_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " SD/MMC card information structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sdmmc_card_t {
    #[doc = "< Host with which the card is associated"]
    pub host: sdmmc_host_t,
    #[doc = "< OCR (Operation Conditions Register) value"]
    pub ocr: u32,
    pub __bindgen_anon_1: sdmmc_card_t__bindgen_ty_1,
    #[doc = "< decoded CSD (Card-Specific Data) register value"]
    pub csd: sdmmc_csd_t,
    #[doc = "< decoded SCR (SD card Configuration Register) value"]
    pub scr: sdmmc_scr_t,
    #[doc = "< decoded EXT_CSD (Extended Card Specific Data) register value"]
    pub ext_csd: sdmmc_ext_csd_t,
    #[doc = "< RCA (Relative Card Address)"]
    pub rca: u16,
    #[doc = "< Maximum frequency, in kHz, supported by the card"]
    pub max_freq_khz: u16,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sdmmc_card_t__bindgen_ty_1 {
    #[doc = "< decoded CID (Card IDentification) register value"]
    pub cid: sdmmc_cid_t,
    #[doc = "< raw CID of MMC card to be decoded"]
    #[doc = "after the CSD is fetched in the data transfer mode"]
    pub raw_cid: sdmmc_response_t,
}
impl Default for sdmmc_card_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for sdmmc_card_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sdmmc_card_t {
    #[inline]
    pub fn is_mem(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_mem(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_sdio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_sdio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_mmc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_mmc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn num_io_functions(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_num_io_functions(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn log_bus_width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log_bus_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn is_ddr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_ddr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_mem: u32,
        is_sdio: u32,
        is_mmc: u32,
        num_io_functions: u32,
        log_bus_width: u32,
        is_ddr: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_mem: u32 = unsafe { ::core::mem::transmute(is_mem) };
            is_mem as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_sdio: u32 = unsafe { ::core::mem::transmute(is_sdio) };
            is_sdio as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_mmc: u32 = unsafe { ::core::mem::transmute(is_mmc) };
            is_mmc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let num_io_functions: u32 = unsafe { ::core::mem::transmute(num_io_functions) };
            num_io_functions as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let log_bus_width: u32 = unsafe { ::core::mem::transmute(log_bus_width) };
            log_bus_width as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let is_ddr: u32 = unsafe { ::core::mem::transmute(is_ddr) };
            is_ddr as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lldesc_s {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub buf: *const u8,
    pub __bindgen_anon_1: lldesc_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lldesc_s__bindgen_ty_1 {
    pub empty: u32,
    pub qe: lldesc_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldesc_s__bindgen_ty_1__bindgen_ty_1 {
    pub stqe_next: *mut lldesc_s,
}
impl Default for lldesc_s__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for lldesc_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for lldesc_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl lldesc_s {
    #[inline]
    pub fn size(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn offset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_offset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn sosf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sosf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn eof(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_eof(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn owner(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_owner(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        size: u32,
        length: u32,
        offset: u32,
        sosf: u32,
        eof: u32,
        owner: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let size: u32 = unsafe { ::core::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(12usize, 12u8, {
            let length: u32 = unsafe { ::core::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let offset: u32 = unsafe { ::core::mem::transmute(offset) };
            offset as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let sosf: u32 = unsafe { ::core::mem::transmute(sosf) };
            sosf as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let eof: u32 = unsafe { ::core::mem::transmute(eof) };
            eof as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let owner: u32 = unsafe { ::core::mem::transmute(owner) };
            owner as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type lldesc_t = lldesc_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct tx_ampdu_entry_s {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl tx_ampdu_entry_s {
    #[inline]
    pub fn sub_len(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_sub_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn dili_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_dili_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn null_byte(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_null_byte(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn data(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seq(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_seq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sub_len: u32,
        dili_num: u32,
        null_byte: u32,
        data: u32,
        enc: u32,
        seq: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let sub_len: u32 = unsafe { ::core::mem::transmute(sub_len) };
            sub_len as u64
        });
        __bindgen_bitfield_unit.set(12usize, 7u8, {
            let dili_num: u32 = unsafe { ::core::mem::transmute(dili_num) };
            dili_num as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let null_byte: u32 = unsafe { ::core::mem::transmute(null_byte) };
            null_byte as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let data: u32 = unsafe { ::core::mem::transmute(data) };
            data as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let enc: u32 = unsafe { ::core::mem::transmute(enc) };
            enc as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let seq: u32 = unsafe { ::core::mem::transmute(seq) };
            seq as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type tx_ampdu_entry_t = tx_ampdu_entry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldesc_chain_s {
    pub head: *mut lldesc_t,
    pub tail: *mut lldesc_t,
}
impl Default for lldesc_chain_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type lldesc_chain_t = lldesc_chain_s;
extern "C" {
    pub fn lldesc_build_chain(
        descptr: *mut u8,
        desclen: u32,
        mblkptr: *mut u8,
        buflen: u32,
        blksz: u32,
        owner: u8,
        head: *mut *mut lldesc_t,
        tail: *mut *mut lldesc_t,
    );
}
extern "C" {
    pub fn lldesc_num2link(head: *mut lldesc_t, nblks: u16) -> *mut lldesc_t;
}
extern "C" {
    pub fn lldesc_set_owner(head: *mut lldesc_t, nblks: u16, owner: u8) -> *mut lldesc_t;
}
extern "C" {
    #[doc = " Generate a linked list pointing to a (huge) buffer in an descriptor array."]
    #[doc = ""]
    #[doc = " The caller should ensure there is enough size to hold the array, by calling"]
    #[doc = " ``lldesc_get_required_num_constrained`` with the same max_desc_size argument."]
    #[doc = ""]
    #[doc = " @param[out] out_desc_array Output of a descriptor array, the head should be fed to the DMA."]
    #[doc = " @param buffer Buffer for the descriptors to point to."]
    #[doc = " @param size Size (or length for TX) of the buffer"]
    #[doc = " @param max_desc_size Maximum length of each descriptor"]
    #[doc = " @param isrx The RX DMA may require the buffer to be word-aligned, set to true for a RX link, otherwise false."]
    pub fn lldesc_setup_link_constrained(
        out_desc_array: *mut lldesc_t,
        buffer: *const c_types::c_void,
        size: c_types::c_int,
        max_desc_size: c_types::c_int,
        isrx: bool,
    );
}
extern "C" {
    #[doc = " @brief Get the received length of a linked list, until end of the link or eof."]
    #[doc = ""]
    #[doc = " @param head      The head of the linked list."]
    #[doc = " @param[out] out_next Output of the next descriptor of the EOF descriptor. Return NULL if there's no"]
    #[doc = "                 EOF. Can be set to NULL if next descriptor is not needed."]
    #[doc = " @return The accumulation of the `len` field of all descriptors until EOF or the end of the link."]
    pub fn lldesc_get_received_len(
        head: *mut lldesc_t,
        out_next: *mut *mut lldesc_t,
    ) -> c_types::c_int;
}
pub const periph_module_t_PERIPH_LEDC_MODULE: periph_module_t = 0;
pub const periph_module_t_PERIPH_UART0_MODULE: periph_module_t = 1;
pub const periph_module_t_PERIPH_UART1_MODULE: periph_module_t = 2;
pub const periph_module_t_PERIPH_USB_DEVICE_MODULE: periph_module_t = 3;
pub const periph_module_t_PERIPH_I2C0_MODULE: periph_module_t = 4;
pub const periph_module_t_PERIPH_I2S1_MODULE: periph_module_t = 5;
pub const periph_module_t_PERIPH_TIMG0_MODULE: periph_module_t = 6;
pub const periph_module_t_PERIPH_TIMG1_MODULE: periph_module_t = 7;
pub const periph_module_t_PERIPH_UHCI0_MODULE: periph_module_t = 8;
pub const periph_module_t_PERIPH_RMT_MODULE: periph_module_t = 9;
pub const periph_module_t_PERIPH_SPI_MODULE: periph_module_t = 10;
pub const periph_module_t_PERIPH_SPI2_MODULE: periph_module_t = 11;
pub const periph_module_t_PERIPH_TWAI_MODULE: periph_module_t = 12;
pub const periph_module_t_PERIPH_RNG_MODULE: periph_module_t = 13;
pub const periph_module_t_PERIPH_WIFI_MODULE: periph_module_t = 14;
pub const periph_module_t_PERIPH_BT_MODULE: periph_module_t = 15;
pub const periph_module_t_PERIPH_WIFI_BT_COMMON_MODULE: periph_module_t = 16;
pub const periph_module_t_PERIPH_BT_BASEBAND_MODULE: periph_module_t = 17;
pub const periph_module_t_PERIPH_BT_LC_MODULE: periph_module_t = 18;
pub const periph_module_t_PERIPH_RSA_MODULE: periph_module_t = 19;
pub const periph_module_t_PERIPH_AES_MODULE: periph_module_t = 20;
pub const periph_module_t_PERIPH_SHA_MODULE: periph_module_t = 21;
pub const periph_module_t_PERIPH_HMAC_MODULE: periph_module_t = 22;
pub const periph_module_t_PERIPH_DS_MODULE: periph_module_t = 23;
pub const periph_module_t_PERIPH_GDMA_MODULE: periph_module_t = 24;
pub const periph_module_t_PERIPH_SYSTIMER_MODULE: periph_module_t = 25;
pub const periph_module_t_PERIPH_SARADC_MODULE: periph_module_t = 26;
pub const periph_module_t_PERIPH_MODULE_MAX: periph_module_t = 27;
pub type periph_module_t = c_types::c_uint;
#[doc = "< interrupt of WiFi MAC, level"]
pub const periph_interrput_t_ETS_WIFI_MAC_INTR_SOURCE: periph_interrput_t = 0;
#[doc = "< interrupt of WiFi MAC, NMI, use if MAC have bug to fix in NMI"]
pub const periph_interrput_t_ETS_WIFI_MAC_NMI_SOURCE: periph_interrput_t = 1;
#[doc = "<"]
pub const periph_interrput_t_ETS_WIFI_PWR_INTR_SOURCE: periph_interrput_t = 2;
#[doc = "< interrupt of WiFi BB, level, we can do some calibartion"]
pub const periph_interrput_t_ETS_WIFI_BB_INTR_SOURCE: periph_interrput_t = 3;
#[doc = "< will be cancelled"]
pub const periph_interrput_t_ETS_BT_MAC_INTR_SOURCE: periph_interrput_t = 4;
#[doc = "< interrupt of BT BB, level"]
pub const periph_interrput_t_ETS_BT_BB_INTR_SOURCE: periph_interrput_t = 5;
#[doc = "< interrupt of BT BB, NMI, use if BB have bug to fix in NMI"]
pub const periph_interrput_t_ETS_BT_BB_NMI_SOURCE: periph_interrput_t = 6;
#[doc = "< interrupt of RWBT, level"]
pub const periph_interrput_t_ETS_RWBT_INTR_SOURCE: periph_interrput_t = 7;
#[doc = "< interrupt of RWBLE, level"]
pub const periph_interrput_t_ETS_RWBLE_INTR_SOURCE: periph_interrput_t = 8;
#[doc = "< interrupt of RWBT, NMI, use if RWBT have bug to fix in NMI"]
pub const periph_interrput_t_ETS_RWBT_NMI_SOURCE: periph_interrput_t = 9;
#[doc = "< interrupt of RWBLE, NMI, use if RWBT have bug to fix in NMI"]
pub const periph_interrput_t_ETS_RWBLE_NMI_SOURCE: periph_interrput_t = 10;
#[doc = "< interrupt of I2C Master, level"]
pub const periph_interrput_t_ETS_I2C_MASTER_SOURCE: periph_interrput_t = 11;
#[doc = "< interrupt of SLC0, level"]
pub const periph_interrput_t_ETS_SLC0_INTR_SOURCE: periph_interrput_t = 12;
#[doc = "< interrupt of SLC1, level"]
pub const periph_interrput_t_ETS_SLC1_INTR_SOURCE: periph_interrput_t = 13;
#[doc = "< interrupt of APB ctrl, ?"]
pub const periph_interrput_t_ETS_APB_CTRL_INTR_SOURCE: periph_interrput_t = 14;
#[doc = "< interrupt of UHCI0, level"]
pub const periph_interrput_t_ETS_UHCI0_INTR_SOURCE: periph_interrput_t = 15;
#[doc = "< interrupt of GPIO, level"]
pub const periph_interrput_t_ETS_GPIO_INTR_SOURCE: periph_interrput_t = 16;
#[doc = "< interrupt of GPIO, NMI"]
pub const periph_interrput_t_ETS_GPIO_NMI_SOURCE: periph_interrput_t = 17;
#[doc = "< interrupt of SPI1, level, SPI1 is for flash read/write, do not use this"]
pub const periph_interrput_t_ETS_SPI1_INTR_SOURCE: periph_interrput_t = 18;
#[doc = "< interrupt of SPI2, level"]
pub const periph_interrput_t_ETS_SPI2_INTR_SOURCE: periph_interrput_t = 19;
#[doc = "< interrupt of I2S1, level"]
pub const periph_interrput_t_ETS_I2S1_INTR_SOURCE: periph_interrput_t = 20;
#[doc = "< interrupt of UART0, level"]
pub const periph_interrput_t_ETS_UART0_INTR_SOURCE: periph_interrput_t = 21;
#[doc = "< interrupt of UART1, level"]
pub const periph_interrput_t_ETS_UART1_INTR_SOURCE: periph_interrput_t = 22;
#[doc = "< interrupt of LED PWM, level"]
pub const periph_interrput_t_ETS_LEDC_INTR_SOURCE: periph_interrput_t = 23;
#[doc = "< interrupt of efuse, level, not likely to use"]
pub const periph_interrput_t_ETS_EFUSE_INTR_SOURCE: periph_interrput_t = 24;
#[doc = "< interrupt of can, level"]
pub const periph_interrput_t_ETS_TWAI_INTR_SOURCE: periph_interrput_t = 25;
#[doc = "< interrupt of USB, level"]
pub const periph_interrput_t_ETS_USB_SERIAL_JTAG_INTR_SOURCE: periph_interrput_t = 26;
#[doc = "< interrupt of rtc core, level, include rtc watchdog"]
pub const periph_interrput_t_ETS_RTC_CORE_INTR_SOURCE: periph_interrput_t = 27;
#[doc = "< interrupt of remote controller, level"]
pub const periph_interrput_t_ETS_RMT_INTR_SOURCE: periph_interrput_t = 28;
#[doc = "< interrupt of I2C controller1, level"]
pub const periph_interrput_t_ETS_I2C_EXT0_INTR_SOURCE: periph_interrput_t = 29;
pub const periph_interrput_t_ETS_TIMER1_INTR_SOURCE: periph_interrput_t = 30;
pub const periph_interrput_t_ETS_TIMER2_INTR_SOURCE: periph_interrput_t = 31;
#[doc = "< interrupt of TIMER_GROUP0, TIMER0, level"]
pub const periph_interrput_t_ETS_TG0_T0_LEVEL_INTR_SOURCE: periph_interrput_t = 32;
#[doc = "< interrupt of TIMER_GROUP0, WATCH DOG, level"]
pub const periph_interrput_t_ETS_TG0_WDT_LEVEL_INTR_SOURCE: periph_interrput_t = 33;
#[doc = "< interrupt of TIMER_GROUP1, TIMER0, level"]
pub const periph_interrput_t_ETS_TG1_T0_LEVEL_INTR_SOURCE: periph_interrput_t = 34;
#[doc = "< interrupt of TIMER_GROUP1, WATCHDOG, level"]
pub const periph_interrput_t_ETS_TG1_WDT_LEVEL_INTR_SOURCE: periph_interrput_t = 35;
#[doc = "< interrupt of Cache Invalied Access, LEVEL"]
pub const periph_interrput_t_ETS_CACHE_IA_INTR_SOURCE: periph_interrput_t = 36;
#[doc = "< interrupt of system timer 0, EDGE"]
pub const periph_interrput_t_ETS_SYSTIMER_TARGET0_EDGE_INTR_SOURCE: periph_interrput_t = 37;
#[doc = "< interrupt of system timer 1, EDGE"]
pub const periph_interrput_t_ETS_SYSTIMER_TARGET1_EDGE_INTR_SOURCE: periph_interrput_t = 38;
#[doc = "< interrupt of system timer 2, EDGE"]
pub const periph_interrput_t_ETS_SYSTIMER_TARGET2_EDGE_INTR_SOURCE: periph_interrput_t = 39;
#[doc = "< interrupt of SPI0 Cache access and SPI1 access rejected, LEVEL"]
pub const periph_interrput_t_ETS_SPI_MEM_REJECT_CACHE_INTR_SOURCE: periph_interrput_t = 40;
#[doc = "< interrupt of ICache perload operation, LEVEL"]
pub const periph_interrput_t_ETS_ICACHE_PRELOAD0_INTR_SOURCE: periph_interrput_t = 41;
#[doc = "< interrupt of instruction cache sync done, LEVEL"]
pub const periph_interrput_t_ETS_ICACHE_SYNC0_INTR_SOURCE: periph_interrput_t = 42;
#[doc = "< interrupt of APB ADC, LEVEL"]
pub const periph_interrput_t_ETS_APB_ADC_INTR_SOURCE: periph_interrput_t = 43;
#[doc = "< interrupt of general DMA channel 0, LEVEL"]
pub const periph_interrput_t_ETS_DMA_CH0_INTR_SOURCE: periph_interrput_t = 44;
#[doc = "< interrupt of general DMA channel 1, LEVEL"]
pub const periph_interrput_t_ETS_DMA_CH1_INTR_SOURCE: periph_interrput_t = 45;
#[doc = "< interrupt of general DMA channel 2, LEVEL"]
pub const periph_interrput_t_ETS_DMA_CH2_INTR_SOURCE: periph_interrput_t = 46;
#[doc = "< interrupt of RSA accelerator, level"]
pub const periph_interrput_t_ETS_RSA_INTR_SOURCE: periph_interrput_t = 47;
#[doc = "< interrupt of AES accelerator, level"]
pub const periph_interrput_t_ETS_AES_INTR_SOURCE: periph_interrput_t = 48;
#[doc = "< interrupt of SHA accelerator, level"]
pub const periph_interrput_t_ETS_SHA_INTR_SOURCE: periph_interrput_t = 49;
#[doc = "< interrupt0 generated from a CPU, level"]
pub const periph_interrput_t_ETS_FROM_CPU_INTR0_SOURCE: periph_interrput_t = 50;
#[doc = "< interrupt1 generated from a CPU, level"]
pub const periph_interrput_t_ETS_FROM_CPU_INTR1_SOURCE: periph_interrput_t = 51;
#[doc = "< interrupt2 generated from a CPU, level"]
pub const periph_interrput_t_ETS_FROM_CPU_INTR2_SOURCE: periph_interrput_t = 52;
#[doc = "< interrupt3 generated from a CPU, level"]
pub const periph_interrput_t_ETS_FROM_CPU_INTR3_SOURCE: periph_interrput_t = 53;
#[doc = "< interrupt of Assist debug module, LEVEL"]
pub const periph_interrput_t_ETS_ASSIST_DEBUG_INTR_SOURCE: periph_interrput_t = 54;
pub const periph_interrput_t_ETS_DMA_APBPERI_PMS_INTR_SOURCE: periph_interrput_t = 55;
pub const periph_interrput_t_ETS_CORE0_IRAM0_PMS_INTR_SOURCE: periph_interrput_t = 56;
pub const periph_interrput_t_ETS_CORE0_DRAM0_PMS_INTR_SOURCE: periph_interrput_t = 57;
pub const periph_interrput_t_ETS_CORE0_PIF_PMS_INTR_SOURCE: periph_interrput_t = 58;
pub const periph_interrput_t_ETS_CORE0_PIF_PMS_SIZE_INTR_SOURCE: periph_interrput_t = 59;
pub const periph_interrput_t_ETS_BAK_PMS_VIOLATE_INTR_SOURCE: periph_interrput_t = 60;
pub const periph_interrput_t_ETS_CACHE_CORE0_ACS_INTR_SOURCE: periph_interrput_t = 61;
pub const periph_interrput_t_ETS_MAX_INTR_SOURCE: periph_interrput_t = 62;
pub type periph_interrput_t = c_types::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spi_dev_s {
    pub cmd: spi_dev_s__bindgen_ty_1,
    pub addr: u32,
    pub ctrl: spi_dev_s__bindgen_ty_2,
    pub clock: spi_dev_s__bindgen_ty_3,
    pub user: spi_dev_s__bindgen_ty_4,
    pub user1: spi_dev_s__bindgen_ty_5,
    pub user2: spi_dev_s__bindgen_ty_6,
    pub ms_dlen: spi_dev_s__bindgen_ty_7,
    pub misc: spi_dev_s__bindgen_ty_8,
    pub din_mode: spi_dev_s__bindgen_ty_9,
    pub din_num: spi_dev_s__bindgen_ty_10,
    pub dout_mode: spi_dev_s__bindgen_ty_11,
    pub dma_conf: spi_dev_s__bindgen_ty_12,
    pub dma_int_ena: spi_dev_s__bindgen_ty_13,
    pub dma_int_clr: spi_dev_s__bindgen_ty_14,
    pub dma_int_raw: spi_dev_s__bindgen_ty_15,
    pub dma_int_st: spi_dev_s__bindgen_ty_16,
    pub reserved_44: u32,
    pub reserved_48: u32,
    pub reserved_4c: u32,
    pub reserved_50: u32,
    pub reserved_54: u32,
    pub reserved_58: u32,
    pub reserved_5c: u32,
    pub reserved_60: u32,
    pub reserved_64: u32,
    pub reserved_68: u32,
    pub reserved_6c: u32,
    pub reserved_70: u32,
    pub reserved_74: u32,
    pub reserved_78: u32,
    pub reserved_7c: u32,
    pub reserved_80: u32,
    pub reserved_84: u32,
    pub reserved_88: u32,
    pub reserved_8c: u32,
    pub reserved_90: u32,
    pub reserved_94: u32,
    pub data_buf: [u32; 16usize],
    pub reserved_d8: u32,
    pub reserved_dc: u32,
    pub slave: spi_dev_s__bindgen_ty_17,
    pub slave1: spi_dev_s__bindgen_ty_18,
    pub clk_gate: spi_dev_s__bindgen_ty_19,
    pub reserved_ec: u32,
    pub date: spi_dev_s__bindgen_ty_20,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn conf_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_conf_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved25(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved25(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        conf_bitlen: u32,
        reserved18: u32,
        update: u32,
        usr: u32,
        reserved25: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let conf_bitlen: u32 = unsafe { ::core::mem::transmute(conf_bitlen) };
            conf_bitlen as u64
        });
        __bindgen_bitfield_unit.set(18usize, 5u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let update: u32 = unsafe { ::core::mem::transmute(update) };
            update as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let usr: u32 = unsafe { ::core::mem::transmute(usr) };
            usr as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let reserved25: u32 = unsafe { ::core::mem::transmute(reserved25) };
            reserved25 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dummy_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dummy_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn faddr_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_faddr_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn faddr_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_faddr_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fcmd_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fcmd_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fcmd_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fcmd_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn q_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_q_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn d_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hold_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hold_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wp_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wp_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_bit_order(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_bit_order(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_bit_order(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_bit_order(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved27(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved27(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        dummy_out: u32,
        reserved4: u32,
        faddr_dual: u32,
        faddr_quad: u32,
        reserved7: u32,
        fcmd_dual: u32,
        fcmd_quad: u32,
        reserved10: u32,
        fread_dual: u32,
        fread_quad: u32,
        reserved16: u32,
        reserved17: u32,
        q_pol: u32,
        d_pol: u32,
        hold_pol: u32,
        wp_pol: u32,
        reserved22: u32,
        rd_bit_order: u32,
        wr_bit_order: u32,
        reserved27: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dummy_out: u32 = unsafe { ::core::mem::transmute(dummy_out) };
            dummy_out as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let faddr_dual: u32 = unsafe { ::core::mem::transmute(faddr_dual) };
            faddr_dual as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let faddr_quad: u32 = unsafe { ::core::mem::transmute(faddr_quad) };
            faddr_quad as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reserved7: u32 = unsafe { ::core::mem::transmute(reserved7) };
            reserved7 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fcmd_dual: u32 = unsafe { ::core::mem::transmute(fcmd_dual) };
            fcmd_dual as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let fcmd_quad: u32 = unsafe { ::core::mem::transmute(fcmd_quad) };
            fcmd_quad as u64
        });
        __bindgen_bitfield_unit.set(10usize, 4u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let fread_dual: u32 = unsafe { ::core::mem::transmute(fread_dual) };
            fread_dual as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let fread_quad: u32 = unsafe { ::core::mem::transmute(fread_quad) };
            fread_quad as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let q_pol: u32 = unsafe { ::core::mem::transmute(q_pol) };
            q_pol as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let d_pol: u32 = unsafe { ::core::mem::transmute(d_pol) };
            d_pol as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let hold_pol: u32 = unsafe { ::core::mem::transmute(hold_pol) };
            hold_pol as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let wp_pol: u32 = unsafe { ::core::mem::transmute(wp_pol) };
            wp_pol as u64
        });
        __bindgen_bitfield_unit.set(22usize, 3u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let rd_bit_order: u32 = unsafe { ::core::mem::transmute(rd_bit_order) };
            rd_bit_order as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let wr_bit_order: u32 = unsafe { ::core::mem::transmute(wr_bit_order) };
            wr_bit_order as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let reserved27: u32 = unsafe { ::core::mem::transmute(reserved27) };
            reserved27 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn clkcnt_l(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_l(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn clkcnt_h(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_h(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn clkcnt_n(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_n(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn clkdiv_pre(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_clkdiv_pre(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_equ_sysclk(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_equ_sysclk(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        clkcnt_l: u32,
        clkcnt_h: u32,
        clkcnt_n: u32,
        clkdiv_pre: u32,
        reserved22: u32,
        clk_equ_sysclk: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let clkcnt_l: u32 = unsafe { ::core::mem::transmute(clkcnt_l) };
            clkcnt_l as u64
        });
        __bindgen_bitfield_unit.set(6usize, 6u8, {
            let clkcnt_h: u32 = unsafe { ::core::mem::transmute(clkcnt_h) };
            clkcnt_h as u64
        });
        __bindgen_bitfield_unit.set(12usize, 6u8, {
            let clkcnt_n: u32 = unsafe { ::core::mem::transmute(clkcnt_n) };
            clkcnt_n as u64
        });
        __bindgen_bitfield_unit.set(18usize, 4u8, {
            let clkdiv_pre: u32 = unsafe { ::core::mem::transmute(clkdiv_pre) };
            clkdiv_pre as u64
        });
        __bindgen_bitfield_unit.set(22usize, 9u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let clk_equ_sysclk: u32 = unsafe { ::core::mem::transmute(clk_equ_sysclk) };
            clk_equ_sysclk as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn doutdin(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_doutdin(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn qpi_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qpi_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tsck_i_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tsck_i_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_setup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_setup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsck_i_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsck_i_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck_out_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck_out_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_conf_nxt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_conf_nxt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_miso_highpart(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_miso_highpart(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_mosi_highpart(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_mosi_highpart(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_dummy_idle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy_idle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_mosi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_mosi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_miso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_miso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_dummy(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        doutdin: u32,
        reserved1: u32,
        qpi_mode: u32,
        reserved4: u32,
        tsck_i_edge: u32,
        cs_hold: u32,
        cs_setup: u32,
        rsck_i_edge: u32,
        ck_out_edge: u32,
        reserved10: u32,
        fwrite_dual: u32,
        fwrite_quad: u32,
        reserved14: u32,
        usr_conf_nxt: u32,
        reserved16: u32,
        sio: u32,
        reserved18: u32,
        usr_miso_highpart: u32,
        usr_mosi_highpart: u32,
        usr_dummy_idle: u32,
        usr_mosi: u32,
        usr_miso: u32,
        usr_dummy: u32,
        usr_addr: u32,
        usr_command: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let doutdin: u32 = unsafe { ::core::mem::transmute(doutdin) };
            doutdin as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let qpi_mode: u32 = unsafe { ::core::mem::transmute(qpi_mode) };
            qpi_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tsck_i_edge: u32 = unsafe { ::core::mem::transmute(tsck_i_edge) };
            tsck_i_edge as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cs_hold: u32 = unsafe { ::core::mem::transmute(cs_hold) };
            cs_hold as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cs_setup: u32 = unsafe { ::core::mem::transmute(cs_setup) };
            cs_setup as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rsck_i_edge: u32 = unsafe { ::core::mem::transmute(rsck_i_edge) };
            rsck_i_edge as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ck_out_edge: u32 = unsafe { ::core::mem::transmute(ck_out_edge) };
            ck_out_edge as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let fwrite_dual: u32 = unsafe { ::core::mem::transmute(fwrite_dual) };
            fwrite_dual as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let fwrite_quad: u32 = unsafe { ::core::mem::transmute(fwrite_quad) };
            fwrite_quad as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let usr_conf_nxt: u32 = unsafe { ::core::mem::transmute(usr_conf_nxt) };
            usr_conf_nxt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let sio: u32 = unsafe { ::core::mem::transmute(sio) };
            sio as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let usr_miso_highpart: u32 = unsafe { ::core::mem::transmute(usr_miso_highpart) };
            usr_miso_highpart as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let usr_mosi_highpart: u32 = unsafe { ::core::mem::transmute(usr_mosi_highpart) };
            usr_mosi_highpart as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let usr_dummy_idle: u32 = unsafe { ::core::mem::transmute(usr_dummy_idle) };
            usr_dummy_idle as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let usr_mosi: u32 = unsafe { ::core::mem::transmute(usr_mosi) };
            usr_mosi as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let usr_miso: u32 = unsafe { ::core::mem::transmute(usr_miso) };
            usr_miso as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let usr_dummy: u32 = unsafe { ::core::mem::transmute(usr_dummy) };
            usr_dummy as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let usr_addr: u32 = unsafe { ::core::mem::transmute(usr_addr) };
            usr_addr as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let usr_command: u32 = unsafe { ::core::mem::transmute(usr_command) };
            usr_command as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn usr_dummy_cyclelen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy_cyclelen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_wfull_err_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_wfull_err_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_setup_time(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cs_setup_time(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold_time(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold_time(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_addr_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_usr_addr_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_dummy_cyclelen: u32,
        reserved8: u32,
        mst_wfull_err_end_en: u32,
        cs_setup_time: u32,
        cs_hold_time: u32,
        usr_addr_bitlen: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let usr_dummy_cyclelen: u32 = unsafe { ::core::mem::transmute(usr_dummy_cyclelen) };
            usr_dummy_cyclelen as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let mst_wfull_err_end_en: u32 = unsafe { ::core::mem::transmute(mst_wfull_err_end_en) };
            mst_wfull_err_end_en as u64
        });
        __bindgen_bitfield_unit.set(17usize, 5u8, {
            let cs_setup_time: u32 = unsafe { ::core::mem::transmute(cs_setup_time) };
            cs_setup_time as u64
        });
        __bindgen_bitfield_unit.set(22usize, 5u8, {
            let cs_hold_time: u32 = unsafe { ::core::mem::transmute(cs_hold_time) };
            cs_hold_time as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let usr_addr_bitlen: u32 = unsafe { ::core::mem::transmute(usr_addr_bitlen) };
            usr_addr_bitlen as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn usr_command_value(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command_value(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_rempty_err_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_rempty_err_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_command_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_command_value: u32,
        reserved16: u32,
        mst_rempty_err_end_en: u32,
        usr_command_bitlen: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let usr_command_value: u32 = unsafe { ::core::mem::transmute(usr_command_value) };
            usr_command_value as u64
        });
        __bindgen_bitfield_unit.set(16usize, 11u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let mst_rempty_err_end_en: u32 =
                unsafe { ::core::mem::transmute(mst_rempty_err_end_en) };
            mst_rempty_err_end_en as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let usr_command_bitlen: u32 = unsafe { ::core::mem::transmute(usr_command_bitlen) };
            usr_command_bitlen as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn ms_data_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_ms_data_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ms_data_bitlen: u32,
        reserved18: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let ms_data_bitlen: u32 = unsafe { ::core::mem::transmute(ms_data_bitlen) };
            ms_data_bitlen as u64
        });
        __bindgen_bitfield_unit.set(18usize, 14u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn cs0_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs0_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs1_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs1_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs2_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs2_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs3_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs3_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs4_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs4_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs5_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs5_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn master_cs_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_master_cs_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved13(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved13(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn slave_cs_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slave_cs_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved24(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved24(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn ck_idle_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck_idle_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_keep_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_keep_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quad_din_pin_swap(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quad_din_pin_swap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cs0_dis: u32,
        cs1_dis: u32,
        cs2_dis: u32,
        cs3_dis: u32,
        cs4_dis: u32,
        cs5_dis: u32,
        ck_dis: u32,
        master_cs_pol: u32,
        reserved13: u32,
        slave_cs_pol: u32,
        reserved24: u32,
        ck_idle_edge: u32,
        cs_keep_active: u32,
        quad_din_pin_swap: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cs0_dis: u32 = unsafe { ::core::mem::transmute(cs0_dis) };
            cs0_dis as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cs1_dis: u32 = unsafe { ::core::mem::transmute(cs1_dis) };
            cs1_dis as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let cs2_dis: u32 = unsafe { ::core::mem::transmute(cs2_dis) };
            cs2_dis as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cs3_dis: u32 = unsafe { ::core::mem::transmute(cs3_dis) };
            cs3_dis as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cs4_dis: u32 = unsafe { ::core::mem::transmute(cs4_dis) };
            cs4_dis as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let cs5_dis: u32 = unsafe { ::core::mem::transmute(cs5_dis) };
            cs5_dis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ck_dis: u32 = unsafe { ::core::mem::transmute(ck_dis) };
            ck_dis as u64
        });
        __bindgen_bitfield_unit.set(7usize, 6u8, {
            let master_cs_pol: u32 = unsafe { ::core::mem::transmute(master_cs_pol) };
            master_cs_pol as u64
        });
        __bindgen_bitfield_unit.set(13usize, 10u8, {
            let reserved13: u32 = unsafe { ::core::mem::transmute(reserved13) };
            reserved13 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let slave_cs_pol: u32 = unsafe { ::core::mem::transmute(slave_cs_pol) };
            slave_cs_pol as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let reserved24: u32 = unsafe { ::core::mem::transmute(reserved24) };
            reserved24 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let ck_idle_edge: u32 = unsafe { ::core::mem::transmute(ck_idle_edge) };
            ck_idle_edge as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let cs_keep_active: u32 = unsafe { ::core::mem::transmute(cs_keep_active) };
            cs_keep_active as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let quad_din_pin_swap: u32 = unsafe { ::core::mem::transmute(quad_din_pin_swap) };
            quad_din_pin_swap as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn din0_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din0_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din1_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din1_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din2_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din2_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din3_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din3_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn timing_hclk_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_hclk_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        din0_mode: u32,
        din1_mode: u32,
        din2_mode: u32,
        din3_mode: u32,
        reserved8: u32,
        timing_hclk_active: u32,
        reserved17: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let din0_mode: u32 = unsafe { ::core::mem::transmute(din0_mode) };
            din0_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let din1_mode: u32 = unsafe { ::core::mem::transmute(din1_mode) };
            din1_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let din2_mode: u32 = unsafe { ::core::mem::transmute(din2_mode) };
            din2_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let din3_mode: u32 = unsafe { ::core::mem::transmute(din3_mode) };
            din3_mode as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let timing_hclk_active: u32 = unsafe { ::core::mem::transmute(timing_hclk_active) };
            timing_hclk_active as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn din0_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din0_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din1_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din1_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din2_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din2_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din3_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din3_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        din0_num: u32,
        din1_num: u32,
        din2_num: u32,
        din3_num: u32,
        reserved8: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let din0_num: u32 = unsafe { ::core::mem::transmute(din0_num) };
            din0_num as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let din1_num: u32 = unsafe { ::core::mem::transmute(din1_num) };
            din1_num as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let din2_num: u32 = unsafe { ::core::mem::transmute(din2_num) };
            din2_num as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let din3_num: u32 = unsafe { ::core::mem::transmute(din3_num) };
            din3_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn dout0_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout0_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout1_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout1_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout2_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout2_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout3_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout3_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dout0_mode: u32,
        dout1_mode: u32,
        dout2_mode: u32,
        dout3_mode: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dout0_mode: u32 = unsafe { ::core::mem::transmute(dout0_mode) };
            dout0_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dout1_mode: u32 = unsafe { ::core::mem::transmute(dout1_mode) };
            dout1_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dout2_mode: u32 = unsafe { ::core::mem::transmute(dout2_mode) };
            dout2_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dout3_mode: u32 = unsafe { ::core::mem::transmute(dout3_mode) };
            dout3_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_trans_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_trans_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_seg_trans_clr_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_seg_trans_clr_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_seg_trans_clr_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_seg_trans_clr_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_eof_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_eof_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_rx_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_rx_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_tx_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_tx_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_afifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_afifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buf_afifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buf_afifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_afifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_afifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        dma_seg_trans_en: u32,
        rx_seg_trans_clr_en: u32,
        tx_seg_trans_clr_en: u32,
        rx_eof_en: u32,
        reserved22: u32,
        dma_rx_ena: u32,
        dma_tx_ena: u32,
        rx_afifo_rst: u32,
        buf_afifo_rst: u32,
        dma_afifo_rst: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let dma_seg_trans_en: u32 = unsafe { ::core::mem::transmute(dma_seg_trans_en) };
            dma_seg_trans_en as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rx_seg_trans_clr_en: u32 = unsafe { ::core::mem::transmute(rx_seg_trans_clr_en) };
            rx_seg_trans_clr_en as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let tx_seg_trans_clr_en: u32 = unsafe { ::core::mem::transmute(tx_seg_trans_clr_en) };
            tx_seg_trans_clr_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let rx_eof_en: u32 = unsafe { ::core::mem::transmute(rx_eof_en) };
            rx_eof_en as u64
        });
        __bindgen_bitfield_unit.set(22usize, 5u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let dma_rx_ena: u32 = unsafe { ::core::mem::transmute(dma_rx_ena) };
            dma_rx_ena as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let dma_tx_ena: u32 = unsafe { ::core::mem::transmute(dma_tx_ena) };
            dma_tx_ena as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let rx_afifo_rst: u32 = unsafe { ::core::mem::transmute(rx_afifo_rst) };
            rx_afifo_rst as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let buf_afifo_rst: u32 = unsafe { ::core::mem::transmute(buf_afifo_rst) };
            buf_afifo_rst as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let dma_afifo_rst: u32 = unsafe { ::core::mem::transmute(dma_afifo_rst) };
            dma_afifo_rst as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn infifo_full_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_infifo_full_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outfifo_empty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outfifo_empty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmda(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmda(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_magic_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_magic_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buf_addr_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buf_addr_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_rx_afifo_wfull_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_rx_afifo_wfull_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_tx_afifo_rempty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_tx_afifo_rempty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        infifo_full_err: u32,
        outfifo_empty_err: u32,
        ex_qpi: u32,
        en_qpi: u32,
        cmd7: u32,
        cmd8: u32,
        cmd9: u32,
        cmda: u32,
        rd_dma_done: u32,
        wr_dma_done: u32,
        rd_buf_done: u32,
        wr_buf_done: u32,
        trans_done: u32,
        dma_seg_trans_done: u32,
        seg_magic_err: u32,
        buf_addr_err: u32,
        cmd_err: u32,
        mst_rx_afifo_wfull_err: u32,
        mst_tx_afifo_rempty_err: u32,
        app2: u32,
        app1: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let infifo_full_err: u32 = unsafe { ::core::mem::transmute(infifo_full_err) };
            infifo_full_err as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let outfifo_empty_err: u32 = unsafe { ::core::mem::transmute(outfifo_empty_err) };
            outfifo_empty_err as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ex_qpi: u32 = unsafe { ::core::mem::transmute(ex_qpi) };
            ex_qpi as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let en_qpi: u32 = unsafe { ::core::mem::transmute(en_qpi) };
            en_qpi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cmd7: u32 = unsafe { ::core::mem::transmute(cmd7) };
            cmd7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let cmd8: u32 = unsafe { ::core::mem::transmute(cmd8) };
            cmd8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cmd9: u32 = unsafe { ::core::mem::transmute(cmd9) };
            cmd9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cmda: u32 = unsafe { ::core::mem::transmute(cmda) };
            cmda as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rd_dma_done: u32 = unsafe { ::core::mem::transmute(rd_dma_done) };
            rd_dma_done as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wr_dma_done: u32 = unsafe { ::core::mem::transmute(wr_dma_done) };
            wr_dma_done as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rd_buf_done: u32 = unsafe { ::core::mem::transmute(rd_buf_done) };
            rd_buf_done as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wr_buf_done: u32 = unsafe { ::core::mem::transmute(wr_buf_done) };
            wr_buf_done as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let trans_done: u32 = unsafe { ::core::mem::transmute(trans_done) };
            trans_done as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dma_seg_trans_done: u32 = unsafe { ::core::mem::transmute(dma_seg_trans_done) };
            dma_seg_trans_done as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seg_magic_err: u32 = unsafe { ::core::mem::transmute(seg_magic_err) };
            seg_magic_err as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let buf_addr_err: u32 = unsafe { ::core::mem::transmute(buf_addr_err) };
            buf_addr_err as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let cmd_err: u32 = unsafe { ::core::mem::transmute(cmd_err) };
            cmd_err as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let mst_rx_afifo_wfull_err: u32 =
                unsafe { ::core::mem::transmute(mst_rx_afifo_wfull_err) };
            mst_rx_afifo_wfull_err as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let mst_tx_afifo_rempty_err: u32 =
                unsafe { ::core::mem::transmute(mst_tx_afifo_rempty_err) };
            mst_tx_afifo_rempty_err as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let app2: u32 = unsafe { ::core::mem::transmute(app2) };
            app2 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let app1: u32 = unsafe { ::core::mem::transmute(app1) };
            app1 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn infifo_full_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_infifo_full_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outfifo_empty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outfifo_empty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmda(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmda(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_magic_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_magic_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buf_addr_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buf_addr_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_rx_afifo_wfull_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_rx_afifo_wfull_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_tx_afifo_rempty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_tx_afifo_rempty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        infifo_full_err: u32,
        outfifo_empty_err: u32,
        ex_qpi: u32,
        en_qpi: u32,
        cmd7: u32,
        cmd8: u32,
        cmd9: u32,
        cmda: u32,
        rd_dma_done: u32,
        wr_dma_done: u32,
        rd_buf_done: u32,
        wr_buf_done: u32,
        trans_done: u32,
        dma_seg_trans_done: u32,
        seg_magic_err: u32,
        buf_addr_err: u32,
        cmd_err: u32,
        mst_rx_afifo_wfull_err: u32,
        mst_tx_afifo_rempty_err: u32,
        app2: u32,
        app1: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let infifo_full_err: u32 = unsafe { ::core::mem::transmute(infifo_full_err) };
            infifo_full_err as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let outfifo_empty_err: u32 = unsafe { ::core::mem::transmute(outfifo_empty_err) };
            outfifo_empty_err as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ex_qpi: u32 = unsafe { ::core::mem::transmute(ex_qpi) };
            ex_qpi as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let en_qpi: u32 = unsafe { ::core::mem::transmute(en_qpi) };
            en_qpi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cmd7: u32 = unsafe { ::core::mem::transmute(cmd7) };
            cmd7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let cmd8: u32 = unsafe { ::core::mem::transmute(cmd8) };
            cmd8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cmd9: u32 = unsafe { ::core::mem::transmute(cmd9) };
            cmd9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cmda: u32 = unsafe { ::core::mem::transmute(cmda) };
            cmda as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rd_dma_done: u32 = unsafe { ::core::mem::transmute(rd_dma_done) };
            rd_dma_done as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wr_dma_done: u32 = unsafe { ::core::mem::transmute(wr_dma_done) };
            wr_dma_done as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rd_buf_done: u32 = unsafe { ::core::mem::transmute(rd_buf_done) };
            rd_buf_done as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wr_buf_done: u32 = unsafe { ::core::mem::transmute(wr_buf_done) };
            wr_buf_done as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let trans_done: u32 = unsafe { ::core::mem::transmute(trans_done) };
            trans_done as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dma_seg_trans_done: u32 = unsafe { ::core::mem::transmute(dma_seg_trans_done) };
            dma_seg_trans_done as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seg_magic_err: u32 = unsafe { ::core::mem::transmute(seg_magic_err) };
            seg_magic_err as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let buf_addr_err: u32 = unsafe { ::core::mem::transmute(buf_addr_err) };
            buf_addr_err as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let cmd_err: u32 = unsafe { ::core::mem::transmute(cmd_err) };
            cmd_err as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let mst_rx_afifo_wfull_err: u32 =
                unsafe { ::core::mem::transmute(mst_rx_afifo_wfull_err) };
            mst_rx_afifo_wfull_err as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let mst_tx_afifo_rempty_err: u32 =
                unsafe { ::core::mem::transmute(mst_tx_afifo_rempty_err) };
            mst_tx_afifo_rempty_err as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let app2: u32 = unsafe { ::core::mem::transmute(app2) };
            app2 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let app1: u32 = unsafe { ::core::mem::transmute(app1) };
            app1 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn infifo_full_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_infifo_full_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outfifo_empty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outfifo_empty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmda(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmda(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_magic_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_magic_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buf_addr_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buf_addr_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_rx_afifo_wfull_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_rx_afifo_wfull_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_tx_afifo_rempty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_tx_afifo_rempty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        infifo_full_err: u32,
        outfifo_empty_err: u32,
        ex_qpi: u32,
        en_qpi: u32,
        cmd7: u32,
        cmd8: u32,
        cmd9: u32,
        cmda: u32,
        rd_dma_done: u32,
        wr_dma_done: u32,
        rd_buf_done: u32,
        wr_buf_done: u32,
        trans_done: u32,
        dma_seg_trans_done: u32,
        seg_magic_err: u32,
        buf_addr_err: u32,
        cmd_err: u32,
        mst_rx_afifo_wfull_err: u32,
        mst_tx_afifo_rempty_err: u32,
        app2: u32,
        app1: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let infifo_full_err: u32 = unsafe { ::core::mem::transmute(infifo_full_err) };
            infifo_full_err as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let outfifo_empty_err: u32 = unsafe { ::core::mem::transmute(outfifo_empty_err) };
            outfifo_empty_err as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ex_qpi: u32 = unsafe { ::core::mem::transmute(ex_qpi) };
            ex_qpi as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let en_qpi: u32 = unsafe { ::core::mem::transmute(en_qpi) };
            en_qpi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cmd7: u32 = unsafe { ::core::mem::transmute(cmd7) };
            cmd7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let cmd8: u32 = unsafe { ::core::mem::transmute(cmd8) };
            cmd8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cmd9: u32 = unsafe { ::core::mem::transmute(cmd9) };
            cmd9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cmda: u32 = unsafe { ::core::mem::transmute(cmda) };
            cmda as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rd_dma_done: u32 = unsafe { ::core::mem::transmute(rd_dma_done) };
            rd_dma_done as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wr_dma_done: u32 = unsafe { ::core::mem::transmute(wr_dma_done) };
            wr_dma_done as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rd_buf_done: u32 = unsafe { ::core::mem::transmute(rd_buf_done) };
            rd_buf_done as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wr_buf_done: u32 = unsafe { ::core::mem::transmute(wr_buf_done) };
            wr_buf_done as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let trans_done: u32 = unsafe { ::core::mem::transmute(trans_done) };
            trans_done as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dma_seg_trans_done: u32 = unsafe { ::core::mem::transmute(dma_seg_trans_done) };
            dma_seg_trans_done as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seg_magic_err: u32 = unsafe { ::core::mem::transmute(seg_magic_err) };
            seg_magic_err as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let buf_addr_err: u32 = unsafe { ::core::mem::transmute(buf_addr_err) };
            buf_addr_err as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let cmd_err: u32 = unsafe { ::core::mem::transmute(cmd_err) };
            cmd_err as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let mst_rx_afifo_wfull_err: u32 =
                unsafe { ::core::mem::transmute(mst_rx_afifo_wfull_err) };
            mst_rx_afifo_wfull_err as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let mst_tx_afifo_rempty_err: u32 =
                unsafe { ::core::mem::transmute(mst_tx_afifo_rempty_err) };
            mst_tx_afifo_rempty_err as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let app2: u32 = unsafe { ::core::mem::transmute(app2) };
            app2 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let app1: u32 = unsafe { ::core::mem::transmute(app1) };
            app1 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn infifo_full_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_infifo_full_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn outfifo_empty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_outfifo_empty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ex_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ex_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en_qpi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en_qpi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmda(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmda(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_dma_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_dma_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rd_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rd_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wr_buf_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wr_buf_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_trans_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_trans_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seg_magic_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seg_magic_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn buf_addr_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buf_addr_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cmd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cmd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_rx_afifo_wfull_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_rx_afifo_wfull_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_tx_afifo_rempty_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_tx_afifo_rempty_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn app1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_app1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        infifo_full_err: u32,
        outfifo_empty_err: u32,
        ex_qpi: u32,
        en_qpi: u32,
        cmd7: u32,
        cmd8: u32,
        cmd9: u32,
        cmda: u32,
        rd_dma_done: u32,
        wr_dma_done: u32,
        rd_buf_done: u32,
        wr_buf_done: u32,
        trans_done: u32,
        dma_seg_trans_done: u32,
        seg_magic_err: u32,
        buf_addr_err: u32,
        cmd_err: u32,
        mst_rx_afifo_wfull_err: u32,
        mst_tx_afifo_rempty_err: u32,
        app2: u32,
        app1: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let infifo_full_err: u32 = unsafe { ::core::mem::transmute(infifo_full_err) };
            infifo_full_err as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let outfifo_empty_err: u32 = unsafe { ::core::mem::transmute(outfifo_empty_err) };
            outfifo_empty_err as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ex_qpi: u32 = unsafe { ::core::mem::transmute(ex_qpi) };
            ex_qpi as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let en_qpi: u32 = unsafe { ::core::mem::transmute(en_qpi) };
            en_qpi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cmd7: u32 = unsafe { ::core::mem::transmute(cmd7) };
            cmd7 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let cmd8: u32 = unsafe { ::core::mem::transmute(cmd8) };
            cmd8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cmd9: u32 = unsafe { ::core::mem::transmute(cmd9) };
            cmd9 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cmda: u32 = unsafe { ::core::mem::transmute(cmda) };
            cmda as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rd_dma_done: u32 = unsafe { ::core::mem::transmute(rd_dma_done) };
            rd_dma_done as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wr_dma_done: u32 = unsafe { ::core::mem::transmute(wr_dma_done) };
            wr_dma_done as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rd_buf_done: u32 = unsafe { ::core::mem::transmute(rd_buf_done) };
            rd_buf_done as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wr_buf_done: u32 = unsafe { ::core::mem::transmute(wr_buf_done) };
            wr_buf_done as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let trans_done: u32 = unsafe { ::core::mem::transmute(trans_done) };
            trans_done as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dma_seg_trans_done: u32 = unsafe { ::core::mem::transmute(dma_seg_trans_done) };
            dma_seg_trans_done as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seg_magic_err: u32 = unsafe { ::core::mem::transmute(seg_magic_err) };
            seg_magic_err as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let buf_addr_err: u32 = unsafe { ::core::mem::transmute(buf_addr_err) };
            buf_addr_err as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let cmd_err: u32 = unsafe { ::core::mem::transmute(cmd_err) };
            cmd_err as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let mst_rx_afifo_wfull_err: u32 =
                unsafe { ::core::mem::transmute(mst_rx_afifo_wfull_err) };
            mst_rx_afifo_wfull_err as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let mst_tx_afifo_rempty_err: u32 =
                unsafe { ::core::mem::transmute(mst_tx_afifo_rempty_err) };
            mst_tx_afifo_rempty_err as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let app2: u32 = unsafe { ::core::mem::transmute(app2) };
            app2 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let app1: u32 = unsafe { ::core::mem::transmute(app1) };
            app1 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_17 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_17__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_17__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_17__bindgen_ty_1 {
    #[inline]
    pub fn clk_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_clk_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_mode_13(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_mode_13(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsck_data_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rsck_data_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rddma_bitlen_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rddma_bitlen_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrdma_bitlen_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wrdma_bitlen_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rdbuf_bitlen_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rdbuf_bitlen_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrbuf_bitlen_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wrbuf_bitlen_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn dma_seg_magic_value(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_dma_seg_magic_value(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn slave_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slave_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn soft_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_soft_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_conf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_conf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved29(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved29(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        clk_mode: u32,
        clk_mode_13: u32,
        rsck_data_out: u32,
        reserved4: u32,
        rddma_bitlen_en: u32,
        wrdma_bitlen_en: u32,
        rdbuf_bitlen_en: u32,
        wrbuf_bitlen_en: u32,
        reserved12: u32,
        dma_seg_magic_value: u32,
        slave_mode: u32,
        soft_reset: u32,
        usr_conf: u32,
        reserved29: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let clk_mode: u32 = unsafe { ::core::mem::transmute(clk_mode) };
            clk_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let clk_mode_13: u32 = unsafe { ::core::mem::transmute(clk_mode_13) };
            clk_mode_13 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rsck_data_out: u32 = unsafe { ::core::mem::transmute(rsck_data_out) };
            rsck_data_out as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rddma_bitlen_en: u32 = unsafe { ::core::mem::transmute(rddma_bitlen_en) };
            rddma_bitlen_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let wrdma_bitlen_en: u32 = unsafe { ::core::mem::transmute(wrdma_bitlen_en) };
            wrdma_bitlen_en as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rdbuf_bitlen_en: u32 = unsafe { ::core::mem::transmute(rdbuf_bitlen_en) };
            rdbuf_bitlen_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let wrbuf_bitlen_en: u32 = unsafe { ::core::mem::transmute(wrbuf_bitlen_en) };
            wrbuf_bitlen_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 10u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 4u8, {
            let dma_seg_magic_value: u32 = unsafe { ::core::mem::transmute(dma_seg_magic_value) };
            dma_seg_magic_value as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let slave_mode: u32 = unsafe { ::core::mem::transmute(slave_mode) };
            slave_mode as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let soft_reset: u32 = unsafe { ::core::mem::transmute(soft_reset) };
            soft_reset as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let usr_conf: u32 = unsafe { ::core::mem::transmute(usr_conf) };
            usr_conf as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let reserved29: u32 = unsafe { ::core::mem::transmute(reserved29) };
            reserved29 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_18 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_18__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_18__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_18__bindgen_ty_1 {
    #[inline]
    pub fn data_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_data_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn last_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_last_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn last_addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_last_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        data_bitlen: u32,
        last_command: u32,
        last_addr: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let data_bitlen: u32 = unsafe { ::core::mem::transmute(data_bitlen) };
            data_bitlen as u64
        });
        __bindgen_bitfield_unit.set(18usize, 8u8, {
            let last_command: u32 = unsafe { ::core::mem::transmute(last_command) };
            last_command as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let last_addr: u32 = unsafe { ::core::mem::transmute(last_addr) };
            last_addr as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_19 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_19__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_19__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_19__bindgen_ty_1 {
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_clk_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_clk_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        clk_en: u32,
        mst_clk_active: u32,
        mst_clk_sel: u32,
        reserved3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mst_clk_active: u32 = unsafe { ::core::mem::transmute(mst_clk_active) };
            mst_clk_active as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mst_clk_sel: u32 = unsafe { ::core::mem::transmute(mst_clk_sel) };
            mst_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved3: u32 = unsafe { ::core::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_dev_s__bindgen_ty_20 {
    pub __bindgen_anon_1: spi_dev_s__bindgen_ty_20__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_dev_s__bindgen_ty_20__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_dev_s__bindgen_ty_20__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_dev_s__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for spi_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spi_dev_t = spi_dev_s;
extern "C" {
    pub static mut GPSPI2: spi_dev_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spi_mem_dev_s {
    pub cmd: spi_mem_dev_s__bindgen_ty_1,
    pub addr: u32,
    pub ctrl: spi_mem_dev_s__bindgen_ty_2,
    pub ctrl1: spi_mem_dev_s__bindgen_ty_3,
    pub ctrl2: spi_mem_dev_s__bindgen_ty_4,
    pub clock: spi_mem_dev_s__bindgen_ty_5,
    pub user: spi_mem_dev_s__bindgen_ty_6,
    pub user1: spi_mem_dev_s__bindgen_ty_7,
    pub user2: spi_mem_dev_s__bindgen_ty_8,
    pub mosi_dlen: spi_mem_dev_s__bindgen_ty_9,
    pub miso_dlen: spi_mem_dev_s__bindgen_ty_10,
    pub rd_status: spi_mem_dev_s__bindgen_ty_11,
    pub reserved_30: u32,
    pub misc: spi_mem_dev_s__bindgen_ty_12,
    pub tx_crc: u32,
    pub cache_fctrl: spi_mem_dev_s__bindgen_ty_13,
    pub reserved_40: u32,
    pub reserved_44: u32,
    pub reserved_48: u32,
    pub reserved_4c: u32,
    pub reserved_50: u32,
    pub fsm: spi_mem_dev_s__bindgen_ty_14,
    pub data_buf: [u32; 16usize],
    pub flash_waiti_ctrl: spi_mem_dev_s__bindgen_ty_15,
    pub flash_sus_ctrl: spi_mem_dev_s__bindgen_ty_16,
    pub flash_sus_cmd: spi_mem_dev_s__bindgen_ty_17,
    pub sus_status: spi_mem_dev_s__bindgen_ty_18,
    pub timing_cali: spi_mem_dev_s__bindgen_ty_19,
    pub din_mode: spi_mem_dev_s__bindgen_ty_20,
    pub din_num: spi_mem_dev_s__bindgen_ty_21,
    pub dout_mode: spi_mem_dev_s__bindgen_ty_22,
    pub reserved_b8: u32,
    pub reserved_bc: u32,
    pub int_ena: spi_mem_dev_s__bindgen_ty_23,
    pub int_clr: spi_mem_dev_s__bindgen_ty_24,
    pub int_raw: spi_mem_dev_s__bindgen_ty_25,
    pub int_st: spi_mem_dev_s__bindgen_ty_26,
    pub reserved_d0: u32,
    pub reserved_d4: u32,
    pub reserved_d8: u32,
    pub clock_gate: spi_mem_dev_s__bindgen_ty_27,
    pub core_clk_sel: spi_mem_dev_s__bindgen_ty_28,
    pub reserved_e4: u32,
    pub reserved_e8: u32,
    pub reserved_ec: u32,
    pub reserved_f0: u32,
    pub reserved_f4: u32,
    pub reserved_f8: u32,
    pub reserved_fc: u32,
    pub reserved_100: u32,
    pub reserved_104: u32,
    pub reserved_108: u32,
    pub reserved_10c: u32,
    pub reserved_110: u32,
    pub reserved_114: u32,
    pub reserved_118: u32,
    pub reserved_11c: u32,
    pub reserved_120: u32,
    pub reserved_124: u32,
    pub reserved_128: u32,
    pub reserved_12c: u32,
    pub reserved_130: u32,
    pub reserved_134: u32,
    pub reserved_138: u32,
    pub reserved_13c: u32,
    pub reserved_140: u32,
    pub reserved_144: u32,
    pub reserved_148: u32,
    pub reserved_14c: u32,
    pub reserved_150: u32,
    pub reserved_154: u32,
    pub reserved_158: u32,
    pub reserved_15c: u32,
    pub reserved_160: u32,
    pub reserved_164: u32,
    pub reserved_168: u32,
    pub reserved_16c: u32,
    pub reserved_170: u32,
    pub reserved_174: u32,
    pub reserved_178: u32,
    pub reserved_17c: u32,
    pub reserved_180: u32,
    pub reserved_184: u32,
    pub reserved_188: u32,
    pub reserved_18c: u32,
    pub reserved_190: u32,
    pub reserved_194: u32,
    pub reserved_198: u32,
    pub reserved_19c: u32,
    pub reserved_1a0: u32,
    pub reserved_1a4: u32,
    pub reserved_1a8: u32,
    pub reserved_1ac: u32,
    pub reserved_1b0: u32,
    pub reserved_1b4: u32,
    pub reserved_1b8: u32,
    pub reserved_1bc: u32,
    pub reserved_1c0: u32,
    pub reserved_1c4: u32,
    pub reserved_1c8: u32,
    pub reserved_1cc: u32,
    pub reserved_1d0: u32,
    pub reserved_1d4: u32,
    pub reserved_1d8: u32,
    pub reserved_1dc: u32,
    pub reserved_1e0: u32,
    pub reserved_1e4: u32,
    pub reserved_1e8: u32,
    pub reserved_1ec: u32,
    pub reserved_1f0: u32,
    pub reserved_1f4: u32,
    pub reserved_1f8: u32,
    pub reserved_1fc: u32,
    pub reserved_200: u32,
    pub reserved_204: u32,
    pub reserved_208: u32,
    pub reserved_20c: u32,
    pub reserved_210: u32,
    pub reserved_214: u32,
    pub reserved_218: u32,
    pub reserved_21c: u32,
    pub reserved_220: u32,
    pub reserved_224: u32,
    pub reserved_228: u32,
    pub reserved_22c: u32,
    pub reserved_230: u32,
    pub reserved_234: u32,
    pub reserved_238: u32,
    pub reserved_23c: u32,
    pub reserved_240: u32,
    pub reserved_244: u32,
    pub reserved_248: u32,
    pub reserved_24c: u32,
    pub reserved_250: u32,
    pub reserved_254: u32,
    pub reserved_258: u32,
    pub reserved_25c: u32,
    pub reserved_260: u32,
    pub reserved_264: u32,
    pub reserved_268: u32,
    pub reserved_26c: u32,
    pub reserved_270: u32,
    pub reserved_274: u32,
    pub reserved_278: u32,
    pub reserved_27c: u32,
    pub reserved_280: u32,
    pub reserved_284: u32,
    pub reserved_288: u32,
    pub reserved_28c: u32,
    pub reserved_290: u32,
    pub reserved_294: u32,
    pub reserved_298: u32,
    pub reserved_29c: u32,
    pub reserved_2a0: u32,
    pub reserved_2a4: u32,
    pub reserved_2a8: u32,
    pub reserved_2ac: u32,
    pub reserved_2b0: u32,
    pub reserved_2b4: u32,
    pub reserved_2b8: u32,
    pub reserved_2bc: u32,
    pub reserved_2c0: u32,
    pub reserved_2c4: u32,
    pub reserved_2c8: u32,
    pub reserved_2cc: u32,
    pub reserved_2d0: u32,
    pub reserved_2d4: u32,
    pub reserved_2d8: u32,
    pub reserved_2dc: u32,
    pub reserved_2e0: u32,
    pub reserved_2e4: u32,
    pub reserved_2e8: u32,
    pub reserved_2ec: u32,
    pub reserved_2f0: u32,
    pub reserved_2f4: u32,
    pub reserved_2f8: u32,
    pub reserved_2fc: u32,
    pub reserved_300: u32,
    pub reserved_304: u32,
    pub reserved_308: u32,
    pub reserved_30c: u32,
    pub reserved_310: u32,
    pub reserved_314: u32,
    pub reserved_318: u32,
    pub reserved_31c: u32,
    pub reserved_320: u32,
    pub reserved_324: u32,
    pub reserved_328: u32,
    pub reserved_32c: u32,
    pub reserved_330: u32,
    pub reserved_334: u32,
    pub reserved_338: u32,
    pub reserved_33c: u32,
    pub reserved_340: u32,
    pub reserved_344: u32,
    pub reserved_348: u32,
    pub reserved_34c: u32,
    pub reserved_350: u32,
    pub reserved_354: u32,
    pub reserved_358: u32,
    pub reserved_35c: u32,
    pub reserved_360: u32,
    pub reserved_364: u32,
    pub reserved_368: u32,
    pub reserved_36c: u32,
    pub reserved_370: u32,
    pub reserved_374: u32,
    pub reserved_378: u32,
    pub reserved_37c: u32,
    pub reserved_380: u32,
    pub reserved_384: u32,
    pub reserved_388: u32,
    pub reserved_38c: u32,
    pub reserved_390: u32,
    pub reserved_394: u32,
    pub reserved_398: u32,
    pub reserved_39c: u32,
    pub reserved_3a0: u32,
    pub reserved_3a4: u32,
    pub reserved_3a8: u32,
    pub reserved_3ac: u32,
    pub reserved_3b0: u32,
    pub reserved_3b4: u32,
    pub reserved_3b8: u32,
    pub reserved_3bc: u32,
    pub reserved_3c0: u32,
    pub reserved_3c4: u32,
    pub reserved_3c8: u32,
    pub reserved_3cc: u32,
    pub reserved_3d0: u32,
    pub reserved_3d4: u32,
    pub reserved_3d8: u32,
    pub reserved_3dc: u32,
    pub reserved_3e0: u32,
    pub reserved_3e4: u32,
    pub reserved_3e8: u32,
    pub reserved_3ec: u32,
    pub reserved_3f0: u32,
    pub reserved_3f4: u32,
    pub reserved_3f8: u32,
    pub date: spi_mem_dev_s__bindgen_ty_29,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn mst_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pe(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pe(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_hpm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_hpm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_res(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_dp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_dp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_ce(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_ce(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_be(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_be(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_se(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_se(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_wrsr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_wrsr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_rdsr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_rdsr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_rdid(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_rdid(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_wrdi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_wrdi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_wren(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_wren(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_read(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_read(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mst_st: u32,
        st: u32,
        reserved8: u32,
        flash_pe: u32,
        usr: u32,
        flash_hpm: u32,
        flash_res: u32,
        flash_dp: u32,
        flash_ce: u32,
        flash_be: u32,
        flash_se: u32,
        flash_pp: u32,
        flash_wrsr: u32,
        flash_rdsr: u32,
        flash_rdid: u32,
        flash_wrdi: u32,
        flash_wren: u32,
        flash_read: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let mst_st: u32 = unsafe { ::core::mem::transmute(mst_st) };
            mst_st as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let st: u32 = unsafe { ::core::mem::transmute(st) };
            st as u64
        });
        __bindgen_bitfield_unit.set(8usize, 9u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let flash_pe: u32 = unsafe { ::core::mem::transmute(flash_pe) };
            flash_pe as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let usr: u32 = unsafe { ::core::mem::transmute(usr) };
            usr as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let flash_hpm: u32 = unsafe { ::core::mem::transmute(flash_hpm) };
            flash_hpm as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let flash_res: u32 = unsafe { ::core::mem::transmute(flash_res) };
            flash_res as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let flash_dp: u32 = unsafe { ::core::mem::transmute(flash_dp) };
            flash_dp as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let flash_ce: u32 = unsafe { ::core::mem::transmute(flash_ce) };
            flash_ce as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let flash_be: u32 = unsafe { ::core::mem::transmute(flash_be) };
            flash_be as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let flash_se: u32 = unsafe { ::core::mem::transmute(flash_se) };
            flash_se as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let flash_pp: u32 = unsafe { ::core::mem::transmute(flash_pp) };
            flash_pp as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let flash_wrsr: u32 = unsafe { ::core::mem::transmute(flash_wrsr) };
            flash_wrsr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let flash_rdsr: u32 = unsafe { ::core::mem::transmute(flash_rdsr) };
            flash_rdsr as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let flash_rdid: u32 = unsafe { ::core::mem::transmute(flash_rdid) };
            flash_rdid as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let flash_wrdi: u32 = unsafe { ::core::mem::transmute(flash_wrdi) };
            flash_wrdi as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let flash_wren: u32 = unsafe { ::core::mem::transmute(flash_wren) };
            flash_wren as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let flash_read: u32 = unsafe { ::core::mem::transmute(flash_read) };
            flash_read as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fdummy_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fdummy_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fcmd_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fcmd_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fcmd_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fcmd_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fcs_crc_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fcs_crc_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_crc_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_crc_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fastrd_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fastrd_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn resandres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_resandres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn q_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_q_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn d_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_d_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wrsr_2b(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wrsr_2b(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_dio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_dio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fread_qio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fread_qio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved25(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved25(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        fdummy_out: u32,
        reserved4: u32,
        fcmd_dual: u32,
        fcmd_quad: u32,
        reserved9: u32,
        fcs_crc_en: u32,
        tx_crc_en: u32,
        reserved12: u32,
        fastrd_mode: u32,
        fread_dual: u32,
        resandres: u32,
        reserved16: u32,
        q_pol: u32,
        d_pol: u32,
        fread_quad: u32,
        wp: u32,
        wrsr_2b: u32,
        fread_dio: u32,
        fread_qio: u32,
        reserved25: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fdummy_out: u32 = unsafe { ::core::mem::transmute(fdummy_out) };
            fdummy_out as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let fcmd_dual: u32 = unsafe { ::core::mem::transmute(fcmd_dual) };
            fcmd_dual as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fcmd_quad: u32 = unsafe { ::core::mem::transmute(fcmd_quad) };
            fcmd_quad as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let reserved9: u32 = unsafe { ::core::mem::transmute(reserved9) };
            reserved9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let fcs_crc_en: u32 = unsafe { ::core::mem::transmute(fcs_crc_en) };
            fcs_crc_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tx_crc_en: u32 = unsafe { ::core::mem::transmute(tx_crc_en) };
            tx_crc_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let fastrd_mode: u32 = unsafe { ::core::mem::transmute(fastrd_mode) };
            fastrd_mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let fread_dual: u32 = unsafe { ::core::mem::transmute(fread_dual) };
            fread_dual as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let resandres: u32 = unsafe { ::core::mem::transmute(resandres) };
            resandres as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let q_pol: u32 = unsafe { ::core::mem::transmute(q_pol) };
            q_pol as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let d_pol: u32 = unsafe { ::core::mem::transmute(d_pol) };
            d_pol as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let fread_quad: u32 = unsafe { ::core::mem::transmute(fread_quad) };
            fread_quad as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let wp: u32 = unsafe { ::core::mem::transmute(wp) };
            wp as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let wrsr_2b: u32 = unsafe { ::core::mem::transmute(wrsr_2b) };
            wrsr_2b as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let fread_dio: u32 = unsafe { ::core::mem::transmute(fread_dio) };
            fread_dio as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let fread_qio: u32 = unsafe { ::core::mem::transmute(fread_qio) };
            fread_qio as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let reserved25: u32 = unsafe { ::core::mem::transmute(reserved25) };
            reserved25 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn clk_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_clk_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold_dly_res(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold_dly_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn rxfifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rxfifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rxfifo_wfull_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rxfifo_wfull_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        clk_mode: u32,
        cs_hold_dly_res: u32,
        reserved2: u32,
        rxfifo_rst: u32,
        rxfifo_wfull_err: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let clk_mode: u32 = unsafe { ::core::mem::transmute(clk_mode) };
            clk_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 10u8, {
            let cs_hold_dly_res: u32 = unsafe { ::core::mem::transmute(cs_hold_dly_res) };
            cs_hold_dly_res as u64
        });
        __bindgen_bitfield_unit.set(12usize, 18u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let rxfifo_rst: u32 = unsafe { ::core::mem::transmute(rxfifo_rst) };
            rxfifo_rst as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let rxfifo_wfull_err: u32 = unsafe { ::core::mem::transmute(rxfifo_wfull_err) };
            rxfifo_wfull_err as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn cs_setup_time(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cs_setup_time(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold_time(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold_time(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold_delay(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold_delay(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn sync_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sync_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cs_setup_time: u32,
        cs_hold_time: u32,
        reserved10: u32,
        cs_hold_delay: u32,
        sync_reset: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let cs_setup_time: u32 = unsafe { ::core::mem::transmute(cs_setup_time) };
            cs_setup_time as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let cs_hold_time: u32 = unsafe { ::core::mem::transmute(cs_hold_time) };
            cs_hold_time as u64
        });
        __bindgen_bitfield_unit.set(10usize, 15u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 6u8, {
            let cs_hold_delay: u32 = unsafe { ::core::mem::transmute(cs_hold_delay) };
            cs_hold_delay as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sync_reset: u32 = unsafe { ::core::mem::transmute(sync_reset) };
            sync_reset as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn clkcnt_l(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_l(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn clkcnt_h(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_h(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn clkcnt_n(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_clkcnt_n(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved24(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved24(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_equ_sysclk(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_equ_sysclk(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        clkcnt_l: u32,
        clkcnt_h: u32,
        clkcnt_n: u32,
        reserved24: u32,
        clk_equ_sysclk: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let clkcnt_l: u32 = unsafe { ::core::mem::transmute(clkcnt_l) };
            clkcnt_l as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let clkcnt_h: u32 = unsafe { ::core::mem::transmute(clkcnt_h) };
            clkcnt_h as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let clkcnt_n: u32 = unsafe { ::core::mem::transmute(clkcnt_n) };
            clkcnt_n as u64
        });
        __bindgen_bitfield_unit.set(24usize, 7u8, {
            let reserved24: u32 = unsafe { ::core::mem::transmute(reserved24) };
            reserved24 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let clk_equ_sysclk: u32 = unsafe { ::core::mem::transmute(clk_equ_sysclk) };
            clk_equ_sysclk as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_setup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_setup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck_out_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck_out_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_dio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_dio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fwrite_qio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fwrite_qio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_miso_highpart(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_miso_highpart(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_mosi_highpart(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_mosi_highpart(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_dummy_idle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy_idle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_mosi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_mosi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_miso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_miso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_dummy(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_addr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        cs_hold: u32,
        cs_setup: u32,
        reserved8: u32,
        ck_out_edge: u32,
        reserved10: u32,
        fwrite_dual: u32,
        fwrite_quad: u32,
        fwrite_dio: u32,
        fwrite_qio: u32,
        reserved16: u32,
        usr_miso_highpart: u32,
        usr_mosi_highpart: u32,
        usr_dummy_idle: u32,
        usr_mosi: u32,
        usr_miso: u32,
        usr_dummy: u32,
        usr_addr: u32,
        usr_command: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cs_hold: u32 = unsafe { ::core::mem::transmute(cs_hold) };
            cs_hold as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cs_setup: u32 = unsafe { ::core::mem::transmute(cs_setup) };
            cs_setup as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ck_out_edge: u32 = unsafe { ::core::mem::transmute(ck_out_edge) };
            ck_out_edge as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let fwrite_dual: u32 = unsafe { ::core::mem::transmute(fwrite_dual) };
            fwrite_dual as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let fwrite_quad: u32 = unsafe { ::core::mem::transmute(fwrite_quad) };
            fwrite_quad as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let fwrite_dio: u32 = unsafe { ::core::mem::transmute(fwrite_dio) };
            fwrite_dio as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let fwrite_qio: u32 = unsafe { ::core::mem::transmute(fwrite_qio) };
            fwrite_qio as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let usr_miso_highpart: u32 = unsafe { ::core::mem::transmute(usr_miso_highpart) };
            usr_miso_highpart as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let usr_mosi_highpart: u32 = unsafe { ::core::mem::transmute(usr_mosi_highpart) };
            usr_mosi_highpart as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let usr_dummy_idle: u32 = unsafe { ::core::mem::transmute(usr_dummy_idle) };
            usr_dummy_idle as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let usr_mosi: u32 = unsafe { ::core::mem::transmute(usr_mosi) };
            usr_mosi as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let usr_miso: u32 = unsafe { ::core::mem::transmute(usr_miso) };
            usr_miso as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let usr_dummy: u32 = unsafe { ::core::mem::transmute(usr_dummy) };
            usr_dummy as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let usr_addr: u32 = unsafe { ::core::mem::transmute(usr_addr) };
            usr_addr as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let usr_command: u32 = unsafe { ::core::mem::transmute(usr_command) };
            usr_command as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn usr_dummy_cyclelen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_usr_dummy_cyclelen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_addr_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_usr_addr_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_dummy_cyclelen: u32,
        reserved6: u32,
        usr_addr_bitlen: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let usr_dummy_cyclelen: u32 = unsafe { ::core::mem::transmute(usr_dummy_cyclelen) };
            usr_dummy_cyclelen as u64
        });
        __bindgen_bitfield_unit.set(6usize, 20u8, {
            let reserved6: u32 = unsafe { ::core::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let usr_addr_bitlen: u32 = unsafe { ::core::mem::transmute(usr_addr_bitlen) };
            usr_addr_bitlen as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn usr_command_value(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command_value(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_command_bitlen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_usr_command_bitlen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_command_value: u32,
        reserved16: u32,
        usr_command_bitlen: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let usr_command_value: u32 = unsafe { ::core::mem::transmute(usr_command_value) };
            usr_command_value as u64
        });
        __bindgen_bitfield_unit.set(16usize, 12u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let usr_command_bitlen: u32 = unsafe { ::core::mem::transmute(usr_command_bitlen) };
            usr_command_bitlen as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn usr_mosi_bit_len(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_usr_mosi_bit_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_mosi_bit_len: u32,
        reserved10: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let usr_mosi_bit_len: u32 = unsafe { ::core::mem::transmute(usr_mosi_bit_len) };
            usr_mosi_bit_len as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn usr_miso_bit_len(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_usr_miso_bit_len(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved10(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_reserved10(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usr_miso_bit_len: u32,
        reserved10: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let usr_miso_bit_len: u32 = unsafe { ::core::mem::transmute(usr_miso_bit_len) };
            usr_miso_bit_len as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let reserved10: u32 = unsafe { ::core::mem::transmute(reserved10) };
            reserved10 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn status(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_status(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn wb_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_wb_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved24(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved24(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        status: u32,
        wb_mode: u32,
        reserved24: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let status: u32 = unsafe { ::core::mem::transmute(status) };
            status as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let wb_mode: u32 = unsafe { ::core::mem::transmute(wb_mode) };
            wb_mode as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let reserved24: u32 = unsafe { ::core::mem::transmute(reserved24) };
            reserved24 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn cs0_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs0_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs1_dis(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs1_dis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_trans_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_trans_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_trans_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_trans_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_trans_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_trans_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_trans_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_trans_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved7(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ck_idle_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck_idle_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cs_keep_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cs_keep_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cs0_dis: u32,
        cs1_dis: u32,
        reserved2: u32,
        mst_st_trans_end: u32,
        mst_st_trans_end_en: u32,
        st_trans_end: u32,
        st_trans_end_en: u32,
        reserved7: u32,
        ck_idle_edge: u32,
        cs_keep_active: u32,
        reserved11: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cs0_dis: u32 = unsafe { ::core::mem::transmute(cs0_dis) };
            cs0_dis as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let cs1_dis: u32 = unsafe { ::core::mem::transmute(cs1_dis) };
            cs1_dis as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mst_st_trans_end: u32 = unsafe { ::core::mem::transmute(mst_st_trans_end) };
            mst_st_trans_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mst_st_trans_end_en: u32 = unsafe { ::core::mem::transmute(mst_st_trans_end_en) };
            mst_st_trans_end_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let st_trans_end: u32 = unsafe { ::core::mem::transmute(st_trans_end) };
            st_trans_end as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let st_trans_end_en: u32 = unsafe { ::core::mem::transmute(st_trans_end_en) };
            st_trans_end_en as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let reserved7: u32 = unsafe { ::core::mem::transmute(reserved7) };
            reserved7 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ck_idle_edge: u32 = unsafe { ::core::mem::transmute(ck_idle_edge) };
            ck_idle_edge as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let cs_keep_active: u32 = unsafe { ::core::mem::transmute(cs_keep_active) };
            cs_keep_active as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn req_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_req_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usr_addr_4byte(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usr_addr_4byte(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_usr_cmd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_usr_cmd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fdin_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fdin_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fdout_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fdout_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn faddr_dual(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_faddr_dual(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fdin_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fdin_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fdout_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fdout_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn faddr_quad(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_faddr_quad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        req_en: u32,
        usr_addr_4byte: u32,
        flash_usr_cmd: u32,
        fdin_dual: u32,
        fdout_dual: u32,
        faddr_dual: u32,
        fdin_quad: u32,
        fdout_quad: u32,
        faddr_quad: u32,
        reserved9: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let req_en: u32 = unsafe { ::core::mem::transmute(req_en) };
            req_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let usr_addr_4byte: u32 = unsafe { ::core::mem::transmute(usr_addr_4byte) };
            usr_addr_4byte as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let flash_usr_cmd: u32 = unsafe { ::core::mem::transmute(flash_usr_cmd) };
            flash_usr_cmd as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fdin_dual: u32 = unsafe { ::core::mem::transmute(fdin_dual) };
            fdin_dual as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fdout_dual: u32 = unsafe { ::core::mem::transmute(fdout_dual) };
            fdout_dual as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let faddr_dual: u32 = unsafe { ::core::mem::transmute(faddr_dual) };
            faddr_dual as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fdin_quad: u32 = unsafe { ::core::mem::transmute(fdin_quad) };
            fdin_quad as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let fdout_quad: u32 = unsafe { ::core::mem::transmute(fdout_quad) };
            fdout_quad as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let faddr_quad: u32 = unsafe { ::core::mem::transmute(faddr_quad) };
            faddr_quad as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved9: u32 = unsafe { ::core::mem::transmute(reserved9) };
            reserved9 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn spi0_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_spi0_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn spi0_mst_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_spi0_mst_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cspi_lock_delay_time(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cspi_lock_delay_time(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        spi0_st: u32,
        spi0_mst_st: u32,
        cspi_lock_delay_time: u32,
        reserved12: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let spi0_st: u32 = unsafe { ::core::mem::transmute(spi0_st) };
            spi0_st as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let spi0_mst_st: u32 = unsafe { ::core::mem::transmute(spi0_mst_st) };
            spi0_mst_st as u64
        });
        __bindgen_bitfield_unit.set(7usize, 5u8, {
            let cspi_lock_delay_time: u32 = unsafe { ::core::mem::transmute(cspi_lock_delay_time) };
            cspi_lock_delay_time as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn waiti_dummy(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_waiti_dummy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn waiti_cmd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_waiti_cmd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn waiti_dummy_cyclelen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_waiti_dummy_cyclelen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        waiti_dummy: u32,
        waiti_cmd: u32,
        waiti_dummy_cyclelen: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let waiti_dummy: u32 = unsafe { ::core::mem::transmute(waiti_dummy) };
            waiti_dummy as u64
        });
        __bindgen_bitfield_unit.set(2usize, 8u8, {
            let waiti_cmd: u32 = unsafe { ::core::mem::transmute(waiti_cmd) };
            waiti_cmd as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let waiti_dummy_cyclelen: u32 = unsafe { ::core::mem::transmute(waiti_dummy_cyclelen) };
            waiti_dummy_cyclelen as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn flash_per(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_per(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pes(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pes(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_per_wait_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_per_wait_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pes_wait_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pes_wait_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_per_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_per_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pes_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pes_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pesr_end_msk(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pesr_end_msk(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn frd_sus_2b(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frd_sus_2b(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn per_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_end_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_end_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sus_timeout_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_sus_timeout_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flash_per: u32,
        flash_pes: u32,
        flash_per_wait_en: u32,
        flash_pes_wait_en: u32,
        pes_per_en: u32,
        flash_pes_en: u32,
        pesr_end_msk: u32,
        frd_sus_2b: u32,
        per_end_en: u32,
        pes_end_en: u32,
        sus_timeout_cnt: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flash_per: u32 = unsafe { ::core::mem::transmute(flash_per) };
            flash_per as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let flash_pes: u32 = unsafe { ::core::mem::transmute(flash_pes) };
            flash_pes as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let flash_per_wait_en: u32 = unsafe { ::core::mem::transmute(flash_per_wait_en) };
            flash_per_wait_en as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let flash_pes_wait_en: u32 = unsafe { ::core::mem::transmute(flash_pes_wait_en) };
            flash_pes_wait_en as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pes_per_en: u32 = unsafe { ::core::mem::transmute(pes_per_en) };
            pes_per_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let flash_pes_en: u32 = unsafe { ::core::mem::transmute(flash_pes_en) };
            flash_pes_en as u64
        });
        __bindgen_bitfield_unit.set(6usize, 16u8, {
            let pesr_end_msk: u32 = unsafe { ::core::mem::transmute(pesr_end_msk) };
            pesr_end_msk as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let frd_sus_2b: u32 = unsafe { ::core::mem::transmute(frd_sus_2b) };
            frd_sus_2b as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let per_end_en: u32 = unsafe { ::core::mem::transmute(per_end_en) };
            per_end_en as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let pes_end_en: u32 = unsafe { ::core::mem::transmute(pes_end_en) };
            pes_end_en as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let sus_timeout_cnt: u32 = unsafe { ::core::mem::transmute(sus_timeout_cnt) };
            sus_timeout_cnt as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_17 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_17__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_17__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_17__bindgen_ty_1 {
    #[inline]
    pub fn flash_per_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flash_per_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn flash_pes_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flash_pes_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn wait_pesr_command(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_wait_pesr_command(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flash_per_command: u32,
        flash_pes_command: u32,
        wait_pesr_command: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let flash_per_command: u32 = unsafe { ::core::mem::transmute(flash_per_command) };
            flash_per_command as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let flash_pes_command: u32 = unsafe { ::core::mem::transmute(flash_pes_command) };
            flash_pes_command as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let wait_pesr_command: u32 = unsafe { ::core::mem::transmute(wait_pesr_command) };
            wait_pesr_command as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_18 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_18__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_18__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_18__bindgen_ty_1 {
    #[inline]
    pub fn flash_sus(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flash_sus(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(flash_sus: u32, reserved1: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let flash_sus: u32 = unsafe { ::core::mem::transmute(flash_sus) };
            flash_sus as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_19 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_19__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_19__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_19__bindgen_ty_1 {
    #[inline]
    pub fn timing_clk_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_clk_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timing_cali(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_cali(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extra_dummy_cyclelen(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_extra_dummy_cyclelen(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        timing_clk_ena: u32,
        timing_cali: u32,
        extra_dummy_cyclelen: u32,
        reserved5: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let timing_clk_ena: u32 = unsafe { ::core::mem::transmute(timing_clk_ena) };
            timing_clk_ena as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let timing_cali: u32 = unsafe { ::core::mem::transmute(timing_cali) };
            timing_cali as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let extra_dummy_cyclelen: u32 = unsafe { ::core::mem::transmute(extra_dummy_cyclelen) };
            extra_dummy_cyclelen as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_20 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_20__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_20__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_20__bindgen_ty_1 {
    #[inline]
    pub fn din0_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din0_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din1_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din1_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din2_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din2_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din3_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din3_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        din0_mode: u32,
        din1_mode: u32,
        din2_mode: u32,
        din3_mode: u32,
        reserved8: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let din0_mode: u32 = unsafe { ::core::mem::transmute(din0_mode) };
            din0_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let din1_mode: u32 = unsafe { ::core::mem::transmute(din1_mode) };
            din1_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let din2_mode: u32 = unsafe { ::core::mem::transmute(din2_mode) };
            din2_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let din3_mode: u32 = unsafe { ::core::mem::transmute(din3_mode) };
            din3_mode as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_21 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_21__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_21__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_21__bindgen_ty_1 {
    #[inline]
    pub fn din0_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din0_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din1_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din1_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din2_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din2_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn din3_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_din3_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        din0_num: u32,
        din1_num: u32,
        din2_num: u32,
        din3_num: u32,
        reserved8: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let din0_num: u32 = unsafe { ::core::mem::transmute(din0_num) };
            din0_num as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let din1_num: u32 = unsafe { ::core::mem::transmute(din1_num) };
            din1_num as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let din2_num: u32 = unsafe { ::core::mem::transmute(din2_num) };
            din2_num as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let din3_num: u32 = unsafe { ::core::mem::transmute(din3_num) };
            din3_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_22 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_22__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_22__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_22__bindgen_ty_1 {
    #[inline]
    pub fn dout0_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout0_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout1_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout1_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout2_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout2_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dout3_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dout3_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dout0_mode: u32,
        dout1_mode: u32,
        dout2_mode: u32,
        dout3_mode: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dout0_mode: u32 = unsafe { ::core::mem::transmute(dout0_mode) };
            dout0_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dout1_mode: u32 = unsafe { ::core::mem::transmute(dout1_mode) };
            dout1_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dout2_mode: u32 = unsafe { ::core::mem::transmute(dout2_mode) };
            dout2_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dout3_mode: u32 = unsafe { ::core::mem::transmute(dout3_mode) };
            dout3_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_23 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_23__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_23__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_23__bindgen_ty_1 {
    #[inline]
    pub fn per_end_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_end_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_end_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_end_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wpe_end_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpe_end_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_end_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_end_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_end_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_end_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        per_end_int_ena: u32,
        pes_end_int_ena: u32,
        wpe_end_int_ena: u32,
        st_end_int_ena: u32,
        mst_st_end_int_ena: u32,
        reserved5: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let per_end_int_ena: u32 = unsafe { ::core::mem::transmute(per_end_int_ena) };
            per_end_int_ena as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pes_end_int_ena: u32 = unsafe { ::core::mem::transmute(pes_end_int_ena) };
            pes_end_int_ena as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wpe_end_int_ena: u32 = unsafe { ::core::mem::transmute(wpe_end_int_ena) };
            wpe_end_int_ena as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let st_end_int_ena: u32 = unsafe { ::core::mem::transmute(st_end_int_ena) };
            st_end_int_ena as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mst_st_end_int_ena: u32 = unsafe { ::core::mem::transmute(mst_st_end_int_ena) };
            mst_st_end_int_ena as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_23 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_24 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_24__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_24__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_24__bindgen_ty_1 {
    #[inline]
    pub fn per_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wpe_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpe_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        per_end: u32,
        pes_end: u32,
        wpe_end: u32,
        st_end: u32,
        mst_st_end: u32,
        reserved5: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let per_end: u32 = unsafe { ::core::mem::transmute(per_end) };
            per_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pes_end: u32 = unsafe { ::core::mem::transmute(pes_end) };
            pes_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wpe_end: u32 = unsafe { ::core::mem::transmute(wpe_end) };
            wpe_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let st_end: u32 = unsafe { ::core::mem::transmute(st_end) };
            st_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mst_st_end: u32 = unsafe { ::core::mem::transmute(mst_st_end) };
            mst_st_end as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_24 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_25 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_25__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_25__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_25__bindgen_ty_1 {
    #[inline]
    pub fn per_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wpe_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpe_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        per_end: u32,
        pes_end: u32,
        wpe_end: u32,
        st_end: u32,
        mst_st_end: u32,
        reserved5: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let per_end: u32 = unsafe { ::core::mem::transmute(per_end) };
            per_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pes_end: u32 = unsafe { ::core::mem::transmute(pes_end) };
            pes_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wpe_end: u32 = unsafe { ::core::mem::transmute(wpe_end) };
            wpe_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let st_end: u32 = unsafe { ::core::mem::transmute(st_end) };
            st_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mst_st_end: u32 = unsafe { ::core::mem::transmute(mst_st_end) };
            mst_st_end as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_25 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_26 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_26__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_26__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_26__bindgen_ty_1 {
    #[inline]
    pub fn per_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pes_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pes_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wpe_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpe_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mst_st_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mst_st_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        per_end: u32,
        pes_end: u32,
        wpe_end: u32,
        st_end: u32,
        mst_st_end: u32,
        reserved5: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let per_end: u32 = unsafe { ::core::mem::transmute(per_end) };
            per_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pes_end: u32 = unsafe { ::core::mem::transmute(pes_end) };
            pes_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wpe_end: u32 = unsafe { ::core::mem::transmute(wpe_end) };
            wpe_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let st_end: u32 = unsafe { ::core::mem::transmute(st_end) };
            st_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mst_st_end: u32 = unsafe { ::core::mem::transmute(mst_st_end) };
            mst_st_end as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_26 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_27 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_27__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_27__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_27__bindgen_ty_1 {
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(clk_en: u32, reserved1: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_27 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_28 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_28__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_28__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_28__bindgen_ty_1 {
    #[inline]
    pub fn spi01_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_spi01_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        spi01_clk_sel: u32,
        reserved2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let spi01_clk_sel: u32 = unsafe { ::core::mem::transmute(spi01_clk_sel) };
            spi01_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_28 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_mem_dev_s__bindgen_ty_29 {
    pub __bindgen_anon_1: spi_mem_dev_s__bindgen_ty_29__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_mem_dev_s__bindgen_ty_29__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl spi_mem_dev_s__bindgen_ty_29__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for spi_mem_dev_s__bindgen_ty_29 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for spi_mem_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spi_mem_dev_t = spi_mem_dev_s;
extern "C" {
    pub static mut SPIMEM0: spi_mem_dev_t;
}
extern "C" {
    pub static mut SPIMEM1: spi_mem_dev_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_signal_conn_t {
    pub spiclk_out: u8,
    pub spiclk_in: u8,
    pub spid_out: u8,
    pub spiq_out: u8,
    pub spiwp_out: u8,
    pub spihd_out: u8,
    pub spid_in: u8,
    pub spiq_in: u8,
    pub spiwp_in: u8,
    pub spihd_in: u8,
    pub spics_out: [u8; 3usize],
    pub spics_in: u8,
    pub spidqs_out: u8,
    pub spicd_out: u8,
    pub spiclk_iomux_pin: u8,
    pub spid_iomux_pin: u8,
    pub spiq_iomux_pin: u8,
    pub spiwp_iomux_pin: u8,
    pub spihd_iomux_pin: u8,
    pub spics0_iomux_pin: u8,
    pub irq: u8,
    pub irq_dma: u8,
    pub module: periph_module_t,
    pub func: c_types::c_int,
    pub hw: *mut spi_dev_t,
}
impl Default for spi_signal_conn_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static spi_periph_signal: [spi_signal_conn_t; 2usize];
}
#[doc = "< SPI1"]
pub const spi_host_device_t_SPI1_HOST: spi_host_device_t = 0;
#[doc = "< SPI2"]
pub const spi_host_device_t_SPI2_HOST: spi_host_device_t = 1;
#[doc = "< SPI3"]
pub const spi_host_device_t_SPI3_HOST: spi_host_device_t = 2;
#[doc = " @brief Enum with the three SPI peripherals that are software-accessible in it"]
pub type spi_host_device_t = c_types::c_uint;
#[doc = "< The buffer has sent data to master."]
pub const spi_event_t_SPI_EV_BUF_TX: spi_event_t = 1;
#[doc = "< The buffer has received data from master."]
pub const spi_event_t_SPI_EV_BUF_RX: spi_event_t = 2;
#[doc = "< Slave has loaded its TX data buffer to the hardware (DMA)."]
pub const spi_event_t_SPI_EV_SEND_DMA_READY: spi_event_t = 4;
#[doc = "< Master has received certain number of the data, the number is determined by Master."]
pub const spi_event_t_SPI_EV_SEND: spi_event_t = 8;
#[doc = "< Slave has loaded its RX data buffer to the hardware (DMA)."]
pub const spi_event_t_SPI_EV_RECV_DMA_READY: spi_event_t = 16;
#[doc = "< Slave has received certain number of data from master, the number is determined by Master."]
pub const spi_event_t_SPI_EV_RECV: spi_event_t = 32;
#[doc = "< Received CMD9 from master."]
pub const spi_event_t_SPI_EV_CMD9: spi_event_t = 64;
#[doc = "< Received CMDA from master."]
pub const spi_event_t_SPI_EV_CMDA: spi_event_t = 128;
#[doc = "< A transaction has done"]
pub const spi_event_t_SPI_EV_TRANS: spi_event_t = 256;
#[doc = " SPI Events"]
pub type spi_event_t = c_types::c_uint;
#[doc = " @brief Line mode of SPI transaction phases: CMD, ADDR, DOUT/DIN."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_line_mode_t {
    #[doc = "< The line width of command phase, e.g. 2-line-cmd-phase."]
    pub cmd_lines: u8,
    #[doc = "< The line width of address phase, e.g. 1-line-addr-phase."]
    pub addr_lines: u8,
    #[doc = "< The line width of data phase, e.g. 4-line-data-phase."]
    pub data_lines: u8,
}
#[doc = "< Do not enable DMA for SPI"]
pub const spi_common_dma_t_SPI_DMA_DISABLED: spi_common_dma_t = 0;
#[doc = "< Enable DMA, channel is automatically selected by driver"]
pub const spi_common_dma_t_SPI_DMA_CH_AUTO: spi_common_dma_t = 3;
#[doc = " @brief SPI DMA channels"]
pub type spi_common_dma_t = c_types::c_uint;
#[doc = " @brief SPI DMA channels"]
pub use self::spi_common_dma_t as spi_dma_chan_t;
#[doc = " @brief This is a configuration structure for a SPI bus."]
#[doc = ""]
#[doc = " You can use this structure to specify the GPIO pins of the bus. Normally, the driver will use the"]
#[doc = " GPIO matrix to route the signals. An exception is made when all signals either can be routed through"]
#[doc = " the IO_MUX or are -1. In that case, the IO_MUX is used, allowing for >40MHz speeds."]
#[doc = ""]
#[doc = " @note Be advised that the slave driver does not use the quadwp/quadhd lines and fields in spi_bus_config_t refering to these lines will be ignored and can thus safely be left uninitialized."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spi_bus_config_t {
    pub __bindgen_anon_1: spi_bus_config_t__bindgen_ty_1,
    pub __bindgen_anon_2: spi_bus_config_t__bindgen_ty_2,
    #[doc = "< GPIO pin for SPI Clock signal, or -1 if not used."]
    pub sclk_io_num: c_types::c_int,
    pub __bindgen_anon_3: spi_bus_config_t__bindgen_ty_3,
    pub __bindgen_anon_4: spi_bus_config_t__bindgen_ty_4,
    #[doc = "< GPIO pin for spi data4 signal in octal mode, or -1 if not used."]
    pub data4_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data5 signal in octal mode, or -1 if not used."]
    pub data5_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data6 signal in octal mode, or -1 if not used."]
    pub data6_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data7 signal in octal mode, or -1 if not used."]
    pub data7_io_num: c_types::c_int,
    #[doc = "< Maximum transfer size, in bytes. Defaults to 4092 if 0 when DMA enabled, or to `SOC_SPI_MAXIMUM_BUFFER_SIZE` if DMA is disabled."]
    pub max_transfer_sz: c_types::c_int,
    #[doc = "< Abilities of bus to be checked by the driver. Or-ed value of ``SPICOMMON_BUSFLAG_*`` flags."]
    pub flags: u32,
    #[doc = "< Interrupt flag for the bus to set the priority, and IRAM attribute, see"]
    #[doc = "  ``esp_intr_alloc.h``. Note that the EDGE, INTRDISABLED attribute are ignored"]
    #[doc = "  by the driver. Note that if ESP_INTR_FLAG_IRAM is set, ALL the callbacks of"]
    #[doc = "  the driver, and their callee functions, should be put in the IRAM."]
    pub intr_flags: c_types::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_bus_config_t__bindgen_ty_1 {
    #[doc = "< GPIO pin for Master Out Slave In (=spi_d) signal, or -1 if not used."]
    pub mosi_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data0 signal in quad/octal mode, or -1 if not used."]
    pub data0_io_num: c_types::c_int,
}
impl Default for spi_bus_config_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_bus_config_t__bindgen_ty_2 {
    #[doc = "< GPIO pin for Master In Slave Out (=spi_q) signal, or -1 if not used."]
    pub miso_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data1 signal in quad/octal mode, or -1 if not used."]
    pub data1_io_num: c_types::c_int,
}
impl Default for spi_bus_config_t__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_bus_config_t__bindgen_ty_3 {
    #[doc = "< GPIO pin for WP (Write Protect) signal, or -1 if not used."]
    pub quadwp_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data2 signal in quad/octal mode, or -1 if not used."]
    pub data2_io_num: c_types::c_int,
}
impl Default for spi_bus_config_t__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_bus_config_t__bindgen_ty_4 {
    #[doc = "< GPIO pin for HD (Hold) signal, or -1 if not used."]
    pub quadhd_io_num: c_types::c_int,
    #[doc = "< GPIO pin for spi data3 signal in quad/octal mode, or -1 if not used."]
    pub data3_io_num: c_types::c_int,
}
impl Default for spi_bus_config_t__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for spi_bus_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize a SPI bus"]
    #[doc = ""]
    #[doc = " @warning SPI0/1 is not supported"]
    #[doc = ""]
    #[doc = " @param host_id       SPI peripheral that controls this bus"]
    #[doc = " @param bus_config    Pointer to a spi_bus_config_t struct specifying how the host should be initialized"]
    #[doc = " @param dma_chan      - Selecting a DMA channel for an SPI bus allows transactions on the bus with size only limited by the amount of internal memory."]
    #[doc = "                      - Selecting SPI_DMA_DISABLED limits the size of transactions."]
    #[doc = "                      - Set to SPI_DMA_DISABLED if only the SPI flash uses this bus."]
    #[doc = "                      - Set to SPI_DMA_CH_AUTO to let the driver to allocate the DMA channel."]
    #[doc = ""]
    #[doc = " @warning If a DMA channel is selected, any transmit and receive buffer used should be allocated in"]
    #[doc = "          DMA-capable memory."]
    #[doc = ""]
    #[doc = " @warning The ISR of SPI is always executed on the core which calls this"]
    #[doc = "          function. Never starve the ISR on this core or the SPI transactions will not"]
    #[doc = "          be handled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if configuration is invalid"]
    #[doc = "         - ESP_ERR_INVALID_STATE if host already is in use"]
    #[doc = "         - ESP_ERR_NOT_FOUND     if there is no available DMA channel"]
    #[doc = "         - ESP_ERR_NO_MEM        if out of memory"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_bus_initialize(
        host_id: spi_host_device_t,
        bus_config: *const spi_bus_config_t,
        dma_chan: spi_dma_chan_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Free a SPI bus"]
    #[doc = ""]
    #[doc = " @warning In order for this to succeed, all devices have to be removed first."]
    #[doc = ""]
    #[doc = " @param host_id SPI peripheral to free"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_INVALID_STATE if bus hasn't been initialized before, or not all devices on the bus are freed"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_bus_free(host_id: spi_host_device_t) -> esp_err_t;
}
pub type transaction_cb_t =
    ::core::option::Option<unsafe extern "C" fn(trans: *mut spi_transaction_t)>;
#[doc = " @brief This is a configuration for a SPI slave device that is connected to one of the SPI buses."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_device_interface_config_t {
    #[doc = "< Default amount of bits in command phase (0-16), used when ``SPI_TRANS_VARIABLE_CMD`` is not used, otherwise ignored."]
    pub command_bits: u8,
    #[doc = "< Default amount of bits in address phase (0-64), used when ``SPI_TRANS_VARIABLE_ADDR`` is not used, otherwise ignored."]
    pub address_bits: u8,
    #[doc = "< Amount of dummy bits to insert between address and data phase"]
    pub dummy_bits: u8,
    #[doc = "< SPI mode, representing a pair of (CPOL, CPHA) configuration:"]
    #[doc = "- 0: (0, 0)"]
    #[doc = "- 1: (0, 1)"]
    #[doc = "- 2: (1, 0)"]
    #[doc = "- 3: (1, 1)"]
    pub mode: u8,
    #[doc = "< Duty cycle of positive clock, in 1/256th increments (128 = 50%/50% duty). Setting this to 0 (=not setting it) is equivalent to setting this to 128."]
    pub duty_cycle_pos: u16,
    #[doc = "< Amount of SPI bit-cycles the cs should be activated before the transmission (0-16). This only works on half-duplex transactions."]
    pub cs_ena_pretrans: u16,
    #[doc = "< Amount of SPI bit-cycles the cs should stay active after the transmission (0-16)"]
    pub cs_ena_posttrans: u8,
    #[doc = "< Clock speed, divisors of 80MHz, in Hz. See ``SPI_MASTER_FREQ_*``."]
    pub clock_speed_hz: c_types::c_int,
    #[doc = "< Maximum data valid time of slave. The time required between SCLK and MISO"]
    #[doc = "valid, including the possible clock delay from slave to master. The driver uses this value to give an extra"]
    #[doc = "delay before the MISO is ready on the line. Leave at 0 unless you know you need a delay. For better timing"]
    #[doc = "performance at high frequency (over 8MHz), it's suggest to have the right value."]
    pub input_delay_ns: c_types::c_int,
    #[doc = "< CS GPIO pin for this device, or -1 if not used"]
    pub spics_io_num: c_types::c_int,
    #[doc = "< Bitwise OR of SPI_DEVICE_* flags"]
    pub flags: u32,
    #[doc = "< Transaction queue size. This sets how many transactions can be 'in the air' (queued using spi_device_queue_trans but not yet finished using spi_device_get_trans_result) at the same time"]
    pub queue_size: c_types::c_int,
    #[doc = "< Callback to be called before a transmission is started."]
    #[doc = ""]
    #[doc = "  This callback is called within interrupt"]
    #[doc = "  context should be in IRAM for best"]
    #[doc = "  performance, see \"Transferring Speed\""]
    #[doc = "  section in the SPI Master documentation for"]
    #[doc = "  full details. If not, the callback may crash"]
    #[doc = "  during flash operation when the driver is"]
    #[doc = "  initialized with ESP_INTR_FLAG_IRAM."]
    pub pre_cb: transaction_cb_t,
    #[doc = "< Callback to be called after a transmission has completed."]
    #[doc = ""]
    #[doc = "  This callback is called within interrupt"]
    #[doc = "  context should be in IRAM for best"]
    #[doc = "  performance, see \"Transferring Speed\""]
    #[doc = "  section in the SPI Master documentation for"]
    #[doc = "  full details. If not, the callback may crash"]
    #[doc = "  during flash operation when the driver is"]
    #[doc = "  initialized with ESP_INTR_FLAG_IRAM."]
    pub post_cb: transaction_cb_t,
}
#[doc = " This structure describes one SPI transaction. The descriptor should not be modified until the transaction finishes."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spi_transaction_t {
    #[doc = "< Bitwise OR of SPI_TRANS_* flags"]
    pub flags: u32,
    #[doc = "< Command data, of which the length is set in the ``command_bits`` of spi_device_interface_config_t."]
    #[doc = ""]
    #[doc = "  <b>NOTE: this field, used to be \"command\" in ESP-IDF 2.1 and before, is re-written to be used in a new way in ESP-IDF 3.0.</b>"]
    #[doc = ""]
    #[doc = "  Example: write 0x0123 and command_bits=12 to send command 0x12, 0x3_ (in previous version, you may have to write 0x3_12)."]
    pub cmd: u16,
    #[doc = "< Address data, of which the length is set in the ``address_bits`` of spi_device_interface_config_t."]
    #[doc = ""]
    #[doc = "  <b>NOTE: this field, used to be \"address\" in ESP-IDF 2.1 and before, is re-written to be used in a new way in ESP-IDF3.0.</b>"]
    #[doc = ""]
    #[doc = "  Example: write 0x123400 and address_bits=24 to send address of 0x12, 0x34, 0x00 (in previous version, you may have to write 0x12340000)."]
    pub addr: u64,
    #[doc = "< Total data length, in bits"]
    pub length: size_t,
    #[doc = "< Total data length received, should be not greater than ``length`` in full-duplex mode (0 defaults this to the value of ``length``)."]
    pub rxlength: size_t,
    #[doc = "< User-defined variable. Can be used to store eg transaction ID."]
    pub user: *mut c_types::c_void,
    pub __bindgen_anon_1: spi_transaction_t__bindgen_ty_1,
    pub __bindgen_anon_2: spi_transaction_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_transaction_t__bindgen_ty_1 {
    #[doc = "< Pointer to transmit buffer, or NULL for no MOSI phase"]
    pub tx_buffer: *const c_types::c_void,
    #[doc = "< If SPI_TRANS_USE_TXDATA is set, data set here is sent directly from this variable."]
    pub tx_data: [u8; 4usize],
}
impl Default for spi_transaction_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spi_transaction_t__bindgen_ty_2 {
    #[doc = "< Pointer to receive buffer, or NULL for no MISO phase. Written by 4 bytes-unit if DMA is used."]
    pub rx_buffer: *mut c_types::c_void,
    #[doc = "< If SPI_TRANS_USE_RXDATA is set, data is received directly to this variable"]
    pub rx_data: [u8; 4usize],
}
impl Default for spi_transaction_t__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for spi_transaction_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " This struct is for SPI transactions which may change their address and command length."]
#[doc = " Please do set the flags in base to ``SPI_TRANS_VARIABLE_CMD_ADR`` to use the bit length here."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spi_transaction_ext_t {
    #[doc = "< Transaction data, so that pointer to spi_transaction_t can be converted into spi_transaction_ext_t"]
    pub base: spi_transaction_t,
    #[doc = "< The command length in this transaction, in bits."]
    pub command_bits: u8,
    #[doc = "< The address length in this transaction, in bits."]
    pub address_bits: u8,
    #[doc = "< The dummy length in this transaction, in bits."]
    pub dummy_bits: u8,
}
impl Default for spi_transaction_ext_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_device_t {
    _unused: [u8; 0],
}
pub type spi_device_handle_t = *mut spi_device_t;
extern "C" {
    #[doc = " @brief Allocate a device on a SPI bus"]
    #[doc = ""]
    #[doc = " This initializes the internal structures for a device, plus allocates a CS pin on the indicated SPI master"]
    #[doc = " peripheral and routes it to the indicated GPIO. All SPI master devices have three CS pins and can thus control"]
    #[doc = " up to three devices."]
    #[doc = ""]
    #[doc = " @note While in general, speeds up to 80MHz on the dedicated SPI pins and 40MHz on GPIO-matrix-routed pins are"]
    #[doc = "       supported, full-duplex transfers routed over the GPIO matrix only support speeds up to 26MHz."]
    #[doc = ""]
    #[doc = " @param host_id SPI peripheral to allocate device on"]
    #[doc = " @param dev_config SPI interface protocol config for the device"]
    #[doc = " @param handle Pointer to variable to hold the device handle"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_NOT_FOUND     if host doesn't have any free CS slots"]
    #[doc = "         - ESP_ERR_NO_MEM        if out of memory"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_bus_add_device(
        host_id: spi_host_device_t,
        dev_config: *const spi_device_interface_config_t,
        handle: *mut spi_device_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Remove a device from the SPI bus"]
    #[doc = ""]
    #[doc = " @param handle Device handle to free"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_INVALID_STATE if device already is freed"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_bus_remove_device(handle: spi_device_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a SPI transaction for interrupt transaction execution. Get the result by ``spi_device_get_trans_result``."]
    #[doc = ""]
    #[doc = " @note Normally a device cannot start (queue) polling and interrupt"]
    #[doc = "      transactions simultaneously."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param trans_desc Description of transaction to execute"]
    #[doc = " @param ticks_to_wait Ticks to wait until there's room in the queue; use portMAX_DELAY to"]
    #[doc = "                      never time out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid. This can happen if SPI_TRANS_CS_KEEP_ACTIVE flag is specified while"]
    #[doc = "                                 the bus was not acquired (`spi_device_acquire_bus()` should be called first)"]
    #[doc = "         - ESP_ERR_TIMEOUT       if there was no room in the queue before ticks_to_wait expired"]
    #[doc = "         - ESP_ERR_NO_MEM        if allocating DMA-capable temporary buffer failed"]
    #[doc = "         - ESP_ERR_INVALID_STATE if previous transactions are not finished"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_queue_trans(
        handle: spi_device_handle_t,
        trans_desc: *mut spi_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the result of a SPI transaction queued earlier by ``spi_device_queue_trans``."]
    #[doc = ""]
    #[doc = " This routine will wait until a transaction to the given device"]
    #[doc = " succesfully completed. It will then return the description of the"]
    #[doc = " completed transaction so software can inspect the result and e.g. free the memory or"]
    #[doc = " re-use the buffers."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param trans_desc Pointer to variable able to contain a pointer to the description of the transaction"]
    #[doc = "that is executed. The descriptor should not be modified until the descriptor is returned by"]
    #[doc = "spi_device_get_trans_result."]
    #[doc = " @param ticks_to_wait Ticks to wait until there's a returned item; use portMAX_DELAY to never time"]
    #[doc = "out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_TIMEOUT       if there was no completed transaction before ticks_to_wait expired"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_get_trans_result(
        handle: spi_device_handle_t,
        trans_desc: *mut *mut spi_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Send a SPI transaction, wait for it to complete, and return the result"]
    #[doc = ""]
    #[doc = " This function is the equivalent of calling spi_device_queue_trans() followed by spi_device_get_trans_result()."]
    #[doc = " Do not use this when there is still a transaction separately queued (started) from spi_device_queue_trans() or polling_start/transmit that hasn't been finalized."]
    #[doc = ""]
    #[doc = " @note This function is not thread safe when multiple tasks access the same SPI device."]
    #[doc = "      Normally a device cannot start (queue) polling and interrupt"]
    #[doc = "      transactions simutanuously."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param trans_desc Description of transaction to execute"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_transmit(
        handle: spi_device_handle_t,
        trans_desc: *mut spi_transaction_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Immediately start a polling transaction."]
    #[doc = ""]
    #[doc = " @note Normally a device cannot start (queue) polling and interrupt"]
    #[doc = "      transactions simutanuously. Moreover, a device cannot start a new polling"]
    #[doc = "      transaction if another polling transaction is not finished."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param trans_desc Description of transaction to execute"]
    #[doc = " @param ticks_to_wait Ticks to wait until there's room in the queue;"]
    #[doc = "              currently only portMAX_DELAY is supported."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid. This can happen if SPI_TRANS_CS_KEEP_ACTIVE flag is specified while"]
    #[doc = "                                 the bus was not acquired (`spi_device_acquire_bus()` should be called first)"]
    #[doc = "         - ESP_ERR_TIMEOUT       if the device cannot get control of the bus before ``ticks_to_wait`` expired"]
    #[doc = "         - ESP_ERR_NO_MEM        if allocating DMA-capable temporary buffer failed"]
    #[doc = "         - ESP_ERR_INVALID_STATE if previous transactions are not finished"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_polling_start(
        handle: spi_device_handle_t,
        trans_desc: *mut spi_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Poll until the polling transaction ends."]
    #[doc = ""]
    #[doc = " This routine will not return until the transaction to the given device has"]
    #[doc = " succesfully completed. The task is not blocked, but actively busy-spins for"]
    #[doc = " the transaction to be completed."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param ticks_to_wait Ticks to wait until there's a returned item; use portMAX_DELAY to never time"]
    #[doc = "out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_TIMEOUT       if the transaction cannot finish before ticks_to_wait expired"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_polling_end(
        handle: spi_device_handle_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Send a polling transaction, wait for it to complete, and return the result"]
    #[doc = ""]
    #[doc = " This function is the equivalent of calling spi_device_polling_start() followed by spi_device_polling_end()."]
    #[doc = " Do not use this when there is still a transaction that hasn't been finalized."]
    #[doc = ""]
    #[doc = " @note This function is not thread safe when multiple tasks access the same SPI device."]
    #[doc = "      Normally a device cannot start (queue) polling and interrupt"]
    #[doc = "      transactions simutanuously."]
    #[doc = ""]
    #[doc = " @param handle Device handle obtained using spi_host_add_dev"]
    #[doc = " @param trans_desc Description of transaction to execute"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_device_polling_transmit(
        handle: spi_device_handle_t,
        trans_desc: *mut spi_transaction_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Occupy the SPI bus for a device to do continuous transactions."]
    #[doc = ""]
    #[doc = " Transactions to all other devices will be put off until ``spi_device_release_bus`` is called."]
    #[doc = ""]
    #[doc = " @note The function will wait until all the existing transactions have been sent."]
    #[doc = ""]
    #[doc = " @param device The device to occupy the bus."]
    #[doc = " @param wait Time to wait before the the bus is occupied by the device. Currently MUST set to portMAX_DELAY."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG : ``wait`` is not set to portMAX_DELAY."]
    #[doc = "      - ESP_OK : Success."]
    pub fn spi_device_acquire_bus(device: spi_device_handle_t, wait: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Release the SPI bus occupied by the device. All other devices can start sending transactions."]
    #[doc = ""]
    #[doc = " @param dev The device to release the bus."]
    pub fn spi_device_release_bus(dev: spi_device_handle_t);
}
extern "C" {
    #[doc = " @brief Calculate the working frequency that is most close to desired frequency, and also the register value."]
    #[doc = ""]
    #[doc = " @param fapb The frequency of apb clock, should be ``APB_CLK_FREQ``."]
    #[doc = " @param hz Desired working frequency"]
    #[doc = " @param duty_cycle Duty cycle of the spi clock"]
    #[doc = " @param reg_o Output of value to be set in clock register, or NULL if not needed."]
    #[doc = ""]
    #[doc = " @deprecated The app shouldn't care about the register. Call ``spi_get_actual_clock`` instead."]
    #[doc = ""]
    #[doc = " @return Actual working frequency that most fit."]
    pub fn spi_cal_clock(
        fapb: c_types::c_int,
        hz: c_types::c_int,
        duty_cycle: c_types::c_int,
        reg_o: *mut u32,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Calculate the working frequency that is most close to desired frequency."]
    #[doc = ""]
    #[doc = " @param fapb The frequency of apb clock, should be ``APB_CLK_FREQ``."]
    #[doc = " @param hz Desired working frequency"]
    #[doc = " @param duty_cycle Duty cycle of the spi clock"]
    #[doc = ""]
    #[doc = " @return Actual working frequency that most fit."]
    pub fn spi_get_actual_clock(
        fapb: c_types::c_int,
        hz: c_types::c_int,
        duty_cycle: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Calculate the timing settings of specified frequency and settings."]
    #[doc = ""]
    #[doc = " @param gpio_is_used True if using GPIO matrix, or False if iomux pins are used."]
    #[doc = " @param input_delay_ns Input delay from SCLK launch edge to MISO data valid."]
    #[doc = " @param eff_clk Effective clock frequency (in Hz) from spi_cal_clock."]
    #[doc = " @param dummy_o Address of dummy bits used output. Set to NULL if not needed."]
    #[doc = " @param cycles_remain_o Address of cycles remaining (after dummy bits are used) output."]
    #[doc = "         - -1 If too many cycles remaining, suggest to compensate half a clock."]
    #[doc = "         - 0 If no remaining cycles or dummy bits are not used."]
    #[doc = "         - positive value: cycles suggest to compensate."]
    #[doc = ""]
    #[doc = " @note If **dummy_o* is not zero, it means dummy bits should be applied in half duplex mode, and full duplex mode may not work."]
    pub fn spi_get_timing(
        gpio_is_used: bool,
        input_delay_ns: c_types::c_int,
        eff_clk: c_types::c_int,
        dummy_o: *mut c_types::c_int,
        cycles_remain_o: *mut c_types::c_int,
    );
}
extern "C" {
    #[doc = " @brief Get the frequency limit of current configurations."]
    #[doc = "         SPI master working at this limit is OK, while above the limit, full duplex mode and DMA will not work,"]
    #[doc = "         and dummy bits will be aplied in the half duplex mode."]
    #[doc = ""]
    #[doc = " @param gpio_is_used True if using GPIO matrix, or False if native pins are used."]
    #[doc = " @param input_delay_ns Input delay from SCLK launch edge to MISO data valid."]
    #[doc = " @return Frequency limit of current configurations."]
    pub fn spi_get_freq_limit(gpio_is_used: bool, input_delay_ns: c_types::c_int)
        -> c_types::c_int;
}
#[doc = " Handle representing an SD SPI device"]
pub type sdspi_dev_handle_t = c_types::c_int;
#[doc = " Extra configuration for SD SPI device."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdspi_device_config_t {
    #[doc = "< SPI host to use, SPIx_HOST (see spi_types.h)."]
    pub host_id: spi_host_device_t,
    #[doc = "< GPIO number of CS signal"]
    pub gpio_cs: gpio_num_t,
    #[doc = "< GPIO number of card detect signal"]
    pub gpio_cd: gpio_num_t,
    #[doc = "< GPIO number of write protect signal"]
    pub gpio_wp: gpio_num_t,
    #[doc = "< GPIO number of interrupt line (input) for SDIO card."]
    pub gpio_int: gpio_num_t,
}
impl Default for sdspi_device_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize SD SPI driver"]
    #[doc = ""]
    #[doc = " @note This function is not thread safe"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - other error codes may be returned in future versions"]
    pub fn sdspi_host_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Attach and initialize an SD SPI device on the specific SPI bus"]
    #[doc = ""]
    #[doc = " @note This function is not thread safe"]
    #[doc = ""]
    #[doc = " @note Initialize the SPI bus by `spi_bus_initialize()` before calling this function."]
    #[doc = ""]
    #[doc = " @note The SDIO over sdspi needs an extra interrupt line. Call ``gpio_install_isr_service()`` before this function."]
    #[doc = ""]
    #[doc = " @param dev_config pointer to device configuration structure"]
    #[doc = " @param out_handle Output of the handle to the sdspi device."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if sdspi_host_init_device has invalid arguments"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - other errors from the underlying spi_master and gpio drivers"]
    pub fn sdspi_host_init_device(
        dev_config: *const sdspi_device_config_t,
        out_handle: *mut sdspi_dev_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Remove an SD SPI device"]
    #[doc = ""]
    #[doc = " @param handle Handle of the SD SPI device"]
    #[doc = " @return Always ESP_OK"]
    pub fn sdspi_host_remove_device(handle: sdspi_dev_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Send command to the card and get response"]
    #[doc = ""]
    #[doc = " This function returns when command is sent and response is received,"]
    #[doc = " or data is transferred, or timeout occurs."]
    #[doc = ""]
    #[doc = " @note This function is not thread safe w.r.t. init/deinit functions,"]
    #[doc = "       and bus width/clock speed configuration functions. Multiple tasks"]
    #[doc = "       can call sdspi_host_do_transaction as long as other sdspi_host_*"]
    #[doc = "       functions are not called."]
    #[doc = ""]
    #[doc = " @param handle    Handle of the sdspi device"]
    #[doc = " @param cmdinfo   pointer to structure describing command and data to transfer"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_TIMEOUT if response or data transfer has timed out"]
    #[doc = "      - ESP_ERR_INVALID_CRC if response or data transfer CRC check has failed"]
    #[doc = "      - ESP_ERR_INVALID_RESPONSE if the card has sent an invalid response"]
    pub fn sdspi_host_do_transaction(
        handle: sdspi_dev_handle_t,
        cmdinfo: *mut sdmmc_command_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set card clock frequency"]
    #[doc = ""]
    #[doc = " Currently only integer fractions of 40MHz clock can be used."]
    #[doc = " For High Speed cards, 40MHz can be used."]
    #[doc = " For Default Speed cards, 20MHz can be used."]
    #[doc = ""]
    #[doc = " @note This function is not thread safe"]
    #[doc = ""]
    #[doc = " @param host    Handle of the sdspi device"]
    #[doc = " @param freq_khz  card clock frequency, in kHz"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - other error codes may be returned in the future"]
    pub fn sdspi_host_set_card_clk(host: sdspi_dev_handle_t, freq_khz: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Release resources allocated using sdspi_host_init"]
    #[doc = ""]
    #[doc = " @note This function is not thread safe"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if sdspi_host_init function has not been called"]
    pub fn sdspi_host_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable SDIO interrupt."]
    #[doc = ""]
    #[doc = " @param handle    Handle of the sdspi device"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    pub fn sdspi_host_io_int_enable(handle: sdspi_dev_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Wait for SDIO interrupt until timeout."]
    #[doc = ""]
    #[doc = " @param handle    Handle of the sdspi device"]
    #[doc = " @param timeout_ticks Ticks to wait before timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    pub fn sdspi_host_io_int_wait(
        handle: sdspi_dev_handle_t,
        timeout_ticks: TickType_t,
    ) -> esp_err_t;
}
#[doc = " Extra configuration for SPI host."]
#[doc = ""]
#[doc = " @deprecated Use `sdspi_device_config_t` and corresponding `sdspi_host_init_device()` instead."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sdspi_slot_config_t {
    #[doc = "< GPIO number of CS signal"]
    pub gpio_cs: gpio_num_t,
    #[doc = "< GPIO number of card detect signal"]
    pub gpio_cd: gpio_num_t,
    #[doc = "< GPIO number of write protect signal"]
    pub gpio_wp: gpio_num_t,
    #[doc = "< GPIO number of interrupt line (input) for SDIO card."]
    pub gpio_int: gpio_num_t,
    #[doc = "< GPIO number of MISO signal."]
    pub gpio_miso: gpio_num_t,
    #[doc = "< GPIO number of MOSI signal."]
    pub gpio_mosi: gpio_num_t,
    #[doc = "< GPIO number of SCK signal."]
    pub gpio_sck: gpio_num_t,
    #[doc = "< DMA channel to be used by SPI driver (1 or 2)."]
    pub dma_channel: c_types::c_int,
}
impl Default for sdspi_slot_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize SD SPI driver for the specific SPI controller"]
    #[doc = ""]
    #[doc = " @note This function is not thread safe"]
    #[doc = ""]
    #[doc = " @note The SDIO over sdspi needs an extra interrupt line. Call ``gpio_install_isr_service()`` before this function."]
    #[doc = ""]
    #[doc = " @param slot         SPI controller to use (SPI2_HOST or SPI3_HOST)"]
    #[doc = " @param slot_config  pointer to slot configuration structure"]
    #[doc = ""]
    #[doc = " @deprecated Use `sdspi_host_init_device` instead."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if sdspi_init_slot has invalid arguments"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - other errors from the underlying spi_master and gpio drivers"]
    pub fn sdspi_host_init_slot(
        slot: c_types::c_int,
        slot_config: *const sdspi_slot_config_t,
    ) -> esp_err_t;
}
extern "C" {
    pub fn ff_memalloc(msize: c_types::c_uint) -> *mut c_types::c_void;
}
extern "C" {
    pub fn ff_memfree(arg1: *mut c_types::c_void);
}
pub type UINT = c_types::c_uint;
pub type BYTE = c_types::c_uchar;
pub type WORD = u16;
pub type WCHAR = u16;
pub type DWORD = u32;
pub type QWORD = u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct PARTITION {
    pub pd: BYTE,
    pub pt: BYTE,
}
extern "C" {
    pub static mut VolToPart: [PARTITION; 0usize];
}
pub type TCHAR = c_types::c_char;
pub type FSIZE_t = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FATFS {
    pub fs_type: BYTE,
    pub pdrv: BYTE,
    pub n_fats: BYTE,
    pub wflag: BYTE,
    pub fsi_flag: BYTE,
    pub id: WORD,
    pub n_rootdir: WORD,
    pub csize: WORD,
    pub ssize: WORD,
    pub sobj: SemaphoreHandle_t,
    pub last_clst: DWORD,
    pub free_clst: DWORD,
    pub n_fatent: DWORD,
    pub fsize: DWORD,
    pub volbase: DWORD,
    pub fatbase: DWORD,
    pub dirbase: DWORD,
    pub database: DWORD,
    pub winsect: DWORD,
    pub win: [BYTE; 4096usize],
}
impl Default for FATFS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FFOBJID {
    pub fs: *mut FATFS,
    pub id: WORD,
    pub attr: BYTE,
    pub stat: BYTE,
    pub sclust: DWORD,
    pub objsize: FSIZE_t,
}
impl Default for FFOBJID {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FIL {
    pub obj: FFOBJID,
    pub flag: BYTE,
    pub err: BYTE,
    pub fptr: FSIZE_t,
    pub clust: DWORD,
    pub sect: DWORD,
    pub dir_sect: DWORD,
    pub dir_ptr: *mut BYTE,
    pub buf: [BYTE; 4096usize],
}
impl Default for FIL {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FF_DIR {
    pub obj: FFOBJID,
    pub dptr: DWORD,
    pub clust: DWORD,
    pub sect: DWORD,
    pub dir: *mut BYTE,
    pub fn_: [BYTE; 12usize],
}
impl Default for FF_DIR {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FILINFO {
    pub fsize: FSIZE_t,
    pub fdate: WORD,
    pub ftime: WORD,
    pub fattrib: BYTE,
    pub fname: [TCHAR; 13usize],
}
pub const FRESULT_FR_OK: FRESULT = 0;
pub const FRESULT_FR_DISK_ERR: FRESULT = 1;
pub const FRESULT_FR_INT_ERR: FRESULT = 2;
pub const FRESULT_FR_NOT_READY: FRESULT = 3;
pub const FRESULT_FR_NO_FILE: FRESULT = 4;
pub const FRESULT_FR_NO_PATH: FRESULT = 5;
pub const FRESULT_FR_INVALID_NAME: FRESULT = 6;
pub const FRESULT_FR_DENIED: FRESULT = 7;
pub const FRESULT_FR_EXIST: FRESULT = 8;
pub const FRESULT_FR_INVALID_OBJECT: FRESULT = 9;
pub const FRESULT_FR_WRITE_PROTECTED: FRESULT = 10;
pub const FRESULT_FR_INVALID_DRIVE: FRESULT = 11;
pub const FRESULT_FR_NOT_ENABLED: FRESULT = 12;
pub const FRESULT_FR_NO_FILESYSTEM: FRESULT = 13;
pub const FRESULT_FR_MKFS_ABORTED: FRESULT = 14;
pub const FRESULT_FR_TIMEOUT: FRESULT = 15;
pub const FRESULT_FR_LOCKED: FRESULT = 16;
pub const FRESULT_FR_NOT_ENOUGH_CORE: FRESULT = 17;
pub const FRESULT_FR_TOO_MANY_OPEN_FILES: FRESULT = 18;
pub const FRESULT_FR_INVALID_PARAMETER: FRESULT = 19;
pub type FRESULT = c_types::c_uint;
extern "C" {
    pub fn f_open(fp: *mut FIL, path: *const TCHAR, mode: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_close(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_read(fp: *mut FIL, buff: *mut c_types::c_void, btr: UINT, br: *mut UINT) -> FRESULT;
}
extern "C" {
    pub fn f_write(fp: *mut FIL, buff: *const c_types::c_void, btw: UINT, bw: *mut UINT)
        -> FRESULT;
}
extern "C" {
    pub fn f_lseek(fp: *mut FIL, ofs: FSIZE_t) -> FRESULT;
}
extern "C" {
    pub fn f_truncate(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_sync(fp: *mut FIL) -> FRESULT;
}
extern "C" {
    pub fn f_opendir(dp: *mut FF_DIR, path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_closedir(dp: *mut FF_DIR) -> FRESULT;
}
extern "C" {
    pub fn f_readdir(dp: *mut FF_DIR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_findfirst(
        dp: *mut FF_DIR,
        fno: *mut FILINFO,
        path: *const TCHAR,
        pattern: *const TCHAR,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_findnext(dp: *mut FF_DIR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_mkdir(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_unlink(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_rename(path_old: *const TCHAR, path_new: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_stat(path: *const TCHAR, fno: *mut FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_chmod(path: *const TCHAR, attr: BYTE, mask: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_utime(path: *const TCHAR, fno: *const FILINFO) -> FRESULT;
}
extern "C" {
    pub fn f_chdir(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_chdrive(path: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_getcwd(buff: *mut TCHAR, len: UINT) -> FRESULT;
}
extern "C" {
    pub fn f_getfree(path: *const TCHAR, nclst: *mut DWORD, fatfs: *mut *mut FATFS) -> FRESULT;
}
extern "C" {
    pub fn f_getlabel(path: *const TCHAR, label: *mut TCHAR, vsn: *mut DWORD) -> FRESULT;
}
extern "C" {
    pub fn f_setlabel(label: *const TCHAR) -> FRESULT;
}
extern "C" {
    pub fn f_forward(
        fp: *mut FIL,
        func: ::core::option::Option<unsafe extern "C" fn(arg1: *const BYTE, arg2: UINT) -> UINT>,
        btf: UINT,
        bf: *mut UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_expand(fp: *mut FIL, fsz: FSIZE_t, opt: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_mount(fs: *mut FATFS, path: *const TCHAR, opt: BYTE) -> FRESULT;
}
extern "C" {
    pub fn f_mkfs(
        path: *const TCHAR,
        opt: BYTE,
        au: DWORD,
        work: *mut c_types::c_void,
        len: UINT,
    ) -> FRESULT;
}
extern "C" {
    pub fn f_fdisk(pdrv: BYTE, szt: *const DWORD, work: *mut c_types::c_void) -> FRESULT;
}
extern "C" {
    pub fn f_setcp(cp: WORD) -> FRESULT;
}
extern "C" {
    pub fn f_putc(c: TCHAR, fp: *mut FIL) -> c_types::c_int;
}
extern "C" {
    pub fn f_puts(str_: *const TCHAR, cp: *mut FIL) -> c_types::c_int;
}
extern "C" {
    pub fn f_printf(fp: *mut FIL, str_: *const TCHAR, ...) -> c_types::c_int;
}
extern "C" {
    pub fn f_gets(buff: *mut TCHAR, len: c_types::c_int, fp: *mut FIL) -> *mut TCHAR;
}
extern "C" {
    pub fn get_fattime() -> DWORD;
}
extern "C" {
    pub fn ff_cre_syncobj(vol: BYTE, sobj: *mut SemaphoreHandle_t) -> c_types::c_int;
}
extern "C" {
    pub fn ff_req_grant(sobj: SemaphoreHandle_t) -> c_types::c_int;
}
extern "C" {
    pub fn ff_rel_grant(sobj: SemaphoreHandle_t);
}
extern "C" {
    pub fn ff_del_syncobj(sobj: SemaphoreHandle_t) -> c_types::c_int;
}
#[doc = " @brief wear levelling handle"]
pub type wl_handle_t = i32;
extern "C" {
    #[doc = " @brief Mount WL for defined partition"]
    #[doc = ""]
    #[doc = " @param partition that will be used for access"]
    #[doc = " @param out_handle handle of the WL instance"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK, if the allocation was successfully;"]
    #[doc = "       - ESP_ERR_INVALID_ARG, if WL allocation was unsuccessful;"]
    #[doc = "       - ESP_ERR_NO_MEM, if there was no memory to allocate WL components;"]
    pub fn wl_mount(partition: *const esp_partition_t, out_handle: *mut wl_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unmount WL for defined partition"]
    #[doc = ""]
    #[doc = " @param handle WL partition handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK, if the operation completed successfully;"]
    #[doc = "       - or one of error codes from lower-level flash driver."]
    pub fn wl_unmount(handle: wl_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase part of the WL storage"]
    #[doc = ""]
    #[doc = " @param handle WL handle that are related to the partition"]
    #[doc = " @param start_addr Address where erase operation should start. Must be aligned"]
    #[doc = "                   to the result of function wl_sector_size(...)."]
    #[doc = " @param size Size of the range which should be erased, in bytes."]
    #[doc = "                   Must be divisible by result of function wl_sector_size(...).."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK, if the range was erased successfully;"]
    #[doc = "       - ESP_ERR_INVALID_ARG, if iterator or dst are NULL;"]
    #[doc = "       - ESP_ERR_INVALID_SIZE, if erase would go out of bounds of the partition;"]
    #[doc = "       - or one of error codes from lower-level flash driver."]
    pub fn wl_erase_range(handle: wl_handle_t, start_addr: size_t, size: size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to the WL storage"]
    #[doc = ""]
    #[doc = " Before writing data to flash, corresponding region of flash needs to be erased."]
    #[doc = " This can be done using wl_erase_range function."]
    #[doc = ""]
    #[doc = " @param handle WL handle that are related to the partition"]
    #[doc = " @param dest_addr Address where the data should be written, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param src Pointer to the source buffer.  Pointer must be non-NULL and"]
    #[doc = "            buffer must be at least 'size' bytes long."]
    #[doc = " @param size Size of data to be written, in bytes."]
    #[doc = ""]
    #[doc = " @note Prior to writing to WL storage, make sure it has been erased with"]
    #[doc = "       wl_erase_range call."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK, if data was written successfully;"]
    #[doc = "       - ESP_ERR_INVALID_ARG, if dst_offset exceeds partition size;"]
    #[doc = "       - ESP_ERR_INVALID_SIZE, if write would go out of bounds of the partition;"]
    #[doc = "       - or one of error codes from lower-level flash driver."]
    pub fn wl_write(
        handle: wl_handle_t,
        dest_addr: size_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read data from the WL storage"]
    #[doc = ""]
    #[doc = " @param handle WL module instance that was initialized before"]
    #[doc = " @param dest Pointer to the buffer where data should be stored."]
    #[doc = "            Pointer must be non-NULL and buffer must be at least 'size' bytes long."]
    #[doc = " @param src_addr Address of the data to be read, relative to the"]
    #[doc = "                   beginning of the partition."]
    #[doc = " @param size Size of data to be read, in bytes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "       - ESP_OK, if data was read successfully;"]
    #[doc = "       - ESP_ERR_INVALID_ARG, if src_offset exceeds partition size;"]
    #[doc = "       - ESP_ERR_INVALID_SIZE, if read would go out of bounds of the partition;"]
    #[doc = "       - or one of error codes from lower-level flash driver."]
    pub fn wl_read(
        handle: wl_handle_t,
        src_addr: size_t,
        dest: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get size of the WL storage"]
    #[doc = ""]
    #[doc = " @param handle WL module handle that was initialized before"]
    #[doc = " @return usable size, in bytes"]
    pub fn wl_size(handle: wl_handle_t) -> size_t;
}
extern "C" {
    #[doc = " @brief Get sector size of the WL instance"]
    #[doc = ""]
    #[doc = " @param handle WL module handle that was initialized before"]
    #[doc = " @return sector size, in bytes"]
    pub fn wl_sector_size(handle: wl_handle_t) -> size_t;
}
extern "C" {
    #[doc = " @brief Register FATFS with VFS component"]
    #[doc = ""]
    #[doc = " This function registers given FAT drive in VFS, at the specified base path."]
    #[doc = " If only one drive is used, fat_drive argument can be an empty string."]
    #[doc = " Refer to FATFS library documentation on how to specify FAT drive."]
    #[doc = " This function also allocates FATFS structure which should be used for f_mount"]
    #[doc = " call."]
    #[doc = ""]
    #[doc = " @note This function doesn't mount the drive into FATFS, it just connects"]
    #[doc = "       POSIX and C standard library IO function with FATFS. You need to mount"]
    #[doc = "       desired drive into FATFS separately."]
    #[doc = ""]
    #[doc = " @param base_path  path prefix where FATFS should be registered"]
    #[doc = " @param fat_drive  FATFS drive specification; if only one drive is used, can be an empty string"]
    #[doc = " @param max_files  maximum number of files which can be open at the same time"]
    #[doc = " @param[out] out_fs  pointer to FATFS structure which can be used for FATFS f_mount call is returned via this argument."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_register was already called"]
    #[doc = "      - ESP_ERR_NO_MEM if not enough memory or too many VFSes already registered"]
    pub fn esp_vfs_fat_register(
        base_path: *const c_types::c_char,
        fat_drive: *const c_types::c_char,
        max_files: size_t,
        out_fs: *mut *mut FATFS,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Un-register FATFS from VFS"]
    #[doc = ""]
    #[doc = " @note FATFS structure returned by esp_vfs_fat_register is destroyed after"]
    #[doc = "       this call. Make sure to call f_mount function to unmount it before"]
    #[doc = "       calling esp_vfs_fat_unregister_ctx."]
    #[doc = "       Difference between this function and the one above is that this one"]
    #[doc = "       will release the correct drive, while the one above will release"]
    #[doc = "       the last registered one"]
    #[doc = ""]
    #[doc = " @param base_path     path prefix where FATFS is registered. This is the same"]
    #[doc = "                      used when esp_vfs_fat_register was called"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if FATFS is not registered in VFS"]
    pub fn esp_vfs_fat_unregister_path(base_path: *const c_types::c_char) -> esp_err_t;
}
#[doc = " @brief Configuration arguments for esp_vfs_fat_sdmmc_mount and esp_vfs_fat_spiflash_mount functions"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_vfs_fat_mount_config_t {
    #[doc = " If FAT partition can not be mounted, and this parameter is true,"]
    #[doc = " create partition table and format the filesystem."]
    pub format_if_mount_failed: bool,
    #[doc = "< Max number of open files"]
    pub max_files: c_types::c_int,
    #[doc = " If format_if_mount_failed is set, and mount fails, format the card"]
    #[doc = " with given allocation unit size. Must be a power of 2, between sector"]
    #[doc = " size and 128 * sector size."]
    #[doc = " For SD cards, sector size is always 512 bytes. For wear_levelling,"]
    #[doc = " sector size is determined by CONFIG_WL_SECTOR_SIZE option."]
    #[doc = ""]
    #[doc = " Using larger allocation unit size will result in higher read/write"]
    #[doc = " performance and higher overhead when storing small files."]
    #[doc = ""]
    #[doc = " Setting this field to 0 will result in allocation unit set to the"]
    #[doc = " sector size."]
    pub allocation_unit_size: size_t,
}
#[doc = " @brief Configuration arguments for esp_vfs_fat_sdmmc_mount and esp_vfs_fat_spiflash_mount functions"]
pub type esp_vfs_fat_sdmmc_mount_config_t = esp_vfs_fat_mount_config_t;
extern "C" {
    #[doc = " @brief Convenience function to get FAT filesystem on SD card registered in VFS"]
    #[doc = ""]
    #[doc = " This is an all-in-one function which does the following:"]
    #[doc = " - initializes SDMMC driver or SPI driver with configuration in host_config"]
    #[doc = " - initializes SD card with configuration in slot_config"]
    #[doc = " - mounts FAT partition on SD card using FATFS library, with configuration in mount_config"]
    #[doc = " - registers FATFS library with VFS, with prefix given by base_prefix variable"]
    #[doc = ""]
    #[doc = " This function is intended to make example code more compact."]
    #[doc = " For real world applications, developers should implement the logic of"]
    #[doc = " probing SD card, locating and mounting partition, and registering FATFS in VFS,"]
    #[doc = " with proper error checking and handling of exceptional conditions."]
    #[doc = ""]
    #[doc = " @note Use this API to mount a card through SDSPI is deprecated. Please call"]
    #[doc = "       `esp_vfs_fat_sdspi_mount()` instead for that case."]
    #[doc = ""]
    #[doc = " @param base_path     path where partition should be registered (e.g. \"/sdcard\")"]
    #[doc = " @param host_config   Pointer to structure describing SDMMC host. When using"]
    #[doc = "                      SDMMC peripheral, this structure can be initialized using"]
    #[doc = "                      SDMMC_HOST_DEFAULT() macro. When using SPI peripheral,"]
    #[doc = "                      this structure can be initialized using SDSPI_HOST_DEFAULT()"]
    #[doc = "                      macro."]
    #[doc = " @param slot_config   Pointer to structure with slot configuration."]
    #[doc = "                      For SDMMC peripheral, pass a pointer to sdmmc_slot_config_t"]
    #[doc = "                      structure initialized using SDMMC_SLOT_CONFIG_DEFAULT."]
    #[doc = "                      (Deprecated) For SPI peripheral, pass a pointer to sdspi_slot_config_t"]
    #[doc = "                      structure initialized using SDSPI_SLOT_CONFIG_DEFAULT()."]
    #[doc = " @param mount_config  pointer to structure with extra parameters for mounting FATFS"]
    #[doc = " @param[out] out_card  if not NULL, pointer to the card information structure will be returned via this argument"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_sdmmc_mount was already called"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - ESP_FAIL if partition can not be mounted"]
    #[doc = "      - other error codes from SDMMC or SPI drivers, SDMMC protocol, or FATFS drivers"]
    pub fn esp_vfs_fat_sdmmc_mount(
        base_path: *const c_types::c_char,
        host_config: *const sdmmc_host_t,
        slot_config: *const c_types::c_void,
        mount_config: *const esp_vfs_fat_mount_config_t,
        out_card: *mut *mut sdmmc_card_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Convenience function to get FAT filesystem on SD card registered in VFS"]
    #[doc = ""]
    #[doc = " This is an all-in-one function which does the following:"]
    #[doc = " - initializes an SPI Master device based on the SPI Master driver with configuration in"]
    #[doc = "   slot_config, and attach it to an initialized SPI bus."]
    #[doc = " - initializes SD card with configuration in host_config_input"]
    #[doc = " - mounts FAT partition on SD card using FATFS library, with configuration in mount_config"]
    #[doc = " - registers FATFS library with VFS, with prefix given by base_prefix variable"]
    #[doc = ""]
    #[doc = " This function is intended to make example code more compact."]
    #[doc = " For real world applications, developers should implement the logic of"]
    #[doc = " probing SD card, locating and mounting partition, and registering FATFS in VFS,"]
    #[doc = " with proper error checking and handling of exceptional conditions."]
    #[doc = ""]
    #[doc = " @note This function try to attach the new SD SPI device to the bus specified in host_config."]
    #[doc = "       Make sure the SPI bus specified in `host_config->slot` have been initialized by"]
    #[doc = "       `spi_bus_initialize()` before."]
    #[doc = ""]
    #[doc = " @param base_path     path where partition should be registered (e.g. \"/sdcard\")"]
    #[doc = " @param host_config_input Pointer to structure describing SDMMC host. This structure can be"]
    #[doc = "                          initialized using SDSPI_HOST_DEFAULT() macro."]
    #[doc = " @param slot_config   Pointer to structure with slot configuration."]
    #[doc = "                      For SPI peripheral, pass a pointer to sdspi_device_config_t"]
    #[doc = "                      structure initialized using SDSPI_DEVICE_CONFIG_DEFAULT()."]
    #[doc = " @param mount_config  pointer to structure with extra parameters for mounting FATFS"]
    #[doc = " @param[out] out_card If not NULL, pointer to the card information structure will be returned via"]
    #[doc = "                      this argument. It is suggested to hold this handle and use it to unmount the card later if"]
    #[doc = "                      needed. Otherwise it's not suggested to use more than one card at the same time and unmount one"]
    #[doc = "                      of them in your application."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_sdmmc_mount was already called"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - ESP_FAIL if partition can not be mounted"]
    #[doc = "      - other error codes from SDMMC or SPI drivers, SDMMC protocol, or FATFS drivers"]
    pub fn esp_vfs_fat_sdspi_mount(
        base_path: *const c_types::c_char,
        host_config_input: *const sdmmc_host_t,
        slot_config: *const sdspi_device_config_t,
        mount_config: *const esp_vfs_fat_mount_config_t,
        out_card: *mut *mut sdmmc_card_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unmount FAT filesystem and release resources acquired using esp_vfs_fat_sdmmc_mount"]
    #[doc = ""]
    #[doc = " @deprecated Use `esp_vfs_fat_sdcard_unmount()` instead."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_sdmmc_mount hasn't been called"]
    pub fn esp_vfs_fat_sdmmc_unmount() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unmount an SD card from the FAT filesystem and release resources acquired using"]
    #[doc = "        `esp_vfs_fat_sdmmc_mount()` or `esp_vfs_fat_sdspi_mount()`"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if the card argument is unregistered"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_sdmmc_mount hasn't been called"]
    pub fn esp_vfs_fat_sdcard_unmount(
        base_path: *const c_types::c_char,
        card: *mut sdmmc_card_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Convenience function to initialize FAT filesystem in SPI flash and register it in VFS"]
    #[doc = ""]
    #[doc = " This is an all-in-one function which does the following:"]
    #[doc = ""]
    #[doc = " - finds the partition with defined partition_label. Partition label should be"]
    #[doc = "   configured in the partition table."]
    #[doc = " - initializes flash wear levelling library on top of the given partition"]
    #[doc = " - mounts FAT partition using FATFS library on top of flash wear levelling"]
    #[doc = "   library"]
    #[doc = " - registers FATFS library with VFS, with prefix given by base_prefix variable"]
    #[doc = ""]
    #[doc = " This function is intended to make example code more compact."]
    #[doc = ""]
    #[doc = " @param base_path        path where FATFS partition should be mounted (e.g. \"/spiflash\")"]
    #[doc = " @param partition_label  label of the partition which should be used"]
    #[doc = " @param mount_config     pointer to structure with extra parameters for mounting FATFS"]
    #[doc = " @param[out] wl_handle   wear levelling driver handle"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if the partition table does not contain FATFS partition with given label"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_spiflash_mount was already called"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - ESP_FAIL if partition can not be mounted"]
    #[doc = "      - other error codes from wear levelling library, SPI flash driver, or FATFS drivers"]
    pub fn esp_vfs_fat_spiflash_mount(
        base_path: *const c_types::c_char,
        partition_label: *const c_types::c_char,
        mount_config: *const esp_vfs_fat_mount_config_t,
        wl_handle: *mut wl_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unmount FAT filesystem and release resources acquired using esp_vfs_fat_spiflash_mount"]
    #[doc = ""]
    #[doc = " @param base_path  path where partition should be registered (e.g. \"/spiflash\")"]
    #[doc = " @param wl_handle  wear levelling driver handle returned by esp_vfs_fat_spiflash_mount"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_spiflash_mount hasn't been called"]
    pub fn esp_vfs_fat_spiflash_unmount(
        base_path: *const c_types::c_char,
        wl_handle: wl_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Convenience function to initialize read-only FAT filesystem and register it in VFS"]
    #[doc = ""]
    #[doc = " This is an all-in-one function which does the following:"]
    #[doc = ""]
    #[doc = " - finds the partition with defined partition_label. Partition label should be"]
    #[doc = "   configured in the partition table."]
    #[doc = " - mounts FAT partition using FATFS library"]
    #[doc = " - registers FATFS library with VFS, with prefix given by base_prefix variable"]
    #[doc = ""]
    #[doc = " @note Wear levelling is not used when FAT is mounted in read-only mode using this function."]
    #[doc = ""]
    #[doc = " @param base_path        path where FATFS partition should be mounted (e.g. \"/spiflash\")"]
    #[doc = " @param partition_label  label of the partition which should be used"]
    #[doc = " @param mount_config     pointer to structure with extra parameters for mounting FATFS"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if the partition table does not contain FATFS partition with given label"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_rawflash_mount was already called for the same partition"]
    #[doc = "      - ESP_ERR_NO_MEM if memory can not be allocated"]
    #[doc = "      - ESP_FAIL if partition can not be mounted"]
    #[doc = "      - other error codes from SPI flash driver, or FATFS drivers"]
    pub fn esp_vfs_fat_rawflash_mount(
        base_path: *const c_types::c_char,
        partition_label: *const c_types::c_char,
        mount_config: *const esp_vfs_fat_mount_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Unmount FAT filesystem and release resources acquired using esp_vfs_fat_rawflash_mount"]
    #[doc = ""]
    #[doc = " @param base_path  path where partition should be registered (e.g. \"/spiflash\")"]
    #[doc = " @param partition_label label of partition to be unmounted"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if esp_vfs_fat_spiflash_mount hasn't been called"]
    pub fn esp_vfs_fat_rawflash_unmount(
        base_path: *const c_types::c_char,
        partition_label: *const c_types::c_char,
    ) -> esp_err_t;
}
pub type DSTATUS = BYTE;
pub const DRESULT_RES_OK: DRESULT = 0;
pub const DRESULT_RES_ERROR: DRESULT = 1;
pub const DRESULT_RES_WRPRT: DRESULT = 2;
pub const DRESULT_RES_NOTRDY: DRESULT = 3;
pub const DRESULT_RES_PARERR: DRESULT = 4;
pub type DRESULT = c_types::c_uint;
extern "C" {
    pub fn ff_disk_initialize(pdrv: BYTE) -> DSTATUS;
}
extern "C" {
    pub fn ff_disk_status(pdrv: BYTE) -> DSTATUS;
}
extern "C" {
    pub fn ff_disk_read(pdrv: BYTE, buff: *mut BYTE, sector: DWORD, count: UINT) -> DRESULT;
}
extern "C" {
    pub fn ff_disk_write(pdrv: BYTE, buff: *const BYTE, sector: DWORD, count: UINT) -> DRESULT;
}
extern "C" {
    pub fn ff_disk_ioctl(pdrv: BYTE, cmd: BYTE, buff: *mut c_types::c_void) -> DRESULT;
}
#[doc = " Structure of pointers to disk IO driver functions."]
#[doc = ""]
#[doc = " See FatFs documentation for details about these functions"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ff_diskio_impl_t {
    #[doc = "< disk initialization function"]
    pub init: ::core::option::Option<unsafe extern "C" fn(pdrv: c_types::c_uchar) -> DSTATUS>,
    #[doc = "< disk status check function"]
    pub status: ::core::option::Option<unsafe extern "C" fn(pdrv: c_types::c_uchar) -> DSTATUS>,
    #[doc = "< sector read function"]
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            pdrv: c_types::c_uchar,
            buff: *mut c_types::c_uchar,
            sector: u32,
            count: c_types::c_uint,
        ) -> DRESULT,
    >,
    #[doc = "< sector write function"]
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            pdrv: c_types::c_uchar,
            buff: *const c_types::c_uchar,
            sector: u32,
            count: c_types::c_uint,
        ) -> DRESULT,
    >,
    #[doc = "< function to get info about disk and do some misc operations"]
    pub ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            pdrv: c_types::c_uchar,
            cmd: c_types::c_uchar,
            buff: *mut c_types::c_void,
        ) -> DRESULT,
    >,
}
extern "C" {
    #[doc = " Register or unregister diskio driver for given drive number."]
    #[doc = ""]
    #[doc = " When FATFS library calls one of disk_xxx functions for driver number pdrv,"]
    #[doc = " corresponding function in discio_impl for given pdrv will be called."]
    #[doc = ""]
    #[doc = " @param pdrv drive number"]
    #[doc = " @param discio_impl   pointer to ff_diskio_impl_t structure with diskio functions"]
    #[doc = "                      or NULL to unregister and free previously registered drive"]
    pub fn ff_diskio_register(pdrv: BYTE, discio_impl: *const ff_diskio_impl_t);
}
extern "C" {
    #[doc = " Get next available drive number"]
    #[doc = ""]
    #[doc = " @param   out_pdrv            pointer to the byte to set if successful"]
    #[doc = ""]
    #[doc = " @return  ESP_OK              on success"]
    #[doc = "          ESP_ERR_NOT_FOUND   if all drives are attached"]
    pub fn ff_diskio_get_drive(out_pdrv: *mut BYTE) -> esp_err_t;
}
extern "C" {
    #[doc = " Register spi flash partition"]
    #[doc = ""]
    #[doc = " @param pdrv  drive number"]
    #[doc = " @param part_handle  pointer to raw flash partition."]
    pub fn ff_diskio_register_raw_partition(
        pdrv: c_types::c_uchar,
        part_handle: *const esp_partition_t,
    ) -> esp_err_t;
}
extern "C" {
    pub fn ff_diskio_get_pdrv_raw(part_handle: *const esp_partition_t) -> c_types::c_uchar;
}
extern "C" {
    #[doc = " Probe and initialize SD/MMC card using given host"]
    #[doc = ""]
    #[doc = " @note Only SD cards (SDSC and SDHC/SDXC) are supported now."]
    #[doc = "       Support for MMC/eMMC cards will be added later."]
    #[doc = ""]
    #[doc = " @param host  pointer to structure defining host controller"]
    #[doc = " @param out_card  pointer to structure which will receive information"]
    #[doc = "                  about the card when the function completes"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_card_init(host: *const sdmmc_host_t, out_card: *mut sdmmc_card_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Print information about the card to a stream"]
    #[doc = " @param stream  stream obtained using fopen or fdopen"]
    #[doc = " @param card  card information structure initialized using sdmmc_card_init"]
    pub fn sdmmc_card_print_info(stream: *mut FILE, card: *const sdmmc_card_t);
}
extern "C" {
    #[doc = " Get status of SD/MMC card"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_get_status(card: *mut sdmmc_card_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Write given number of sectors to SD/MMC card"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param src   pointer to data buffer to read data from; data size must be"]
    #[doc = "              equal to sector_count * card->csd.sector_size"]
    #[doc = " @param start_sector  sector where to start writing"]
    #[doc = " @param sector_count  number of sectors to write"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_write_sectors(
        card: *mut sdmmc_card_t,
        src: *const c_types::c_void,
        start_sector: size_t,
        sector_count: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read given number of sectors from the SD/MMC card"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param dst   pointer to data buffer to write into; buffer size must be"]
    #[doc = "              at least sector_count * card->csd.sector_size"]
    #[doc = " @param start_sector  sector where to start reading"]
    #[doc = " @param sector_count  number of sectors to read"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_read_sectors(
        card: *mut sdmmc_card_t,
        dst: *mut c_types::c_void,
        start_sector: size_t,
        sector_count: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read one byte from an SDIO card using IO_RW_DIRECT (CMD52)"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param reg  byte address within IO function"]
    #[doc = " @param[out] out_byte  output, receives the value read from the card"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_read_byte(
        card: *mut sdmmc_card_t,
        function: u32,
        reg: u32,
        out_byte: *mut u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Write one byte to an SDIO card using IO_RW_DIRECT (CMD52)"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param reg  byte address within IO function"]
    #[doc = " @param in_byte  value to be written"]
    #[doc = " @param[out] out_byte  if not NULL, receives new byte value read"]
    #[doc = "                       from the card (read-after-write)."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_write_byte(
        card: *mut sdmmc_card_t,
        function: u32,
        reg: u32,
        in_byte: u8,
        out_byte: *mut u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read multiple bytes from an SDIO card using IO_RW_EXTENDED (CMD53)"]
    #[doc = ""]
    #[doc = " This function performs read operation using CMD53 in byte mode."]
    #[doc = " For block mode, see sdmmc_io_read_blocks."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param addr  byte address within IO function where reading starts"]
    #[doc = " @param dst  buffer which receives the data read from card"]
    #[doc = " @param size  number of bytes to read"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_SIZE if size exceeds 512 bytes"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_read_bytes(
        card: *mut sdmmc_card_t,
        function: u32,
        addr: u32,
        dst: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Write multiple bytes to an SDIO card using IO_RW_EXTENDED (CMD53)"]
    #[doc = ""]
    #[doc = " This function performs write operation using CMD53 in byte mode."]
    #[doc = " For block mode, see sdmmc_io_write_blocks."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param addr  byte address within IO function where writing starts"]
    #[doc = " @param src  data to be written"]
    #[doc = " @param size  number of bytes to write"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_SIZE if size exceeds 512 bytes"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_write_bytes(
        card: *mut sdmmc_card_t,
        function: u32,
        addr: u32,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read blocks of data from an SDIO card using IO_RW_EXTENDED (CMD53)"]
    #[doc = ""]
    #[doc = " This function performs read operation using CMD53 in block mode."]
    #[doc = " For byte mode, see sdmmc_io_read_bytes."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param addr  byte address within IO function where writing starts"]
    #[doc = " @param dst  buffer which receives the data read from card"]
    #[doc = " @param size  number of bytes to read, must be divisible by the card block"]
    #[doc = "              size."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_SIZE if size is not divisible by 512 bytes"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_read_blocks(
        card: *mut sdmmc_card_t,
        function: u32,
        addr: u32,
        dst: *mut c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Write blocks of data to an SDIO card using IO_RW_EXTENDED (CMD53)"]
    #[doc = ""]
    #[doc = " This function performs write operation using CMD53 in block mode."]
    #[doc = " For byte mode, see sdmmc_io_write_bytes."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param function  IO function number"]
    #[doc = " @param addr  byte address within IO function where writing starts"]
    #[doc = " @param src  data to be written"]
    #[doc = " @param size  number of bytes to read, must be divisible by the card block"]
    #[doc = "              size."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_SIZE if size is not divisible by 512 bytes"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn sdmmc_io_write_blocks(
        card: *mut sdmmc_card_t,
        function: u32,
        addr: u32,
        src: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Enable SDIO interrupt in the SDMMC host"]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the host controller does not support"]
    #[doc = "        IO interrupts"]
    pub fn sdmmc_io_enable_int(card: *mut sdmmc_card_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Block until an SDIO interrupt is received"]
    #[doc = ""]
    #[doc = " Slave uses D1 line to signal interrupt condition to the host."]
    #[doc = " This function can be used to wait for the interrupt."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param timeout_ticks  time to wait for the interrupt, in RTOS ticks"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if the interrupt is received"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED if the host controller does not support"]
    #[doc = "        IO interrupts"]
    #[doc = "      - ESP_ERR_TIMEOUT if the interrupt does not happen in timeout_ticks"]
    pub fn sdmmc_io_wait_int(card: *mut sdmmc_card_t, timeout_ticks: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Get the data of CIS region of an SDIO card."]
    #[doc = ""]
    #[doc = " You may provide a buffer not sufficient to store all the CIS data. In this"]
    #[doc = " case, this function stores as much data into your buffer as possible. Also,"]
    #[doc = " this function will try to get and return the size required for you."]
    #[doc = ""]
    #[doc = " @param card  pointer to card information structure previously initialized"]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param out_buffer Output buffer of the CIS data"]
    #[doc = " @param buffer_size Size of the buffer."]
    #[doc = " @param inout_cis_size Mandatory, pointer to a size, input and output."]
    #[doc = "              - input: Limitation of maximum searching range, should be 0 or larger than"]
    #[doc = "                      buffer_size. The function searches for CIS_CODE_END until this range. Set to"]
    #[doc = "                      0 to search infinitely."]
    #[doc = "              - output: The size required to store all the CIS data, if CIS_CODE_END is found."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: on success"]
    #[doc = "      - ESP_ERR_INVALID_RESPONSE: if the card does not (correctly) support CIS."]
    #[doc = "      - ESP_ERR_INVALID_SIZE: CIS_CODE_END found, but buffer_size is less than"]
    #[doc = "              required size, which is stored in the inout_cis_size then."]
    #[doc = "      - ESP_ERR_NOT_FOUND: if the CIS_CODE_END not found. Increase input value of"]
    #[doc = "              inout_cis_size or set it to 0, if you still want to search for the end;"]
    #[doc = "              output value of inout_cis_size is invalid in this case."]
    #[doc = "      - and other error code return from sdmmc_io_read_bytes"]
    pub fn sdmmc_io_get_cis_data(
        card: *mut sdmmc_card_t,
        out_buffer: *mut u8,
        buffer_size: size_t,
        inout_cis_size: *mut size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Parse and print the CIS information of an SDIO card."]
    #[doc = ""]
    #[doc = " @note Not all the CIS codes and all kinds of tuples are supported. If you"]
    #[doc = " see some unresolved code, you can add the parsing of these code in"]
    #[doc = " sdmmc_io.c and contribute to the IDF through the Github repository."]
    #[doc = ""]
    #[doc = "              using sdmmc_card_init"]
    #[doc = " @param buffer Buffer to parse"]
    #[doc = " @param buffer_size Size of the buffer."]
    #[doc = " @param fp File pointer to print to, set to NULL to print to stdout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: on success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: if the value from the card is not supported to be parsed."]
    #[doc = "      - ESP_ERR_INVALID_SIZE: if the CIS size fields are not correct."]
    pub fn sdmmc_io_print_cis_info(
        buffer: *mut u8,
        buffer_size: size_t,
        fp: *mut FILE,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Register SD/MMC diskio driver"]
    #[doc = ""]
    #[doc = " @param pdrv  drive number"]
    #[doc = " @param card  pointer to sdmmc_card_t structure describing a card; card should be initialized before calling f_mount."]
    pub fn ff_diskio_register_sdmmc(pdrv: c_types::c_uchar, card: *mut sdmmc_card_t);
}
extern "C" {
    #[doc = " @brief Get the driver number corresponding to a card"]
    #[doc = ""]
    #[doc = " @param card The card to get its driver"]
    #[doc = " @return Driver number to the card"]
    pub fn ff_diskio_get_pdrv_card(card: *const sdmmc_card_t) -> BYTE;
}
extern "C" {
    #[doc = " Register spi flash partition"]
    #[doc = ""]
    #[doc = " @param pdrv  drive number"]
    #[doc = " @param flash_handle  handle of the wear levelling partition."]
    pub fn ff_diskio_register_wl_partition(
        pdrv: c_types::c_uchar,
        flash_handle: wl_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    pub fn ff_diskio_get_pdrv_wl(flash_handle: wl_handle_t) -> c_types::c_uchar;
}
extern "C" {
    pub fn ff_diskio_clear_pdrv_wl(flash_handle: wl_handle_t);
}
#[doc = " No error, everything OK."]
pub const err_enum_t_ERR_OK: err_enum_t = 0;
#[doc = " Out of memory error."]
pub const err_enum_t_ERR_MEM: err_enum_t = -1;
#[doc = " Buffer error."]
pub const err_enum_t_ERR_BUF: err_enum_t = -2;
#[doc = " Timeout."]
pub const err_enum_t_ERR_TIMEOUT: err_enum_t = -3;
#[doc = " Routing problem."]
pub const err_enum_t_ERR_RTE: err_enum_t = -4;
#[doc = " Operation in progress"]
pub const err_enum_t_ERR_INPROGRESS: err_enum_t = -5;
#[doc = " Illegal value."]
pub const err_enum_t_ERR_VAL: err_enum_t = -6;
#[doc = " Operation would block."]
pub const err_enum_t_ERR_WOULDBLOCK: err_enum_t = -7;
#[doc = " Address in use."]
pub const err_enum_t_ERR_USE: err_enum_t = -8;
#[doc = " Already connecting."]
pub const err_enum_t_ERR_ALREADY: err_enum_t = -9;
#[doc = " Conn already established."]
pub const err_enum_t_ERR_ISCONN: err_enum_t = -10;
#[doc = " Not connected."]
pub const err_enum_t_ERR_CONN: err_enum_t = -11;
#[doc = " Low-level netif error"]
pub const err_enum_t_ERR_IF: err_enum_t = -12;
#[doc = " Connection aborted."]
pub const err_enum_t_ERR_ABRT: err_enum_t = -13;
#[doc = " Connection reset."]
pub const err_enum_t_ERR_RST: err_enum_t = -14;
#[doc = " Connection closed."]
pub const err_enum_t_ERR_CLSD: err_enum_t = -15;
#[doc = " Illegal argument."]
pub const err_enum_t_ERR_ARG: err_enum_t = -16;
#[doc = " Definitions for error constants."]
pub type err_enum_t = c_types::c_int;
pub type err_t = s8_t;
extern "C" {
    pub fn err_to_errno(err: err_t) -> c_types::c_int;
}
#[doc = " Ethernet"]
pub const lwip_iana_hwtype_LWIP_IANA_HWTYPE_ETHERNET: lwip_iana_hwtype = 1;
#[doc = " @ingroup iana"]
#[doc = " Hardware types"]
pub type lwip_iana_hwtype = c_types::c_uint;
#[doc = " SMTP"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SMTP: lwip_iana_port_number = 25;
#[doc = " DHCP server"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_DHCP_SERVER: lwip_iana_port_number = 67;
#[doc = " DHCP client"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_DHCP_CLIENT: lwip_iana_port_number = 68;
#[doc = " TFTP"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_TFTP: lwip_iana_port_number = 69;
#[doc = " HTTP"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_HTTP: lwip_iana_port_number = 80;
#[doc = " SNTP"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SNTP: lwip_iana_port_number = 123;
#[doc = " NETBIOS"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_NETBIOS: lwip_iana_port_number = 137;
#[doc = " SNMP"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SNMP: lwip_iana_port_number = 161;
#[doc = " SNMP traps"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SNMP_TRAP: lwip_iana_port_number = 162;
#[doc = " HTTPS"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_HTTPS: lwip_iana_port_number = 443;
#[doc = " SMTPS"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SMTPS: lwip_iana_port_number = 465;
#[doc = " MQTT"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_MQTT: lwip_iana_port_number = 1883;
#[doc = " MDNS"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_MDNS: lwip_iana_port_number = 5353;
#[doc = " Secure MQTT"]
pub const lwip_iana_port_number_LWIP_IANA_PORT_SECURE_MQTT: lwip_iana_port_number = 8883;
#[doc = " @ingroup iana"]
#[doc = " Port numbers"]
#[doc = " https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt"]
pub type lwip_iana_port_number = c_types::c_uint;
extern "C" {
    pub fn sntp_setoperatingmode(operating_mode: u8_t);
}
extern "C" {
    pub fn sntp_getoperatingmode() -> u8_t;
}
extern "C" {
    pub fn sntp_init();
}
extern "C" {
    pub fn sntp_stop();
}
extern "C" {
    pub fn sntp_enabled() -> u8_t;
}
extern "C" {
    pub fn sntp_setserver(idx: u8_t, addr: *const ip_addr_t);
}
extern "C" {
    pub fn sntp_getserver(idx: u8_t) -> *const ip_addr_t;
}
extern "C" {
    pub fn sntp_getreachability(idx: u8_t) -> u8_t;
}
extern "C" {
    pub fn sntp_setservername(idx: u8_t, server: *const c_types::c_char);
}
extern "C" {
    pub fn sntp_getservername(idx: u8_t) -> *const c_types::c_char;
}
#[doc = "< Update system time immediately when receiving a response from the SNTP server."]
pub const sntp_sync_mode_t_SNTP_SYNC_MODE_IMMED: sntp_sync_mode_t = 0;
#[doc = "< Smooth time updating. Time error is gradually reduced using adjtime function. If the difference between SNTP response time and system time is large (more than 35 minutes) then update immediately."]
pub const sntp_sync_mode_t_SNTP_SYNC_MODE_SMOOTH: sntp_sync_mode_t = 1;
#[doc = " SNTP time update mode"]
pub type sntp_sync_mode_t = c_types::c_uint;
pub const sntp_sync_status_t_SNTP_SYNC_STATUS_RESET: sntp_sync_status_t = 0;
pub const sntp_sync_status_t_SNTP_SYNC_STATUS_COMPLETED: sntp_sync_status_t = 1;
pub const sntp_sync_status_t_SNTP_SYNC_STATUS_IN_PROGRESS: sntp_sync_status_t = 2;
#[doc = " SNTP sync status"]
pub type sntp_sync_status_t = c_types::c_uint;
#[doc = " @brief SNTP callback function for notifying about time sync event"]
#[doc = ""]
#[doc = " @param tv Time received from SNTP server."]
pub type sntp_sync_time_cb_t = ::core::option::Option<unsafe extern "C" fn(tv: *mut timeval)>;
extern "C" {
    #[doc = " @brief This function updates the system time."]
    #[doc = ""]
    #[doc = " This is a weak-linked function. It is possible to replace all SNTP update functionality"]
    #[doc = " by placing a sntp_sync_time() function in the app firmware source."]
    #[doc = " If the default implementation is used, calling sntp_set_sync_mode() allows"]
    #[doc = " the time synchronization mode to be changed to instant or smooth."]
    #[doc = " If a callback function is registered via sntp_set_time_sync_notification_cb(),"]
    #[doc = " it will be called following time synchronization."]
    #[doc = ""]
    #[doc = " @param tv Time received from SNTP server."]
    pub fn sntp_sync_time(tv: *mut timeval);
}
extern "C" {
    #[doc = " @brief Set the sync mode"]
    #[doc = ""]
    #[doc = " Allowable two mode: SNTP_SYNC_MODE_IMMED and SNTP_SYNC_MODE_SMOOTH."]
    #[doc = " @param sync_mode Sync mode."]
    pub fn sntp_set_sync_mode(sync_mode: sntp_sync_mode_t);
}
extern "C" {
    #[doc = " @brief Get set sync mode"]
    #[doc = ""]
    #[doc = " @return  SNTP_SYNC_MODE_IMMED: Update time immediately."]
    #[doc = "          SNTP_SYNC_MODE_SMOOTH: Smooth time updating."]
    pub fn sntp_get_sync_mode() -> sntp_sync_mode_t;
}
extern "C" {
    #[doc = " @brief Get status of time sync"]
    #[doc = ""]
    #[doc = " After the update is completed, the status will be returned as SNTP_SYNC_STATUS_COMPLETED."]
    #[doc = " After that, the status will be reset to SNTP_SYNC_STATUS_RESET."]
    #[doc = " If the update operation is not completed yet, the status will be SNTP_SYNC_STATUS_RESET."]
    #[doc = " If a smooth mode was chosen and the synchronization is still continuing (adjtime works), then it will be SNTP_SYNC_STATUS_IN_PROGRESS."]
    #[doc = ""]
    #[doc = " @return  SNTP_SYNC_STATUS_RESET: Reset status."]
    #[doc = "          SNTP_SYNC_STATUS_COMPLETED: Time is synchronized."]
    #[doc = "          SNTP_SYNC_STATUS_IN_PROGRESS: Smooth time sync in progress."]
    pub fn sntp_get_sync_status() -> sntp_sync_status_t;
}
extern "C" {
    #[doc = " @brief Set status of time sync"]
    #[doc = ""]
    #[doc = " @param sync_status status of time sync (see sntp_sync_status_t)"]
    pub fn sntp_set_sync_status(sync_status: sntp_sync_status_t);
}
extern "C" {
    #[doc = " @brief Set a callback function for time synchronization notification"]
    #[doc = ""]
    #[doc = " @param callback a callback function"]
    pub fn sntp_set_time_sync_notification_cb(callback: sntp_sync_time_cb_t);
}
extern "C" {
    #[doc = " @brief Set the sync interval of SNTP operation"]
    #[doc = ""]
    #[doc = " Note: SNTPv4 RFC 4330 enforces a minimum sync interval of 15 seconds."]
    #[doc = " This sync interval will be used in the next attempt update time throught SNTP."]
    #[doc = " To apply the new sync interval call the sntp_restart() function,"]
    #[doc = " otherwise, it will be applied after the last interval expired."]
    #[doc = ""]
    #[doc = " @param interval_ms   The sync interval in ms. It cannot be lower than 15 seconds, otherwise 15 seconds will be set."]
    pub fn sntp_set_sync_interval(interval_ms: u32);
}
extern "C" {
    #[doc = " @brief Restart SNTP"]
    #[doc = ""]
    #[doc = " @return True  - Restart"]
    #[doc = "         False - SNTP was not initialized yet"]
    pub fn sntp_restart() -> bool;
}
#[doc = " @brief Type of \"ping\" session handle"]
pub type esp_ping_handle_t = *mut c_types::c_void;
#[doc = " @brief Type of \"ping\" callback functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_ping_callbacks_t {
    #[doc = " @brief arguments for callback functions"]
    #[doc = ""]
    pub cb_args: *mut c_types::c_void,
    #[doc = " @brief Invoked by internal ping thread when received ICMP echo reply packet"]
    #[doc = ""]
    pub on_ping_success: ::core::option::Option<
        unsafe extern "C" fn(hdl: esp_ping_handle_t, args: *mut c_types::c_void),
    >,
    #[doc = " @brief Invoked by internal ping thread when receive ICMP echo reply packet timeout"]
    #[doc = ""]
    pub on_ping_timeout: ::core::option::Option<
        unsafe extern "C" fn(hdl: esp_ping_handle_t, args: *mut c_types::c_void),
    >,
    #[doc = " @brief Invoked by internal ping thread when a ping session is finished"]
    #[doc = ""]
    pub on_ping_end: ::core::option::Option<
        unsafe extern "C" fn(hdl: esp_ping_handle_t, args: *mut c_types::c_void),
    >,
}
impl Default for esp_ping_callbacks_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Type of \"ping\" configuration"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct esp_ping_config_t {
    #[doc = "< A \"ping\" session contains count procedures"]
    pub count: u32,
    #[doc = "< Milliseconds between each ping procedure"]
    pub interval_ms: u32,
    #[doc = "< Timeout value (in milliseconds) of each ping procedure"]
    pub timeout_ms: u32,
    #[doc = "< Size of the data next to ICMP packet header"]
    pub data_size: u32,
    #[doc = "< Type of Service, a field specified in the IP header"]
    pub tos: u8,
    #[doc = "< Target IP address, either IPv4 or IPv6"]
    pub target_addr: ip_addr_t,
    #[doc = "< Stack size of internal ping task"]
    pub task_stack_size: u32,
    #[doc = "< Priority of internal ping task"]
    pub task_prio: u32,
    #[doc = "< Netif index, interface=0 means NETIF_NO_INDEX"]
    pub interface: u32,
}
impl Default for esp_ping_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< Sequence number of a ping procedure"]
pub const esp_ping_profile_t_ESP_PING_PROF_SEQNO: esp_ping_profile_t = 0;
#[doc = "< Time to live of a ping procedure"]
pub const esp_ping_profile_t_ESP_PING_PROF_TTL: esp_ping_profile_t = 1;
#[doc = "< Number of request packets sent out"]
pub const esp_ping_profile_t_ESP_PING_PROF_REQUEST: esp_ping_profile_t = 2;
#[doc = "< Number of reply packets received"]
pub const esp_ping_profile_t_ESP_PING_PROF_REPLY: esp_ping_profile_t = 3;
#[doc = "< IP address of replied target"]
pub const esp_ping_profile_t_ESP_PING_PROF_IPADDR: esp_ping_profile_t = 4;
#[doc = "< Size of received packet"]
pub const esp_ping_profile_t_ESP_PING_PROF_SIZE: esp_ping_profile_t = 5;
#[doc = "< Elapsed time between request and reply packet"]
pub const esp_ping_profile_t_ESP_PING_PROF_TIMEGAP: esp_ping_profile_t = 6;
#[doc = "< Elapsed time of the whole ping session"]
pub const esp_ping_profile_t_ESP_PING_PROF_DURATION: esp_ping_profile_t = 7;
#[doc = " @brief Profile of ping session"]
pub type esp_ping_profile_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief Create a ping session"]
    #[doc = ""]
    #[doc = " @param config ping configuration"]
    #[doc = " @param cbs a bunch of callback functions invoked by internal ping task"]
    #[doc = " @param hdl_out handle of ping session"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameters (e.g. configuration is null, etc)"]
    #[doc = "      - ESP_ERR_NO_MEM: out of memory"]
    #[doc = "      - ESP_FAIL: other internal error (e.g. socket error)"]
    #[doc = "      - ESP_OK: create ping session successfully, user can take the ping handle to do follow-on jobs"]
    pub fn esp_ping_new_session(
        config: *const esp_ping_config_t,
        cbs: *const esp_ping_callbacks_t,
        hdl_out: *mut esp_ping_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete a ping session"]
    #[doc = ""]
    #[doc = " @param hdl handle of ping session"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameters (e.g. ping handle is null, etc)"]
    #[doc = "      - ESP_OK: delete ping session successfully"]
    pub fn esp_ping_delete_session(hdl: esp_ping_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start the ping session"]
    #[doc = ""]
    #[doc = " @param hdl handle of ping session"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameters (e.g. ping handle is null, etc)"]
    #[doc = "      - ESP_OK: start ping session successfully"]
    pub fn esp_ping_start(hdl: esp_ping_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stop the ping session"]
    #[doc = ""]
    #[doc = " @param hdl handle of ping session"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameters (e.g. ping handle is null, etc)"]
    #[doc = "      - ESP_OK: stop ping session successfully"]
    pub fn esp_ping_stop(hdl: esp_ping_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get runtime profile of ping session"]
    #[doc = ""]
    #[doc = " @param hdl handle of ping session"]
    #[doc = " @param profile type of profile"]
    #[doc = " @param data profile data"]
    #[doc = " @param size profile data size"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG: invalid parameters (e.g. ping handle is null, etc)"]
    #[doc = "      - ESP_ERR_INVALID_SIZE: the actual profile data size doesn't match the \"size\" parameter"]
    #[doc = "      - ESP_OK: get profile successfully"]
    pub fn esp_ping_get_profile(
        hdl: esp_ping_handle_t,
        profile: esp_ping_profile_t,
        data: *mut c_types::c_void,
        size: u32,
    ) -> esp_err_t;
}
#[doc = " Includes spare room for transport layer header, e.g. UDP header."]
#[doc = " Use this if you intend to pass the pbuf to functions like udp_send()."]
pub const pbuf_layer_PBUF_TRANSPORT: pbuf_layer = 74;
#[doc = " Includes spare room for IP header."]
#[doc = " Use this if you intend to pass the pbuf to functions like raw_send()."]
pub const pbuf_layer_PBUF_IP: pbuf_layer = 54;
#[doc = " Includes spare room for link layer header (ethernet header)."]
#[doc = " Use this if you intend to pass the pbuf to functions like ethernet_output()."]
#[doc = " @see PBUF_LINK_HLEN"]
pub const pbuf_layer_PBUF_LINK: pbuf_layer = 14;
#[doc = " Includes spare room for additional encapsulation header before ethernet"]
#[doc = " headers (e.g. 802.11)."]
#[doc = " Use this if you intend to pass the pbuf to functions like netif->linkoutput()."]
#[doc = " @see PBUF_LINK_ENCAPSULATION_HLEN"]
pub const pbuf_layer_PBUF_RAW_TX: pbuf_layer = 0;
#[doc = " Use this for input packets in a netif driver when calling netif->input()"]
#[doc = " in the most common case - ethernet-layer netif driver."]
pub const pbuf_layer_PBUF_RAW: pbuf_layer = 0;
#[doc = " @ingroup pbuf"]
#[doc = " Enumeration of pbuf layers"]
pub type pbuf_layer = c_types::c_uint;
#[doc = " pbuf data is stored in RAM, used for TX mostly, struct pbuf and its payload"]
#[doc = "are allocated in one piece of contiguous memory (so the first payload byte"]
#[doc = "can be calculated from struct pbuf)."]
#[doc = "pbuf_alloc() allocates PBUF_RAM pbufs as unchained pbufs (although that might"]
#[doc = "change in future versions)."]
#[doc = "This should be used for all OUTGOING packets (TX)."]
pub const pbuf_type_PBUF_RAM: pbuf_type = 640;
#[doc = " pbuf data is stored in ROM, i.e. struct pbuf and its payload are located in"]
#[doc = "totally different memory areas. Since it points to ROM, payload does not"]
#[doc = "have to be copied when queued for transmission."]
pub const pbuf_type_PBUF_ROM: pbuf_type = 1;
#[doc = " pbuf comes from the pbuf pool. Much like PBUF_ROM but payload might change"]
#[doc = "so it has to be duplicated when queued before transmitting, depending on"]
#[doc = "who has a 'ref' to it."]
pub const pbuf_type_PBUF_REF: pbuf_type = 65;
#[doc = " pbuf payload refers to RAM. This one comes from a pool and should be used"]
#[doc = "for RX. Payload can be chained (scatter-gather RX) but like PBUF_RAM, struct"]
#[doc = "pbuf and its payload are allocated in one piece of contiguous memory (so"]
#[doc = "the first payload byte can be calculated from struct pbuf)."]
#[doc = "Don't use this for TX, if the pool becomes empty e.g. because of TCP queuing,"]
#[doc = "you are unable to receive TCP acks!"]
pub const pbuf_type_PBUF_POOL: pbuf_type = 386;
#[doc = " @ingroup pbuf"]
#[doc = " Enumeration of pbuf types"]
pub type pbuf_type = c_types::c_uint;
#[doc = " Main packet buffer struct"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pbuf {
    #[doc = " next pbuf in singly linked pbuf chain"]
    pub next: *mut pbuf,
    #[doc = " pointer to the actual data in the buffer"]
    pub payload: *mut c_types::c_void,
    #[doc = " total length of this buffer and all next buffers in chain"]
    #[doc = " belonging to the same packet."]
    #[doc = ""]
    #[doc = " For non-queue packet chains this is the invariant:"]
    #[doc = " p->tot_len == p->len + (p->next? p->next->tot_len: 0)"]
    pub tot_len: u16_t,
    #[doc = " length of this buffer"]
    pub len: u16_t,
    #[doc = " a bit field indicating pbuf type and allocation sources"]
    #[doc = "(see PBUF_TYPE_FLAG_*, PBUF_ALLOC_FLAG_* and PBUF_TYPE_ALLOC_SRC_MASK)"]
    pub type_internal: u8_t,
    #[doc = " misc flags"]
    pub flags: u8_t,
    #[doc = " the reference count always equals the number of pointers"]
    #[doc = " that refer to this pbuf. This can be pointers from an application,"]
    #[doc = " the stack itself, or pbuf->next pointers from a chain."]
    pub ref_: u8_t,
    #[doc = " For incoming packets, this contains the input netif's index"]
    pub if_idx: u8_t,
    pub l2_owner: *mut netif,
    pub l2_buf: *mut c_types::c_void,
}
impl Default for pbuf {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Helper struct for const-correctness only."]
#[doc = " The only meaning of this one is to provide a const payload pointer"]
#[doc = " for PBUF_ROM type."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pbuf_rom {
    #[doc = " next pbuf in singly linked pbuf chain"]
    pub next: *mut pbuf,
    #[doc = " pointer to the actual data in the buffer"]
    pub payload: *const c_types::c_void,
}
impl Default for pbuf_rom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Prototype for a function to free a custom pbuf"]
pub type pbuf_free_custom_fn = ::core::option::Option<unsafe extern "C" fn(p: *mut pbuf)>;
#[doc = " A custom pbuf: like a pbuf, but following a function pointer to free it."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pbuf_custom {
    #[doc = " The actual pbuf"]
    pub pbuf: pbuf,
    #[doc = " This function is called when pbuf_free deallocates this pbuf(_custom)"]
    pub custom_free_function: pbuf_free_custom_fn,
}
impl Default for pbuf_custom {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn pbuf_alloc(l: pbuf_layer, length: u16_t, type_: pbuf_type) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_alloc_reference(
        payload: *mut c_types::c_void,
        length: u16_t,
        type_: pbuf_type,
    ) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_alloced_custom(
        l: pbuf_layer,
        length: u16_t,
        type_: pbuf_type,
        p: *mut pbuf_custom,
        payload_mem: *mut c_types::c_void,
        payload_mem_len: u16_t,
    ) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_realloc(p: *mut pbuf, size: u16_t);
}
extern "C" {
    pub fn pbuf_header(p: *mut pbuf, header_size: s16_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_header_force(p: *mut pbuf, header_size: s16_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_add_header(p: *mut pbuf, header_size_increment: size_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_add_header_force(p: *mut pbuf, header_size_increment: size_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_remove_header(p: *mut pbuf, header_size: size_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_free_header(q: *mut pbuf, size: u16_t) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_ref(p: *mut pbuf);
}
extern "C" {
    pub fn pbuf_free(p: *mut pbuf) -> u8_t;
}
extern "C" {
    pub fn pbuf_clen(p: *const pbuf) -> u16_t;
}
extern "C" {
    pub fn pbuf_cat(head: *mut pbuf, tail: *mut pbuf);
}
extern "C" {
    pub fn pbuf_chain(head: *mut pbuf, tail: *mut pbuf);
}
extern "C" {
    pub fn pbuf_dechain(p: *mut pbuf) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_copy(p_to: *mut pbuf, p_from: *const pbuf) -> err_t;
}
extern "C" {
    pub fn pbuf_copy_partial_pbuf(
        p_to: *mut pbuf,
        p_from: *const pbuf,
        copy_len: u16_t,
        offset: u16_t,
    ) -> err_t;
}
extern "C" {
    pub fn pbuf_copy_partial(
        p: *const pbuf,
        dataptr: *mut c_types::c_void,
        len: u16_t,
        offset: u16_t,
    ) -> u16_t;
}
extern "C" {
    pub fn pbuf_get_contiguous(
        p: *const pbuf,
        buffer: *mut c_types::c_void,
        bufsize: size_t,
        len: u16_t,
        offset: u16_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    pub fn pbuf_take(buf: *mut pbuf, dataptr: *const c_types::c_void, len: u16_t) -> err_t;
}
extern "C" {
    pub fn pbuf_take_at(
        buf: *mut pbuf,
        dataptr: *const c_types::c_void,
        len: u16_t,
        offset: u16_t,
    ) -> err_t;
}
extern "C" {
    pub fn pbuf_skip(in_: *mut pbuf, in_offset: u16_t, out_offset: *mut u16_t) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_coalesce(p: *mut pbuf, layer: pbuf_layer) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_clone(l: pbuf_layer, type_: pbuf_type, p: *mut pbuf) -> *mut pbuf;
}
extern "C" {
    pub fn pbuf_get_at(p: *const pbuf, offset: u16_t) -> u8_t;
}
extern "C" {
    pub fn pbuf_try_get_at(p: *const pbuf, offset: u16_t) -> c_types::c_int;
}
extern "C" {
    pub fn pbuf_put_at(p: *mut pbuf, offset: u16_t, data: u8_t);
}
extern "C" {
    pub fn pbuf_memcmp(
        p: *const pbuf,
        offset: u16_t,
        s2: *const c_types::c_void,
        n: u16_t,
    ) -> u16_t;
}
extern "C" {
    pub fn pbuf_memfind(
        p: *const pbuf,
        mem: *const c_types::c_void,
        mem_len: u16_t,
        start_offset: u16_t,
    ) -> u16_t;
}
extern "C" {
    pub fn pbuf_strstr(p: *const pbuf, substr: *const c_types::c_char) -> u16_t;
}
pub type mem_size_t = size_t;
extern "C" {
    pub fn mem_init();
}
extern "C" {
    pub fn mem_trim(mem: *mut c_types::c_void, size: mem_size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn mem_malloc(size: mem_size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn mem_calloc(count: mem_size_t, size: mem_size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn mem_free(mem: *mut c_types::c_void);
}
pub const memp_t_MEMP_RAW_PCB: memp_t = 0;
pub const memp_t_MEMP_UDP_PCB: memp_t = 1;
pub const memp_t_MEMP_TCP_PCB: memp_t = 2;
pub const memp_t_MEMP_TCP_PCB_LISTEN: memp_t = 3;
pub const memp_t_MEMP_TCP_SEG: memp_t = 4;
pub const memp_t_MEMP_FRAG_PBUF: memp_t = 5;
pub const memp_t_MEMP_NETBUF: memp_t = 6;
pub const memp_t_MEMP_NETCONN: memp_t = 7;
pub const memp_t_MEMP_TCPIP_MSG_API: memp_t = 8;
pub const memp_t_MEMP_TCPIP_MSG_INPKT: memp_t = 9;
pub const memp_t_MEMP_ARP_QUEUE: memp_t = 10;
pub const memp_t_MEMP_IGMP_GROUP: memp_t = 11;
pub const memp_t_MEMP_SYS_TIMEOUT: memp_t = 12;
pub const memp_t_MEMP_NETDB: memp_t = 13;
pub const memp_t_MEMP_ND6_QUEUE: memp_t = 14;
pub const memp_t_MEMP_MLD6_GROUP: memp_t = 15;
pub const memp_t_MEMP_PBUF: memp_t = 16;
pub const memp_t_MEMP_PBUF_POOL: memp_t = 17;
pub const memp_t_MEMP_MAX: memp_t = 18;
#[doc = " Create the list of all memory pools managed by memp. MEMP_MAX represents a NULL pool at the end"]
pub type memp_t = c_types::c_uint;
#[doc = " Memory pool descriptor"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct memp_desc {
    #[doc = " Element size"]
    pub size: u16_t,
}
extern "C" {
    pub fn memp_init_pool(desc: *const memp_desc);
}
extern "C" {
    pub fn memp_malloc_pool(desc: *const memp_desc) -> *mut c_types::c_void;
}
extern "C" {
    pub fn memp_free_pool(desc: *const memp_desc, mem: *mut c_types::c_void);
}
extern "C" {
    pub static memp_pools: [*const memp_desc; 18usize];
}
extern "C" {
    pub fn memp_init();
}
extern "C" {
    pub fn memp_malloc(type_: memp_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn memp_free(type_: memp_t, mem: *mut c_types::c_void);
}
pub const lwip_internal_netif_client_data_index_LWIP_NETIF_CLIENT_DATA_INDEX_DHCP:
    lwip_internal_netif_client_data_index = 0;
pub const lwip_internal_netif_client_data_index_LWIP_NETIF_CLIENT_DATA_INDEX_IGMP:
    lwip_internal_netif_client_data_index = 1;
pub const lwip_internal_netif_client_data_index_LWIP_NETIF_CLIENT_DATA_INDEX_MLD6:
    lwip_internal_netif_client_data_index = 2;
pub const lwip_internal_netif_client_data_index_LWIP_NETIF_CLIENT_DATA_INDEX_MAX:
    lwip_internal_netif_client_data_index = 3;
#[doc = " @}"]
pub type lwip_internal_netif_client_data_index = c_types::c_uint;
#[doc = " Delete a filter entry"]
pub const netif_mac_filter_action_NETIF_DEL_MAC_FILTER: netif_mac_filter_action = 0;
#[doc = " Add a filter entry"]
pub const netif_mac_filter_action_NETIF_ADD_MAC_FILTER: netif_mac_filter_action = 1;
#[doc = " MAC Filter Actions, these are passed to a netif's igmp_mac_filter or"]
#[doc = " mld_mac_filter callback function."]
pub type netif_mac_filter_action = c_types::c_uint;
#[doc = " Function prototype for netif init functions. Set up flags and output/linkoutput"]
#[doc = " callback functions in this function."]
#[doc = ""]
#[doc = " @param netif The netif to initialize"]
pub type netif_init_fn = ::core::option::Option<unsafe extern "C" fn(netif: *mut netif) -> err_t>;
#[doc = " Function prototype for netif->input functions. This function is saved as 'input'"]
#[doc = " callback function in the netif struct. Call it when a packet has been received."]
#[doc = ""]
#[doc = " @param p The received packet, copied into a pbuf"]
#[doc = " @param inp The netif which received the packet"]
#[doc = " @return ERR_OK if the packet was handled"]
#[doc = "         != ERR_OK is the packet was NOT handled, in this case, the caller has"]
#[doc = "                   to free the pbuf"]
pub type netif_input_fn =
    ::core::option::Option<unsafe extern "C" fn(p: *mut pbuf, inp: *mut netif) -> err_t>;
#[doc = " Function prototype for netif->output functions. Called by lwIP when a packet"]
#[doc = " shall be sent. For ethernet netif, set this to 'etharp_output' and set"]
#[doc = " 'linkoutput'."]
#[doc = ""]
#[doc = " @param netif The netif which shall send a packet"]
#[doc = " @param p The packet to send (p->payload points to IP header)"]
#[doc = " @param ipaddr The IP address to which the packet shall be sent"]
pub type netif_output_fn = ::core::option::Option<
    unsafe extern "C" fn(netif: *mut netif, p: *mut pbuf, ipaddr: *const ip4_addr_t) -> err_t,
>;
#[doc = " Function prototype for netif->output_ip6 functions. Called by lwIP when a packet"]
#[doc = " shall be sent. For ethernet netif, set this to 'ethip6_output' and set"]
#[doc = " 'linkoutput'."]
#[doc = ""]
#[doc = " @param netif The netif which shall send a packet"]
#[doc = " @param p The packet to send (p->payload points to IP header)"]
#[doc = " @param ipaddr The IPv6 address to which the packet shall be sent"]
pub type netif_output_ip6_fn = ::core::option::Option<
    unsafe extern "C" fn(netif: *mut netif, p: *mut pbuf, ipaddr: *const ip6_addr_t) -> err_t,
>;
#[doc = " Function prototype for netif->linkoutput functions. Only used for ethernet"]
#[doc = " netifs. This function is called by ARP when a packet shall be sent."]
#[doc = ""]
#[doc = " @param netif The netif which shall send a packet"]
#[doc = " @param p The packet to send (raw ethernet packet)"]
pub type netif_linkoutput_fn =
    ::core::option::Option<unsafe extern "C" fn(netif: *mut netif, p: *mut pbuf) -> err_t>;
#[doc = " Function prototype for netif status- or link-callback functions."]
pub type netif_status_callback_fn = ::core::option::Option<unsafe extern "C" fn(netif: *mut netif)>;
#[doc = " Function prototype for netif igmp_mac_filter functions"]
pub type netif_igmp_mac_filter_fn = ::core::option::Option<
    unsafe extern "C" fn(
        netif: *mut netif,
        group: *const ip4_addr_t,
        action: netif_mac_filter_action,
    ) -> err_t,
>;
#[doc = " Function prototype for netif mld_mac_filter functions"]
pub type netif_mld_mac_filter_fn = ::core::option::Option<
    unsafe extern "C" fn(
        netif: *mut netif,
        group: *const ip6_addr_t,
        action: netif_mac_filter_action,
    ) -> err_t,
>;
pub type netif_addr_idx_t = u8_t;
pub type dhcp_event_fn = ::core::option::Option<unsafe extern "C" fn()>;
#[doc = " Generic data structure used for all lwIP network interfaces."]
#[doc = "  The following fields should be filled in by the initialization"]
#[doc = "  function for the device driver: hwaddr_len, hwaddr[], mtu, flags"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct netif {
    #[doc = " pointer to next in linked list"]
    pub next: *mut netif,
    #[doc = " IP address configuration in network byte order"]
    pub ip_addr: ip_addr_t,
    pub netmask: ip_addr_t,
    pub gw: ip_addr_t,
    #[doc = " Array of IPv6 addresses for this netif."]
    pub ip6_addr: [ip_addr_t; 3usize],
    #[doc = " The state of each IPv6 address (Tentative, Preferred, etc)."]
    #[doc = " @see ip6_addr.h"]
    pub ip6_addr_state: [u8_t; 3usize],
    #[doc = " Remaining valid and preferred lifetime of each IPv6 address, in seconds."]
    #[doc = " For valid lifetimes, the special value of IP6_ADDR_LIFE_STATIC (0)"]
    #[doc = " indicates the address is static and has no lifetimes."]
    pub ip6_addr_valid_life: [u32_t; 3usize],
    pub ip6_addr_pref_life: [u32_t; 3usize],
    pub ipv6_addr_cb:
        ::core::option::Option<unsafe extern "C" fn(netif: *mut netif, ip_idex: u8_t)>,
    #[doc = " This function is called by the network device driver"]
    #[doc = "  to pass a packet up the TCP/IP stack."]
    pub input: netif_input_fn,
    #[doc = " This function is called by the IP module when it wants"]
    #[doc = "  to send a packet on the interface. This function typically"]
    #[doc = "  first resolves the hardware address, then sends the packet."]
    #[doc = "  For ethernet physical layer, this is usually etharp_output()"]
    pub output: netif_output_fn,
    #[doc = " This function is called by ethernet_output() when it wants"]
    #[doc = "  to send a packet on the interface. This function outputs"]
    #[doc = "  the pbuf as-is on the link medium."]
    pub linkoutput: netif_linkoutput_fn,
    #[doc = " This function is called by the IPv6 module when it wants"]
    #[doc = "  to send a packet on the interface. This function typically"]
    #[doc = "  first resolves the hardware address, then sends the packet."]
    #[doc = "  For ethernet physical layer, this is usually ethip6_output()"]
    pub output_ip6: netif_output_ip6_fn,
    #[doc = " This field can be set by the device driver and could point"]
    #[doc = "  to state information for the device."]
    pub state: *mut c_types::c_void,
    pub client_data: [*mut c_types::c_void; 3usize],
    pub dhcps_pcb: *mut udp_pcb,
    pub dhcp_event: dhcp_event_fn,
    pub hostname: *const c_types::c_char,
    #[doc = " maximum transfer unit (in bytes)"]
    pub mtu: u16_t,
    #[doc = " maximum transfer unit (in bytes), updated by RA"]
    pub mtu6: u16_t,
    #[doc = " link level hardware address of this interface"]
    pub hwaddr: [u8_t; 6usize],
    #[doc = " number of bytes used in hwaddr"]
    pub hwaddr_len: u8_t,
    #[doc = " flags (@see @ref netif_flags)"]
    pub flags: u8_t,
    #[doc = " descriptive abbreviation"]
    pub name: [c_types::c_char; 2usize],
    #[doc = " number of this interface. Used for @ref if_api and @ref netifapi_netif,"]
    #[doc = " as well as for IPv6 zones"]
    pub num: u8_t,
    #[doc = " is this netif enabled for IPv6 autoconfiguration"]
    pub ip6_autoconfig_enabled: u8_t,
    #[doc = " Number of Router Solicitation messages that remain to be sent."]
    pub rs_count: u8_t,
    #[doc = " This function could be called to add or delete an entry in the multicast"]
    #[doc = "filter table of the ethernet MAC."]
    pub igmp_mac_filter: netif_igmp_mac_filter_fn,
    #[doc = " This function could be called to add or delete an entry in the IPv6 multicast"]
    #[doc = "filter table of the ethernet MAC."]
    pub mld_mac_filter: netif_mld_mac_filter_fn,
    pub loop_first: *mut pbuf,
    pub loop_last: *mut pbuf,
    pub loop_cnt_current: u16_t,
    pub l2_buffer_free_notify: ::core::option::Option<
        unsafe extern "C" fn(lwip_netif: *mut netif, user_buf: *mut c_types::c_void),
    >,
    pub last_ip_addr: ip_addr_t,
}
impl Default for netif {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " The list of network interfaces."]
    pub static mut netif_list: *mut netif;
}
extern "C" {
    #[doc = " The default network interface."]
    pub static mut netif_default: *mut netif;
}
extern "C" {
    pub fn netif_init();
}
extern "C" {
    pub fn netif_add_noaddr(
        netif: *mut netif,
        state: *mut c_types::c_void,
        init: netif_init_fn,
        input: netif_input_fn,
    ) -> *mut netif;
}
extern "C" {
    pub fn netif_add(
        netif: *mut netif,
        ipaddr: *const ip4_addr_t,
        netmask: *const ip4_addr_t,
        gw: *const ip4_addr_t,
        state: *mut c_types::c_void,
        init: netif_init_fn,
        input: netif_input_fn,
    ) -> *mut netif;
}
extern "C" {
    pub fn netif_set_addr(
        netif: *mut netif,
        ipaddr: *const ip4_addr_t,
        netmask: *const ip4_addr_t,
        gw: *const ip4_addr_t,
    );
}
extern "C" {
    pub fn netif_set_garp_flag(netif: *mut netif);
}
extern "C" {
    pub fn netif_remove(netif: *mut netif);
}
extern "C" {
    pub fn netif_find(name: *const c_types::c_char) -> *mut netif;
}
extern "C" {
    pub fn netif_set_default(netif: *mut netif);
}
extern "C" {
    pub fn netif_set_ipaddr(netif: *mut netif, ipaddr: *const ip4_addr_t);
}
extern "C" {
    pub fn netif_set_netmask(netif: *mut netif, netmask: *const ip4_addr_t);
}
extern "C" {
    pub fn netif_set_gw(netif: *mut netif, gw: *const ip4_addr_t);
}
extern "C" {
    pub fn netif_set_up(netif: *mut netif);
}
extern "C" {
    pub fn netif_set_down(netif: *mut netif);
}
extern "C" {
    pub fn netif_set_link_up(netif: *mut netif);
}
extern "C" {
    pub fn netif_set_link_down(netif: *mut netif);
}
extern "C" {
    pub fn netif_loop_output(netif: *mut netif, p: *mut pbuf) -> err_t;
}
extern "C" {
    pub fn netif_poll(netif: *mut netif);
}
extern "C" {
    pub fn netif_input(p: *mut pbuf, inp: *mut netif) -> err_t;
}
extern "C" {
    pub fn netif_ip6_addr_set(netif: *mut netif, addr_idx: s8_t, addr6: *const ip6_addr_t);
}
extern "C" {
    pub fn netif_ip6_addr_set_parts(
        netif: *mut netif,
        addr_idx: s8_t,
        i0: u32_t,
        i1: u32_t,
        i2: u32_t,
        i3: u32_t,
    );
}
extern "C" {
    pub fn netif_ip6_addr_set_state(netif: *mut netif, addr_idx: s8_t, state: u8_t);
}
extern "C" {
    pub fn netif_get_ip6_addr_match(netif: *mut netif, ip6addr: *const ip6_addr_t) -> s8_t;
}
extern "C" {
    pub fn netif_create_ip6_linklocal_address(netif: *mut netif, from_mac_48bit: u8_t);
}
extern "C" {
    pub fn netif_add_ip6_address(
        netif: *mut netif,
        ip6addr: *const ip6_addr_t,
        chosen_idx: *mut s8_t,
    ) -> err_t;
}
extern "C" {
    pub fn netif_name_to_index(name: *const c_types::c_char) -> u8_t;
}
extern "C" {
    pub fn netif_index_to_name(idx: u8_t, name: *mut c_types::c_char) -> *mut c_types::c_char;
}
extern "C" {
    pub fn netif_get_by_index(idx: u8_t) -> *mut netif;
}
#[doc = " @ingroup netif"]
#[doc = " Extended netif status callback (NSC) reasons flags."]
#[doc = " May be extended in the future!"]
pub type netif_nsc_reason_t = u16_t;
#[doc = " @ingroup netif"]
#[doc = " Argument supplied to netif_ext_callback_fn."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union netif_ext_callback_args_t {
    pub link_changed: netif_ext_callback_args_t_link_changed_s,
    pub status_changed: netif_ext_callback_args_t_status_changed_s,
    pub ipv4_changed: netif_ext_callback_args_t_ipv4_changed_s,
    pub ipv6_set: netif_ext_callback_args_t_ipv6_set_s,
    pub ipv6_addr_state_changed: netif_ext_callback_args_t_ipv6_addr_state_changed_s,
}
#[doc = " Args to LWIP_NSC_LINK_CHANGED callback"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netif_ext_callback_args_t_link_changed_s {
    #[doc = " 1: up; 0: down"]
    pub state: u8_t,
}
#[doc = " Args to LWIP_NSC_STATUS_CHANGED callback"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct netif_ext_callback_args_t_status_changed_s {
    #[doc = " 1: up; 0: down"]
    pub state: u8_t,
}
#[doc = " Args to LWIP_NSC_IPV4_ADDRESS_CHANGED|LWIP_NSC_IPV4_GATEWAY_CHANGED|LWIP_NSC_IPV4_NETMASK_CHANGED|LWIP_NSC_IPV4_SETTINGS_CHANGED callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netif_ext_callback_args_t_ipv4_changed_s {
    #[doc = " Old IPv4 address"]
    pub old_address: *const ip_addr_t,
    pub old_netmask: *const ip_addr_t,
    pub old_gw: *const ip_addr_t,
}
impl Default for netif_ext_callback_args_t_ipv4_changed_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Args to LWIP_NSC_IPV6_SET callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netif_ext_callback_args_t_ipv6_set_s {
    #[doc = " Index of changed IPv6 address"]
    pub addr_index: s8_t,
    #[doc = " Old IPv6 address"]
    pub old_address: *const ip_addr_t,
}
impl Default for netif_ext_callback_args_t_ipv6_set_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Args to LWIP_NSC_IPV6_ADDR_STATE_CHANGED callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netif_ext_callback_args_t_ipv6_addr_state_changed_s {
    #[doc = " Index of affected IPv6 address"]
    pub addr_index: s8_t,
    #[doc = " Old IPv6 address state"]
    pub old_state: u8_t,
    #[doc = " Affected IPv6 address"]
    pub address: *const ip_addr_t,
}
impl Default for netif_ext_callback_args_t_ipv6_addr_state_changed_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for netif_ext_callback_args_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @ingroup netif"]
#[doc = " Function used for extended netif status callbacks"]
#[doc = " Note: When parsing reason argument, keep in mind that more reasons may be added in the future!"]
#[doc = " @param netif netif that is affected by change"]
#[doc = " @param reason change reason"]
#[doc = " @param args depends on reason, see reason description"]
pub type netif_ext_callback_fn = ::core::option::Option<
    unsafe extern "C" fn(
        netif: *mut netif,
        reason: netif_nsc_reason_t,
        args: *const netif_ext_callback_args_t,
    ),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub un: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub u32_addr: [u32_t; 4usize],
    pub u8_addr: [u8_t; 16usize],
}
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for in6_addr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " This variable is initialized by the system to contain the wildcard IPv6 address."]
    pub static in6addr_any: in6_addr;
}
pub type sa_family_t = u8_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: u8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [c_types::c_char; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: u8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32_t,
}
impl Default for sockaddr_in6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: u8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [c_types::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_storage {
    pub s2_len: u8_t,
    pub ss_family: sa_family_t,
    pub s2_data1: [c_types::c_char; 2usize],
    pub s2_data2: [u32_t; 3usize],
    pub s2_data3: [u32_t; 3usize],
}
pub type socklen_t = u32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut c_types::c_void,
    pub iov_len: size_t,
}
impl Default for iovec {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut c_types::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: c_types::c_int,
    pub msg_control: *mut c_types::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: c_types::c_int,
}
impl Default for msghdr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: c_types::c_int,
    pub cmsg_type: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ifreq {
    pub ifr_name: [c_types::c_char; 6usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: c_types::c_int,
    pub l_linger: c_types::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: c_types::c_uint,
    pub ipi_addr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: c_types::c_uint,
}
impl Default for ipv6_mreq {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn lwip_socket_thread_init();
}
extern "C" {
    pub fn lwip_socket_thread_cleanup();
}
extern "C" {
    pub fn lwip_accept(
        s: c_types::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_bind(
        s: c_types::c_int,
        name: *const sockaddr,
        namelen: socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_shutdown(s: c_types::c_int, how: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_getpeername(
        s: c_types::c_int,
        name: *mut sockaddr,
        namelen: *mut socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_getsockname(
        s: c_types::c_int,
        name: *mut sockaddr,
        namelen: *mut socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_getsockopt(
        s: c_types::c_int,
        level: c_types::c_int,
        optname: c_types::c_int,
        optval: *mut c_types::c_void,
        optlen: *mut socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_setsockopt(
        s: c_types::c_int,
        level: c_types::c_int,
        optname: c_types::c_int,
        optval: *const c_types::c_void,
        optlen: socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_close(s: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_connect(
        s: c_types::c_int,
        name: *const sockaddr,
        namelen: socklen_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_listen(s: c_types::c_int, backlog: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_recv(
        s: c_types::c_int,
        mem: *mut c_types::c_void,
        len: size_t,
        flags: c_types::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn lwip_read(s: c_types::c_int, mem: *mut c_types::c_void, len: size_t) -> ssize_t;
}
extern "C" {
    pub fn lwip_readv(s: c_types::c_int, iov: *const iovec, iovcnt: c_types::c_int) -> ssize_t;
}
extern "C" {
    pub fn lwip_recvfrom(
        s: c_types::c_int,
        mem: *mut c_types::c_void,
        len: size_t,
        flags: c_types::c_int,
        from: *mut sockaddr,
        fromlen: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn lwip_recvmsg(s: c_types::c_int, message: *mut msghdr, flags: c_types::c_int) -> ssize_t;
}
extern "C" {
    pub fn lwip_send(
        s: c_types::c_int,
        dataptr: *const c_types::c_void,
        size: size_t,
        flags: c_types::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn lwip_sendmsg(
        s: c_types::c_int,
        message: *const msghdr,
        flags: c_types::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn lwip_sendto(
        s: c_types::c_int,
        dataptr: *const c_types::c_void,
        size: size_t,
        flags: c_types::c_int,
        to: *const sockaddr,
        tolen: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn lwip_socket(
        domain: c_types::c_int,
        type_: c_types::c_int,
        protocol: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_write(s: c_types::c_int, dataptr: *const c_types::c_void, size: size_t) -> ssize_t;
}
extern "C" {
    pub fn lwip_writev(s: c_types::c_int, iov: *const iovec, iovcnt: c_types::c_int) -> ssize_t;
}
extern "C" {
    pub fn lwip_select(
        maxfdp1: c_types::c_int,
        readset: *mut _types_fd_set,
        writeset: *mut _types_fd_set,
        exceptset: *mut _types_fd_set,
        timeout: *mut timeval,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_poll(fds: *mut pollfd, nfds: nfds_t, timeout: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_ioctl(
        s: c_types::c_int,
        cmd: c_types::c_long,
        argp: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_fcntl(
        s: c_types::c_int,
        cmd: c_types::c_int,
        val: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_inet_ntop(
        af: c_types::c_int,
        src: *const c_types::c_void,
        dst: *mut c_types::c_char,
        size: socklen_t,
    ) -> *const c_types::c_char;
}
extern "C" {
    pub fn lwip_inet_pton(
        af: c_types::c_int,
        src: *const c_types::c_char,
        dst: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn lwip_if_indextoname(
        ifindex: c_types::c_uint,
        ifname: *mut c_types::c_char,
    ) -> *mut c_types::c_char;
}
extern "C" {
    pub fn lwip_if_nametoindex(ifname: *const c_types::c_char) -> c_types::c_uint;
}
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_UNKNOWN: esp_tls_error_type_t = 0;
#[doc = "< System error -- errno"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_SYSTEM: esp_tls_error_type_t = 1;
#[doc = "< Error code from mbedTLS library"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_MBEDTLS: esp_tls_error_type_t = 2;
#[doc = "< Certificate flags defined in mbedTLS"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_MBEDTLS_CERT_FLAGS: esp_tls_error_type_t = 3;
#[doc = "< ESP-IDF error type -- esp_err_t"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_ESP: esp_tls_error_type_t = 4;
#[doc = "< Error code from wolfSSL library"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_WOLFSSL: esp_tls_error_type_t = 5;
#[doc = "< Certificate flags defined in wolfSSL"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_WOLFSSL_CERT_FLAGS: esp_tls_error_type_t = 6;
#[doc = "< Last err type -- invalid entry"]
pub const esp_tls_error_type_t_ESP_TLS_ERR_TYPE_MAX: esp_tls_error_type_t = 7;
#[doc = " Definition of different types/sources of error codes reported"]
#[doc = " from different components"]
pub type esp_tls_error_type_t = c_types::c_uint;
pub type esp_tls_error_handle_t = *mut esp_tls_last_error;
#[doc = "  @brief Error structure containing relevant errors in case tls error occurred"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_tls_last_error {
    #[doc = "< error code (based on ESP_ERR_ESP_TLS_BASE) of the last occurred error"]
    pub last_error: esp_err_t,
    #[doc = "< esp_tls error code from last esp_tls failed api"]
    pub esp_tls_error_code: c_types::c_int,
    #[doc = "< last certification verification flags"]
    pub esp_tls_flags: c_types::c_int,
}
#[doc = "  @brief Error structure containing relevant errors in case tls error occurred"]
pub type esp_tls_last_error_t = esp_tls_last_error;
pub type mbedtls_iso_c_forbids_empty_translation_units = c_types::c_int;
extern "C" {
    pub fn esp_mbedtls_mem_calloc(n: size_t, size: size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn esp_mbedtls_mem_free(ptr: *mut c_types::c_void);
}
pub type mbedtls_time_t = time_t;
extern "C" {
    pub fn mbedtls_calloc(n: size_t, size: size_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn mbedtls_free(ptr: *mut c_types::c_void);
}
extern "C" {
    #[doc = " \\brief               This function dynamically sets the memory-management"]
    #[doc = "                      functions used by the library, during runtime."]
    #[doc = ""]
    #[doc = " \\param calloc_func   The \\c calloc function implementation."]
    #[doc = " \\param free_func     The \\c free function implementation."]
    #[doc = ""]
    #[doc = " \\return              \\c 0."]
    pub fn mbedtls_platform_set_calloc_free(
        calloc_func: ::core::option::Option<
            unsafe extern "C" fn(arg1: size_t, arg2: size_t) -> *mut c_types::c_void,
        >,
        free_func: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
    ) -> c_types::c_int;
}
#[doc = " \\brief   The platform context structure."]
#[doc = ""]
#[doc = " \\note    This structure may be used to assist platform-specific"]
#[doc = "          setup or teardown operations."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mbedtls_platform_context {
    #[doc = "< A placeholder member, as empty structs are not portable."]
    pub dummy: c_types::c_char,
}
extern "C" {
    #[doc = " \\brief   This function performs any platform-specific initialization"]
    #[doc = "          operations."]
    #[doc = ""]
    #[doc = " \\note    This function should be called before any other library functions."]
    #[doc = ""]
    #[doc = "          Its implementation is platform-specific, and unless"]
    #[doc = "          platform-specific code is provided, it does nothing."]
    #[doc = ""]
    #[doc = " \\note    The usage and necessity of this function is dependent on the platform."]
    #[doc = ""]
    #[doc = " \\param   ctx     The platform context."]
    #[doc = ""]
    #[doc = " \\return  \\c 0 on success."]
    pub fn mbedtls_platform_setup(ctx: *mut mbedtls_platform_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief   This function performs any platform teardown operations."]
    #[doc = ""]
    #[doc = " \\note    This function should be called after every other Mbed TLS module"]
    #[doc = "          has been correctly freed using the appropriate free function."]
    #[doc = ""]
    #[doc = "          Its implementation is platform-specific, and unless"]
    #[doc = "          platform-specific code is provided, it does nothing."]
    #[doc = ""]
    #[doc = " \\note    The usage and necessity of this function is dependent on the platform."]
    #[doc = ""]
    #[doc = " \\param   ctx     The platform context."]
    #[doc = ""]
    pub fn mbedtls_platform_teardown(ctx: *mut mbedtls_platform_context);
}
pub type mbedtls_mpi_sint = i32;
pub type mbedtls_mpi_uint = u32;
pub type mbedtls_t_udbl = u64;
#[doc = " \\brief          MPI structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_mpi {
    #[doc = "<  Sign: -1 if the mpi is negative, 1 otherwise"]
    pub s: c_types::c_int,
    #[doc = "<  total # of limbs"]
    pub n: size_t,
    #[doc = "<  pointer to limbs"]
    pub p: *mut mbedtls_mpi_uint,
}
impl Default for mbedtls_mpi {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief           Initialize an MPI context."]
    #[doc = ""]
    #[doc = "                  This makes the MPI ready to be set or freed,"]
    #[doc = "                  but does not define a value for the MPI."]
    #[doc = ""]
    #[doc = " \\param X         The MPI context to initialize. This must not be \\c NULL."]
    pub fn mbedtls_mpi_init(X: *mut mbedtls_mpi);
}
extern "C" {
    #[doc = " \\brief          This function frees the components of an MPI context."]
    #[doc = ""]
    #[doc = " \\param X        The MPI context to be cleared. This may be \\c NULL,"]
    #[doc = "                 in which case this function is a no-op. If it is"]
    #[doc = "                 not \\c NULL, it must point to an initialized MPI."]
    pub fn mbedtls_mpi_free(X: *mut mbedtls_mpi);
}
extern "C" {
    #[doc = " \\brief          Enlarge an MPI to the specified number of limbs."]
    #[doc = ""]
    #[doc = " \\note           This function does nothing if the MPI is"]
    #[doc = "                 already large enough."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to grow. It must be initialized."]
    #[doc = " \\param nblimbs  The target number of limbs."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_grow(X: *mut mbedtls_mpi, nblimbs: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function resizes an MPI downwards, keeping at least the"]
    #[doc = "                 specified number of limbs."]
    #[doc = ""]
    #[doc = "                 If \\c X is smaller than \\c nblimbs, it is resized up"]
    #[doc = "                 instead."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to shrink. This must point to an initialized MPI."]
    #[doc = " \\param nblimbs  The minimum number of limbs to keep."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed"]
    #[doc = "                 (this can only happen when resizing up)."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_shrink(X: *mut mbedtls_mpi, nblimbs: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Make a copy of an MPI."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param Y        The source MPI. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\note           The limb-buffer in the destination MPI is enlarged"]
    #[doc = "                 if necessary to hold the value in the source MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_copy(X: *mut mbedtls_mpi, Y: *const mbedtls_mpi) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Swap the contents of two MPIs."]
    #[doc = ""]
    #[doc = " \\param X        The first MPI. It must be initialized."]
    #[doc = " \\param Y        The second MPI. It must be initialized."]
    pub fn mbedtls_mpi_swap(X: *mut mbedtls_mpi, Y: *mut mbedtls_mpi);
}
extern "C" {
    #[doc = " \\brief          Perform a safe conditional copy of MPI which doesn't"]
    #[doc = "                 reveal whether the condition was true or not."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to conditionally assign to. This must point"]
    #[doc = "                 to an initialized MPI."]
    #[doc = " \\param Y        The MPI to be assigned from. This must point to an"]
    #[doc = "                 initialized MPI."]
    #[doc = " \\param assign   The condition deciding whether to perform the"]
    #[doc = "                 assignment or not. Possible values:"]
    #[doc = "                 * \\c 1: Perform the assignment `X = Y`."]
    #[doc = "                 * \\c 0: Keep the original value of \\p X."]
    #[doc = ""]
    #[doc = " \\note           This function is equivalent to"]
    #[doc = "                      `if( assign ) mbedtls_mpi_copy( X, Y );`"]
    #[doc = "                 except that it avoids leaking any information about whether"]
    #[doc = "                 the assignment was done or not (the above code may leak"]
    #[doc = "                 information through branch prediction and/or memory access"]
    #[doc = "                 patterns analysis)."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_safe_cond_assign(
        X: *mut mbedtls_mpi,
        Y: *const mbedtls_mpi,
        assign: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a safe conditional swap which doesn't"]
    #[doc = "                 reveal whether the condition was true or not."]
    #[doc = ""]
    #[doc = " \\param X        The first MPI. This must be initialized."]
    #[doc = " \\param Y        The second MPI. This must be initialized."]
    #[doc = " \\param assign   The condition deciding whether to perform"]
    #[doc = "                 the swap or not. Possible values:"]
    #[doc = "                 * \\c 1: Swap the values of \\p X and \\p Y."]
    #[doc = "                 * \\c 0: Keep the original values of \\p X and \\p Y."]
    #[doc = ""]
    #[doc = " \\note           This function is equivalent to"]
    #[doc = "                      if( assign ) mbedtls_mpi_swap( X, Y );"]
    #[doc = "                 except that it avoids leaking any information about whether"]
    #[doc = "                 the assignment was done or not (the above code may leak"]
    #[doc = "                 information through branch prediction and/or memory access"]
    #[doc = "                 patterns analysis)."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    #[doc = ""]
    pub fn mbedtls_mpi_safe_cond_swap(
        X: *mut mbedtls_mpi,
        Y: *mut mbedtls_mpi,
        assign: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Store integer value in MPI."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to set. This must be initialized."]
    #[doc = " \\param z        The value to use."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_lset(X: *mut mbedtls_mpi, z: mbedtls_mpi_sint) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Get a specific bit from an MPI."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to query. This must be initialized."]
    #[doc = " \\param pos      Zero-based index of the bit to query."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 or \\c 1 on success, depending on whether bit \\c pos"]
    #[doc = "                 of \\c X is unset or set."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_mpi_get_bit(X: *const mbedtls_mpi, pos: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Modify a specific bit in an MPI."]
    #[doc = ""]
    #[doc = " \\note           This function will grow the target MPI if necessary to set a"]
    #[doc = "                 bit to \\c 1 in a not yet existing limb. It will not grow if"]
    #[doc = "                 the bit should be set to \\c 0."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to modify. This must be initialized."]
    #[doc = " \\param pos      Zero-based index of the bit to modify."]
    #[doc = " \\param val      The desired value of bit \\c pos: \\c 0 or \\c 1."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_set_bit(
        X: *mut mbedtls_mpi,
        pos: size_t,
        val: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Return the number of bits of value \\c 0 before the"]
    #[doc = "                 least significant bit of value \\c 1."]
    #[doc = ""]
    #[doc = " \\note           This is the same as the zero-based index of"]
    #[doc = "                 the least significant bit of value \\c 1."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to query."]
    #[doc = ""]
    #[doc = " \\return         The number of bits of value \\c 0 before the least significant"]
    #[doc = "                 bit of value \\c 1 in \\p X."]
    pub fn mbedtls_mpi_lsb(X: *const mbedtls_mpi) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Return the number of bits up to and including the most"]
    #[doc = "                 significant bit of value \\c 1."]
    #[doc = ""]
    #[doc = " * \\note         This is same as the one-based index of the most"]
    #[doc = "                 significant bit of value \\c 1."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to query. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         The number of bits up to and including the most"]
    #[doc = "                 significant bit of value \\c 1."]
    pub fn mbedtls_mpi_bitlen(X: *const mbedtls_mpi) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Return the total size of an MPI value in bytes."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to use. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\note           The value returned by this function may be less than"]
    #[doc = "                 the number of bytes used to store \\p X internally."]
    #[doc = "                 This happens if and only if there are trailing bytes"]
    #[doc = "                 of value zero."]
    #[doc = ""]
    #[doc = " \\return         The least number of bytes capable of storing"]
    #[doc = "                 the absolute value of \\p X."]
    pub fn mbedtls_mpi_size(X: *const mbedtls_mpi) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Import an MPI from an ASCII string."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param radix    The numeric base of the input string."]
    #[doc = " \\param s        Null-terminated string buffer."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_mpi_read_string(
        X: *mut mbedtls_mpi,
        radix: c_types::c_int,
        s: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Export an MPI to an ASCII string."]
    #[doc = ""]
    #[doc = " \\param X        The source MPI. This must point to an initialized MPI."]
    #[doc = " \\param radix    The numeric base of the output string."]
    #[doc = " \\param buf      The buffer to write the string to. This must be writable"]
    #[doc = "                 buffer of length \\p buflen Bytes."]
    #[doc = " \\param buflen   The available size in Bytes of \\p buf."]
    #[doc = " \\param olen     The address at which to store the length of the string"]
    #[doc = "                 written, including the  final \\c NULL byte. This must"]
    #[doc = "                 not be \\c NULL."]
    #[doc = ""]
    #[doc = " \\note           You can call this function with `buflen == 0` to obtain the"]
    #[doc = "                 minimum required buffer size in `*olen`."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if the target buffer \\p buf"]
    #[doc = "                 is too small to hold the value of \\p X in the desired base."]
    #[doc = "                 In this case, `*olen` is nonetheless updated to contain the"]
    #[doc = "                 size of \\p buf required for a successful call."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_write_string(
        X: *const mbedtls_mpi,
        radix: c_types::c_int,
        buf: *mut c_types::c_char,
        buflen: size_t,
        olen: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Read an MPI from a line in an opened file."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param radix    The numeric base of the string representation used"]
    #[doc = "                 in the source line."]
    #[doc = " \\param fin      The input file handle to use. This must not be \\c NULL."]
    #[doc = ""]
    #[doc = " \\note           On success, this function advances the file stream"]
    #[doc = "                 to the end of the current line or to EOF."]
    #[doc = ""]
    #[doc = "                 The function returns \\c 0 on an empty line."]
    #[doc = ""]
    #[doc = "                 Leading whitespaces are ignored, as is a"]
    #[doc = "                 '0x' prefix for radix \\c 16."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if the file read buffer"]
    #[doc = "                 is too small."]
    #[doc = " \\return         Another negative error code on failure."]
    pub fn mbedtls_mpi_read_file(
        X: *mut mbedtls_mpi,
        radix: c_types::c_int,
        fin: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Export an MPI into an opened file."]
    #[doc = ""]
    #[doc = " \\param p        A string prefix to emit prior to the MPI data."]
    #[doc = "                 For example, this might be a label, or \"0x\" when"]
    #[doc = "                 printing in base \\c 16. This may be \\c NULL if no prefix"]
    #[doc = "                 is needed."]
    #[doc = " \\param X        The source MPI. This must point to an initialized MPI."]
    #[doc = " \\param radix    The numeric base to be used in the emitted string."]
    #[doc = " \\param fout     The output file handle. This may be \\c NULL, in which case"]
    #[doc = "                 the output is written to \\c stdout."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_mpi_write_file(
        p: *const c_types::c_char,
        X: *const mbedtls_mpi,
        radix: c_types::c_int,
        fout: *mut FILE,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Import an MPI from unsigned big endian binary data."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param buf      The input buffer. This must be a readable buffer of length"]
    #[doc = "                 \\p buflen Bytes."]
    #[doc = " \\param buflen   The length of the input buffer \\p p in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_read_binary(
        X: *mut mbedtls_mpi,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Import X from unsigned binary data, little endian"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param buf      The input buffer. This must be a readable buffer of length"]
    #[doc = "                 \\p buflen Bytes."]
    #[doc = " \\param buflen   The length of the input buffer \\p p in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_read_binary_le(
        X: *mut mbedtls_mpi,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Export X into unsigned binary data, big endian."]
    #[doc = "                 Always fills the whole buffer, which will start with zeros"]
    #[doc = "                 if the number is smaller."]
    #[doc = ""]
    #[doc = " \\param X        The source MPI. This must point to an initialized MPI."]
    #[doc = " \\param buf      The output buffer. This must be a writable buffer of length"]
    #[doc = "                 \\p buflen Bytes."]
    #[doc = " \\param buflen   The size of the output buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if \\p buf isn't"]
    #[doc = "                 large enough to hold the value of \\p X."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_write_binary(
        X: *const mbedtls_mpi,
        buf: *mut c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Export X into unsigned binary data, little endian."]
    #[doc = "                 Always fills the whole buffer, which will end with zeros"]
    #[doc = "                 if the number is smaller."]
    #[doc = ""]
    #[doc = " \\param X        The source MPI. This must point to an initialized MPI."]
    #[doc = " \\param buf      The output buffer. This must be a writable buffer of length"]
    #[doc = "                 \\p buflen Bytes."]
    #[doc = " \\param buflen   The size of the output buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL if \\p buf isn't"]
    #[doc = "                 large enough to hold the value of \\p X."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_write_binary_le(
        X: *const mbedtls_mpi,
        buf: *mut c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a left-shift on an MPI: X <<= count"]
    #[doc = ""]
    #[doc = " \\param X        The MPI to shift. This must point to an initialized MPI."]
    #[doc = " \\param count    The number of bits to shift by."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_shift_l(X: *mut mbedtls_mpi, count: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a right-shift on an MPI: X >>= count"]
    #[doc = ""]
    #[doc = " \\param X        The MPI to shift. This must point to an initialized MPI."]
    #[doc = " \\param count    The number of bits to shift by."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_shift_r(X: *mut mbedtls_mpi, count: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Compare the absolute values of two MPIs."]
    #[doc = ""]
    #[doc = " \\param X        The left-hand MPI. This must point to an initialized MPI."]
    #[doc = " \\param Y        The right-hand MPI. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 1 if `|X|` is greater than `|Y|`."]
    #[doc = " \\return         \\c -1 if `|X|` is lesser than `|Y|`."]
    #[doc = " \\return         \\c 0 if `|X|` is equal to `|Y|`."]
    pub fn mbedtls_mpi_cmp_abs(X: *const mbedtls_mpi, Y: *const mbedtls_mpi) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Compare two MPIs."]
    #[doc = ""]
    #[doc = " \\param X        The left-hand MPI. This must point to an initialized MPI."]
    #[doc = " \\param Y        The right-hand MPI. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 1 if \\p X is greater than \\p Y."]
    #[doc = " \\return         \\c -1 if \\p X is lesser than \\p Y."]
    #[doc = " \\return         \\c 0 if \\p X is equal to \\p Y."]
    pub fn mbedtls_mpi_cmp_mpi(X: *const mbedtls_mpi, Y: *const mbedtls_mpi) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Check if an MPI is less than the other in constant time."]
    #[doc = ""]
    #[doc = " \\param X        The left-hand MPI. This must point to an initialized MPI"]
    #[doc = "                 with the same allocated length as Y."]
    #[doc = " \\param Y        The right-hand MPI. This must point to an initialized MPI"]
    #[doc = "                 with the same allocated length as X."]
    #[doc = " \\param ret      The result of the comparison:"]
    #[doc = "                 \\c 1 if \\p X is less than \\p Y."]
    #[doc = "                 \\c 0 if \\p X is greater than or equal to \\p Y."]
    #[doc = ""]
    #[doc = " \\return         0 on success."]
    #[doc = " \\return         MBEDTLS_ERR_MPI_BAD_INPUT_DATA if the allocated length of"]
    #[doc = "                 the two input MPIs is not the same."]
    pub fn mbedtls_mpi_lt_mpi_ct(
        X: *const mbedtls_mpi,
        Y: *const mbedtls_mpi,
        ret: *mut c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Compare an MPI with an integer."]
    #[doc = ""]
    #[doc = " \\param X        The left-hand MPI. This must point to an initialized MPI."]
    #[doc = " \\param z        The integer value to compare \\p X to."]
    #[doc = ""]
    #[doc = " \\return         \\c 1 if \\p X is greater than \\p z."]
    #[doc = " \\return         \\c -1 if \\p X is lesser than \\p z."]
    #[doc = " \\return         \\c 0 if \\p X is equal to \\p z."]
    pub fn mbedtls_mpi_cmp_int(X: *const mbedtls_mpi, z: mbedtls_mpi_sint) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform an unsigned addition of MPIs: X = |A| + |B|"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first summand. This must point to an initialized MPI."]
    #[doc = " \\param B        The second summand. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_add_abs(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform an unsigned subtraction of MPIs: X = |A| - |B|"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The minuend. This must point to an initialized MPI."]
    #[doc = " \\param B        The subtrahend. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NEGATIVE_VALUE if \\p B is greater than \\p A."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    #[doc = ""]
    pub fn mbedtls_mpi_sub_abs(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a signed addition of MPIs: X = A + B"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first summand. This must point to an initialized MPI."]
    #[doc = " \\param B        The second summand. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_add_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a signed subtraction of MPIs: X = A - B"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The minuend. This must point to an initialized MPI."]
    #[doc = " \\param B        The subtrahend. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_sub_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a signed addition of an MPI and an integer: X = A + b"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first summand. This must point to an initialized MPI."]
    #[doc = " \\param b        The second summand."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_add_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a signed subtraction of an MPI and an integer:"]
    #[doc = "                 X = A - b"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The minuend. This must point to an initialized MPI."]
    #[doc = " \\param b        The subtrahend."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_sub_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a multiplication of two MPIs: X = A * B"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first factor. This must point to an initialized MPI."]
    #[doc = " \\param B        The second factor. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    #[doc = ""]
    pub fn mbedtls_mpi_mul_mpi(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a multiplication of an MPI with an unsigned integer:"]
    #[doc = "                 X = A * b"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first factor. This must point to an initialized MPI."]
    #[doc = " \\param b        The second factor."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    #[doc = ""]
    pub fn mbedtls_mpi_mul_int(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a division with remainder of two MPIs:"]
    #[doc = "                 A = Q * B + R"]
    #[doc = ""]
    #[doc = " \\param Q        The destination MPI for the quotient."]
    #[doc = "                 This may be \\c NULL if the value of the"]
    #[doc = "                 quotient is not needed."]
    #[doc = " \\param R        The destination MPI for the remainder value."]
    #[doc = "                 This may be \\c NULL if the value of the"]
    #[doc = "                 remainder is not needed."]
    #[doc = " \\param A        The dividend. This must point to an initialized MPi."]
    #[doc = " \\param B        The divisor. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if \\p B equals zero."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_div_mpi(
        Q: *mut mbedtls_mpi,
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a division with remainder of an MPI by an integer:"]
    #[doc = "                 A = Q * b + R"]
    #[doc = ""]
    #[doc = " \\param Q        The destination MPI for the quotient."]
    #[doc = "                 This may be \\c NULL if the value of the"]
    #[doc = "                 quotient is not needed."]
    #[doc = " \\param R        The destination MPI for the remainder value."]
    #[doc = "                 This may be \\c NULL if the value of the"]
    #[doc = "                 remainder is not needed."]
    #[doc = " \\param A        The dividend. This must point to an initialized MPi."]
    #[doc = " \\param b        The divisor."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if \\p b equals zero."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_div_int(
        Q: *mut mbedtls_mpi,
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a modular reduction. R = A mod B"]
    #[doc = ""]
    #[doc = " \\param R        The destination MPI for the residue value."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " \\param A        The MPI to compute the residue of."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " \\param B        The base of the modular reduction."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if \\p B equals zero."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NEGATIVE_VALUE if \\p B is negative."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    #[doc = ""]
    pub fn mbedtls_mpi_mod_mpi(
        R: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a modular reduction with respect to an integer."]
    #[doc = "                 r = A mod b"]
    #[doc = ""]
    #[doc = " \\param r        The address at which to store the residue."]
    #[doc = "                 This must not be \\c NULL."]
    #[doc = " \\param A        The MPI to compute the residue of."]
    #[doc = "                 This must point to an initialized MPi."]
    #[doc = " \\param b        The integer base of the modular reduction."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_DIVISION_BY_ZERO if \\p b equals zero."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NEGATIVE_VALUE if \\p b is negative."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_mod_int(
        r: *mut mbedtls_mpi_uint,
        A: *const mbedtls_mpi,
        b: mbedtls_mpi_sint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a sliding-window exponentiation: X = A^E mod N"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The base of the exponentiation."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " \\param E        The exponent MPI. This must point to an initialized MPI."]
    #[doc = " \\param N        The base for the modular reduction. This must point to an"]
    #[doc = "                 initialized MPI."]
    #[doc = " \\param prec_RR  A helper MPI depending solely on \\p N which can be used to"]
    #[doc = "                 speed-up multiple modular exponentiations for the same value"]
    #[doc = "                 of \\p N. This may be \\c NULL. If it is not \\c NULL, it must"]
    #[doc = "                 point to an initialized MPI. If it hasn't been used after"]
    #[doc = "                 the call to mbedtls_mpi_init(), this function will compute"]
    #[doc = "                 the helper value and store it in \\p prec_RR for reuse on"]
    #[doc = "                 subsequent calls to this function. Otherwise, the function"]
    #[doc = "                 will assume that \\p prec_RR holds the helper value set by a"]
    #[doc = "                 previous call to mbedtls_mpi_exp_mod(), and reuse it."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BAD_INPUT_DATA if \\c N is negative or"]
    #[doc = "                 even, or if \\c E is negative."]
    #[doc = " \\return         Another negative error code on different kinds of failures."]
    #[doc = ""]
    pub fn mbedtls_mpi_exp_mod(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        E: *const mbedtls_mpi,
        N: *const mbedtls_mpi,
        prec_RR: *mut mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Fill an MPI with a number of random bytes."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param size     The number of random bytes to generate."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG parameter to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on failure."]
    #[doc = ""]
    #[doc = " \\note           The bytes obtained from the RNG are interpreted"]
    #[doc = "                 as a big-endian representation of an MPI; this can"]
    #[doc = "                 be relevant in applications like deterministic ECDSA."]
    pub fn mbedtls_mpi_fill_random(
        X: *mut mbedtls_mpi,
        size: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " Generate a random number uniformly in a range."]
    #[doc = ""]
    #[doc = " This function generates a random number between \\p min inclusive and"]
    #[doc = " \\p N exclusive."]
    #[doc = ""]
    #[doc = " The procedure complies with RFC 6979 §3.3 (deterministic ECDSA)"]
    #[doc = " when the RNG is a suitably parametrized instance of HMAC_DRBG"]
    #[doc = " and \\p min is \\c 1."]
    #[doc = ""]
    #[doc = " \\note           There are `N - min` possible outputs. The lower bound"]
    #[doc = "                 \\p min can be reached, but the upper bound \\p N cannot."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param min      The minimum value to return."]
    #[doc = "                 It must be nonnegative."]
    #[doc = " \\param N        The upper bound of the range, exclusive."]
    #[doc = "                 In other words, this is one plus the maximum value to return."]
    #[doc = "                 \\p N must be strictly larger than \\p min."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG parameter to be passed to \\p f_rng."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BAD_INPUT_DATA if \\p min or \\p N is invalid"]
    #[doc = "                 or if they are incompatible."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if the implementation was"]
    #[doc = "                 unable to find a suitable value within a limited number"]
    #[doc = "                 of attempts. This has a negligible probability if \\p N"]
    #[doc = "                 is significantly larger than \\p min, which is the case"]
    #[doc = "                 for all usual cryptographic applications."]
    #[doc = " \\return         Another negative error code on failure."]
    pub fn mbedtls_mpi_random(
        X: *mut mbedtls_mpi,
        min: mbedtls_mpi_sint,
        N: *const mbedtls_mpi,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Compute the greatest common divisor: G = gcd(A, B)"]
    #[doc = ""]
    #[doc = " \\param G        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The first operand. This must point to an initialized MPI."]
    #[doc = " \\param B        The second operand. This must point to an initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    pub fn mbedtls_mpi_gcd(
        G: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        B: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Compute the modular inverse: X = A^-1 mod N"]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " \\param A        The MPI to calculate the modular inverse of. This must point"]
    #[doc = "                 to an initialized MPI."]
    #[doc = " \\param N        The base of the modular inversion. This must point to an"]
    #[doc = "                 initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BAD_INPUT_DATA if \\p N is less than"]
    #[doc = "                 or equal to one."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if \\p has no modular inverse"]
    #[doc = "                 with respect to \\p N."]
    pub fn mbedtls_mpi_inv_mod(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        N: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a Miller-Rabin primality test with error"]
    #[doc = "                 probability of 2<sup>-80</sup>."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_mpi_is_prime_ext() which allows"]
    #[doc = "                 specifying the number of Miller-Rabin rounds."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to check for primality."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG parameter to be passed to \\p f_rng."]
    #[doc = "                 This may be \\c NULL if \\p f_rng doesn't use a"]
    #[doc = "                 context parameter."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful, i.e. \\p X is probably prime."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if \\p X is not prime."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_is_prime(
        X: *const mbedtls_mpi,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Miller-Rabin primality test."]
    #[doc = ""]
    #[doc = " \\warning        If \\p X is potentially generated by an adversary, for example"]
    #[doc = "                 when validating cryptographic parameters that you didn't"]
    #[doc = "                 generate yourself and that are supposed to be prime, then"]
    #[doc = "                 \\p rounds should be at least the half of the security"]
    #[doc = "                 strength of the cryptographic algorithm. On the other hand,"]
    #[doc = "                 if \\p X is chosen uniformly or non-adversially (as is the"]
    #[doc = "                 case when mbedtls_mpi_gen_prime calls this function), then"]
    #[doc = "                 \\p rounds can be much lower."]
    #[doc = ""]
    #[doc = " \\param X        The MPI to check for primality."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " \\param rounds   The number of bases to perform the Miller-Rabin primality"]
    #[doc = "                 test for. The probability of returning 0 on a composite is"]
    #[doc = "                 at most 2<sup>-2*\\p rounds</sup>."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG parameter to be passed to \\p f_rng."]
    #[doc = "                 This may be \\c NULL if \\p f_rng doesn't use"]
    #[doc = "                 a context parameter."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful, i.e. \\p X is probably prime."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_NOT_ACCEPTABLE if \\p X is not prime."]
    #[doc = " \\return         Another negative error code on other kinds of failure."]
    pub fn mbedtls_mpi_is_prime_ext(
        X: *const mbedtls_mpi,
        rounds: c_types::c_int,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
#[doc = "< (X-1)/2 is prime too"]
pub const mbedtls_mpi_gen_prime_flag_t_MBEDTLS_MPI_GEN_PRIME_FLAG_DH: mbedtls_mpi_gen_prime_flag_t =
    1;
#[doc = "< lower error rate from 2<sup>-80</sup> to 2<sup>-128</sup>"]
pub const mbedtls_mpi_gen_prime_flag_t_MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR:
    mbedtls_mpi_gen_prime_flag_t = 2;
#[doc = " \\brief Flags for mbedtls_mpi_gen_prime()"]
#[doc = ""]
#[doc = " Each of these flags is a constraint on the result X returned by"]
#[doc = " mbedtls_mpi_gen_prime()."]
pub type mbedtls_mpi_gen_prime_flag_t = c_types::c_uint;
extern "C" {
    #[doc = " \\brief          Generate a prime number."]
    #[doc = ""]
    #[doc = " \\param X        The destination MPI to store the generated prime in."]
    #[doc = "                 This must point to an initialized MPi."]
    #[doc = " \\param nbits    The required size of the destination MPI in bits."]
    #[doc = "                 This must be between \\c 3 and #MBEDTLS_MPI_MAX_BITS."]
    #[doc = " \\param flags    A mask of flags of type #mbedtls_mpi_gen_prime_flag_t."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG parameter to be passed to \\p f_rng."]
    #[doc = "                 This may be \\c NULL if \\p f_rng doesn't use"]
    #[doc = "                 a context parameter."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful, in which case \\p X holds a"]
    #[doc = "                 probably prime number."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_BAD_INPUT_DATA if `nbits` is not between"]
    #[doc = "                 \\c 3 and #MBEDTLS_MPI_MAX_BITS."]
    pub fn mbedtls_mpi_gen_prime(
        X: *mut mbedtls_mpi,
        nbits: size_t,
        flags: c_types::c_int,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Checkup routine"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or 1 if the test failed"]
    pub fn mbedtls_mpi_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Lock access to RSA Accelerator (MPI/bignum operations)"]
    #[doc = ""]
    #[doc = " RSA Accelerator hardware unit can only be used by one"]
    #[doc = " consumer at a time."]
    #[doc = ""]
    #[doc = " @note This function is non-recursive (do not call it twice from the"]
    #[doc = " same task.)"]
    #[doc = ""]
    #[doc = " @note You do not need to call this if you are using the mbedTLS bignum.h"]
    #[doc = " API or esp_mpi_xxx functions. This function is only needed if you"]
    #[doc = " want to call ROM RSA functions or access the registers directly."]
    #[doc = ""]
    pub fn esp_mpi_acquire_hardware();
}
extern "C" {
    #[doc = " @brief Unlock access to RSA Accelerator (MPI/bignum operations)"]
    #[doc = ""]
    #[doc = " Has to be called once for each call to esp_mpi_acquire_hardware()."]
    #[doc = ""]
    #[doc = " @note You do not need to call this if you are using the mbedTLS bignum.h"]
    #[doc = " API or esp_mpi_xxx functions. This function is only needed if you"]
    #[doc = " want to call ROM RSA functions or access the registers directly."]
    pub fn esp_mpi_release_hardware();
}
extern "C" {
    pub fn esp_mpi_mul_mpi_mod(
        Z: *mut mbedtls_mpi,
        X: *const mbedtls_mpi,
        Y: *const mbedtls_mpi,
        M: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief          Perform a sliding-window exponentiation: X = A^E mod N"]
    #[doc = ""]
    #[doc = " @param X        The destination MPI. This must point to an initialized MPI."]
    #[doc = " @param A        The base of the exponentiation."]
    #[doc = "                 This must point to an initialized MPI."]
    #[doc = " @param E        The exponent MPI. This must point to an initialized MPI."]
    #[doc = " @param N        The base for the modular reduction. This must point to an"]
    #[doc = "                 initialized MPI."]
    #[doc = " @param _RR      A helper MPI depending solely on \\p N which can be used to"]
    #[doc = "                 speed-up multiple modular exponentiations for the same value"]
    #[doc = "                 of \\p N. This may be \\c NULL. If it is not \\c NULL, it must"]
    #[doc = "                 point to an initialized MPI."]
    #[doc = ""]
    #[doc = " @return         \\c 0 if successful."]
    #[doc = " @return         #MBEDTLS_ERR_MPI_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " @return         #MBEDTLS_ERR_MPI_BAD_INPUT_DATA if \\c N is negative or"]
    #[doc = "                 even, or if \\c E is negative."]
    #[doc = " @return         Another negative error code on different kinds of failures."]
    #[doc = ""]
    pub fn mbedtls_mpi_exp_mod_soft(
        X: *mut mbedtls_mpi,
        A: *const mbedtls_mpi,
        E: *const mbedtls_mpi,
        N: *const mbedtls_mpi,
        _RR: *mut mbedtls_mpi,
    ) -> c_types::c_int;
}
#[doc = "< Curve not defined."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_NONE: mbedtls_ecp_group_id = 0;
#[doc = "< Domain parameters for the 192-bit curve defined by FIPS 186-4 and SEC1."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP192R1: mbedtls_ecp_group_id = 1;
#[doc = "< Domain parameters for the 224-bit curve defined by FIPS 186-4 and SEC1."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP224R1: mbedtls_ecp_group_id = 2;
#[doc = "< Domain parameters for the 256-bit curve defined by FIPS 186-4 and SEC1."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP256R1: mbedtls_ecp_group_id = 3;
#[doc = "< Domain parameters for the 384-bit curve defined by FIPS 186-4 and SEC1."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP384R1: mbedtls_ecp_group_id = 4;
#[doc = "< Domain parameters for the 521-bit curve defined by FIPS 186-4 and SEC1."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP521R1: mbedtls_ecp_group_id = 5;
#[doc = "< Domain parameters for 256-bit Brainpool curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP256R1: mbedtls_ecp_group_id = 6;
#[doc = "< Domain parameters for 384-bit Brainpool curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP384R1: mbedtls_ecp_group_id = 7;
#[doc = "< Domain parameters for 512-bit Brainpool curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_BP512R1: mbedtls_ecp_group_id = 8;
#[doc = "< Domain parameters for Curve25519."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_CURVE25519: mbedtls_ecp_group_id = 9;
#[doc = "< Domain parameters for 192-bit \"Koblitz\" curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP192K1: mbedtls_ecp_group_id = 10;
#[doc = "< Domain parameters for 224-bit \"Koblitz\" curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP224K1: mbedtls_ecp_group_id = 11;
#[doc = "< Domain parameters for 256-bit \"Koblitz\" curve."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_SECP256K1: mbedtls_ecp_group_id = 12;
#[doc = "< Domain parameters for Curve448."]
pub const mbedtls_ecp_group_id_MBEDTLS_ECP_DP_CURVE448: mbedtls_ecp_group_id = 13;
#[doc = " Domain-parameter identifiers: curve, subgroup, and generator."]
#[doc = ""]
#[doc = " \\note Only curves over prime fields are supported."]
#[doc = ""]
#[doc = " \\warning This library does not support validation of arbitrary domain"]
#[doc = " parameters. Therefore, only standardized domain parameters from trusted"]
#[doc = " sources should be used. See mbedtls_ecp_group_load()."]
pub type mbedtls_ecp_group_id = c_types::c_uint;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_NONE: mbedtls_ecp_curve_type = 0;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS: mbedtls_ecp_curve_type = 1;
pub const mbedtls_ecp_curve_type_MBEDTLS_ECP_TYPE_MONTGOMERY: mbedtls_ecp_curve_type = 2;
pub type mbedtls_ecp_curve_type = c_types::c_uint;
#[doc = " Curve information, for use by other modules."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecp_curve_info {
    #[doc = "< An internal identifier."]
    pub grp_id: mbedtls_ecp_group_id,
    #[doc = "< The TLS NamedCurve identifier."]
    pub tls_id: u16,
    #[doc = "< The curve size in bits."]
    pub bit_size: u16,
    #[doc = "< A human-friendly name."]
    pub name: *const c_types::c_char,
}
impl Default for mbedtls_ecp_curve_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \\brief           The ECP point structure, in Jacobian coordinates."]
#[doc = ""]
#[doc = " \\note            All functions expect and return points satisfying"]
#[doc = "                  the following condition: <code>Z == 0</code> or"]
#[doc = "                  <code>Z == 1</code>. Other values of \\p Z are"]
#[doc = "                  used only by internal functions."]
#[doc = "                  The point is zero, or \"at infinity\", if <code>Z == 0</code>."]
#[doc = "                  Otherwise, \\p X and \\p Y are its standard (affine)"]
#[doc = "                  coordinates."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecp_point {
    #[doc = "< The X coordinate of the ECP point."]
    pub X: mbedtls_mpi,
    #[doc = "< The Y coordinate of the ECP point."]
    pub Y: mbedtls_mpi,
    #[doc = "< The Z coordinate of the ECP point."]
    pub Z: mbedtls_mpi,
}
impl Default for mbedtls_ecp_point {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \\brief           The ECP group structure."]
#[doc = ""]
#[doc = " We consider two types of curve equations:"]
#[doc = " <ul><li>Short Weierstrass: <code>y^2 = x^3 + A x + B mod P</code>"]
#[doc = " (SEC1 + RFC-4492)</li>"]
#[doc = " <li>Montgomery: <code>y^2 = x^3 + A x^2 + x mod P</code> (Curve25519,"]
#[doc = " Curve448)</li></ul>"]
#[doc = " In both cases, the generator (\\p G) for a prime-order subgroup is fixed."]
#[doc = ""]
#[doc = " For Short Weierstrass, this subgroup is the whole curve, and its"]
#[doc = " cardinality is denoted by \\p N. Our code requires that \\p N is an"]
#[doc = " odd prime as mbedtls_ecp_mul() requires an odd number, and"]
#[doc = " mbedtls_ecdsa_sign() requires that it is prime for blinding purposes."]
#[doc = ""]
#[doc = " For Montgomery curves, we do not store \\p A, but <code>(A + 2) / 4</code>,"]
#[doc = " which is the quantity used in the formulas. Additionally, \\p nbits is"]
#[doc = " not the size of \\p N but the required size for private keys."]
#[doc = ""]
#[doc = " If \\p modp is NULL, reduction modulo \\p P is done using a generic algorithm."]
#[doc = " Otherwise, \\p modp must point to a function that takes an \\p mbedtls_mpi in the"]
#[doc = " range of <code>0..2^(2*pbits)-1</code>, and transforms it in-place to an integer"]
#[doc = " which is congruent mod \\p P to the given MPI, and is close enough to \\p pbits"]
#[doc = " in size, so that it may be efficiently brought in the 0..P-1 range by a few"]
#[doc = " additions or subtractions. Therefore, it is only an approximative modular"]
#[doc = " reduction. It must return 0 on success and non-zero on failure."]
#[doc = ""]
#[doc = " \\note        Alternative implementations must keep the group IDs distinct. If"]
#[doc = "              two group structures have the same ID, then they must be"]
#[doc = "              identical."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecp_group {
    #[doc = "< An internal group identifier."]
    pub id: mbedtls_ecp_group_id,
    #[doc = "< The prime modulus of the base field."]
    pub P: mbedtls_mpi,
    #[doc = "< For Short Weierstrass: \\p A in the equation. For"]
    #[doc = "Montgomery curves: <code>(A + 2) / 4</code>."]
    pub A: mbedtls_mpi,
    #[doc = "< For Short Weierstrass: \\p B in the equation."]
    #[doc = "For Montgomery curves: unused."]
    pub B: mbedtls_mpi,
    #[doc = "< The generator of the subgroup used."]
    pub G: mbedtls_ecp_point,
    #[doc = "< The order of \\p G."]
    pub N: mbedtls_mpi,
    #[doc = "< The number of bits in \\p P."]
    pub pbits: size_t,
    #[doc = "< For Short Weierstrass: The number of bits in \\p P."]
    #[doc = "For Montgomery curves: the number of bits in the"]
    #[doc = "private keys."]
    pub nbits: size_t,
    #[doc = "< \\internal 1 if the constants are static."]
    pub h: c_types::c_uint,
    #[doc = "< The function for fast pseudo-reduction"]
    #[doc = "mod \\p P (see above)."]
    pub modp:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut mbedtls_mpi) -> c_types::c_int>,
    #[doc = "< Unused."]
    pub t_pre: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mbedtls_ecp_point,
            arg2: *mut c_types::c_void,
        ) -> c_types::c_int,
    >,
    #[doc = "< Unused."]
    pub t_post: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut mbedtls_ecp_point,
            arg2: *mut c_types::c_void,
        ) -> c_types::c_int,
    >,
    #[doc = "< Unused."]
    pub t_data: *mut c_types::c_void,
    #[doc = "< Pre-computed points for ecp_mul_comb()."]
    pub T: *mut mbedtls_ecp_point,
    #[doc = "< The number of pre-computed points."]
    pub T_size: size_t,
}
impl Default for mbedtls_ecp_group {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mbedtls_ecp_restart_ctx = c_types::c_void;
#[doc = " \\brief    The ECP key-pair structure."]
#[doc = ""]
#[doc = " A generic key-pair that may be used for ECDSA and fixed ECDH, for example."]
#[doc = ""]
#[doc = " \\note    Members are deliberately in the same order as in the"]
#[doc = "          ::mbedtls_ecdsa_context structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecp_keypair {
    #[doc = "<  Elliptic curve and base point"]
    pub grp: mbedtls_ecp_group,
    #[doc = "<  our secret value"]
    pub d: mbedtls_mpi,
    #[doc = "<  our public value"]
    pub Q: mbedtls_ecp_point,
}
impl Default for mbedtls_ecp_keypair {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mbedtls_ecp_get_type(grp: *const mbedtls_ecp_group) -> mbedtls_ecp_curve_type;
}
extern "C" {
    #[doc = " \\brief           This function retrieves the information defined in"]
    #[doc = "                  mbedtls_ecp_curve_info() for all supported curves."]
    #[doc = ""]
    #[doc = " \\note            This function returns information about all curves"]
    #[doc = "                  supported by the library. Some curves may not be"]
    #[doc = "                  supported for all algorithms. Call mbedtls_ecdh_can_do()"]
    #[doc = "                  or mbedtls_ecdsa_can_do() to check if a curve is"]
    #[doc = "                  supported for ECDH or ECDSA."]
    #[doc = ""]
    #[doc = " \\return          A statically allocated array. The last entry is 0."]
    pub fn mbedtls_ecp_curve_list() -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    #[doc = " \\brief           This function retrieves the list of internal group"]
    #[doc = "                  identifiers of all supported curves in the order of"]
    #[doc = "                  preference."]
    #[doc = ""]
    #[doc = " \\note            This function returns information about all curves"]
    #[doc = "                  supported by the library. Some curves may not be"]
    #[doc = "                  supported for all algorithms. Call mbedtls_ecdh_can_do()"]
    #[doc = "                  or mbedtls_ecdsa_can_do() to check if a curve is"]
    #[doc = "                  supported for ECDH or ECDSA."]
    #[doc = ""]
    #[doc = " \\return          A statically allocated array,"]
    #[doc = "                  terminated with MBEDTLS_ECP_DP_NONE."]
    pub fn mbedtls_ecp_grp_id_list() -> *const mbedtls_ecp_group_id;
}
extern "C" {
    #[doc = " \\brief           This function retrieves curve information from an internal"]
    #[doc = "                  group identifier."]
    #[doc = ""]
    #[doc = " \\param grp_id    An \\c MBEDTLS_ECP_DP_XXX value."]
    #[doc = ""]
    #[doc = " \\return          The associated curve information on success."]
    #[doc = " \\return          NULL on failure."]
    pub fn mbedtls_ecp_curve_info_from_grp_id(
        grp_id: mbedtls_ecp_group_id,
    ) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    #[doc = " \\brief           This function retrieves curve information from a TLS"]
    #[doc = "                  NamedCurve value."]
    #[doc = ""]
    #[doc = " \\param tls_id    An \\c MBEDTLS_ECP_DP_XXX value."]
    #[doc = ""]
    #[doc = " \\return          The associated curve information on success."]
    #[doc = " \\return          NULL on failure."]
    pub fn mbedtls_ecp_curve_info_from_tls_id(tls_id: u16) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    #[doc = " \\brief           This function retrieves curve information from a"]
    #[doc = "                  human-readable name."]
    #[doc = ""]
    #[doc = " \\param name      The human-readable name."]
    #[doc = ""]
    #[doc = " \\return          The associated curve information on success."]
    #[doc = " \\return          NULL on failure."]
    pub fn mbedtls_ecp_curve_info_from_name(
        name: *const c_types::c_char,
    ) -> *const mbedtls_ecp_curve_info;
}
extern "C" {
    #[doc = " \\brief           This function initializes a point as zero."]
    #[doc = ""]
    #[doc = " \\param pt        The point to initialize."]
    pub fn mbedtls_ecp_point_init(pt: *mut mbedtls_ecp_point);
}
extern "C" {
    #[doc = " \\brief           This function initializes an ECP group context"]
    #[doc = "                  without loading any domain parameters."]
    #[doc = ""]
    #[doc = " \\note            After this function is called, domain parameters"]
    #[doc = "                  for various ECP groups can be loaded through the"]
    #[doc = "                  mbedtls_ecp_group_load() or mbedtls_ecp_tls_read_group()"]
    #[doc = "                  functions."]
    pub fn mbedtls_ecp_group_init(grp: *mut mbedtls_ecp_group);
}
extern "C" {
    #[doc = " \\brief           This function initializes a key pair as an invalid one."]
    #[doc = ""]
    #[doc = " \\param key       The key pair to initialize."]
    pub fn mbedtls_ecp_keypair_init(key: *mut mbedtls_ecp_keypair);
}
extern "C" {
    #[doc = " \\brief           This function frees the components of a point."]
    #[doc = ""]
    #[doc = " \\param pt        The point to free."]
    pub fn mbedtls_ecp_point_free(pt: *mut mbedtls_ecp_point);
}
extern "C" {
    #[doc = " \\brief           This function frees the components of an ECP group."]
    #[doc = ""]
    #[doc = " \\param grp       The group to free. This may be \\c NULL, in which"]
    #[doc = "                  case this function returns immediately. If it is not"]
    #[doc = "                  \\c NULL, it must point to an initialized ECP group."]
    pub fn mbedtls_ecp_group_free(grp: *mut mbedtls_ecp_group);
}
extern "C" {
    #[doc = " \\brief           This function frees the components of a key pair."]
    #[doc = ""]
    #[doc = " \\param key       The key pair to free. This may be \\c NULL, in which"]
    #[doc = "                  case this function returns immediately. If it is not"]
    #[doc = "                  \\c NULL, it must point to an initialized ECP key pair."]
    pub fn mbedtls_ecp_keypair_free(key: *mut mbedtls_ecp_keypair);
}
extern "C" {
    #[doc = " \\brief           This function copies the contents of point \\p Q into"]
    #[doc = "                  point \\p P."]
    #[doc = ""]
    #[doc = " \\param P         The destination point. This must be initialized."]
    #[doc = " \\param Q         The source point. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          Another negative error code for other kinds of failure."]
    pub fn mbedtls_ecp_copy(
        P: *mut mbedtls_ecp_point,
        Q: *const mbedtls_ecp_point,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function copies the contents of group \\p src into"]
    #[doc = "                  group \\p dst."]
    #[doc = ""]
    #[doc = " \\param dst       The destination group. This must be initialized."]
    #[doc = " \\param src       The source group. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_group_copy(
        dst: *mut mbedtls_ecp_group,
        src: *const mbedtls_ecp_group,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets a point to the point at infinity."]
    #[doc = ""]
    #[doc = " \\param pt        The point to set. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_set_zero(pt: *mut mbedtls_ecp_point) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function checks if a point is the point at infinity."]
    #[doc = ""]
    #[doc = " \\param pt        The point to test. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 1 if the point is zero."]
    #[doc = " \\return          \\c 0 if the point is non-zero."]
    #[doc = " \\return          A negative error code on failure."]
    pub fn mbedtls_ecp_is_zero(pt: *mut mbedtls_ecp_point) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function compares two points."]
    #[doc = ""]
    #[doc = " \\note            This assumes that the points are normalized. Otherwise,"]
    #[doc = "                  they may compare as \"not equal\" even if they are."]
    #[doc = ""]
    #[doc = " \\param P         The first point to compare. This must be initialized."]
    #[doc = " \\param Q         The second point to compare. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 if the points are equal."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the points are not equal."]
    pub fn mbedtls_ecp_point_cmp(
        P: *const mbedtls_ecp_point,
        Q: *const mbedtls_ecp_point,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function imports a non-zero point from two ASCII"]
    #[doc = "                  strings."]
    #[doc = ""]
    #[doc = " \\param P         The destination point. This must be initialized."]
    #[doc = " \\param radix     The numeric base of the input."]
    #[doc = " \\param x         The first affine coordinate, as a null-terminated string."]
    #[doc = " \\param y         The second affine coordinate, as a null-terminated string."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_MPI_XXX error code on failure."]
    pub fn mbedtls_ecp_point_read_string(
        P: *mut mbedtls_ecp_point,
        radix: c_types::c_int,
        x: *const c_types::c_char,
        y: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function exports a point into unsigned binary data."]
    #[doc = ""]
    #[doc = " \\param grp       The group to which the point should belong."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param P         The point to export. This must be initialized."]
    #[doc = " \\param format    The point format. This must be either"]
    #[doc = "                  #MBEDTLS_ECP_PF_COMPRESSED or #MBEDTLS_ECP_PF_UNCOMPRESSED."]
    #[doc = "                  (For groups without these formats, this parameter is"]
    #[doc = "                  ignored. But it still has to be either of the above"]
    #[doc = "                  values.)"]
    #[doc = " \\param olen      The address at which to store the length of"]
    #[doc = "                  the output in Bytes. This must not be \\c NULL."]
    #[doc = " \\param buf       The output buffer. This must be a writable buffer"]
    #[doc = "                  of length \\p buflen Bytes."]
    #[doc = " \\param buflen    The length of the output buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL if the output buffer"]
    #[doc = "                  is too small to hold the point."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the point format"]
    #[doc = "                  or the export for the given group is not implemented."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_point_write_binary(
        grp: *const mbedtls_ecp_group,
        P: *const mbedtls_ecp_point,
        format: c_types::c_int,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function imports a point from unsigned binary data."]
    #[doc = ""]
    #[doc = " \\note            This function does not check that the point actually"]
    #[doc = "                  belongs to the given group, see mbedtls_ecp_check_pubkey()"]
    #[doc = "                  for that."]
    #[doc = ""]
    #[doc = " \\param grp       The group to which the point should belong."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param P         The destination context to import the point to."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param buf       The input buffer. This must be a readable buffer"]
    #[doc = "                  of length \\p ilen Bytes."]
    #[doc = " \\param ilen      The length of the input buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the input is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the import for the"]
    #[doc = "                  given group is not implemented."]
    pub fn mbedtls_ecp_point_read_binary(
        grp: *const mbedtls_ecp_group,
        P: *mut mbedtls_ecp_point,
        buf: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function imports a point from a TLS ECPoint record."]
    #[doc = ""]
    #[doc = " \\note            On function return, \\p *buf is updated to point immediately"]
    #[doc = "                  after the ECPoint record."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param pt        The destination point."]
    #[doc = " \\param buf       The address of the pointer to the start of the input buffer."]
    #[doc = " \\param len       The length of the buffer."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_MPI_XXX error code on initialization"]
    #[doc = "                  failure."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid."]
    pub fn mbedtls_ecp_tls_read_point(
        grp: *const mbedtls_ecp_group,
        pt: *mut mbedtls_ecp_point,
        buf: *mut *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function exports a point as a TLS ECPoint record"]
    #[doc = "                  defined in RFC 4492, Section 5.4."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param pt        The point to be exported. This must be initialized."]
    #[doc = " \\param format    The point format to use. This must be either"]
    #[doc = "                  #MBEDTLS_ECP_PF_COMPRESSED or #MBEDTLS_ECP_PF_UNCOMPRESSED."]
    #[doc = " \\param olen      The address at which to store the length in Bytes"]
    #[doc = "                  of the data written."]
    #[doc = " \\param buf       The target buffer. This must be a writable buffer of"]
    #[doc = "                  length \\p blen Bytes."]
    #[doc = " \\param blen      The length of the target buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the input is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL if the target buffer"]
    #[doc = "                  is too small to hold the exported point."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_tls_write_point(
        grp: *const mbedtls_ecp_group,
        pt: *const mbedtls_ecp_point,
        format: c_types::c_int,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        blen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets up an ECP group context"]
    #[doc = "                  from a standardized set of domain parameters."]
    #[doc = ""]
    #[doc = " \\note            The index should be a value of the NamedCurve enum,"]
    #[doc = "                  as defined in <em>RFC-4492: Elliptic Curve Cryptography"]
    #[doc = "                  (ECC) Cipher Suites for Transport Layer Security (TLS)</em>,"]
    #[doc = "                  usually in the form of an \\c MBEDTLS_ECP_DP_XXX macro."]
    #[doc = ""]
    #[doc = " \\param grp       The group context to setup. This must be initialized."]
    #[doc = " \\param id        The identifier of the domain parameter set to load."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if \\p id doesn't"]
    #[doc = "                  correspond to a known group."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_group_load(
        grp: *mut mbedtls_ecp_group,
        id: mbedtls_ecp_group_id,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets up an ECP group context from a TLS"]
    #[doc = "                  ECParameters record as defined in RFC 4492, Section 5.4."]
    #[doc = ""]
    #[doc = " \\note            The read pointer \\p buf is updated to point right after"]
    #[doc = "                  the ECParameters record on exit."]
    #[doc = ""]
    #[doc = " \\param grp       The group context to setup. This must be initialized."]
    #[doc = " \\param buf       The address of the pointer to the start of the input buffer."]
    #[doc = " \\param len       The length of the input buffer \\c *buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the group is not"]
    #[doc = "                  recognized."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_tls_read_group(
        grp: *mut mbedtls_ecp_group,
        buf: *mut *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function extracts an elliptic curve group ID from a"]
    #[doc = "                  TLS ECParameters record as defined in RFC 4492, Section 5.4."]
    #[doc = ""]
    #[doc = " \\note            The read pointer \\p buf is updated to point right after"]
    #[doc = "                  the ECParameters record on exit."]
    #[doc = ""]
    #[doc = " \\param grp       The address at which to store the group id."]
    #[doc = "                  This must not be \\c NULL."]
    #[doc = " \\param buf       The address of the pointer to the start of the input buffer."]
    #[doc = " \\param len       The length of the input buffer \\c *buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if input is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the group is not"]
    #[doc = "                  recognized."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_tls_read_group_id(
        grp: *mut mbedtls_ecp_group_id,
        buf: *mut *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function exports an elliptic curve as a TLS"]
    #[doc = "                  ECParameters record as defined in RFC 4492, Section 5.4."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to be exported."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param olen      The address at which to store the number of Bytes written."]
    #[doc = "                  This must not be \\c NULL."]
    #[doc = " \\param buf       The buffer to write to. This must be a writable buffer"]
    #[doc = "                  of length \\p blen Bytes."]
    #[doc = " \\param blen      The length of the output buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL if the output"]
    #[doc = "                  buffer is too small to hold the exported group."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_tls_write_group(
        grp: *const mbedtls_ecp_group,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        blen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function performs a scalar multiplication of a point"]
    #[doc = "                  by an integer: \\p R = \\p m * \\p P."]
    #[doc = ""]
    #[doc = "                  It is not thread-safe to use same group in multiple threads."]
    #[doc = ""]
    #[doc = " \\note            To prevent timing attacks, this function"]
    #[doc = "                  executes the exact same sequence of base-field"]
    #[doc = "                  operations for any valid \\p m. It avoids any if-branch or"]
    #[doc = "                  array index depending on the value of \\p m."]
    #[doc = ""]
    #[doc = " \\note            If \\p f_rng is not NULL, it is used to randomize"]
    #[doc = "                  intermediate results to prevent potential timing attacks"]
    #[doc = "                  targeting these results. We recommend always providing"]
    #[doc = "                  a non-NULL \\p f_rng. The overhead is negligible."]
    #[doc = "                  Note: unless #MBEDTLS_ECP_NO_INTERNAL_RNG is defined, when"]
    #[doc = "                  \\p f_rng is NULL, an internal RNG (seeded from the value"]
    #[doc = "                  of \\p m) will be used instead."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param R         The point in which to store the result of the calculation."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param m         The integer by which to multiply. This must be initialized."]
    #[doc = " \\param P         The point to multiply. This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This may be \\c NULL if randomization"]
    #[doc = "                  of intermediate results isn't desired (discouraged)."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p p_rng."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if \\p m is not a valid private"]
    #[doc = "                  key, or \\p P is not a valid public key."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_mul(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function performs multiplication of a point by"]
    #[doc = "                  an integer: \\p R = \\p m * \\p P in a restartable way."]
    #[doc = ""]
    #[doc = " \\see             mbedtls_ecp_mul()"]
    #[doc = ""]
    #[doc = " \\note            This function does the same as \\c mbedtls_ecp_mul(), but"]
    #[doc = "                  it can return early and restart according to the limit set"]
    #[doc = "                  with \\c mbedtls_ecp_set_max_ops() to reduce blocking."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param R         The point in which to store the result of the calculation."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param m         The integer by which to multiply. This must be initialized."]
    #[doc = " \\param P         The point to multiply. This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This may be \\c NULL if randomization"]
    #[doc = "                  of intermediate results isn't desired (discouraged)."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p p_rng."]
    #[doc = " \\param rs_ctx    The restart context (NULL disables restart)."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if \\p m is not a valid private"]
    #[doc = "                  key, or \\p P is not a valid public key."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_mul_restartable(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        rs_ctx: *mut mbedtls_ecp_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function performs multiplication and addition of two"]
    #[doc = "                  points by integers: \\p R = \\p m * \\p P + \\p n * \\p Q"]
    #[doc = ""]
    #[doc = "                  It is not thread-safe to use same group in multiple threads."]
    #[doc = ""]
    #[doc = " \\note            In contrast to mbedtls_ecp_mul(), this function does not"]
    #[doc = "                  guarantee a constant execution flow and timing."]
    #[doc = ""]
    #[doc = " \\note            This function is only defined for short Weierstrass curves."]
    #[doc = "                  It may not be included in builds without any short"]
    #[doc = "                  Weierstrass curve."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param R         The point in which to store the result of the calculation."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param m         The integer by which to multiply \\p P."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param P         The point to multiply by \\p m. This must be initialized."]
    #[doc = " \\param n         The integer by which to multiply \\p Q."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The point to be multiplied by \\p n."]
    #[doc = "                  This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if \\p m or \\p n are not"]
    #[doc = "                  valid private keys, or \\p P or \\p Q are not valid public"]
    #[doc = "                  keys."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if \\p grp does not"]
    #[doc = "                  designate a short Weierstrass curve."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_muladd(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        n: *const mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function performs multiplication and addition of two"]
    #[doc = "                  points by integers: \\p R = \\p m * \\p P + \\p n * \\p Q in a"]
    #[doc = "                  restartable way."]
    #[doc = ""]
    #[doc = " \\see             \\c mbedtls_ecp_muladd()"]
    #[doc = ""]
    #[doc = " \\note            This function works the same as \\c mbedtls_ecp_muladd(),"]
    #[doc = "                  but it can return early and restart according to the limit"]
    #[doc = "                  set with \\c mbedtls_ecp_set_max_ops() to reduce blocking."]
    #[doc = ""]
    #[doc = " \\note            This function is only defined for short Weierstrass curves."]
    #[doc = "                  It may not be included in builds without any short"]
    #[doc = "                  Weierstrass curve."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param R         The point in which to store the result of the calculation."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param m         The integer by which to multiply \\p P."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param P         The point to multiply by \\p m. This must be initialized."]
    #[doc = " \\param n         The integer by which to multiply \\p Q."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The point to be multiplied by \\p n."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param rs_ctx    The restart context (NULL disables restart)."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if \\p m or \\p n are not"]
    #[doc = "                  valid private keys, or \\p P or \\p Q are not valid public"]
    #[doc = "                  keys."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory-allocation failure."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if \\p grp does not"]
    #[doc = "                  designate a short Weierstrass curve."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_muladd_restartable(
        grp: *mut mbedtls_ecp_group,
        R: *mut mbedtls_ecp_point,
        m: *const mbedtls_mpi,
        P: *const mbedtls_ecp_point,
        n: *const mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
        rs_ctx: *mut mbedtls_ecp_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function checks that a point is a valid public key"]
    #[doc = "                  on this curve."]
    #[doc = ""]
    #[doc = "                  It only checks that the point is non-zero, has"]
    #[doc = "                  valid coordinates and lies on the curve. It does not verify"]
    #[doc = "                  that it is indeed a multiple of \\p G. This additional"]
    #[doc = "                  check is computationally more expensive, is not required"]
    #[doc = "                  by standards, and should not be necessary if the group"]
    #[doc = "                  used has a small cofactor. In particular, it is useless for"]
    #[doc = "                  the NIST groups which all have a cofactor of 1."]
    #[doc = ""]
    #[doc = " \\note            This function uses bare components rather than an"]
    #[doc = "                  ::mbedtls_ecp_keypair structure, to ease use with other"]
    #[doc = "                  structures, such as ::mbedtls_ecdh_context or"]
    #[doc = "                  ::mbedtls_ecdsa_context."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group the point should belong to."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param pt        The point to check. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 if the point is a valid public key."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if the point is not"]
    #[doc = "                  a valid public key for the given curve."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_check_pubkey(
        grp: *const mbedtls_ecp_group,
        pt: *const mbedtls_ecp_point,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function checks that an \\p mbedtls_mpi is a"]
    #[doc = "                  valid private key for this curve."]
    #[doc = ""]
    #[doc = " \\note            This function uses bare components rather than an"]
    #[doc = "                  ::mbedtls_ecp_keypair structure to ease use with other"]
    #[doc = "                  structures, such as ::mbedtls_ecdh_context or"]
    #[doc = "                  ::mbedtls_ecdsa_context."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group the private key should belong to."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param d         The integer to check. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 if the point is a valid private key."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY if the point is not a valid"]
    #[doc = "                  private key for the given curve."]
    #[doc = " \\return          Another negative error code on other kinds of failure."]
    pub fn mbedtls_ecp_check_privkey(
        grp: *const mbedtls_ecp_group,
        d: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates a private key."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to generate a private key for."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param d         The destination MPI (secret part). This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG parameter to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX error code"]
    #[doc = "                  on failure."]
    pub fn mbedtls_ecp_gen_privkey(
        grp: *const mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates a keypair with a configurable base"]
    #[doc = "                  point."]
    #[doc = ""]
    #[doc = " \\note            This function uses bare components rather than an"]
    #[doc = "                  ::mbedtls_ecp_keypair structure to ease use with other"]
    #[doc = "                  structures, such as ::mbedtls_ecdh_context or"]
    #[doc = "                  ::mbedtls_ecdsa_context."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to generate a key pair for."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param G         The base point to use. This must be initialized"]
    #[doc = "                  and belong to \\p grp. It replaces the default base"]
    #[doc = "                  point \\c grp->G used by mbedtls_ecp_gen_keypair()."]
    #[doc = " \\param d         The destination MPI (secret part)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The destination point (public part)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may"]
    #[doc = "                  be \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX error code"]
    #[doc = "                  on failure."]
    pub fn mbedtls_ecp_gen_keypair_base(
        grp: *mut mbedtls_ecp_group,
        G: *const mbedtls_ecp_point,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates an ECP keypair."]
    #[doc = ""]
    #[doc = " \\note            This function uses bare components rather than an"]
    #[doc = "                  ::mbedtls_ecp_keypair structure to ease use with other"]
    #[doc = "                  structures, such as ::mbedtls_ecdh_context or"]
    #[doc = "                  ::mbedtls_ecdsa_context."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to generate a key pair for."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param d         The destination MPI (secret part)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The destination point (public part)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may"]
    #[doc = "                  be \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX error code"]
    #[doc = "                  on failure."]
    pub fn mbedtls_ecp_gen_keypair(
        grp: *mut mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates an ECP key."]
    #[doc = ""]
    #[doc = " \\param grp_id    The ECP group identifier."]
    #[doc = " \\param key       The destination key. This must be initialized."]
    #[doc = " \\param f_rng     The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may"]
    #[doc = "                  be \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX error code"]
    #[doc = "                  on failure."]
    pub fn mbedtls_ecp_gen_key(
        grp_id: mbedtls_ecp_group_id,
        key: *mut mbedtls_ecp_keypair,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function reads an elliptic curve private key."]
    #[doc = ""]
    #[doc = " \\param grp_id    The ECP group identifier."]
    #[doc = " \\param key       The destination key."]
    #[doc = " \\param buf       The buffer containing the binary representation of the"]
    #[doc = "                  key. (Big endian integer for Weierstrass curves, byte"]
    #[doc = "                  string for Montgomery curves.)"]
    #[doc = " \\param buflen    The length of the buffer in bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_INVALID_KEY error if the key is"]
    #[doc = "                  invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_MPI_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the operation for"]
    #[doc = "                  the group is not implemented."]
    #[doc = " \\return          Another negative error code on different kinds of failure."]
    pub fn mbedtls_ecp_read_key(
        grp_id: mbedtls_ecp_group_id,
        key: *mut mbedtls_ecp_keypair,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function exports an elliptic curve private key."]
    #[doc = ""]
    #[doc = " \\param key       The private key."]
    #[doc = " \\param buf       The output buffer for containing the binary representation"]
    #[doc = "                  of the key. (Big endian integer for Weierstrass curves, byte"]
    #[doc = "                  string for Montgomery curves.)"]
    #[doc = " \\param buflen    The total length of the buffer in bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL if the \\p key"]
    #[doc = "representation is larger than the available space in \\p buf."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE if the operation for"]
    #[doc = "                  the group is not implemented."]
    #[doc = " \\return          Another negative error code on different kinds of failure."]
    pub fn mbedtls_ecp_write_key(
        key: *mut mbedtls_ecp_keypair,
        buf: *mut c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function checks that the keypair objects"]
    #[doc = "                  \\p pub and \\p prv have the same group and the"]
    #[doc = "                  same public point, and that the private key in"]
    #[doc = "                  \\p prv is consistent with the public key."]
    #[doc = ""]
    #[doc = " \\param pub       The keypair structure holding the public key. This"]
    #[doc = "                  must be initialized. If it contains a private key, that"]
    #[doc = "                  part is ignored."]
    #[doc = " \\param prv       The keypair structure holding the full keypair."]
    #[doc = "                  This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success, meaning that the keys are valid and match."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the keys are invalid or do not match."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or an \\c MBEDTLS_ERR_MPI_XXX"]
    #[doc = "                  error code on calculation failure."]
    pub fn mbedtls_ecp_check_pub_priv(
        pub_: *const mbedtls_ecp_keypair,
        prv: *const mbedtls_ecp_keypair,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          The ECP checkup routine."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         \\c 1 on failure."]
    pub fn mbedtls_ecp_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Securely zeroize a buffer"]
    #[doc = ""]
    #[doc = "              The function is meant to wipe the data contained in a buffer so"]
    #[doc = "              that it can no longer be recovered even if the program memory"]
    #[doc = "              is later compromised. Call this function on sensitive data"]
    #[doc = "              stored on the stack before returning from a function, and on"]
    #[doc = "              sensitive data stored on the heap before freeing the heap"]
    #[doc = "              object."]
    #[doc = ""]
    #[doc = "              It is extremely difficult to guarantee that calls to"]
    #[doc = "              mbedtls_platform_zeroize() are not removed by aggressive"]
    #[doc = "              compiler optimizations in a portable way. For this reason, Mbed"]
    #[doc = "              TLS provides the configuration option"]
    #[doc = "              MBEDTLS_PLATFORM_ZEROIZE_ALT, which allows users to configure"]
    #[doc = "              mbedtls_platform_zeroize() to use a suitable implementation for"]
    #[doc = "              their platform and needs"]
    #[doc = ""]
    #[doc = " \\param buf   Buffer to be zeroized"]
    #[doc = " \\param len   Length of the buffer in bytes"]
    #[doc = ""]
    pub fn mbedtls_platform_zeroize(buf: *mut c_types::c_void, len: size_t);
}
#[doc = "< None."]
pub const mbedtls_md_type_t_MBEDTLS_MD_NONE: mbedtls_md_type_t = 0;
#[doc = "< The MD2 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_MD2: mbedtls_md_type_t = 1;
#[doc = "< The MD4 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_MD4: mbedtls_md_type_t = 2;
#[doc = "< The MD5 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_MD5: mbedtls_md_type_t = 3;
#[doc = "< The SHA-1 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA1: mbedtls_md_type_t = 4;
#[doc = "< The SHA-224 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA224: mbedtls_md_type_t = 5;
#[doc = "< The SHA-256 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA256: mbedtls_md_type_t = 6;
#[doc = "< The SHA-384 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA384: mbedtls_md_type_t = 7;
#[doc = "< The SHA-512 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_SHA512: mbedtls_md_type_t = 8;
#[doc = "< The RIPEMD-160 message digest."]
pub const mbedtls_md_type_t_MBEDTLS_MD_RIPEMD160: mbedtls_md_type_t = 9;
#[doc = " \\brief     Supported message digests."]
#[doc = ""]
#[doc = " \\warning   MD2, MD4, MD5 and SHA-1 are considered weak message digests and"]
#[doc = "            their use constitutes a security risk. We recommend considering"]
#[doc = "            stronger message digests instead."]
#[doc = ""]
pub type mbedtls_md_type_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_md_info_t {
    _unused: [u8; 0],
}
#[doc = " The generic message-digest context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_md_context_t {
    #[doc = " Information about the associated message digest."]
    pub md_info: *const mbedtls_md_info_t,
    #[doc = " The digest-specific context."]
    pub md_ctx: *mut c_types::c_void,
    #[doc = " The HMAC part of the context."]
    pub hmac_ctx: *mut c_types::c_void,
}
impl Default for mbedtls_md_context_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief           This function returns the list of digests supported by the"]
    #[doc = "                  generic digest module."]
    #[doc = ""]
    #[doc = " \\note            The list starts with the strongest available hashes."]
    #[doc = ""]
    #[doc = " \\return          A statically allocated array of digests. Each element"]
    #[doc = "                  in the returned list is an integer belonging to the"]
    #[doc = "                  message-digest enumeration #mbedtls_md_type_t."]
    #[doc = "                  The last entry is 0."]
    pub fn mbedtls_md_list() -> *const c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function returns the message-digest information"]
    #[doc = "                  associated with the given digest name."]
    #[doc = ""]
    #[doc = " \\param md_name   The name of the digest to search for."]
    #[doc = ""]
    #[doc = " \\return          The message-digest information associated with \\p md_name."]
    #[doc = " \\return          NULL if the associated message-digest information is not found."]
    pub fn mbedtls_md_info_from_string(md_name: *const c_types::c_char)
        -> *const mbedtls_md_info_t;
}
extern "C" {
    #[doc = " \\brief           This function returns the message-digest information"]
    #[doc = "                  associated with the given digest type."]
    #[doc = ""]
    #[doc = " \\param md_type   The type of digest to search for."]
    #[doc = ""]
    #[doc = " \\return          The message-digest information associated with \\p md_type."]
    #[doc = " \\return          NULL if the associated message-digest information is not found."]
    pub fn mbedtls_md_info_from_type(md_type: mbedtls_md_type_t) -> *const mbedtls_md_info_t;
}
extern "C" {
    #[doc = " \\brief           This function initializes a message-digest context without"]
    #[doc = "                  binding it to a particular message-digest algorithm."]
    #[doc = ""]
    #[doc = "                  This function should always be called first. It prepares the"]
    #[doc = "                  context for mbedtls_md_setup() for binding it to a"]
    #[doc = "                  message-digest algorithm."]
    pub fn mbedtls_md_init(ctx: *mut mbedtls_md_context_t);
}
extern "C" {
    #[doc = " \\brief           This function clears the internal structure of \\p ctx and"]
    #[doc = "                  frees any embedded internal structure, but does not free"]
    #[doc = "                  \\p ctx itself."]
    #[doc = ""]
    #[doc = "                  If you have called mbedtls_md_setup() on \\p ctx, you must"]
    #[doc = "                  call mbedtls_md_free() when you are no longer using the"]
    #[doc = "                  context."]
    #[doc = "                  Calling this function if you have previously"]
    #[doc = "                  called mbedtls_md_init() and nothing else is optional."]
    #[doc = "                  You must not call this function if you have not called"]
    #[doc = "                  mbedtls_md_init()."]
    pub fn mbedtls_md_free(ctx: *mut mbedtls_md_context_t);
}
extern "C" {
    #[doc = " \\brief           This function selects the message digest algorithm to use,"]
    #[doc = "                  and allocates internal structures."]
    #[doc = ""]
    #[doc = "                  It should be called after mbedtls_md_init() or mbedtls_md_free()."]
    #[doc = "                  Makes it necessary to call mbedtls_md_free() later."]
    #[doc = ""]
    #[doc = " \\deprecated      Superseded by mbedtls_md_setup() in 2.0.0"]
    #[doc = ""]
    #[doc = " \\param ctx       The context to set up."]
    #[doc = " \\param md_info   The information structure of the message-digest algorithm"]
    #[doc = "                  to use."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_ALLOC_FAILED on memory-allocation failure."]
    pub fn mbedtls_md_init_ctx(
        ctx: *mut mbedtls_md_context_t,
        md_info: *const mbedtls_md_info_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function selects the message digest algorithm to use,"]
    #[doc = "                  and allocates internal structures."]
    #[doc = ""]
    #[doc = "                  It should be called after mbedtls_md_init() or"]
    #[doc = "                  mbedtls_md_free(). Makes it necessary to call"]
    #[doc = "                  mbedtls_md_free() later."]
    #[doc = ""]
    #[doc = " \\param ctx       The context to set up."]
    #[doc = " \\param md_info   The information structure of the message-digest algorithm"]
    #[doc = "                  to use."]
    #[doc = " \\param hmac      Defines if HMAC is used. 0: HMAC is not used (saves some memory),"]
    #[doc = "                  or non-zero: HMAC is used with this context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_ALLOC_FAILED on memory-allocation failure."]
    pub fn mbedtls_md_setup(
        ctx: *mut mbedtls_md_context_t,
        md_info: *const mbedtls_md_info_t,
        hmac: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function clones the state of an message-digest"]
    #[doc = "                  context."]
    #[doc = ""]
    #[doc = " \\note            You must call mbedtls_md_setup() on \\c dst before calling"]
    #[doc = "                  this function."]
    #[doc = ""]
    #[doc = " \\note            The two contexts must have the same type,"]
    #[doc = "                  for example, both are SHA-256."]
    #[doc = ""]
    #[doc = " \\warning         This function clones the message-digest state, not the"]
    #[doc = "                  HMAC state."]
    #[doc = ""]
    #[doc = " \\param dst       The destination context."]
    #[doc = " \\param src       The context to be cloned."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification failure."]
    pub fn mbedtls_md_clone(
        dst: *mut mbedtls_md_context_t,
        src: *const mbedtls_md_context_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function extracts the message-digest size from the"]
    #[doc = "                  message-digest information structure."]
    #[doc = ""]
    #[doc = " \\param md_info   The information structure of the message-digest algorithm"]
    #[doc = "                  to use."]
    #[doc = ""]
    #[doc = " \\return          The size of the message-digest output in Bytes."]
    pub fn mbedtls_md_get_size(md_info: *const mbedtls_md_info_t) -> c_types::c_uchar;
}
extern "C" {
    #[doc = " \\brief           This function extracts the message-digest type from the"]
    #[doc = "                  message-digest information structure."]
    #[doc = ""]
    #[doc = " \\param md_info   The information structure of the message-digest algorithm"]
    #[doc = "                  to use."]
    #[doc = ""]
    #[doc = " \\return          The type of the message digest."]
    pub fn mbedtls_md_get_type(md_info: *const mbedtls_md_info_t) -> mbedtls_md_type_t;
}
extern "C" {
    #[doc = " \\brief           This function extracts the message-digest name from the"]
    #[doc = "                  message-digest information structure."]
    #[doc = ""]
    #[doc = " \\param md_info   The information structure of the message-digest algorithm"]
    #[doc = "                  to use."]
    #[doc = ""]
    #[doc = " \\return          The name of the message digest."]
    pub fn mbedtls_md_get_name(md_info: *const mbedtls_md_info_t) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief           This function starts a message-digest computation."]
    #[doc = ""]
    #[doc = "                  You must call this function after setting up the context"]
    #[doc = "                  with mbedtls_md_setup(), and before passing data with"]
    #[doc = "                  mbedtls_md_update()."]
    #[doc = ""]
    #[doc = " \\param ctx       The generic message-digest context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_starts(ctx: *mut mbedtls_md_context_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function feeds an input buffer into an ongoing"]
    #[doc = "                  message-digest computation."]
    #[doc = ""]
    #[doc = "                  You must call mbedtls_md_starts() before calling this"]
    #[doc = "                  function. You may call this function multiple times."]
    #[doc = "                  Afterwards, call mbedtls_md_finish()."]
    #[doc = ""]
    #[doc = " \\param ctx       The generic message-digest context."]
    #[doc = " \\param input     The buffer holding the input data."]
    #[doc = " \\param ilen      The length of the input data."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_update(
        ctx: *mut mbedtls_md_context_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function finishes the digest operation,"]
    #[doc = "                  and writes the result to the output buffer."]
    #[doc = ""]
    #[doc = "                  Call this function after a call to mbedtls_md_starts(),"]
    #[doc = "                  followed by any number of calls to mbedtls_md_update()."]
    #[doc = "                  Afterwards, you may either clear the context with"]
    #[doc = "                  mbedtls_md_free(), or call mbedtls_md_starts() to reuse"]
    #[doc = "                  the context for another digest operation with the same"]
    #[doc = "                  algorithm."]
    #[doc = ""]
    #[doc = " \\param ctx       The generic message-digest context."]
    #[doc = " \\param output    The buffer for the generic message-digest checksum result."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_finish(
        ctx: *mut mbedtls_md_context_t,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function calculates the message-digest of a buffer,"]
    #[doc = "                 with respect to a configurable message-digest algorithm"]
    #[doc = "                 in a single call."]
    #[doc = ""]
    #[doc = "                 The result is calculated as"]
    #[doc = "                 Output = message_digest(input buffer)."]
    #[doc = ""]
    #[doc = " \\param md_info  The information structure of the message-digest algorithm"]
    #[doc = "                 to use."]
    #[doc = " \\param input    The buffer holding the data."]
    #[doc = " \\param ilen     The length of the input data."]
    #[doc = " \\param output   The generic message-digest checksum result."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                 failure."]
    pub fn mbedtls_md(
        md_info: *const mbedtls_md_info_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function calculates the message-digest checksum"]
    #[doc = "                 result of the contents of the provided file."]
    #[doc = ""]
    #[doc = "                 The result is calculated as"]
    #[doc = "                 Output = message_digest(file contents)."]
    #[doc = ""]
    #[doc = " \\param md_info  The information structure of the message-digest algorithm"]
    #[doc = "                 to use."]
    #[doc = " \\param path     The input file name."]
    #[doc = " \\param output   The generic message-digest checksum result."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_MD_FILE_IO_ERROR on an I/O error accessing"]
    #[doc = "                 the file pointed by \\p path."]
    #[doc = " \\return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA if \\p md_info was NULL."]
    pub fn mbedtls_md_file(
        md_info: *const mbedtls_md_info_t,
        path: *const c_types::c_char,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets the HMAC key and prepares to"]
    #[doc = "                  authenticate a new message."]
    #[doc = ""]
    #[doc = "                  Call this function after mbedtls_md_setup(), to use"]
    #[doc = "                  the MD context for an HMAC calculation, then call"]
    #[doc = "                  mbedtls_md_hmac_update() to provide the input data, and"]
    #[doc = "                  mbedtls_md_hmac_finish() to get the HMAC value."]
    #[doc = ""]
    #[doc = " \\param ctx       The message digest context containing an embedded HMAC"]
    #[doc = "                  context."]
    #[doc = " \\param key       The HMAC secret key."]
    #[doc = " \\param keylen    The length of the HMAC key in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_hmac_starts(
        ctx: *mut mbedtls_md_context_t,
        key: *const c_types::c_uchar,
        keylen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function feeds an input buffer into an ongoing HMAC"]
    #[doc = "                  computation."]
    #[doc = ""]
    #[doc = "                  Call mbedtls_md_hmac_starts() or mbedtls_md_hmac_reset()"]
    #[doc = "                  before calling this function."]
    #[doc = "                  You may call this function multiple times to pass the"]
    #[doc = "                  input piecewise."]
    #[doc = "                  Afterwards, call mbedtls_md_hmac_finish()."]
    #[doc = ""]
    #[doc = " \\param ctx       The message digest context containing an embedded HMAC"]
    #[doc = "                  context."]
    #[doc = " \\param input     The buffer holding the input data."]
    #[doc = " \\param ilen      The length of the input data."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_hmac_update(
        ctx: *mut mbedtls_md_context_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function finishes the HMAC operation, and writes"]
    #[doc = "                  the result to the output buffer."]
    #[doc = ""]
    #[doc = "                  Call this function after mbedtls_md_hmac_starts() and"]
    #[doc = "                  mbedtls_md_hmac_update() to get the HMAC value. Afterwards"]
    #[doc = "                  you may either call mbedtls_md_free() to clear the context,"]
    #[doc = "                  or call mbedtls_md_hmac_reset() to reuse the context with"]
    #[doc = "                  the same HMAC key."]
    #[doc = ""]
    #[doc = " \\param ctx       The message digest context containing an embedded HMAC"]
    #[doc = "                  context."]
    #[doc = " \\param output    The generic HMAC checksum result."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_hmac_finish(
        ctx: *mut mbedtls_md_context_t,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function prepares to authenticate a new message with"]
    #[doc = "                  the same key as the previous HMAC operation."]
    #[doc = ""]
    #[doc = "                  You may call this function after mbedtls_md_hmac_finish()."]
    #[doc = "                  Afterwards call mbedtls_md_hmac_update() to pass the new"]
    #[doc = "                  input."]
    #[doc = ""]
    #[doc = " \\param ctx       The message digest context containing an embedded HMAC"]
    #[doc = "                  context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                  failure."]
    pub fn mbedtls_md_hmac_reset(ctx: *mut mbedtls_md_context_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function calculates the full generic HMAC"]
    #[doc = "                 on the input buffer with the provided key."]
    #[doc = ""]
    #[doc = "                 The function allocates the context, performs the"]
    #[doc = "                 calculation, and frees the context."]
    #[doc = ""]
    #[doc = "                 The HMAC result is calculated as"]
    #[doc = "                 output = generic HMAC(hmac key, input buffer)."]
    #[doc = ""]
    #[doc = " \\param md_info  The information structure of the message-digest algorithm"]
    #[doc = "                 to use."]
    #[doc = " \\param key      The HMAC secret key."]
    #[doc = " \\param keylen   The length of the HMAC secret key in Bytes."]
    #[doc = " \\param input    The buffer holding the input data."]
    #[doc = " \\param ilen     The length of the input data."]
    #[doc = " \\param output   The generic HMAC result."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_MD_BAD_INPUT_DATA on parameter-verification"]
    #[doc = "                 failure."]
    pub fn mbedtls_md_hmac(
        md_info: *const mbedtls_md_info_t,
        key: *const c_types::c_uchar,
        keylen: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_md_process(
        ctx: *mut mbedtls_md_context_t,
        data: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
#[doc = " \\brief   The RSA context structure."]
#[doc = ""]
#[doc = " \\note    Direct manipulation of the members of this structure"]
#[doc = "          is deprecated. All manipulation should instead be done through"]
#[doc = "          the public interface functions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_rsa_context {
    #[doc = "<  Reserved for internal purposes."]
    #[doc = "    Do not set this field in application"]
    #[doc = "    code. Its meaning might change without"]
    #[doc = "    notice."]
    pub ver: c_types::c_int,
    #[doc = "<  The size of \\p N in Bytes."]
    pub len: size_t,
    #[doc = "<  The public modulus."]
    pub N: mbedtls_mpi,
    #[doc = "<  The public exponent."]
    pub E: mbedtls_mpi,
    #[doc = "<  The private exponent."]
    pub D: mbedtls_mpi,
    #[doc = "<  The first prime factor."]
    pub P: mbedtls_mpi,
    #[doc = "<  The second prime factor."]
    pub Q: mbedtls_mpi,
    #[doc = "<  <code>D % (P - 1)</code>."]
    pub DP: mbedtls_mpi,
    #[doc = "<  <code>D % (Q - 1)</code>."]
    pub DQ: mbedtls_mpi,
    #[doc = "<  <code>1 / (Q % P)</code>."]
    pub QP: mbedtls_mpi,
    #[doc = "<  cached <code>R^2 mod N</code>."]
    pub RN: mbedtls_mpi,
    #[doc = "<  cached <code>R^2 mod P</code>."]
    pub RP: mbedtls_mpi,
    #[doc = "<  cached <code>R^2 mod Q</code>."]
    pub RQ: mbedtls_mpi,
    #[doc = "<  The cached blinding value."]
    pub Vi: mbedtls_mpi,
    #[doc = "<  The cached un-blinding value."]
    pub Vf: mbedtls_mpi,
    #[doc = "< Selects padding mode:"]
    #[doc = "#MBEDTLS_RSA_PKCS_V15 for 1.5 padding and"]
    #[doc = "#MBEDTLS_RSA_PKCS_V21 for OAEP or PSS."]
    pub padding: c_types::c_int,
    #[doc = "< Hash identifier of mbedtls_md_type_t type,"]
    #[doc = "as specified in md.h for use in the MGF"]
    #[doc = "mask generating function used in the"]
    #[doc = "EME-OAEP and EMSA-PSS encodings."]
    pub hash_id: c_types::c_int,
}
impl Default for mbedtls_rsa_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief          This function initializes an RSA context."]
    #[doc = ""]
    #[doc = " \\note           Set padding to #MBEDTLS_RSA_PKCS_V21 for the RSAES-OAEP"]
    #[doc = "                 encryption scheme and the RSASSA-PSS signature scheme."]
    #[doc = ""]
    #[doc = " \\note           The \\p hash_id parameter is ignored when using"]
    #[doc = "                 #MBEDTLS_RSA_PKCS_V15 padding."]
    #[doc = ""]
    #[doc = " \\note           The choice of padding mode is strictly enforced for private key"]
    #[doc = "                 operations, since there might be security concerns in"]
    #[doc = "                 mixing padding modes. For public key operations it is"]
    #[doc = "                 a default value, which can be overridden by calling specific"]
    #[doc = "                 \\c rsa_rsaes_xxx or \\c rsa_rsassa_xxx functions."]
    #[doc = ""]
    #[doc = " \\note           The hash selected in \\p hash_id is always used for OEAP"]
    #[doc = "                 encryption. For PSS signatures, it is always used for"]
    #[doc = "                 making signatures, but can be overridden for verifying them."]
    #[doc = "                 If set to #MBEDTLS_MD_NONE, it is always overridden."]
    #[doc = ""]
    #[doc = " \\param ctx      The RSA context to initialize. This must not be \\c NULL."]
    #[doc = " \\param padding  The padding mode to use. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PKCS_V15 or #MBEDTLS_RSA_PKCS_V21."]
    #[doc = " \\param hash_id  The hash identifier of ::mbedtls_md_type_t type, if"]
    #[doc = "                 \\p padding is #MBEDTLS_RSA_PKCS_V21. It is unused"]
    #[doc = "                 otherwise."]
    pub fn mbedtls_rsa_init(
        ctx: *mut mbedtls_rsa_context,
        padding: c_types::c_int,
        hash_id: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          This function imports a set of core parameters into an"]
    #[doc = "                 RSA context."]
    #[doc = ""]
    #[doc = " \\note           This function can be called multiple times for successive"]
    #[doc = "                 imports, if the parameters are not simultaneously present."]
    #[doc = ""]
    #[doc = "                 Any sequence of calls to this function should be followed"]
    #[doc = "                 by a call to mbedtls_rsa_complete(), which checks and"]
    #[doc = "                 completes the provided information to a ready-for-use"]
    #[doc = "                 public or private RSA key."]
    #[doc = ""]
    #[doc = " \\note           See mbedtls_rsa_complete() for more information on which"]
    #[doc = "                 parameters are necessary to set up a private or public"]
    #[doc = "                 RSA key."]
    #[doc = ""]
    #[doc = " \\note           The imported parameters are copied and need not be preserved"]
    #[doc = "                 for the lifetime of the RSA context being set up."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to store the parameters in."]
    #[doc = " \\param N        The RSA modulus. This may be \\c NULL."]
    #[doc = " \\param P        The first prime factor of \\p N. This may be \\c NULL."]
    #[doc = " \\param Q        The second prime factor of \\p N. This may be \\c NULL."]
    #[doc = " \\param D        The private exponent. This may be \\c NULL."]
    #[doc = " \\param E        The public exponent. This may be \\c NULL."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A non-zero error code on failure."]
    pub fn mbedtls_rsa_import(
        ctx: *mut mbedtls_rsa_context,
        N: *const mbedtls_mpi,
        P: *const mbedtls_mpi,
        Q: *const mbedtls_mpi,
        D: *const mbedtls_mpi,
        E: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function imports core RSA parameters, in raw big-endian"]
    #[doc = "                 binary format, into an RSA context."]
    #[doc = ""]
    #[doc = " \\note           This function can be called multiple times for successive"]
    #[doc = "                 imports, if the parameters are not simultaneously present."]
    #[doc = ""]
    #[doc = "                 Any sequence of calls to this function should be followed"]
    #[doc = "                 by a call to mbedtls_rsa_complete(), which checks and"]
    #[doc = "                 completes the provided information to a ready-for-use"]
    #[doc = "                 public or private RSA key."]
    #[doc = ""]
    #[doc = " \\note           See mbedtls_rsa_complete() for more information on which"]
    #[doc = "                 parameters are necessary to set up a private or public"]
    #[doc = "                 RSA key."]
    #[doc = ""]
    #[doc = " \\note           The imported parameters are copied and need not be preserved"]
    #[doc = "                 for the lifetime of the RSA context being set up."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to store the parameters in."]
    #[doc = " \\param N        The RSA modulus. This may be \\c NULL."]
    #[doc = " \\param N_len    The Byte length of \\p N; it is ignored if \\p N == NULL."]
    #[doc = " \\param P        The first prime factor of \\p N. This may be \\c NULL."]
    #[doc = " \\param P_len    The Byte length of \\p P; it ns ignored if \\p P == NULL."]
    #[doc = " \\param Q        The second prime factor of \\p N. This may be \\c NULL."]
    #[doc = " \\param Q_len    The Byte length of \\p Q; it is ignored if \\p Q == NULL."]
    #[doc = " \\param D        The private exponent. This may be \\c NULL."]
    #[doc = " \\param D_len    The Byte length of \\p D; it is ignored if \\p D == NULL."]
    #[doc = " \\param E        The public exponent. This may be \\c NULL."]
    #[doc = " \\param E_len    The Byte length of \\p E; it is ignored if \\p E == NULL."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A non-zero error code on failure."]
    pub fn mbedtls_rsa_import_raw(
        ctx: *mut mbedtls_rsa_context,
        N: *const c_types::c_uchar,
        N_len: size_t,
        P: *const c_types::c_uchar,
        P_len: size_t,
        Q: *const c_types::c_uchar,
        Q_len: size_t,
        D: *const c_types::c_uchar,
        D_len: size_t,
        E: *const c_types::c_uchar,
        E_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function completes an RSA context from"]
    #[doc = "                 a set of imported core parameters."]
    #[doc = ""]
    #[doc = "                 To setup an RSA public key, precisely \\p N and \\p E"]
    #[doc = "                 must have been imported."]
    #[doc = ""]
    #[doc = "                 To setup an RSA private key, sufficient information must"]
    #[doc = "                 be present for the other parameters to be derivable."]
    #[doc = ""]
    #[doc = "                 The default implementation supports the following:"]
    #[doc = "                 <ul><li>Derive \\p P, \\p Q from \\p N, \\p D, \\p E.</li>"]
    #[doc = "                 <li>Derive \\p N, \\p D from \\p P, \\p Q, \\p E.</li></ul>"]
    #[doc = "                 Alternative implementations need not support these."]
    #[doc = ""]
    #[doc = "                 If this function runs successfully, it guarantees that"]
    #[doc = "                 the RSA context can be used for RSA operations without"]
    #[doc = "                 the risk of failure or crash."]
    #[doc = ""]
    #[doc = " \\warning        This function need not perform consistency checks"]
    #[doc = "                 for the imported parameters. In particular, parameters that"]
    #[doc = "                 are not needed by the implementation might be silently"]
    #[doc = "                 discarded and left unchecked. To check the consistency"]
    #[doc = "                 of the key material, see mbedtls_rsa_check_privkey()."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context holding imported parameters."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_RSA_BAD_INPUT_DATA if the attempted derivations"]
    #[doc = "                 failed."]
    #[doc = ""]
    pub fn mbedtls_rsa_complete(ctx: *mut mbedtls_rsa_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function exports the core parameters of an RSA key."]
    #[doc = ""]
    #[doc = "                 If this function runs successfully, the non-NULL buffers"]
    #[doc = "                 pointed to by \\p N, \\p P, \\p Q, \\p D, and \\p E are fully"]
    #[doc = "                 written, with additional unused space filled leading by"]
    #[doc = "                 zero Bytes."]
    #[doc = ""]
    #[doc = "                 Possible reasons for returning"]
    #[doc = "                 #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED:<ul>"]
    #[doc = "                 <li>An alternative RSA implementation is in use, which"]
    #[doc = "                 stores the key externally, and either cannot or should"]
    #[doc = "                 not export it into RAM.</li>"]
    #[doc = "                 <li>A SW or HW implementation might not support a certain"]
    #[doc = "                 deduction. For example, \\p P, \\p Q from \\p N, \\p D,"]
    #[doc = "                 and \\p E if the former are not part of the"]
    #[doc = "                 implementation.</li></ul>"]
    #[doc = ""]
    #[doc = "                 If the function fails due to an unsupported operation,"]
    #[doc = "                 the RSA context stays intact and remains usable."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context."]
    #[doc = " \\param N        The MPI to hold the RSA modulus."]
    #[doc = "                 This may be \\c NULL if this field need not be exported."]
    #[doc = " \\param P        The MPI to hold the first prime factor of \\p N."]
    #[doc = "                 This may be \\c NULL if this field need not be exported."]
    #[doc = " \\param Q        The MPI to hold the second prime factor of \\p N."]
    #[doc = "                 This may be \\c NULL if this field need not be exported."]
    #[doc = " \\param D        The MPI to hold the private exponent."]
    #[doc = "                 This may be \\c NULL if this field need not be exported."]
    #[doc = " \\param E        The MPI to hold the public exponent."]
    #[doc = "                 This may be \\c NULL if this field need not be exported."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED if exporting the"]
    #[doc = "                 requested parameters cannot be done due to missing"]
    #[doc = "                 functionality or because of security policies."]
    #[doc = " \\return         A non-zero return code on any other failure."]
    #[doc = ""]
    pub fn mbedtls_rsa_export(
        ctx: *const mbedtls_rsa_context,
        N: *mut mbedtls_mpi,
        P: *mut mbedtls_mpi,
        Q: *mut mbedtls_mpi,
        D: *mut mbedtls_mpi,
        E: *mut mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function exports core parameters of an RSA key"]
    #[doc = "                 in raw big-endian binary format."]
    #[doc = ""]
    #[doc = "                 If this function runs successfully, the non-NULL buffers"]
    #[doc = "                 pointed to by \\p N, \\p P, \\p Q, \\p D, and \\p E are fully"]
    #[doc = "                 written, with additional unused space filled leading by"]
    #[doc = "                 zero Bytes."]
    #[doc = ""]
    #[doc = "                 Possible reasons for returning"]
    #[doc = "                 #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED:<ul>"]
    #[doc = "                 <li>An alternative RSA implementation is in use, which"]
    #[doc = "                 stores the key externally, and either cannot or should"]
    #[doc = "                 not export it into RAM.</li>"]
    #[doc = "                 <li>A SW or HW implementation might not support a certain"]
    #[doc = "                 deduction. For example, \\p P, \\p Q from \\p N, \\p D,"]
    #[doc = "                 and \\p E if the former are not part of the"]
    #[doc = "                 implementation.</li></ul>"]
    #[doc = "                 If the function fails due to an unsupported operation,"]
    #[doc = "                 the RSA context stays intact and remains usable."]
    #[doc = ""]
    #[doc = " \\note           The length parameters are ignored if the corresponding"]
    #[doc = "                 buffer pointers are NULL."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context."]
    #[doc = " \\param N        The Byte array to store the RSA modulus,"]
    #[doc = "                 or \\c NULL if this field need not be exported."]
    #[doc = " \\param N_len    The size of the buffer for the modulus."]
    #[doc = " \\param P        The Byte array to hold the first prime factor of \\p N,"]
    #[doc = "                 or \\c NULL if this field need not be exported."]
    #[doc = " \\param P_len    The size of the buffer for the first prime factor."]
    #[doc = " \\param Q        The Byte array to hold the second prime factor of \\p N,"]
    #[doc = "                 or \\c NULL if this field need not be exported."]
    #[doc = " \\param Q_len    The size of the buffer for the second prime factor."]
    #[doc = " \\param D        The Byte array to hold the private exponent,"]
    #[doc = "                 or \\c NULL if this field need not be exported."]
    #[doc = " \\param D_len    The size of the buffer for the private exponent."]
    #[doc = " \\param E        The Byte array to hold the public exponent,"]
    #[doc = "                 or \\c NULL if this field need not be exported."]
    #[doc = " \\param E_len    The size of the buffer for the public exponent."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED if exporting the"]
    #[doc = "                 requested parameters cannot be done due to missing"]
    #[doc = "                 functionality or because of security policies."]
    #[doc = " \\return         A non-zero return code on any other failure."]
    pub fn mbedtls_rsa_export_raw(
        ctx: *const mbedtls_rsa_context,
        N: *mut c_types::c_uchar,
        N_len: size_t,
        P: *mut c_types::c_uchar,
        P_len: size_t,
        Q: *mut c_types::c_uchar,
        Q_len: size_t,
        D: *mut c_types::c_uchar,
        D_len: size_t,
        E: *mut c_types::c_uchar,
        E_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function exports CRT parameters of a private RSA key."]
    #[doc = ""]
    #[doc = " \\note           Alternative RSA implementations not using CRT-parameters"]
    #[doc = "                 internally can implement this function based on"]
    #[doc = "                 mbedtls_rsa_deduce_opt()."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context."]
    #[doc = " \\param DP       The MPI to hold \\c D modulo `P-1`,"]
    #[doc = "                 or \\c NULL if it need not be exported."]
    #[doc = " \\param DQ       The MPI to hold \\c D modulo `Q-1`,"]
    #[doc = "                 or \\c NULL if it need not be exported."]
    #[doc = " \\param QP       The MPI to hold modular inverse of \\c Q modulo \\c P,"]
    #[doc = "                 or \\c NULL if it need not be exported."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A non-zero error code on failure."]
    #[doc = ""]
    pub fn mbedtls_rsa_export_crt(
        ctx: *const mbedtls_rsa_context,
        DP: *mut mbedtls_mpi,
        DQ: *mut mbedtls_mpi,
        QP: *mut mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function sets padding for an already initialized RSA"]
    #[doc = "                 context. See mbedtls_rsa_init() for details."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to be configured."]
    #[doc = " \\param padding  The padding mode to use. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PKCS_V15 or #MBEDTLS_RSA_PKCS_V21."]
    #[doc = " \\param hash_id  The #MBEDTLS_RSA_PKCS_V21 hash identifier."]
    pub fn mbedtls_rsa_set_padding(
        ctx: *mut mbedtls_rsa_context,
        padding: c_types::c_int,
        hash_id: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          This function retrieves the length of RSA modulus in Bytes."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context."]
    #[doc = ""]
    #[doc = " \\return         The length of the RSA modulus in Bytes."]
    #[doc = ""]
    pub fn mbedtls_rsa_get_len(ctx: *const mbedtls_rsa_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief          This function generates an RSA keypair."]
    #[doc = ""]
    #[doc = " \\note           mbedtls_rsa_init() must be called before this function,"]
    #[doc = "                 to set up the RSA context."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context used to hold the key."]
    #[doc = " \\param f_rng    The RNG function to be used for key generation."]
    #[doc = "                 This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng."]
    #[doc = "                 This may be \\c NULL if \\p f_rng doesn't need a context."]
    #[doc = " \\param nbits    The size of the public key in bits."]
    #[doc = " \\param exponent The public exponent to use. For example, \\c 65537."]
    #[doc = "                 This must be odd and greater than \\c 1."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_gen_key(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        nbits: c_types::c_uint,
        exponent: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function checks if a context contains at least an RSA"]
    #[doc = "                 public key."]
    #[doc = ""]
    #[doc = "                 If the function runs successfully, it is guaranteed that"]
    #[doc = "                 enough information is present to perform an RSA public key"]
    #[doc = "                 operation using mbedtls_rsa_public()."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to check."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    #[doc = ""]
    pub fn mbedtls_rsa_check_pubkey(ctx: *const mbedtls_rsa_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief      This function checks if a context contains an RSA private key"]
    #[doc = "             and perform basic consistency checks."]
    #[doc = ""]
    #[doc = " \\note       The consistency checks performed by this function not only"]
    #[doc = "             ensure that mbedtls_rsa_private() can be called successfully"]
    #[doc = "             on the given context, but that the various parameters are"]
    #[doc = "             mutually consistent with high probability, in the sense that"]
    #[doc = "             mbedtls_rsa_public() and mbedtls_rsa_private() are inverses."]
    #[doc = ""]
    #[doc = " \\warning    This function should catch accidental misconfigurations"]
    #[doc = "             like swapping of parameters, but it cannot establish full"]
    #[doc = "             trust in neither the quality nor the consistency of the key"]
    #[doc = "             material that was used to setup the given RSA context:"]
    #[doc = "             <ul><li>Consistency: Imported parameters that are irrelevant"]
    #[doc = "             for the implementation might be silently dropped. If dropped,"]
    #[doc = "             the current function does not have access to them,"]
    #[doc = "             and therefore cannot check them. See mbedtls_rsa_complete()."]
    #[doc = "             If you want to check the consistency of the entire"]
    #[doc = "             content of an PKCS1-encoded RSA private key, for example, you"]
    #[doc = "             should use mbedtls_rsa_validate_params() before setting"]
    #[doc = "             up the RSA context."]
    #[doc = "             Additionally, if the implementation performs empirical checks,"]
    #[doc = "             these checks substantiate but do not guarantee consistency.</li>"]
    #[doc = "             <li>Quality: This function is not expected to perform"]
    #[doc = "             extended quality assessments like checking that the prime"]
    #[doc = "             factors are safe. Additionally, it is the responsibility of the"]
    #[doc = "             user to ensure the trustworthiness of the source of his RSA"]
    #[doc = "             parameters, which goes beyond what is effectively checkable"]
    #[doc = "             by the library.</li></ul>"]
    #[doc = ""]
    #[doc = " \\param ctx  The initialized RSA context to check."]
    #[doc = ""]
    #[doc = " \\return     \\c 0 on success."]
    #[doc = " \\return     An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_check_privkey(ctx: *const mbedtls_rsa_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function checks a public-private RSA key pair."]
    #[doc = ""]
    #[doc = "                 It checks each of the contexts, and makes sure they match."]
    #[doc = ""]
    #[doc = " \\param pub      The initialized RSA context holding the public key."]
    #[doc = " \\param prv      The initialized RSA context holding the private key."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_check_pub_priv(
        pub_: *const mbedtls_rsa_context,
        prv: *const mbedtls_rsa_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs an RSA public key operation."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param input    The input buffer. This must be a readable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = " \\param output   The output buffer. This must be a writable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\note           This function does not handle message padding."]
    #[doc = ""]
    #[doc = " \\note           Make sure to set \\p input[0] = 0 or ensure that"]
    #[doc = "                 input is smaller than \\p N."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_public(
        ctx: *mut mbedtls_rsa_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs an RSA private key operation."]
    #[doc = ""]
    #[doc = " \\note           Blinding is used if and only if a PRNG is provided."]
    #[doc = ""]
    #[doc = " \\note           If blinding is used, both the base of exponentation"]
    #[doc = "                 and the exponent are blinded, providing protection"]
    #[doc = "                 against some side-channel attacks."]
    #[doc = ""]
    #[doc = " \\warning        It is deprecated and a security risk to not provide"]
    #[doc = "                 a PRNG here and thereby prevent the use of blinding."]
    #[doc = "                 Future versions of the library may enforce the presence"]
    #[doc = "                 of a PRNG."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function, used for blinding. It is discouraged"]
    #[doc = "                 and deprecated to pass \\c NULL here, in which case"]
    #[doc = "                 blinding will be omitted."]
    #[doc = " \\param p_rng    The RNG context to pass to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng is \\c NULL or if \\p f_rng doesn't need a context."]
    #[doc = " \\param input    The input buffer. This must be a readable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = " \\param output   The output buffer. This must be a writable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    #[doc = ""]
    pub fn mbedtls_rsa_private(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function adds the message padding, then performs an RSA"]
    #[doc = "                 operation."]
    #[doc = ""]
    #[doc = "                 It is the generic wrapper for performing a PKCS#1 encryption"]
    #[doc = "                 operation using the \\p mode from the context."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG to use. It is mandatory for PKCS#1 v2.1 padding"]
    #[doc = "                 encoding, and for PKCS#1 v1.5 padding encoding when used"]
    #[doc = "                 with \\p mode set to #MBEDTLS_RSA_PUBLIC. For PKCS#1 v1.5"]
    #[doc = "                 padding encoding and \\p mode set to #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 it is used for blinding and should be provided in this"]
    #[doc = "                 case; see mbedtls_rsa_private() for more."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. May be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or if \\p f_rng doesn't"]
    #[doc = "                 need a context argument."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param ilen     The length of the plaintext in Bytes."]
    #[doc = " \\param input    The input data to encrypt. This must be a readable"]
    #[doc = "                 buffer of size \\p ilen Bytes. It may be \\c NULL if"]
    #[doc = "                 `ilen == 0`."]
    #[doc = " \\param output   The output buffer. This must be a writable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_pkcs1_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        ilen: size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v1.5 encryption operation"]
    #[doc = "                 (RSAES-PKCS1-v1_5-ENCRYPT)."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function to use. It is needed for padding generation"]
    #[doc = "                 if \\p mode is #MBEDTLS_RSA_PUBLIC. If \\p mode is"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE (discouraged), it is used for"]
    #[doc = "                 blinding and should be provided; see mbedtls_rsa_private()."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may"]
    #[doc = "                 be \\c NULL if \\p f_rng is \\c NULL or if \\p f_rng"]
    #[doc = "                 doesn't need a context argument."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param ilen     The length of the plaintext in Bytes."]
    #[doc = " \\param input    The input data to encrypt. This must be a readable"]
    #[doc = "                 buffer of size \\p ilen Bytes. It may be \\c NULL if"]
    #[doc = "                 `ilen == 0`."]
    #[doc = " \\param output   The output buffer. This must be a writable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        ilen: size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief            This function performs a PKCS#1 v2.1 OAEP encryption"]
    #[doc = "                   operation (RSAES-OAEP-ENCRYPT)."]
    #[doc = ""]
    #[doc = " \\note             The output buffer must be as large as the size"]
    #[doc = "                   of ctx->N. For example, 128 Bytes if RSA-1024 is used."]
    #[doc = ""]
    #[doc = " \\deprecated       It is deprecated and discouraged to call this function"]
    #[doc = "                   in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                   are likely to remove the \\p mode argument and have it"]
    #[doc = "                   implicitly set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note             Alternative implementations of RSA need not support"]
    #[doc = "                   mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                   return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx        The initnialized RSA context to use."]
    #[doc = " \\param f_rng      The RNG function to use. This is needed for padding"]
    #[doc = "                   generation and must be provided."]
    #[doc = " \\param p_rng      The RNG context to be passed to \\p f_rng. This may"]
    #[doc = "                   be \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = " \\param mode       The mode of operation. This must be either"]
    #[doc = "                   #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param label      The buffer holding the custom label to use."]
    #[doc = "                   This must be a readable buffer of length \\p label_len"]
    #[doc = "                   Bytes. It may be \\c NULL if \\p label_len is \\c 0."]
    #[doc = " \\param label_len  The length of the label in Bytes."]
    #[doc = " \\param ilen       The length of the plaintext buffer \\p input in Bytes."]
    #[doc = " \\param input      The input data to encrypt. This must be a readable"]
    #[doc = "                   buffer of size \\p ilen Bytes. It may be \\c NULL if"]
    #[doc = "                   `ilen == 0`."]
    #[doc = " \\param output     The output buffer. This must be a writable buffer"]
    #[doc = "                   of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                   for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return           \\c 0 on success."]
    #[doc = " \\return           An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsaes_oaep_encrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        label: *const c_types::c_uchar,
        label_len: size_t,
        ilen: size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs an RSA operation, then removes the"]
    #[doc = "                 message padding."]
    #[doc = ""]
    #[doc = "                 It is the generic wrapper for performing a PKCS#1 decryption"]
    #[doc = "                 operation using the \\p mode from the context."]
    #[doc = ""]
    #[doc = " \\note           The output buffer length \\c output_max_len should be"]
    #[doc = "                 as large as the size \\p ctx->len of \\p ctx->N (for example,"]
    #[doc = "                 128 Bytes if RSA-1024 is used) to be able to hold an"]
    #[doc = "                 arbitrary decrypted message. If it is not large enough to"]
    #[doc = "                 hold the decryption of the particular ciphertext provided,"]
    #[doc = "                 the function returns \\c MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. If \\p mode is"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param olen     The address at which to store the length of"]
    #[doc = "                 the plaintext. This must not be \\c NULL."]
    #[doc = " \\param input    The ciphertext buffer. This must be a readable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = " \\param output   The buffer used to hold the plaintext. This must"]
    #[doc = "                 be a writable buffer of length \\p output_max_len Bytes."]
    #[doc = " \\param output_max_len The length in Bytes of the output buffer \\p output."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_pkcs1_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        olen: *mut size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
        output_max_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v1.5 decryption"]
    #[doc = "                 operation (RSAES-PKCS1-v1_5-DECRYPT)."]
    #[doc = ""]
    #[doc = " \\note           The output buffer length \\c output_max_len should be"]
    #[doc = "                 as large as the size \\p ctx->len of \\p ctx->N, for example,"]
    #[doc = "                 128 Bytes if RSA-1024 is used, to be able to hold an"]
    #[doc = "                 arbitrary decrypted message. If it is not large enough to"]
    #[doc = "                 hold the decryption of the particular ciphertext provided,"]
    #[doc = "                 the function returns #MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. If \\p mode is"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param olen     The address at which to store the length of"]
    #[doc = "                 the plaintext. This must not be \\c NULL."]
    #[doc = " \\param input    The ciphertext buffer. This must be a readable buffer"]
    #[doc = "                 of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = " \\param output   The buffer used to hold the plaintext. This must"]
    #[doc = "                 be a writable buffer of length \\p output_max_len Bytes."]
    #[doc = " \\param output_max_len The length in Bytes of the output buffer \\p output."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    #[doc = ""]
    pub fn mbedtls_rsa_rsaes_pkcs1_v15_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        olen: *mut size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
        output_max_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief            This function performs a PKCS#1 v2.1 OAEP decryption"]
    #[doc = "                   operation (RSAES-OAEP-DECRYPT)."]
    #[doc = ""]
    #[doc = " \\note             The output buffer length \\c output_max_len should be"]
    #[doc = "                   as large as the size \\p ctx->len of \\p ctx->N, for"]
    #[doc = "                   example, 128 Bytes if RSA-1024 is used, to be able to"]
    #[doc = "                   hold an arbitrary decrypted message. If it is not"]
    #[doc = "                   large enough to hold the decryption of the particular"]
    #[doc = "                   ciphertext provided, the function returns"]
    #[doc = "                   #MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE."]
    #[doc = ""]
    #[doc = " \\deprecated       It is deprecated and discouraged to call this function"]
    #[doc = "                   in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                   are likely to remove the \\p mode argument and have it"]
    #[doc = "                   implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note             Alternative implementations of RSA need not support"]
    #[doc = "                   mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                   return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx        The initialized RSA context to use."]
    #[doc = " \\param f_rng      The RNG function. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                   this is used for blinding and should be provided; see"]
    #[doc = "                   mbedtls_rsa_private() for more. If \\p mode is"]
    #[doc = "                   #MBEDTLS_RSA_PUBLIC, it is ignored."]
    #[doc = " \\param p_rng      The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                   \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode       The mode of operation. This must be either"]
    #[doc = "                   #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param label      The buffer holding the custom label to use."]
    #[doc = "                   This must be a readable buffer of length \\p label_len"]
    #[doc = "                   Bytes. It may be \\c NULL if \\p label_len is \\c 0."]
    #[doc = " \\param label_len  The length of the label in Bytes."]
    #[doc = " \\param olen       The address at which to store the length of"]
    #[doc = "                   the plaintext. This must not be \\c NULL."]
    #[doc = " \\param input      The ciphertext buffer. This must be a readable buffer"]
    #[doc = "                   of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                   for an 2048-bit RSA modulus."]
    #[doc = " \\param output     The buffer used to hold the plaintext. This must"]
    #[doc = "                   be a writable buffer of length \\p output_max_len Bytes."]
    #[doc = " \\param output_max_len The length in Bytes of the output buffer \\p output."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsaes_oaep_decrypt(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        label: *const c_types::c_uchar,
        label_len: size_t,
        olen: *mut size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
        output_max_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a private RSA operation to sign"]
    #[doc = "                 a message digest using PKCS#1."]
    #[doc = ""]
    #[doc = "                 It is the generic wrapper for performing a PKCS#1"]
    #[doc = "                 signature using the \\p mode from the context."]
    #[doc = ""]
    #[doc = " \\note           The \\p sig buffer must be as large as the size"]
    #[doc = "                 of \\p ctx->N. For example, 128 Bytes if RSA-1024 is used."]
    #[doc = ""]
    #[doc = " \\note           For PKCS#1 v2.1 encoding, see comments on"]
    #[doc = "                 mbedtls_rsa_rsassa_pss_sign() for details on"]
    #[doc = "                 \\p md_alg and \\p hash_id."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function to use. If the padding mode is PKCS#1 v2.1,"]
    #[doc = "                 this must be provided. If the padding mode is PKCS#1 v1.5 and"]
    #[doc = "                 \\p mode is #MBEDTLS_RSA_PRIVATE, it is used for blinding"]
    #[doc = "                 and should be provided; see mbedtls_rsa_private() for more"]
    #[doc = "                 more. It is ignored otherwise."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng is \\c NULL or doesn't need a context argument."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 Ths is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer to hold the signature. This must be a writable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus. A buffer length of"]
    #[doc = "                 #MBEDTLS_MPI_MAX_SIZE is always safe."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the signing operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_pkcs1_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v1.5 signature"]
    #[doc = "                 operation (RSASSA-PKCS1-v1_5-SIGN)."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. If \\p mode is"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng is \\c NULL or doesn't need a context argument."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 Ths is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer to hold the signature. This must be a writable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus. A buffer length of"]
    #[doc = "                 #MBEDTLS_MPI_MAX_SIZE is always safe."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the signing operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v2.1 PSS signature"]
    #[doc = "                 operation (RSASSA-PSS-SIGN)."]
    #[doc = ""]
    #[doc = " \\note           The \\c hash_id set in \\p ctx (when calling"]
    #[doc = "                 mbedtls_rsa_init() or by calling mbedtls_rsa_set_padding()"]
    #[doc = "                 afterwards) selects the hash used for the"]
    #[doc = "                 encoding operation and for the mask generation function"]
    #[doc = "                 (MGF1). For more details on the encoding operation and the"]
    #[doc = "                 mask generation function, consult <em>RFC-3447: Public-Key"]
    #[doc = "                 Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography"]
    #[doc = "                 Specifications</em>."]
    #[doc = ""]
    #[doc = " \\note           This function enforces that the provided salt length complies"]
    #[doc = "                 with FIPS 186-4 §5.5 (e) and RFC 8017 (PKCS#1 v2.2) §9.1.1"]
    #[doc = "                 step 3. The constraint is that the hash length plus the salt"]
    #[doc = "                 length plus 2 bytes must be at most the key length. If this"]
    #[doc = "                 constraint is not met, this function returns"]
    #[doc = "                 #MBEDTLS_ERR_RSA_BAD_INPUT_DATA."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function. It must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng doesn't need a context argument."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 Ths is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param saltlen  The length of the salt that should be used."]
    #[doc = "                 If passed #MBEDTLS_RSA_SALT_LEN_ANY, the function will use"]
    #[doc = "                 the largest possible salt length up to the hash length,"]
    #[doc = "                 which is the largest permitted by some standards including"]
    #[doc = "                 FIPS 186-4 §5.5."]
    #[doc = " \\param sig      The buffer to hold the signature. This must be a writable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus. A buffer length of"]
    #[doc = "                 #MBEDTLS_MPI_MAX_SIZE is always safe."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the signing operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pss_sign_ext(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        saltlen: c_types::c_int,
        sig: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v2.1 PSS signature"]
    #[doc = "                 operation (RSASSA-PSS-SIGN)."]
    #[doc = ""]
    #[doc = " \\note           The \\c hash_id set in \\p ctx (when calling"]
    #[doc = "                 mbedtls_rsa_init() or by calling mbedtls_rsa_set_padding()"]
    #[doc = "                 afterwards) selects the hash used for the"]
    #[doc = "                 encoding operation and for the mask generation function"]
    #[doc = "                 (MGF1). For more details on the encoding operation and the"]
    #[doc = "                 mask generation function, consult <em>RFC-3447: Public-Key"]
    #[doc = "                 Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography"]
    #[doc = "                 Specifications</em>."]
    #[doc = ""]
    #[doc = " \\note           This function always uses the maximum possible salt size,"]
    #[doc = "                 up to the length of the payload hash. This choice of salt"]
    #[doc = "                 size complies with FIPS 186-4 §5.5 (e) and RFC 8017 (PKCS#1"]
    #[doc = "                 v2.2) §9.1.1 step 3. Furthermore this function enforces a"]
    #[doc = "                 minimum salt size which is the hash size minus 2 bytes. If"]
    #[doc = "                 this minimum size is too large given the key size (the salt"]
    #[doc = "                 size, plus the hash size, plus 2 bytes must be no more than"]
    #[doc = "                 the key size in bytes), this function returns"]
    #[doc = "                 #MBEDTLS_ERR_RSA_BAD_INPUT_DATA."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PUBLIC mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PRIVATE."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PUBLIC and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA context to use."]
    #[doc = " \\param f_rng    The RNG function. It must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng doesn't need a context argument."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PRIVATE or #MBEDTLS_RSA_PUBLIC (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 This is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer to hold the signature. This must be a writable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus. A buffer length of"]
    #[doc = "                 #MBEDTLS_MPI_MAX_SIZE is always safe."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the signing operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pss_sign(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a public RSA operation and checks"]
    #[doc = "                 the message digest."]
    #[doc = ""]
    #[doc = "                 This is the generic wrapper for performing a PKCS#1"]
    #[doc = "                 verification using the mode from the context."]
    #[doc = ""]
    #[doc = " \\note           For PKCS#1 v2.1 encoding, see comments on"]
    #[doc = "                 mbedtls_rsa_rsassa_pss_verify() about \\p md_alg and"]
    #[doc = "                 \\p hash_id."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA public key context to use."]
    #[doc = " \\param f_rng    The RNG function to use. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. Otherwise, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 This is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer holding the signature. This must be a readable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the verify operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_pkcs1_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v1.5 verification"]
    #[doc = "                 operation (RSASSA-PKCS1-v1_5-VERIFY)."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA public key context to use."]
    #[doc = " \\param f_rng    The RNG function to use. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. Otherwise, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 This is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer holding the signature. This must be a readable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the verify operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pkcs1_v15_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v2.1 PSS verification"]
    #[doc = "                 operation (RSASSA-PSS-VERIFY)."]
    #[doc = ""]
    #[doc = " \\note           The \\c hash_id set in \\p ctx (when calling"]
    #[doc = "                 mbedtls_rsa_init() or by calling mbedtls_rsa_set_padding()"]
    #[doc = "                 afterwards) selects the hash used for the"]
    #[doc = "                 encoding operation and for the mask generation function"]
    #[doc = "                 (MGF1). For more details on the encoding operation and the"]
    #[doc = "                 mask generation function, consult <em>RFC-3447: Public-Key"]
    #[doc = "                 Cryptography Standards (PKCS) #1 v2.1: RSA Cryptography"]
    #[doc = "                 Specifications</em>. If the \\c hash_id set in \\p ctx is"]
    #[doc = "                 #MBEDTLS_MD_NONE, the \\p md_alg parameter is used."]
    #[doc = ""]
    #[doc = " \\deprecated     It is deprecated and discouraged to call this function"]
    #[doc = "                 in #MBEDTLS_RSA_PRIVATE mode. Future versions of the library"]
    #[doc = "                 are likely to remove the \\p mode argument and have it"]
    #[doc = "                 implicitly set to #MBEDTLS_RSA_PUBLIC."]
    #[doc = ""]
    #[doc = " \\note           Alternative implementations of RSA need not support"]
    #[doc = "                 mode being set to #MBEDTLS_RSA_PRIVATE and might instead"]
    #[doc = "                 return #MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA public key context to use."]
    #[doc = " \\param f_rng    The RNG function to use. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. Otherwise, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE (deprecated)."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 This is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param sig      The buffer holding the signature. This must be a readable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the verify operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pss_verify(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function performs a PKCS#1 v2.1 PSS verification"]
    #[doc = "                 operation (RSASSA-PSS-VERIFY)."]
    #[doc = ""]
    #[doc = " \\note           The \\p sig buffer must be as large as the size"]
    #[doc = "                 of \\p ctx->N. For example, 128 Bytes if RSA-1024 is used."]
    #[doc = ""]
    #[doc = " \\note           The \\c hash_id set in \\p ctx (when calling"]
    #[doc = "                 mbedtls_rsa_init() or by calling mbedtls_rsa_set_padding()"]
    #[doc = "                 afterwards) is ignored."]
    #[doc = ""]
    #[doc = " \\param ctx      The initialized RSA public key context to use."]
    #[doc = " \\param f_rng    The RNG function to use. If \\p mode is #MBEDTLS_RSA_PRIVATE,"]
    #[doc = "                 this is used for blinding and should be provided; see"]
    #[doc = "                 mbedtls_rsa_private() for more. Otherwise, it is ignored."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng is \\c NULL or doesn't need a context."]
    #[doc = " \\param mode     The mode of operation. This must be either"]
    #[doc = "                 #MBEDTLS_RSA_PUBLIC or #MBEDTLS_RSA_PRIVATE."]
    #[doc = " \\param md_alg   The message-digest algorithm used to hash the original data."]
    #[doc = "                 Use #MBEDTLS_MD_NONE for signing raw data."]
    #[doc = " \\param hashlen  The length of the message digest."]
    #[doc = "                 This is only used if \\p md_alg is #MBEDTLS_MD_NONE."]
    #[doc = " \\param hash     The buffer holding the message digest or raw data."]
    #[doc = "                 If \\p md_alg is #MBEDTLS_MD_NONE, this must be a readable"]
    #[doc = "                 buffer of length \\p hashlen Bytes. If \\p md_alg is not"]
    #[doc = "                 #MBEDTLS_MD_NONE, it must be a readable buffer of length"]
    #[doc = "                 the size of the hash corresponding to \\p md_alg."]
    #[doc = " \\param mgf1_hash_id      The message digest algorithm used for the"]
    #[doc = "                          verification operation and the mask generation"]
    #[doc = "                          function (MGF1). For more details on the encoding"]
    #[doc = "                          operation and the mask generation function, consult"]
    #[doc = "                          <em>RFC-3447: Public-Key Cryptography Standards"]
    #[doc = "                          (PKCS) #1 v2.1: RSA Cryptography"]
    #[doc = "                          Specifications</em>."]
    #[doc = " \\param expected_salt_len The length of the salt used in padding. Use"]
    #[doc = "                          #MBEDTLS_RSA_SALT_LEN_ANY to accept any salt length."]
    #[doc = " \\param sig      The buffer holding the signature. This must be a readable"]
    #[doc = "                 buffer of length \\c ctx->len Bytes. For example, \\c 256 Bytes"]
    #[doc = "                 for an 2048-bit RSA modulus."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the verify operation was successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_RSA_XXX error code on failure."]
    pub fn mbedtls_rsa_rsassa_pss_verify_ext(
        ctx: *mut mbedtls_rsa_context,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        mgf1_hash_id: mbedtls_md_type_t,
        expected_salt_len: c_types::c_int,
        sig: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function copies the components of an RSA context."]
    #[doc = ""]
    #[doc = " \\param dst      The destination context. This must be initialized."]
    #[doc = " \\param src      The source context. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_MPI_ALLOC_FAILED on memory allocation failure."]
    pub fn mbedtls_rsa_copy(
        dst: *mut mbedtls_rsa_context,
        src: *const mbedtls_rsa_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function frees the components of an RSA key."]
    #[doc = ""]
    #[doc = " \\param ctx      The RSA context to free. May be \\c NULL, in which case"]
    #[doc = "                 this function is a no-op. If it is not \\c NULL, it must"]
    #[doc = "                 point to an initialized RSA context."]
    pub fn mbedtls_rsa_free(ctx: *mut mbedtls_rsa_context);
}
extern "C" {
    #[doc = " \\brief          The RSA checkup routine."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         \\c 1 on failure."]
    pub fn mbedtls_rsa_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
#[doc = " \\brief    The ECP key-pair structure."]
#[doc = ""]
#[doc = " A generic key-pair that may be used for ECDSA and fixed ECDH, for example."]
#[doc = ""]
#[doc = " \\note    Members are deliberately in the same order as in the"]
#[doc = "          ::mbedtls_ecdsa_context structure."]
pub type mbedtls_ecdsa_context = mbedtls_ecp_keypair;
pub type mbedtls_ecdsa_restart_ctx = c_types::c_void;
extern "C" {
    #[doc = " \\brief          This function checks whether a given group can be used"]
    #[doc = "                 for ECDSA."]
    #[doc = ""]
    #[doc = " \\param gid      The ECP group ID to check."]
    #[doc = ""]
    #[doc = " \\return         \\c 1 if the group can be used, \\c 0 otherwise"]
    pub fn mbedtls_ecdsa_can_do(gid: mbedtls_ecp_group_id) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the ECDSA signature of a"]
    #[doc = "                  previously-hashed message."]
    #[doc = ""]
    #[doc = " \\note            The deterministic version implemented in"]
    #[doc = "                  mbedtls_ecdsa_sign_det() is usually preferred."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated"]
    #[doc = "                  as defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.3, step 5."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param grp       The context for the elliptic curve to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param r         The MPI context in which to store the first part"]
    #[doc = "                  the signature. This must be initialized."]
    #[doc = " \\param s         The MPI context in which to store the second part"]
    #[doc = "                  the signature. This must be initialized."]
    #[doc = " \\param d         The private signing key. This must be initialized."]
    #[doc = " \\param buf       The content to be signed. This is usually the hash of"]
    #[doc = "                  the original data to be signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes. It may be \\c NULL if"]
    #[doc = "                  \\p blen is zero."]
    #[doc = " \\param blen      The length of \\p buf in Bytes."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL if \\p f_rng doesn't need a context parameter."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX"]
    #[doc = "                  or \\c MBEDTLS_MPI_XXX error code on failure."]
    pub fn mbedtls_ecdsa_sign(
        grp: *mut mbedtls_ecp_group,
        r: *mut mbedtls_mpi,
        s: *mut mbedtls_mpi,
        d: *const mbedtls_mpi,
        buf: *const c_types::c_uchar,
        blen: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the ECDSA signature of a"]
    #[doc = "                  previously-hashed message, deterministic version."]
    #[doc = ""]
    #[doc = "                  For more information, see <em>RFC-6979: Deterministic"]
    #[doc = "                  Usage of the Digital Signature Algorithm (DSA) and Elliptic"]
    #[doc = "                  Curve Digital Signature Algorithm (ECDSA)</em>."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.3, step 5."]
    #[doc = ""]
    #[doc = " \\warning         Since the output of the internal RNG is always the same for"]
    #[doc = "                  the same key and message, this limits the efficiency of"]
    #[doc = "                  blinding and leaks information through side channels. For"]
    #[doc = "                  secure behavior use mbedtls_ecdsa_sign_det_ext() instead."]
    #[doc = ""]
    #[doc = "                  (Optimally the blinding is a random value that is different"]
    #[doc = "                  on every execution. In this case the blinding is still"]
    #[doc = "                  random from the attackers perspective, but is the same on"]
    #[doc = "                  each execution. This means that this blinding does not"]
    #[doc = "                  prevent attackers from recovering secrets by combining"]
    #[doc = "                  several measurement traces, but may prevent some attacks"]
    #[doc = "                  that exploit relationships between secret data.)"]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param grp       The context for the elliptic curve to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param r         The MPI context in which to store the first part"]
    #[doc = "                  the signature. This must be initialized."]
    #[doc = " \\param s         The MPI context in which to store the second part"]
    #[doc = "                  the signature. This must be initialized."]
    #[doc = " \\param d         The private signing key. This must be initialized"]
    #[doc = "                  and setup, for example through mbedtls_ecp_gen_privkey()."]
    #[doc = " \\param buf       The hashed content to be signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes. It may be \\c NULL if"]
    #[doc = "                  \\p blen is zero."]
    #[doc = " \\param blen      The length of \\p buf in Bytes."]
    #[doc = " \\param md_alg    The hash algorithm used to hash the original data."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX"]
    #[doc = "                  error code on failure."]
    pub fn mbedtls_ecdsa_sign_det(
        grp: *mut mbedtls_ecp_group,
        r: *mut mbedtls_mpi,
        s: *mut mbedtls_mpi,
        d: *const mbedtls_mpi,
        buf: *const c_types::c_uchar,
        blen: size_t,
        md_alg: mbedtls_md_type_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the ECDSA signature of a"]
    #[doc = "                  previously-hashed message, deterministic version."]
    #[doc = ""]
    #[doc = "                  For more information, see <em>RFC-6979: Deterministic"]
    #[doc = "                  Usage of the Digital Signature Algorithm (DSA) and Elliptic"]
    #[doc = "                  Curve Digital Signature Algorithm (ECDSA)</em>."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.3, step 5."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param grp           The context for the elliptic curve to use."]
    #[doc = "                      This must be initialized and have group parameters"]
    #[doc = "                      set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param r             The MPI context in which to store the first part"]
    #[doc = "                      the signature. This must be initialized."]
    #[doc = " \\param s             The MPI context in which to store the second part"]
    #[doc = "                      the signature. This must be initialized."]
    #[doc = " \\param d             The private signing key. This must be initialized"]
    #[doc = "                      and setup, for example through mbedtls_ecp_gen_privkey()."]
    #[doc = " \\param buf           The hashed content to be signed. This must be a readable"]
    #[doc = "                      buffer of length \\p blen Bytes. It may be \\c NULL if"]
    #[doc = "                      \\p blen is zero."]
    #[doc = " \\param blen          The length of \\p buf in Bytes."]
    #[doc = " \\param md_alg        The hash algorithm used to hash the original data."]
    #[doc = " \\param f_rng_blind   The RNG function used for blinding. This must not be"]
    #[doc = "                      \\c NULL."]
    #[doc = " \\param p_rng_blind   The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                      \\c NULL if \\p f_rng doesn't need a context parameter."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX"]
    #[doc = "                  error code on failure."]
    pub fn mbedtls_ecdsa_sign_det_ext(
        grp: *mut mbedtls_ecp_group,
        r: *mut mbedtls_mpi,
        s: *mut mbedtls_mpi,
        d: *const mbedtls_mpi,
        buf: *const c_types::c_uchar,
        blen: size_t,
        md_alg: mbedtls_md_type_t,
        f_rng_blind: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng_blind: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function verifies the ECDSA signature of a"]
    #[doc = "                  previously-hashed message."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.4, step 3."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use."]
    #[doc = "                  This must be initialized and have group parameters"]
    #[doc = "                  set, for example through mbedtls_ecp_group_load()."]
    #[doc = " \\param buf       The hashed content that was signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes. It may be \\c NULL if"]
    #[doc = "                  \\p blen is zero."]
    #[doc = " \\param blen      The length of \\p buf in Bytes."]
    #[doc = " \\param Q         The public key to use for verification. This must be"]
    #[doc = "                  initialized and setup."]
    #[doc = " \\param r         The first integer of the signature."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param s         The second integer of the signature."]
    #[doc = "                  This must be initialized."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if the signature"]
    #[doc = "                  is invalid."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_MPI_XXX"]
    #[doc = "                  error code on failure for any other reason."]
    pub fn mbedtls_ecdsa_verify(
        grp: *mut mbedtls_ecp_group,
        buf: *const c_types::c_uchar,
        blen: size_t,
        Q: *const mbedtls_ecp_point,
        r: *const mbedtls_mpi,
        s: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the ECDSA signature and writes it"]
    #[doc = "                  to a buffer, serialized as defined in <em>RFC-4492:"]
    #[doc = "                  Elliptic Curve Cryptography (ECC) Cipher Suites for"]
    #[doc = "                  Transport Layer Security (TLS)</em>."]
    #[doc = ""]
    #[doc = " \\warning         It is not thread-safe to use the same context in"]
    #[doc = "                  multiple threads."]
    #[doc = ""]
    #[doc = " \\note            The deterministic version is used if"]
    #[doc = "                  #MBEDTLS_ECDSA_DETERMINISTIC is defined. For more"]
    #[doc = "                  information, see <em>RFC-6979: Deterministic Usage"]
    #[doc = "                  of the Digital Signature Algorithm (DSA) and Elliptic"]
    #[doc = "                  Curve Digital Signature Algorithm (ECDSA)</em>."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.3, step 5."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to use. This must be initialized"]
    #[doc = "                  and have a group and private key bound to it, for example"]
    #[doc = "                  via mbedtls_ecdsa_genkey() or mbedtls_ecdsa_from_keypair()."]
    #[doc = " \\param md_alg    The message digest that was used to hash the message."]
    #[doc = " \\param hash      The message hash to be signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes."]
    #[doc = " \\param hlen      The length of the hash \\p hash in Bytes."]
    #[doc = " \\param sig       The buffer to which to write the signature. This must be a"]
    #[doc = "                  writable buffer of length at least twice as large as the"]
    #[doc = "                  size of the curve used, plus 9. For example, 73 Bytes if"]
    #[doc = "                  a 256-bit curve is used. A buffer length of"]
    #[doc = "                  #MBEDTLS_ECDSA_MAX_LEN is always safe."]
    #[doc = " \\param slen      The address at which to store the actual length of"]
    #[doc = "                  the signature written. Must not be \\c NULL."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL if"]
    #[doc = "                  #MBEDTLS_ECDSA_DETERMINISTIC is unset. Otherwise,"]
    #[doc = "                  it is used only for blinding and may be set to \\c NULL, but"]
    #[doc = "                  doing so is DEPRECATED."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL if \\p f_rng is \\c NULL or doesn't use a context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or"]
    #[doc = "                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure."]
    pub fn mbedtls_ecdsa_write_signature(
        ctx: *mut mbedtls_ecdsa_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hlen: size_t,
        sig: *mut c_types::c_uchar,
        slen: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the ECDSA signature and writes it"]
    #[doc = "                  to a buffer, in a restartable way."]
    #[doc = ""]
    #[doc = " \\see             \\c mbedtls_ecdsa_write_signature()"]
    #[doc = ""]
    #[doc = " \\note            This function is like \\c mbedtls_ecdsa_write_signature()"]
    #[doc = "                  but it can return early and restart according to the limit"]
    #[doc = "                  set with \\c mbedtls_ecp_set_max_ops() to reduce blocking."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to use. This must be initialized"]
    #[doc = "                  and have a group and private key bound to it, for example"]
    #[doc = "                  via mbedtls_ecdsa_genkey() or mbedtls_ecdsa_from_keypair()."]
    #[doc = " \\param md_alg    The message digest that was used to hash the message."]
    #[doc = " \\param hash      The message hash to be signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes."]
    #[doc = " \\param hlen      The length of the hash \\p hash in Bytes."]
    #[doc = " \\param sig       The buffer to which to write the signature. This must be a"]
    #[doc = "                  writable buffer of length at least twice as large as the"]
    #[doc = "                  size of the curve used, plus 9. For example, 73 Bytes if"]
    #[doc = "                  a 256-bit curve is used. A buffer length of"]
    #[doc = "                  #MBEDTLS_ECDSA_MAX_LEN is always safe."]
    #[doc = " \\param slen      The address at which to store the actual length of"]
    #[doc = "                  the signature written. Must not be \\c NULL."]
    #[doc = " \\param f_rng     The RNG function. This must not be \\c NULL if"]
    #[doc = "                  #MBEDTLS_ECDSA_DETERMINISTIC is unset. Otherwise,"]
    #[doc = "                  it is unused and may be set to \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL if \\p f_rng is \\c NULL or doesn't use a context."]
    #[doc = " \\param rs_ctx    The restart context to use. This may be \\c NULL to disable"]
    #[doc = "                  restarting. If it is not \\c NULL, it must point to an"]
    #[doc = "                  initialized restart context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or"]
    #[doc = "                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure."]
    pub fn mbedtls_ecdsa_write_signature_restartable(
        ctx: *mut mbedtls_ecdsa_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hlen: size_t,
        sig: *mut c_types::c_uchar,
        slen: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        rs_ctx: *mut mbedtls_ecdsa_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes an ECDSA signature and writes"]
    #[doc = "                  it to a buffer, serialized as defined in <em>RFC-4492:"]
    #[doc = "                  Elliptic Curve Cryptography (ECC) Cipher Suites for"]
    #[doc = "                  Transport Layer Security (TLS)</em>."]
    #[doc = ""]
    #[doc = "                  The deterministic version is defined in <em>RFC-6979:"]
    #[doc = "                  Deterministic Usage of the Digital Signature Algorithm (DSA)"]
    #[doc = "                  and Elliptic Curve Digital Signature Algorithm (ECDSA)</em>."]
    #[doc = ""]
    #[doc = " \\warning         It is not thread-safe to use the same context in"]
    #[doc = "                  multiple threads."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.3, step 5."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\deprecated      Superseded by mbedtls_ecdsa_write_signature() in"]
    #[doc = "                  Mbed TLS version 2.0 and later."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to use. This must be initialized"]
    #[doc = "                  and have a group and private key bound to it, for example"]
    #[doc = "                  via mbedtls_ecdsa_genkey() or mbedtls_ecdsa_from_keypair()."]
    #[doc = " \\param hash      The message hash to be signed. This must be a readable"]
    #[doc = "                  buffer of length \\p blen Bytes."]
    #[doc = " \\param hlen      The length of the hash \\p hash in Bytes."]
    #[doc = " \\param sig       The buffer to which to write the signature. This must be a"]
    #[doc = "                  writable buffer of length at least twice as large as the"]
    #[doc = "                  size of the curve used, plus 9. For example, 73 Bytes if"]
    #[doc = "                  a 256-bit curve is used. A buffer length of"]
    #[doc = "                  #MBEDTLS_ECDSA_MAX_LEN is always safe."]
    #[doc = " \\param slen      The address at which to store the actual length of"]
    #[doc = "                  the signature written. Must not be \\c NULL."]
    #[doc = " \\param md_alg    The message digest that was used to hash the message."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX, \\c MBEDTLS_ERR_MPI_XXX or"]
    #[doc = "                  \\c MBEDTLS_ERR_ASN1_XXX error code on failure."]
    pub fn mbedtls_ecdsa_write_signature_det(
        ctx: *mut mbedtls_ecdsa_context,
        hash: *const c_types::c_uchar,
        hlen: size_t,
        sig: *mut c_types::c_uchar,
        slen: *mut size_t,
        md_alg: mbedtls_md_type_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function reads and verifies an ECDSA signature."]
    #[doc = ""]
    #[doc = " \\note            If the bitlength of the message hash is larger than the"]
    #[doc = "                  bitlength of the group order, then the hash is truncated as"]
    #[doc = "                  defined in <em>Standards for Efficient Cryptography Group"]
    #[doc = "                  (SECG): SEC1 Elliptic Curve Cryptography</em>, section"]
    #[doc = "                  4.1.4, step 3."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to use. This must be initialized"]
    #[doc = "                  and have a group and public key bound to it."]
    #[doc = " \\param hash      The message hash that was signed. This must be a readable"]
    #[doc = "                  buffer of length \\p size Bytes."]
    #[doc = " \\param hlen      The size of the hash \\p hash."]
    #[doc = " \\param sig       The signature to read and verify. This must be a readable"]
    #[doc = "                  buffer of length \\p slen Bytes."]
    #[doc = " \\param slen      The size of \\p sig in Bytes."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH if there is a valid"]
    #[doc = "                  signature in \\p sig, but its length is less than \\p siglen."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_ERR_MPI_XXX"]
    #[doc = "                  error code on failure for any other reason."]
    pub fn mbedtls_ecdsa_read_signature(
        ctx: *mut mbedtls_ecdsa_context,
        hash: *const c_types::c_uchar,
        hlen: size_t,
        sig: *const c_types::c_uchar,
        slen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function reads and verifies an ECDSA signature,"]
    #[doc = "                  in a restartable way."]
    #[doc = ""]
    #[doc = " \\see             \\c mbedtls_ecdsa_read_signature()"]
    #[doc = ""]
    #[doc = " \\note            This function is like \\c mbedtls_ecdsa_read_signature()"]
    #[doc = "                  but it can return early and restart according to the limit"]
    #[doc = "                  set with \\c mbedtls_ecp_set_max_ops() to reduce blocking."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to use. This must be initialized"]
    #[doc = "                  and have a group and public key bound to it."]
    #[doc = " \\param hash      The message hash that was signed. This must be a readable"]
    #[doc = "                  buffer of length \\p size Bytes."]
    #[doc = " \\param hlen      The size of the hash \\p hash."]
    #[doc = " \\param sig       The signature to read and verify. This must be a readable"]
    #[doc = "                  buffer of length \\p slen Bytes."]
    #[doc = " \\param slen      The size of \\p sig in Bytes."]
    #[doc = " \\param rs_ctx    The restart context to use. This may be \\c NULL to disable"]
    #[doc = "                  restarting. If it is not \\c NULL, it must point to an"]
    #[doc = "                  initialized restart context."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_BAD_INPUT_DATA if signature is invalid."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH if there is a valid"]
    #[doc = "                  signature in \\p sig, but its length is less than \\p siglen."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX or \\c MBEDTLS_ERR_MPI_XXX"]
    #[doc = "                  error code on failure for any other reason."]
    pub fn mbedtls_ecdsa_read_signature_restartable(
        ctx: *mut mbedtls_ecdsa_context,
        hash: *const c_types::c_uchar,
        hlen: size_t,
        sig: *const c_types::c_uchar,
        slen: size_t,
        rs_ctx: *mut mbedtls_ecdsa_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function generates an ECDSA keypair on the given curve."]
    #[doc = ""]
    #[doc = " \\see            ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx      The ECDSA context to store the keypair in."]
    #[doc = "                 This must be initialized."]
    #[doc = " \\param gid      The elliptic curve to use. One of the various"]
    #[doc = "                 \\c MBEDTLS_ECP_DP_XXX macros depending on configuration."]
    #[doc = " \\param f_rng    The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_ECP_XXX code on failure."]
    pub fn mbedtls_ecdsa_genkey(
        ctx: *mut mbedtls_ecdsa_context,
        gid: mbedtls_ecp_group_id,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets up an ECDSA context from an EC key pair."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to setup. This must be initialized."]
    #[doc = " \\param key       The EC key to use. This must be initialized and hold"]
    #[doc = "                  a private-public key pair or a public key. In the former"]
    #[doc = "                  case, the ECDSA context may be used for signature creation"]
    #[doc = "                  and verification after this call. In the latter case, it"]
    #[doc = "                  may be used for signature verification."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX code on failure."]
    pub fn mbedtls_ecdsa_from_keypair(
        ctx: *mut mbedtls_ecdsa_context,
        key: *const mbedtls_ecp_keypair,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function initializes an ECDSA context."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to initialize."]
    #[doc = "                  This must not be \\c NULL."]
    pub fn mbedtls_ecdsa_init(ctx: *mut mbedtls_ecdsa_context);
}
extern "C" {
    #[doc = " \\brief           This function frees an ECDSA context."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDSA context to free. This may be \\c NULL,"]
    #[doc = "                  in which case this function does nothing. If it"]
    #[doc = "                  is not \\c NULL, it must be initialized."]
    pub fn mbedtls_ecdsa_free(ctx: *mut mbedtls_ecdsa_context);
}
pub const mbedtls_pk_type_t_MBEDTLS_PK_NONE: mbedtls_pk_type_t = 0;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSA: mbedtls_pk_type_t = 1;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECKEY: mbedtls_pk_type_t = 2;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECKEY_DH: mbedtls_pk_type_t = 3;
pub const mbedtls_pk_type_t_MBEDTLS_PK_ECDSA: mbedtls_pk_type_t = 4;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSA_ALT: mbedtls_pk_type_t = 5;
pub const mbedtls_pk_type_t_MBEDTLS_PK_RSASSA_PSS: mbedtls_pk_type_t = 6;
pub const mbedtls_pk_type_t_MBEDTLS_PK_OPAQUE: mbedtls_pk_type_t = 7;
#[doc = " \\brief          Public key types"]
pub type mbedtls_pk_type_t = c_types::c_uint;
#[doc = " \\brief           Options for RSASSA-PSS signature verification."]
#[doc = "                  See \\c mbedtls_rsa_rsassa_pss_verify_ext()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_rsassa_pss_options {
    pub mgf1_hash_id: mbedtls_md_type_t,
    pub expected_salt_len: c_types::c_int,
}
impl Default for mbedtls_pk_rsassa_pss_options {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_NONE: mbedtls_pk_debug_type = 0;
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_MPI: mbedtls_pk_debug_type = 1;
pub const mbedtls_pk_debug_type_MBEDTLS_PK_DEBUG_ECP: mbedtls_pk_debug_type = 2;
#[doc = " \\brief           Types for interfacing with the debug module"]
pub type mbedtls_pk_debug_type = c_types::c_uint;
#[doc = " \\brief           Item to send to the debug module"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_debug_item {
    pub type_: mbedtls_pk_debug_type,
    pub name: *const c_types::c_char,
    pub value: *mut c_types::c_void,
}
impl Default for mbedtls_pk_debug_item {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_info_t {
    _unused: [u8; 0],
}
#[doc = " \\brief           Public key container"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_pk_context {
    #[doc = "< Public key information"]
    pub pk_info: *const mbedtls_pk_info_t,
    #[doc = "< Underlying public key context"]
    pub pk_ctx: *mut c_types::c_void,
}
impl Default for mbedtls_pk_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mbedtls_pk_restart_ctx = c_types::c_void;
#[doc = " \\brief           Types for RSA-alt abstraction"]
pub type mbedtls_pk_rsa_alt_decrypt_func = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        mode: c_types::c_int,
        olen: *mut size_t,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
        output_max_len: size_t,
    ) -> c_types::c_int,
>;
pub type mbedtls_pk_rsa_alt_sign_func = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        mode: c_types::c_int,
        md_alg: mbedtls_md_type_t,
        hashlen: c_types::c_uint,
        hash: *const c_types::c_uchar,
        sig: *mut c_types::c_uchar,
    ) -> c_types::c_int,
>;
pub type mbedtls_pk_rsa_alt_key_len_func =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut c_types::c_void) -> size_t>;
extern "C" {
    #[doc = " \\brief           Return information associated with the given PK type"]
    #[doc = ""]
    #[doc = " \\param pk_type   PK type to search for."]
    #[doc = ""]
    #[doc = " \\return          The PK info associated with the type or NULL if not found."]
    pub fn mbedtls_pk_info_from_type(pk_type: mbedtls_pk_type_t) -> *const mbedtls_pk_info_t;
}
extern "C" {
    #[doc = " \\brief           Initialize a #mbedtls_pk_context (as NONE)."]
    #[doc = ""]
    #[doc = " \\param ctx       The context to initialize."]
    #[doc = "                  This must not be \\c NULL."]
    pub fn mbedtls_pk_init(ctx: *mut mbedtls_pk_context);
}
extern "C" {
    #[doc = " \\brief           Free the components of a #mbedtls_pk_context."]
    #[doc = ""]
    #[doc = " \\param ctx       The context to clear. It must have been initialized."]
    #[doc = "                  If this is \\c NULL, this function does nothing."]
    #[doc = ""]
    #[doc = " \\note            For contexts that have been set up with"]
    #[doc = "                  mbedtls_pk_setup_opaque(), this does not free the underlying"]
    #[doc = "                  PSA key and you still need to call psa_destroy_key()"]
    #[doc = "                  independently if you want to destroy that key."]
    pub fn mbedtls_pk_free(ctx: *mut mbedtls_pk_context);
}
extern "C" {
    #[doc = " \\brief           Initialize a PK context with the information given"]
    #[doc = "                  and allocates the type-specific PK subcontext."]
    #[doc = ""]
    #[doc = " \\param ctx       Context to initialize. It must not have been set"]
    #[doc = "                  up yet (type #MBEDTLS_PK_NONE)."]
    #[doc = " \\param info      Information to use"]
    #[doc = ""]
    #[doc = " \\return          0 on success,"]
    #[doc = "                  MBEDTLS_ERR_PK_BAD_INPUT_DATA on invalid input,"]
    #[doc = "                  MBEDTLS_ERR_PK_ALLOC_FAILED on allocation failure."]
    #[doc = ""]
    #[doc = " \\note            For contexts holding an RSA-alt key, use"]
    #[doc = "                  \\c mbedtls_pk_setup_rsa_alt() instead."]
    pub fn mbedtls_pk_setup(
        ctx: *mut mbedtls_pk_context,
        info: *const mbedtls_pk_info_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Initialize an RSA-alt context"]
    #[doc = ""]
    #[doc = " \\param ctx       Context to initialize. It must not have been set"]
    #[doc = "                  up yet (type #MBEDTLS_PK_NONE)."]
    #[doc = " \\param key       RSA key pointer"]
    #[doc = " \\param decrypt_func  Decryption function"]
    #[doc = " \\param sign_func     Signing function"]
    #[doc = " \\param key_len_func  Function returning key length in bytes"]
    #[doc = ""]
    #[doc = " \\return          0 on success, or MBEDTLS_ERR_PK_BAD_INPUT_DATA if the"]
    #[doc = "                  context wasn't already initialized as RSA_ALT."]
    #[doc = ""]
    #[doc = " \\note            This function replaces \\c mbedtls_pk_setup() for RSA-alt."]
    pub fn mbedtls_pk_setup_rsa_alt(
        ctx: *mut mbedtls_pk_context,
        key: *mut c_types::c_void,
        decrypt_func: mbedtls_pk_rsa_alt_decrypt_func,
        sign_func: mbedtls_pk_rsa_alt_sign_func,
        key_len_func: mbedtls_pk_rsa_alt_key_len_func,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Get the size in bits of the underlying key"]
    #[doc = ""]
    #[doc = " \\param ctx       The context to query. It must have been initialized."]
    #[doc = ""]
    #[doc = " \\return          Key size in bits, or 0 on error"]
    pub fn mbedtls_pk_get_bitlen(ctx: *const mbedtls_pk_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief           Tell if a context can do the operation given by type"]
    #[doc = ""]
    #[doc = " \\param ctx       The context to query. It must have been initialized."]
    #[doc = " \\param type      The desired type."]
    #[doc = ""]
    #[doc = " \\return          1 if the context can do operations on the given type."]
    #[doc = " \\return          0 if the context cannot do the operations on the given"]
    #[doc = "                  type. This is always the case for a context that has"]
    #[doc = "                  been initialized but not set up, or that has been"]
    #[doc = "                  cleared with mbedtls_pk_free()."]
    pub fn mbedtls_pk_can_do(
        ctx: *const mbedtls_pk_context,
        type_: mbedtls_pk_type_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Verify signature (including padding if relevant)."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up."]
    #[doc = " \\param md_alg    Hash algorithm used (see notes)"]
    #[doc = " \\param hash      Hash of the message to sign"]
    #[doc = " \\param hash_len  Hash length or 0 (see notes)"]
    #[doc = " \\param sig       Signature to verify"]
    #[doc = " \\param sig_len   Signature length"]
    #[doc = ""]
    #[doc = " \\return          0 on success (signature is valid),"]
    #[doc = "                  #MBEDTLS_ERR_PK_SIG_LEN_MISMATCH if there is a valid"]
    #[doc = "                  signature in sig but its length is less than \\p siglen,"]
    #[doc = "                  or a specific error code."]
    #[doc = ""]
    #[doc = " \\note            For RSA keys, the default padding type is PKCS#1 v1.5."]
    #[doc = "                  Use \\c mbedtls_pk_verify_ext( MBEDTLS_PK_RSASSA_PSS, ... )"]
    #[doc = "                  to verify RSASSA_PSS signatures."]
    #[doc = ""]
    #[doc = " \\note            If hash_len is 0, then the length associated with md_alg"]
    #[doc = "                  is used instead, or an error returned if it is invalid."]
    #[doc = ""]
    #[doc = " \\note            md_alg may be MBEDTLS_MD_NONE, only if hash_len != 0"]
    pub fn mbedtls_pk_verify(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hash_len: size_t,
        sig: *const c_types::c_uchar,
        sig_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Restartable version of \\c mbedtls_pk_verify()"]
    #[doc = ""]
    #[doc = " \\note            Performs the same job as \\c mbedtls_pk_verify(), but can"]
    #[doc = "                  return early and restart according to the limit set with"]
    #[doc = "                  \\c mbedtls_ecp_set_max_ops() to reduce blocking for ECC"]
    #[doc = "                  operations. For RSA, same as \\c mbedtls_pk_verify()."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up."]
    #[doc = " \\param md_alg    Hash algorithm used (see notes)"]
    #[doc = " \\param hash      Hash of the message to sign"]
    #[doc = " \\param hash_len  Hash length or 0 (see notes)"]
    #[doc = " \\param sig       Signature to verify"]
    #[doc = " \\param sig_len   Signature length"]
    #[doc = " \\param rs_ctx    Restart context (NULL to disable restart)"]
    #[doc = ""]
    #[doc = " \\return          See \\c mbedtls_pk_verify(), or"]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    pub fn mbedtls_pk_verify_restartable(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hash_len: size_t,
        sig: *const c_types::c_uchar,
        sig_len: size_t,
        rs_ctx: *mut mbedtls_pk_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Verify signature, with options."]
    #[doc = "                  (Includes verification of the padding depending on type.)"]
    #[doc = ""]
    #[doc = " \\param type      Signature type (inc. possible padding type) to verify"]
    #[doc = " \\param options   Pointer to type-specific options, or NULL"]
    #[doc = " \\param ctx       The PK context to use. It must have been set up."]
    #[doc = " \\param md_alg    Hash algorithm used (see notes)"]
    #[doc = " \\param hash      Hash of the message to sign"]
    #[doc = " \\param hash_len  Hash length or 0 (see notes)"]
    #[doc = " \\param sig       Signature to verify"]
    #[doc = " \\param sig_len   Signature length"]
    #[doc = ""]
    #[doc = " \\return          0 on success (signature is valid),"]
    #[doc = "                  #MBEDTLS_ERR_PK_TYPE_MISMATCH if the PK context can't be"]
    #[doc = "                  used for this type of signatures,"]
    #[doc = "                  #MBEDTLS_ERR_PK_SIG_LEN_MISMATCH if there is a valid"]
    #[doc = "                  signature in sig but its length is less than \\p siglen,"]
    #[doc = "                  or a specific error code."]
    #[doc = ""]
    #[doc = " \\note            If hash_len is 0, then the length associated with md_alg"]
    #[doc = "                  is used instead, or an error returned if it is invalid."]
    #[doc = ""]
    #[doc = " \\note            md_alg may be MBEDTLS_MD_NONE, only if hash_len != 0"]
    #[doc = ""]
    #[doc = " \\note            If type is MBEDTLS_PK_RSASSA_PSS, then options must point"]
    #[doc = "                  to a mbedtls_pk_rsassa_pss_options structure,"]
    #[doc = "                  otherwise it must be NULL."]
    pub fn mbedtls_pk_verify_ext(
        type_: mbedtls_pk_type_t,
        options: *const c_types::c_void,
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hash_len: size_t,
        sig: *const c_types::c_uchar,
        sig_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Make signature, including padding if relevant."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up"]
    #[doc = "                  with a private key."]
    #[doc = " \\param md_alg    Hash algorithm used (see notes)"]
    #[doc = " \\param hash      Hash of the message to sign"]
    #[doc = " \\param hash_len  Hash length or 0 (see notes)"]
    #[doc = " \\param sig       Place to write the signature."]
    #[doc = "                  It must have enough room for the signature."]
    #[doc = "                  #MBEDTLS_PK_SIGNATURE_MAX_SIZE is always enough."]
    #[doc = "                  You may use a smaller buffer if it is large enough"]
    #[doc = "                  given the key type."]
    #[doc = " \\param sig_len   On successful return,"]
    #[doc = "                  the number of bytes written to \\p sig."]
    #[doc = " \\param f_rng     RNG function"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = ""]
    #[doc = " \\return          0 on success, or a specific error code."]
    #[doc = ""]
    #[doc = " \\note            For RSA keys, the default padding type is PKCS#1 v1.5."]
    #[doc = "                  There is no interface in the PK module to make RSASSA-PSS"]
    #[doc = "                  signatures yet."]
    #[doc = ""]
    #[doc = " \\note            If hash_len is 0, then the length associated with md_alg"]
    #[doc = "                  is used instead, or an error returned if it is invalid."]
    #[doc = ""]
    #[doc = " \\note            For RSA, md_alg may be MBEDTLS_MD_NONE if hash_len != 0."]
    #[doc = "                  For ECDSA, md_alg may never be MBEDTLS_MD_NONE."]
    pub fn mbedtls_pk_sign(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hash_len: size_t,
        sig: *mut c_types::c_uchar,
        sig_len: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Restartable version of \\c mbedtls_pk_sign()"]
    #[doc = ""]
    #[doc = " \\note            Performs the same job as \\c mbedtls_pk_sign(), but can"]
    #[doc = "                  return early and restart according to the limit set with"]
    #[doc = "                  \\c mbedtls_ecp_set_max_ops() to reduce blocking for ECC"]
    #[doc = "                  operations. For RSA, same as \\c mbedtls_pk_sign()."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up"]
    #[doc = "                  with a private key."]
    #[doc = " \\param md_alg    Hash algorithm used (see notes for mbedtls_pk_sign())"]
    #[doc = " \\param hash      Hash of the message to sign"]
    #[doc = " \\param hash_len  Hash length or 0 (see notes for mbedtls_pk_sign())"]
    #[doc = " \\param sig       Place to write the signature."]
    #[doc = "                  It must have enough room for the signature."]
    #[doc = "                  #MBEDTLS_PK_SIGNATURE_MAX_SIZE is always enough."]
    #[doc = "                  You may use a smaller buffer if it is large enough"]
    #[doc = "                  given the key type."]
    #[doc = " \\param sig_len   On successful return,"]
    #[doc = "                  the number of bytes written to \\p sig."]
    #[doc = " \\param f_rng     RNG function"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = " \\param rs_ctx    Restart context (NULL to disable restart)"]
    #[doc = ""]
    #[doc = " \\return          See \\c mbedtls_pk_sign()."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    pub fn mbedtls_pk_sign_restartable(
        ctx: *mut mbedtls_pk_context,
        md_alg: mbedtls_md_type_t,
        hash: *const c_types::c_uchar,
        hash_len: size_t,
        sig: *mut c_types::c_uchar,
        sig_len: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
        rs_ctx: *mut mbedtls_pk_restart_ctx,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Decrypt message (including padding if relevant)."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up"]
    #[doc = "                  with a private key."]
    #[doc = " \\param input     Input to decrypt"]
    #[doc = " \\param ilen      Input size"]
    #[doc = " \\param output    Decrypted output"]
    #[doc = " \\param olen      Decrypted message length"]
    #[doc = " \\param osize     Size of the output buffer"]
    #[doc = " \\param f_rng     RNG function"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = ""]
    #[doc = " \\note            For RSA keys, the default padding type is PKCS#1 v1.5."]
    #[doc = ""]
    #[doc = " \\return          0 on success, or a specific error code."]
    pub fn mbedtls_pk_decrypt(
        ctx: *mut mbedtls_pk_context,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
        osize: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Encrypt message (including padding if relevant)."]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been set up."]
    #[doc = " \\param input     Message to encrypt"]
    #[doc = " \\param ilen      Message size"]
    #[doc = " \\param output    Encrypted output"]
    #[doc = " \\param olen      Encrypted output length"]
    #[doc = " \\param osize     Size of the output buffer"]
    #[doc = " \\param f_rng     RNG function"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = ""]
    #[doc = " \\note            For RSA keys, the default padding type is PKCS#1 v1.5."]
    #[doc = ""]
    #[doc = " \\return          0 on success, or a specific error code."]
    pub fn mbedtls_pk_encrypt(
        ctx: *mut mbedtls_pk_context,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
        osize: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Check if a public-private pair of keys matches."]
    #[doc = ""]
    #[doc = " \\param pub       Context holding a public key."]
    #[doc = " \\param prv       Context holding a private (and public) key."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success (keys were checked and match each other)."]
    #[doc = " \\return          #MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE if the keys could not"]
    #[doc = "                  be checked - in that case they may or may not match."]
    #[doc = " \\return          #MBEDTLS_ERR_PK_BAD_INPUT_DATA if a context is invalid."]
    #[doc = " \\return          Another non-zero value if the keys do not match."]
    pub fn mbedtls_pk_check_pair(
        pub_: *const mbedtls_pk_context,
        prv: *const mbedtls_pk_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Export debug information"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been initialized."]
    #[doc = " \\param items     Place to write debug items"]
    #[doc = ""]
    #[doc = " \\return          0 on success or MBEDTLS_ERR_PK_BAD_INPUT_DATA"]
    pub fn mbedtls_pk_debug(
        ctx: *const mbedtls_pk_context,
        items: *mut mbedtls_pk_debug_item,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Access the type name"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been initialized."]
    #[doc = ""]
    #[doc = " \\return          Type name on success, or \"invalid PK\""]
    pub fn mbedtls_pk_get_name(ctx: *const mbedtls_pk_context) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief           Get the key type"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to use. It must have been initialized."]
    #[doc = ""]
    #[doc = " \\return          Type on success."]
    #[doc = " \\return          #MBEDTLS_PK_NONE for a context that has not been set up."]
    pub fn mbedtls_pk_get_type(ctx: *const mbedtls_pk_context) -> mbedtls_pk_type_t;
}
extern "C" {
    #[doc = " \\ingroup pk_module */"]
    #[doc = " \\brief           Parse a private key in PEM or DER format"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to fill. It must have been initialized"]
    #[doc = "                  but not set up."]
    #[doc = " \\param key       Input buffer to parse."]
    #[doc = "                  The buffer must contain the input exactly, with no"]
    #[doc = "                  extra trailing material. For PEM, the buffer must"]
    #[doc = "                  contain a null-terminated string."]
    #[doc = " \\param keylen    Size of \\b key in bytes."]
    #[doc = "                  For PEM data, this includes the terminating null byte,"]
    #[doc = "                  so \\p keylen must be equal to `strlen(key) + 1`."]
    #[doc = " \\param pwd       Optional password for decryption."]
    #[doc = "                  Pass \\c NULL if expecting a non-encrypted key."]
    #[doc = "                  Pass a string of \\p pwdlen bytes if expecting an encrypted"]
    #[doc = "                  key; a non-encrypted key will also be accepted."]
    #[doc = "                  The empty password is not supported."]
    #[doc = " \\param pwdlen    Size of the password in bytes."]
    #[doc = "                  Ignored if \\p pwd is \\c NULL."]
    #[doc = ""]
    #[doc = " \\note            On entry, ctx must be empty, either freshly initialised"]
    #[doc = "                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a"]
    #[doc = "                  specific key type, check the result with mbedtls_pk_can_do()."]
    #[doc = ""]
    #[doc = " \\note            The key is also checked for correctness."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific PK or PEM error code"]
    pub fn mbedtls_pk_parse_key(
        ctx: *mut mbedtls_pk_context,
        key: *const c_types::c_uchar,
        keylen: size_t,
        pwd: *const c_types::c_uchar,
        pwdlen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\ingroup pk_module */"]
    #[doc = " \\brief           Parse a public key in PEM or DER format"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to fill. It must have been initialized"]
    #[doc = "                  but not set up."]
    #[doc = " \\param key       Input buffer to parse."]
    #[doc = "                  The buffer must contain the input exactly, with no"]
    #[doc = "                  extra trailing material. For PEM, the buffer must"]
    #[doc = "                  contain a null-terminated string."]
    #[doc = " \\param keylen    Size of \\b key in bytes."]
    #[doc = "                  For PEM data, this includes the terminating null byte,"]
    #[doc = "                  so \\p keylen must be equal to `strlen(key) + 1`."]
    #[doc = ""]
    #[doc = " \\note            On entry, ctx must be empty, either freshly initialised"]
    #[doc = "                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a"]
    #[doc = "                  specific key type, check the result with mbedtls_pk_can_do()."]
    #[doc = ""]
    #[doc = " \\note            The key is also checked for correctness."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific PK or PEM error code"]
    pub fn mbedtls_pk_parse_public_key(
        ctx: *mut mbedtls_pk_context,
        key: *const c_types::c_uchar,
        keylen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\ingroup pk_module */"]
    #[doc = " \\brief           Load and parse a private key"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to fill. It must have been initialized"]
    #[doc = "                  but not set up."]
    #[doc = " \\param path      filename to read the private key from"]
    #[doc = " \\param password  Optional password to decrypt the file."]
    #[doc = "                  Pass \\c NULL if expecting a non-encrypted key."]
    #[doc = "                  Pass a null-terminated string if expecting an encrypted"]
    #[doc = "                  key; a non-encrypted key will also be accepted."]
    #[doc = "                  The empty password is not supported."]
    #[doc = ""]
    #[doc = " \\note            On entry, ctx must be empty, either freshly initialised"]
    #[doc = "                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If you need a"]
    #[doc = "                  specific key type, check the result with mbedtls_pk_can_do()."]
    #[doc = ""]
    #[doc = " \\note            The key is also checked for correctness."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific PK or PEM error code"]
    pub fn mbedtls_pk_parse_keyfile(
        ctx: *mut mbedtls_pk_context,
        path: *const c_types::c_char,
        password: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\ingroup pk_module */"]
    #[doc = " \\brief           Load and parse a public key"]
    #[doc = ""]
    #[doc = " \\param ctx       The PK context to fill. It must have been initialized"]
    #[doc = "                  but not set up."]
    #[doc = " \\param path      filename to read the public key from"]
    #[doc = ""]
    #[doc = " \\note            On entry, ctx must be empty, either freshly initialised"]
    #[doc = "                  with mbedtls_pk_init() or reset with mbedtls_pk_free(). If"]
    #[doc = "                  you need a specific key type, check the result with"]
    #[doc = "                  mbedtls_pk_can_do()."]
    #[doc = ""]
    #[doc = " \\note            The key is also checked for correctness."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific PK or PEM error code"]
    pub fn mbedtls_pk_parse_public_keyfile(
        ctx: *mut mbedtls_pk_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a private key to a PKCS#1 or SEC1 DER structure"]
    #[doc = "                  Note: data is written at the end of the buffer! Use the"]
    #[doc = "                        return value to determine where you should start"]
    #[doc = "                        using the buffer"]
    #[doc = ""]
    #[doc = " \\param ctx       PK context which must contain a valid private key."]
    #[doc = " \\param buf       buffer to write to"]
    #[doc = " \\param size      size of the buffer"]
    #[doc = ""]
    #[doc = " \\return          length of data written if successful, or a specific"]
    #[doc = "                  error code"]
    pub fn mbedtls_pk_write_key_der(
        ctx: *mut mbedtls_pk_context,
        buf: *mut c_types::c_uchar,
        size: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a public key to a SubjectPublicKeyInfo DER structure"]
    #[doc = "                  Note: data is written at the end of the buffer! Use the"]
    #[doc = "                        return value to determine where you should start"]
    #[doc = "                        using the buffer"]
    #[doc = ""]
    #[doc = " \\param ctx       PK context which must contain a valid public or private key."]
    #[doc = " \\param buf       buffer to write to"]
    #[doc = " \\param size      size of the buffer"]
    #[doc = ""]
    #[doc = " \\return          length of data written if successful, or a specific"]
    #[doc = "                  error code"]
    pub fn mbedtls_pk_write_pubkey_der(
        ctx: *mut mbedtls_pk_context,
        buf: *mut c_types::c_uchar,
        size: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a public key to a PEM string"]
    #[doc = ""]
    #[doc = " \\param ctx       PK context which must contain a valid public or private key."]
    #[doc = " \\param buf       Buffer to write to. The output includes a"]
    #[doc = "                  terminating null byte."]
    #[doc = " \\param size      Size of the buffer in bytes."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific error code"]
    pub fn mbedtls_pk_write_pubkey_pem(
        ctx: *mut mbedtls_pk_context,
        buf: *mut c_types::c_uchar,
        size: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a private key to a PKCS#1 or SEC1 PEM string"]
    #[doc = ""]
    #[doc = " \\param ctx       PK context which must contain a valid private key."]
    #[doc = " \\param buf       Buffer to write to. The output includes a"]
    #[doc = "                  terminating null byte."]
    #[doc = " \\param size      Size of the buffer in bytes."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific error code"]
    pub fn mbedtls_pk_write_key_pem(
        ctx: *mut mbedtls_pk_context,
        buf: *mut c_types::c_uchar,
        size: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Parse a SubjectPublicKeyInfo DER structure"]
    #[doc = ""]
    #[doc = " \\param p         the position in the ASN.1 data"]
    #[doc = " \\param end       end of the buffer"]
    #[doc = " \\param pk        The PK context to fill. It must have been initialized"]
    #[doc = "                  but not set up."]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific PK error code"]
    pub fn mbedtls_pk_parse_subpubkey(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        pk: *mut mbedtls_pk_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a subjectPublicKey to ASN.1 data"]
    #[doc = "                  Note: function works backwards in data buffer"]
    #[doc = ""]
    #[doc = " \\param p         reference to current position pointer"]
    #[doc = " \\param start     start of the buffer (for bounds-checking)"]
    #[doc = " \\param key       PK context which must contain a valid public or private key."]
    #[doc = ""]
    #[doc = " \\return          the length written or a negative error code"]
    pub fn mbedtls_pk_write_pubkey(
        p: *mut *mut c_types::c_uchar,
        start: *mut c_types::c_uchar,
        key: *const mbedtls_pk_context,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_pk_load_file(
        path: *const c_types::c_char,
        buf: *mut *mut c_types::c_uchar,
        n: *mut size_t,
    ) -> c_types::c_int;
}
#[doc = "< Placeholder to mark the end of cipher ID lists."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_NONE: mbedtls_cipher_id_t = 0;
#[doc = "< The identity cipher, treated as a stream cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_NULL: mbedtls_cipher_id_t = 1;
#[doc = "< The AES cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_AES: mbedtls_cipher_id_t = 2;
#[doc = "< The DES cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_DES: mbedtls_cipher_id_t = 3;
#[doc = "< The Triple DES cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_3DES: mbedtls_cipher_id_t = 4;
#[doc = "< The Camellia cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_CAMELLIA: mbedtls_cipher_id_t = 5;
#[doc = "< The Blowfish cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_BLOWFISH: mbedtls_cipher_id_t = 6;
#[doc = "< The RC4 cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_ARC4: mbedtls_cipher_id_t = 7;
#[doc = "< The Aria cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_ARIA: mbedtls_cipher_id_t = 8;
#[doc = "< The ChaCha20 cipher."]
pub const mbedtls_cipher_id_t_MBEDTLS_CIPHER_ID_CHACHA20: mbedtls_cipher_id_t = 9;
#[doc = " \\brief     Supported cipher types."]
#[doc = ""]
#[doc = " \\warning   RC4 and DES are considered weak ciphers and their use"]
#[doc = "            constitutes a security risk. Arm recommends considering stronger"]
#[doc = "            ciphers instead."]
pub type mbedtls_cipher_id_t = c_types::c_uint;
#[doc = "< Placeholder to mark the end of cipher-pair lists."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_NONE: mbedtls_cipher_type_t = 0;
#[doc = "< The identity stream cipher."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_NULL: mbedtls_cipher_type_t = 1;
#[doc = "< AES cipher with 128-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_ECB: mbedtls_cipher_type_t = 2;
#[doc = "< AES cipher with 192-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_ECB: mbedtls_cipher_type_t = 3;
#[doc = "< AES cipher with 256-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_ECB: mbedtls_cipher_type_t = 4;
#[doc = "< AES cipher with 128-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CBC: mbedtls_cipher_type_t = 5;
#[doc = "< AES cipher with 192-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CBC: mbedtls_cipher_type_t = 6;
#[doc = "< AES cipher with 256-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CBC: mbedtls_cipher_type_t = 7;
#[doc = "< AES cipher with 128-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CFB128: mbedtls_cipher_type_t = 8;
#[doc = "< AES cipher with 192-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CFB128: mbedtls_cipher_type_t = 9;
#[doc = "< AES cipher with 256-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CFB128: mbedtls_cipher_type_t = 10;
#[doc = "< AES cipher with 128-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CTR: mbedtls_cipher_type_t = 11;
#[doc = "< AES cipher with 192-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CTR: mbedtls_cipher_type_t = 12;
#[doc = "< AES cipher with 256-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CTR: mbedtls_cipher_type_t = 13;
#[doc = "< AES cipher with 128-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_GCM: mbedtls_cipher_type_t = 14;
#[doc = "< AES cipher with 192-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_GCM: mbedtls_cipher_type_t = 15;
#[doc = "< AES cipher with 256-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_GCM: mbedtls_cipher_type_t = 16;
#[doc = "< Camellia cipher with 128-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_ECB: mbedtls_cipher_type_t = 17;
#[doc = "< Camellia cipher with 192-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_ECB: mbedtls_cipher_type_t = 18;
#[doc = "< Camellia cipher with 256-bit ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_ECB: mbedtls_cipher_type_t = 19;
#[doc = "< Camellia cipher with 128-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CBC: mbedtls_cipher_type_t = 20;
#[doc = "< Camellia cipher with 192-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CBC: mbedtls_cipher_type_t = 21;
#[doc = "< Camellia cipher with 256-bit CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CBC: mbedtls_cipher_type_t = 22;
#[doc = "< Camellia cipher with 128-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CFB128: mbedtls_cipher_type_t = 23;
#[doc = "< Camellia cipher with 192-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CFB128: mbedtls_cipher_type_t = 24;
#[doc = "< Camellia cipher with 256-bit CFB128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CFB128: mbedtls_cipher_type_t = 25;
#[doc = "< Camellia cipher with 128-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CTR: mbedtls_cipher_type_t = 26;
#[doc = "< Camellia cipher with 192-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CTR: mbedtls_cipher_type_t = 27;
#[doc = "< Camellia cipher with 256-bit CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CTR: mbedtls_cipher_type_t = 28;
#[doc = "< Camellia cipher with 128-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_GCM: mbedtls_cipher_type_t = 29;
#[doc = "< Camellia cipher with 192-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_GCM: mbedtls_cipher_type_t = 30;
#[doc = "< Camellia cipher with 256-bit GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_GCM: mbedtls_cipher_type_t = 31;
#[doc = "< DES cipher with ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_ECB: mbedtls_cipher_type_t = 32;
#[doc = "< DES cipher with CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_CBC: mbedtls_cipher_type_t = 33;
#[doc = "< DES cipher with EDE ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE_ECB: mbedtls_cipher_type_t = 34;
#[doc = "< DES cipher with EDE CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE_CBC: mbedtls_cipher_type_t = 35;
#[doc = "< DES cipher with EDE3 ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE3_ECB: mbedtls_cipher_type_t = 36;
#[doc = "< DES cipher with EDE3 CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_DES_EDE3_CBC: mbedtls_cipher_type_t = 37;
#[doc = "< Blowfish cipher with ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_ECB: mbedtls_cipher_type_t = 38;
#[doc = "< Blowfish cipher with CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CBC: mbedtls_cipher_type_t = 39;
#[doc = "< Blowfish cipher with CFB64 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CFB64: mbedtls_cipher_type_t = 40;
#[doc = "< Blowfish cipher with CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_BLOWFISH_CTR: mbedtls_cipher_type_t = 41;
#[doc = "< RC4 cipher with 128-bit mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARC4_128: mbedtls_cipher_type_t = 42;
#[doc = "< AES cipher with 128-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_CCM: mbedtls_cipher_type_t = 43;
#[doc = "< AES cipher with 192-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_CCM: mbedtls_cipher_type_t = 44;
#[doc = "< AES cipher with 256-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_CCM: mbedtls_cipher_type_t = 45;
#[doc = "< Camellia cipher with 128-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_128_CCM: mbedtls_cipher_type_t = 46;
#[doc = "< Camellia cipher with 192-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_192_CCM: mbedtls_cipher_type_t = 47;
#[doc = "< Camellia cipher with 256-bit CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CAMELLIA_256_CCM: mbedtls_cipher_type_t = 48;
#[doc = "< Aria cipher with 128-bit key and ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_ECB: mbedtls_cipher_type_t = 49;
#[doc = "< Aria cipher with 192-bit key and ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_ECB: mbedtls_cipher_type_t = 50;
#[doc = "< Aria cipher with 256-bit key and ECB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_ECB: mbedtls_cipher_type_t = 51;
#[doc = "< Aria cipher with 128-bit key and CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CBC: mbedtls_cipher_type_t = 52;
#[doc = "< Aria cipher with 192-bit key and CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CBC: mbedtls_cipher_type_t = 53;
#[doc = "< Aria cipher with 256-bit key and CBC mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CBC: mbedtls_cipher_type_t = 54;
#[doc = "< Aria cipher with 128-bit key and CFB-128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CFB128: mbedtls_cipher_type_t = 55;
#[doc = "< Aria cipher with 192-bit key and CFB-128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CFB128: mbedtls_cipher_type_t = 56;
#[doc = "< Aria cipher with 256-bit key and CFB-128 mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CFB128: mbedtls_cipher_type_t = 57;
#[doc = "< Aria cipher with 128-bit key and CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CTR: mbedtls_cipher_type_t = 58;
#[doc = "< Aria cipher with 192-bit key and CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CTR: mbedtls_cipher_type_t = 59;
#[doc = "< Aria cipher with 256-bit key and CTR mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CTR: mbedtls_cipher_type_t = 60;
#[doc = "< Aria cipher with 128-bit key and GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_GCM: mbedtls_cipher_type_t = 61;
#[doc = "< Aria cipher with 192-bit key and GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_GCM: mbedtls_cipher_type_t = 62;
#[doc = "< Aria cipher with 256-bit key and GCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_GCM: mbedtls_cipher_type_t = 63;
#[doc = "< Aria cipher with 128-bit key and CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_128_CCM: mbedtls_cipher_type_t = 64;
#[doc = "< Aria cipher with 192-bit key and CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_192_CCM: mbedtls_cipher_type_t = 65;
#[doc = "< Aria cipher with 256-bit key and CCM mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_ARIA_256_CCM: mbedtls_cipher_type_t = 66;
#[doc = "< AES 128-bit cipher in OFB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_OFB: mbedtls_cipher_type_t = 67;
#[doc = "< AES 192-bit cipher in OFB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_OFB: mbedtls_cipher_type_t = 68;
#[doc = "< AES 256-bit cipher in OFB mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_OFB: mbedtls_cipher_type_t = 69;
#[doc = "< AES 128-bit cipher in XTS block mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_XTS: mbedtls_cipher_type_t = 70;
#[doc = "< AES 256-bit cipher in XTS block mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_XTS: mbedtls_cipher_type_t = 71;
#[doc = "< ChaCha20 stream cipher."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CHACHA20: mbedtls_cipher_type_t = 72;
#[doc = "< ChaCha20-Poly1305 AEAD cipher."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_CHACHA20_POLY1305: mbedtls_cipher_type_t = 73;
#[doc = "< AES cipher with 128-bit NIST KW mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_KW: mbedtls_cipher_type_t = 74;
#[doc = "< AES cipher with 192-bit NIST KW mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_KW: mbedtls_cipher_type_t = 75;
#[doc = "< AES cipher with 256-bit NIST KW mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_KW: mbedtls_cipher_type_t = 76;
#[doc = "< AES cipher with 128-bit NIST KWP mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_128_KWP: mbedtls_cipher_type_t = 77;
#[doc = "< AES cipher with 192-bit NIST KWP mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_192_KWP: mbedtls_cipher_type_t = 78;
#[doc = "< AES cipher with 256-bit NIST KWP mode."]
pub const mbedtls_cipher_type_t_MBEDTLS_CIPHER_AES_256_KWP: mbedtls_cipher_type_t = 79;
#[doc = " \\brief     Supported {cipher type, cipher mode} pairs."]
#[doc = ""]
#[doc = " \\warning   RC4 and DES are considered weak ciphers and their use"]
#[doc = "            constitutes a security risk. Arm recommends considering stronger"]
#[doc = "            ciphers instead."]
pub type mbedtls_cipher_type_t = c_types::c_uint;
#[doc = "< None."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_NONE: mbedtls_cipher_mode_t = 0;
#[doc = "< The ECB cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_ECB: mbedtls_cipher_mode_t = 1;
#[doc = "< The CBC cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CBC: mbedtls_cipher_mode_t = 2;
#[doc = "< The CFB cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CFB: mbedtls_cipher_mode_t = 3;
#[doc = "< The OFB cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_OFB: mbedtls_cipher_mode_t = 4;
#[doc = "< The CTR cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CTR: mbedtls_cipher_mode_t = 5;
#[doc = "< The GCM cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_GCM: mbedtls_cipher_mode_t = 6;
#[doc = "< The stream cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_STREAM: mbedtls_cipher_mode_t = 7;
#[doc = "< The CCM cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CCM: mbedtls_cipher_mode_t = 8;
#[doc = "< The XTS cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_XTS: mbedtls_cipher_mode_t = 9;
#[doc = "< The ChaCha-Poly cipher mode."]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_CHACHAPOLY: mbedtls_cipher_mode_t = 10;
#[doc = "< The SP800-38F KW mode"]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_KW: mbedtls_cipher_mode_t = 11;
#[doc = "< The SP800-38F KWP mode"]
pub const mbedtls_cipher_mode_t_MBEDTLS_MODE_KWP: mbedtls_cipher_mode_t = 12;
#[doc = " Supported cipher modes."]
pub type mbedtls_cipher_mode_t = c_types::c_uint;
#[doc = "< PKCS7 padding (default)."]
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_PKCS7: mbedtls_cipher_padding_t = 0;
#[doc = "< ISO/IEC 7816-4 padding."]
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ONE_AND_ZEROS: mbedtls_cipher_padding_t = 1;
#[doc = "< ANSI X.923 padding."]
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ZEROS_AND_LEN: mbedtls_cipher_padding_t = 2;
#[doc = "< Zero padding (not reversible)."]
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_ZEROS: mbedtls_cipher_padding_t = 3;
#[doc = "< Never pad (full blocks only)."]
pub const mbedtls_cipher_padding_t_MBEDTLS_PADDING_NONE: mbedtls_cipher_padding_t = 4;
#[doc = " Supported cipher padding types."]
pub type mbedtls_cipher_padding_t = c_types::c_uint;
pub const mbedtls_operation_t_MBEDTLS_OPERATION_NONE: mbedtls_operation_t = -1;
pub const mbedtls_operation_t_MBEDTLS_DECRYPT: mbedtls_operation_t = 0;
pub const mbedtls_operation_t_MBEDTLS_ENCRYPT: mbedtls_operation_t = 1;
#[doc = " Type of operation."]
pub type mbedtls_operation_t = c_types::c_int;
#[doc = " Undefined key length."]
pub const MBEDTLS_KEY_LENGTH_NONE: c_types::c_uint = 0;
#[doc = " Key length, in bits (including parity), for DES keys."]
pub const MBEDTLS_KEY_LENGTH_DES: c_types::c_uint = 64;
#[doc = " Key length in bits, including parity, for DES in two-key EDE."]
pub const MBEDTLS_KEY_LENGTH_DES_EDE: c_types::c_uint = 128;
#[doc = " Key length in bits, including parity, for DES in three-key EDE."]
pub const MBEDTLS_KEY_LENGTH_DES_EDE3: c_types::c_uint = 192;
pub type _bindgen_ty_4 = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cipher_base_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cmac_context_t {
    _unused: [u8; 0],
}
#[doc = " Cipher information. Allows calling cipher functions"]
#[doc = " in a generic way."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cipher_info_t {
    #[doc = " Full cipher identifier. For example,"]
    #[doc = " MBEDTLS_CIPHER_AES_256_CBC."]
    pub type_: mbedtls_cipher_type_t,
    #[doc = " The cipher mode. For example, MBEDTLS_MODE_CBC."]
    pub mode: mbedtls_cipher_mode_t,
    #[doc = " The cipher key length, in bits. This is the"]
    #[doc = " default length for variable sized ciphers."]
    #[doc = " Includes parity bits for ciphers like DES."]
    pub key_bitlen: c_types::c_uint,
    #[doc = " Name of the cipher."]
    pub name: *const c_types::c_char,
    #[doc = " IV or nonce size, in Bytes."]
    #[doc = " For ciphers that accept variable IV sizes,"]
    #[doc = " this is the recommended size."]
    pub iv_size: c_types::c_uint,
    #[doc = " Bitflag comprised of MBEDTLS_CIPHER_VARIABLE_IV_LEN and"]
    #[doc = "  MBEDTLS_CIPHER_VARIABLE_KEY_LEN indicating whether the"]
    #[doc = "  cipher supports variable IV or variable key sizes, respectively."]
    pub flags: c_types::c_int,
    #[doc = " The block size, in Bytes."]
    pub block_size: c_types::c_uint,
    #[doc = " Struct for base cipher information and functions."]
    pub base: *const mbedtls_cipher_base_t,
}
impl Default for mbedtls_cipher_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Generic cipher context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_cipher_context_t {
    #[doc = " Information about the associated cipher."]
    pub cipher_info: *const mbedtls_cipher_info_t,
    #[doc = " Key length to use."]
    pub key_bitlen: c_types::c_int,
    #[doc = " Operation that the key of the context has been"]
    #[doc = " initialized for."]
    pub operation: mbedtls_operation_t,
    #[doc = " Padding functions to use, if relevant for"]
    #[doc = " the specific cipher mode."]
    pub add_padding: ::core::option::Option<
        unsafe extern "C" fn(output: *mut c_types::c_uchar, olen: size_t, data_len: size_t),
    >,
    pub get_padding: ::core::option::Option<
        unsafe extern "C" fn(
            input: *mut c_types::c_uchar,
            ilen: size_t,
            data_len: *mut size_t,
        ) -> c_types::c_int,
    >,
    #[doc = " Buffer for input that has not been processed yet."]
    pub unprocessed_data: [c_types::c_uchar; 16usize],
    #[doc = " Number of Bytes that have not been processed yet."]
    pub unprocessed_len: size_t,
    #[doc = " Current IV or NONCE_COUNTER for CTR-mode, data unit (or sector) number"]
    #[doc = " for XTS-mode."]
    pub iv: [c_types::c_uchar; 16usize],
    #[doc = " IV size in Bytes, for ciphers with variable-length IVs."]
    pub iv_size: size_t,
    #[doc = " The cipher-specific context."]
    pub cipher_ctx: *mut c_types::c_void,
}
impl Default for mbedtls_cipher_context_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief This function retrieves the list of ciphers supported"]
    #[doc = "        by the generic cipher module."]
    #[doc = ""]
    #[doc = "        For any cipher identifier in the returned list, you can"]
    #[doc = "        obtain the corresponding generic cipher information structure"]
    #[doc = "        via mbedtls_cipher_info_from_type(), which can then be used"]
    #[doc = "        to prepare a cipher context via mbedtls_cipher_setup()."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " \\return      A statically-allocated array of cipher identifiers"]
    #[doc = "              of type cipher_type_t. The last entry is zero."]
    pub fn mbedtls_cipher_list() -> *const c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function retrieves the cipher-information"]
    #[doc = "                      structure associated with the given cipher name."]
    #[doc = ""]
    #[doc = " \\param cipher_name   Name of the cipher to search for. This must not be"]
    #[doc = "                      \\c NULL."]
    #[doc = ""]
    #[doc = " \\return              The cipher information structure associated with the"]
    #[doc = "                      given \\p cipher_name."]
    #[doc = " \\return              \\c NULL if the associated cipher information is not found."]
    pub fn mbedtls_cipher_info_from_string(
        cipher_name: *const c_types::c_char,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    #[doc = " \\brief               This function retrieves the cipher-information"]
    #[doc = "                      structure associated with the given cipher type."]
    #[doc = ""]
    #[doc = " \\param cipher_type   Type of the cipher to search for."]
    #[doc = ""]
    #[doc = " \\return              The cipher information structure associated with the"]
    #[doc = "                      given \\p cipher_type."]
    #[doc = " \\return              \\c NULL if the associated cipher information is not found."]
    pub fn mbedtls_cipher_info_from_type(
        cipher_type: mbedtls_cipher_type_t,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    #[doc = " \\brief               This function retrieves the cipher-information"]
    #[doc = "                      structure associated with the given cipher ID,"]
    #[doc = "                      key size and mode."]
    #[doc = ""]
    #[doc = " \\param cipher_id     The ID of the cipher to search for. For example,"]
    #[doc = "                      #MBEDTLS_CIPHER_ID_AES."]
    #[doc = " \\param key_bitlen    The length of the key in bits."]
    #[doc = " \\param mode          The cipher mode. For example, #MBEDTLS_MODE_CBC."]
    #[doc = ""]
    #[doc = " \\return              The cipher information structure associated with the"]
    #[doc = "                      given \\p cipher_id."]
    #[doc = " \\return              \\c NULL if the associated cipher information is not found."]
    pub fn mbedtls_cipher_info_from_values(
        cipher_id: mbedtls_cipher_id_t,
        key_bitlen: c_types::c_int,
        mode: mbedtls_cipher_mode_t,
    ) -> *const mbedtls_cipher_info_t;
}
extern "C" {
    #[doc = " \\brief               This function initializes a \\p cipher_context as NONE."]
    #[doc = ""]
    #[doc = " \\param ctx           The context to be initialized. This must not be \\c NULL."]
    pub fn mbedtls_cipher_init(ctx: *mut mbedtls_cipher_context_t);
}
extern "C" {
    #[doc = " \\brief               This function frees and clears the cipher-specific"]
    #[doc = "                      context of \\p ctx. Freeing \\p ctx itself remains the"]
    #[doc = "                      responsibility of the caller."]
    #[doc = ""]
    #[doc = " \\param ctx           The context to be freed. If this is \\c NULL, the"]
    #[doc = "                      function has no effect, otherwise this must point to an"]
    #[doc = "                      initialized context."]
    pub fn mbedtls_cipher_free(ctx: *mut mbedtls_cipher_context_t);
}
extern "C" {
    #[doc = " \\brief               This function initializes a cipher context for"]
    #[doc = "                      use with the given cipher primitive."]
    #[doc = ""]
    #[doc = " \\param ctx           The context to initialize. This must be initialized."]
    #[doc = " \\param cipher_info   The cipher to use."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_ALLOC_FAILED if allocation of the"]
    #[doc = "                      cipher-specific context fails."]
    #[doc = ""]
    #[doc = " \\internal Currently, the function also clears the structure."]
    #[doc = " In future versions, the caller will be required to call"]
    #[doc = " mbedtls_cipher_init() on the structure first."]
    pub fn mbedtls_cipher_setup(
        ctx: *mut mbedtls_cipher_context_t,
        cipher_info: *const mbedtls_cipher_info_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function sets the key to use with the given context."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a cipher information structure."]
    #[doc = " \\param key           The key to use. This must be a readable buffer of at"]
    #[doc = "                      least \\p key_bitlen Bits."]
    #[doc = " \\param key_bitlen    The key length to use, in Bits."]
    #[doc = " \\param operation     The operation that the key will be used for:"]
    #[doc = "                      #MBEDTLS_ENCRYPT or #MBEDTLS_DECRYPT."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_setkey(
        ctx: *mut mbedtls_cipher_context_t,
        key: *const c_types::c_uchar,
        key_bitlen: c_types::c_int,
        operation: mbedtls_operation_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function sets the padding mode, for cipher modes"]
    #[doc = "                      that use padding."]
    #[doc = ""]
    #[doc = "                      The default passing mode is PKCS7 padding."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a cipher information structure."]
    #[doc = " \\param mode          The padding mode."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE"]
    #[doc = "                      if the selected padding mode is not supported."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA if the cipher mode"]
    #[doc = "                      does not support padding."]
    pub fn mbedtls_cipher_set_padding_mode(
        ctx: *mut mbedtls_cipher_context_t,
        mode: mbedtls_cipher_padding_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets the initialization vector (IV)"]
    #[doc = "                  or nonce."]
    #[doc = ""]
    #[doc = " \\note            Some ciphers do not use IVs nor nonce. For these"]
    #[doc = "                  ciphers, this function has no effect."]
    #[doc = ""]
    #[doc = " \\param ctx       The generic cipher context. This must be initialized and"]
    #[doc = "                  bound to a cipher information structure."]
    #[doc = " \\param iv        The IV to use, or NONCE_COUNTER for CTR-mode ciphers. This"]
    #[doc = "                  must be a readable buffer of at least \\p iv_len Bytes."]
    #[doc = " \\param iv_len    The IV length for ciphers with variable-size IV."]
    #[doc = "                  This parameter is discarded by ciphers with fixed-size IV."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                  parameter-verification failure."]
    pub fn mbedtls_cipher_set_iv(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief         This function resets the cipher state."]
    #[doc = ""]
    #[doc = " \\param ctx     The generic cipher context. This must be initialized."]
    #[doc = ""]
    #[doc = " \\return        \\c 0 on success."]
    #[doc = " \\return        #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                parameter-verification failure."]
    pub fn mbedtls_cipher_reset(ctx: *mut mbedtls_cipher_context_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function adds additional data for AEAD ciphers."]
    #[doc = "                      Currently supported with GCM and ChaCha20+Poly1305."]
    #[doc = "                      This must be called exactly once, after"]
    #[doc = "                      mbedtls_cipher_reset()."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized."]
    #[doc = " \\param ad            The additional data to use. This must be a readable"]
    #[doc = "                      buffer of at least \\p ad_len Bytes."]
    #[doc = " \\param ad_len        The length of \\p ad in Bytes."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              A specific error code on failure."]
    pub fn mbedtls_cipher_update_ad(
        ctx: *mut mbedtls_cipher_context_t,
        ad: *const c_types::c_uchar,
        ad_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The generic cipher update function. It encrypts or"]
    #[doc = "                      decrypts using the given cipher context. Writes as"]
    #[doc = "                      many block-sized blocks of data as possible to output."]
    #[doc = "                      Any data that cannot be written immediately is either"]
    #[doc = "                      added to the next block, or flushed when"]
    #[doc = "                      mbedtls_cipher_finish() is called."]
    #[doc = "                      Exception: For MBEDTLS_MODE_ECB, expects a single block"]
    #[doc = "                      in size. For example, 16 Bytes for AES."]
    #[doc = ""]
    #[doc = " \\note                If the underlying cipher is used in GCM mode, all calls"]
    #[doc = "                      to this function, except for the last one before"]
    #[doc = "                      mbedtls_cipher_finish(), must have \\p ilen as a"]
    #[doc = "                      multiple of the block size of the cipher."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes."]
    #[doc = " \\param ilen          The length of the input data."]
    #[doc = " \\param output        The buffer for the output data. This must be able to"]
    #[doc = "                      hold at least `ilen + block_size`. This must not be the"]
    #[doc = "                      same buffer as \\p input."]
    #[doc = " \\param olen          The length of the output data, to be updated with the"]
    #[doc = "                      actual number of Bytes written. This must not be"]
    #[doc = "                      \\c NULL."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE on an"]
    #[doc = "                      unsupported mode for a cipher."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_update(
        ctx: *mut mbedtls_cipher_context_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The generic cipher finalization function. If data still"]
    #[doc = "                      needs to be flushed from an incomplete block, the data"]
    #[doc = "                      contained in it is padded to the size of"]
    #[doc = "                      the last block, and written to the \\p output buffer."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key."]
    #[doc = " \\param output        The buffer to write data to. This needs to be a writable"]
    #[doc = "                      buffer of at least \\p block_size Bytes."]
    #[doc = " \\param olen          The length of the data written to the \\p output buffer."]
    #[doc = "                      This may not be \\c NULL."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption"]
    #[doc = "                      expecting a full block but not receiving one."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding"]
    #[doc = "                      while decrypting."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_finish(
        ctx: *mut mbedtls_cipher_context_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function writes a tag for AEAD ciphers."]
    #[doc = "                      Currently supported with GCM and ChaCha20+Poly1305."]
    #[doc = "                      This must be called after mbedtls_cipher_finish()."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized,"]
    #[doc = "                      bound to a key, and have just completed a cipher"]
    #[doc = "                      operation through mbedtls_cipher_finish() the tag for"]
    #[doc = "                      which should be written."]
    #[doc = " \\param tag           The buffer to write the tag to. This must be a writable"]
    #[doc = "                      buffer of at least \\p tag_len Bytes."]
    #[doc = " \\param tag_len       The length of the tag to write."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              A specific error code on failure."]
    pub fn mbedtls_cipher_write_tag(
        ctx: *mut mbedtls_cipher_context_t,
        tag: *mut c_types::c_uchar,
        tag_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function checks the tag for AEAD ciphers."]
    #[doc = "                      Currently supported with GCM and ChaCha20+Poly1305."]
    #[doc = "                      This must be called after mbedtls_cipher_finish()."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized."]
    #[doc = " \\param tag           The buffer holding the tag. This must be a readable"]
    #[doc = "                      buffer of at least \\p tag_len Bytes."]
    #[doc = " \\param tag_len       The length of the tag to check."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              A specific error code on failure."]
    pub fn mbedtls_cipher_check_tag(
        ctx: *mut mbedtls_cipher_context_t,
        tag: *const c_types::c_uchar,
        tag_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The generic all-in-one encryption/decryption function,"]
    #[doc = "                      for all ciphers except AEAD constructs."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized."]
    #[doc = " \\param iv            The IV to use, or NONCE_COUNTER for CTR-mode ciphers."]
    #[doc = "                      This must be a readable buffer of at least \\p iv_len"]
    #[doc = "                      Bytes."]
    #[doc = " \\param iv_len        The IV length for ciphers with variable-size IV."]
    #[doc = "                      This parameter is discarded by ciphers with fixed-size"]
    #[doc = "                      IV."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes."]
    #[doc = " \\param ilen          The length of the input data in Bytes."]
    #[doc = " \\param output        The buffer for the output data. This must be able to"]
    #[doc = "                      hold at least `ilen + block_size`. This must not be the"]
    #[doc = "                      same buffer as \\p input."]
    #[doc = " \\param olen          The length of the output data, to be updated with the"]
    #[doc = "                      actual number of Bytes written. This must not be"]
    #[doc = "                      \\c NULL."]
    #[doc = ""]
    #[doc = " \\note                Some ciphers do not use IVs nor nonce. For these"]
    #[doc = "                      ciphers, use \\p iv = NULL and \\p iv_len = 0."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED on decryption"]
    #[doc = "                      expecting a full block but not receiving one."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_INVALID_PADDING on invalid padding"]
    #[doc = "                      while decrypting."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_crypt(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The generic authenticated encryption (AEAD) function."]
    #[doc = ""]
    #[doc = " \\deprecated          Superseded by mbedtls_cipher_auth_encrypt_ext()."]
    #[doc = ""]
    #[doc = " \\note                This function only supports AEAD algorithms, not key"]
    #[doc = "                      wrapping algorithms such as NIST_KW; for this, see"]
    #[doc = "                      mbedtls_cipher_auth_encrypt_ext()."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key associated with an AEAD algorithm."]
    #[doc = " \\param iv            The nonce to use. This must be a readable buffer of"]
    #[doc = "                      at least \\p iv_len Bytes and must not be \\c NULL."]
    #[doc = " \\param iv_len        The length of the nonce. This must satisfy the"]
    #[doc = "                      constraints imposed by the AEAD cipher used."]
    #[doc = " \\param ad            The additional data to authenticate. This must be a"]
    #[doc = "                      readable buffer of at least \\p ad_len Bytes, and may"]
    #[doc = "                      be \\c NULL is \\p ad_len is \\c 0."]
    #[doc = " \\param ad_len        The length of \\p ad."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes, and may be"]
    #[doc = "                      \\c NULL if \\p ilen is \\c 0."]
    #[doc = " \\param ilen          The length of the input data."]
    #[doc = " \\param output        The buffer for the output data. This must be a"]
    #[doc = "                      writable buffer of at least \\p ilen Bytes, and must"]
    #[doc = "                      not be \\c NULL."]
    #[doc = " \\param olen          This will be filled with the actual number of Bytes"]
    #[doc = "                      written to the \\p output buffer. This must point to a"]
    #[doc = "                      writable object of type \\c size_t."]
    #[doc = " \\param tag           The buffer for the authentication tag. This must be a"]
    #[doc = "                      writable buffer of at least \\p tag_len Bytes. See note"]
    #[doc = "                      below regarding restrictions with PSA-based contexts."]
    #[doc = " \\param tag_len       The desired length of the authentication tag. This"]
    #[doc = "                      must match the constraints imposed by the AEAD cipher"]
    #[doc = "                      used, and in particular must not be \\c 0."]
    #[doc = ""]
    #[doc = " \\note                If the context is based on PSA (that is, it was set up"]
    #[doc = "                      with mbedtls_cipher_setup_psa()), then it is required"]
    #[doc = "                      that \\c tag == output + ilen. That is, the tag must be"]
    #[doc = "                      appended to the ciphertext as recommended by RFC 5116."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_auth_encrypt(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
        ad: *const c_types::c_uchar,
        ad_len: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
        tag: *mut c_types::c_uchar,
        tag_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The generic authenticated decryption (AEAD) function."]
    #[doc = ""]
    #[doc = " \\deprecated          Superseded by mbedtls_cipher_auth_decrypt_ext()."]
    #[doc = ""]
    #[doc = " \\note                This function only supports AEAD algorithms, not key"]
    #[doc = "                      wrapping algorithms such as NIST_KW; for this, see"]
    #[doc = "                      mbedtls_cipher_auth_decrypt_ext()."]
    #[doc = ""]
    #[doc = " \\note                If the data is not authentic, then the output buffer"]
    #[doc = "                      is zeroed out to prevent the unauthentic plaintext being"]
    #[doc = "                      used, making this interface safer."]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key associated with an AEAD algorithm."]
    #[doc = " \\param iv            The nonce to use. This must be a readable buffer of"]
    #[doc = "                      at least \\p iv_len Bytes and must not be \\c NULL."]
    #[doc = " \\param iv_len        The length of the nonce. This must satisfy the"]
    #[doc = "                      constraints imposed by the AEAD cipher used."]
    #[doc = " \\param ad            The additional data to authenticate. This must be a"]
    #[doc = "                      readable buffer of at least \\p ad_len Bytes, and may"]
    #[doc = "                      be \\c NULL is \\p ad_len is \\c 0."]
    #[doc = " \\param ad_len        The length of \\p ad."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes, and may be"]
    #[doc = "                      \\c NULL if \\p ilen is \\c 0."]
    #[doc = " \\param ilen          The length of the input data."]
    #[doc = " \\param output        The buffer for the output data. This must be a"]
    #[doc = "                      writable buffer of at least \\p ilen Bytes, and must"]
    #[doc = "                      not be \\c NULL."]
    #[doc = " \\param olen          This will be filled with the actual number of Bytes"]
    #[doc = "                      written to the \\p output buffer. This must point to a"]
    #[doc = "                      writable object of type \\c size_t."]
    #[doc = " \\param tag           The buffer for the authentication tag. This must be a"]
    #[doc = "                      readable buffer of at least \\p tag_len Bytes. See note"]
    #[doc = "                      below regarding restrictions with PSA-based contexts."]
    #[doc = " \\param tag_len       The length of the authentication tag. This must match"]
    #[doc = "                      the constraints imposed by the AEAD cipher used, and in"]
    #[doc = "                      particular must not be \\c 0."]
    #[doc = ""]
    #[doc = " \\note                If the context is based on PSA (that is, it was set up"]
    #[doc = "                      with mbedtls_cipher_setup_psa()), then it is required"]
    #[doc = "                      that \\c tag == input + len. That is, the tag must be"]
    #[doc = "                      appended to the ciphertext as recommended by RFC 5116."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_AUTH_FAILED if data is not authentic."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_auth_decrypt(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
        ad: *const c_types::c_uchar,
        ad_len: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
        tag: *const c_types::c_uchar,
        tag_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The authenticated encryption (AEAD/NIST_KW) function."]
    #[doc = ""]
    #[doc = " \\note                For AEAD modes, the tag will be appended to the"]
    #[doc = "                      ciphertext, as recommended by RFC 5116."]
    #[doc = "                      (NIST_KW doesn't have a separate tag.)"]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key, with an AEAD algorithm or NIST_KW."]
    #[doc = " \\param iv            The nonce to use. This must be a readable buffer of"]
    #[doc = "                      at least \\p iv_len Bytes and may be \\c NULL if \\p"]
    #[doc = "                      iv_len is \\c 0."]
    #[doc = " \\param iv_len        The length of the nonce. For AEAD ciphers, this must"]
    #[doc = "                      satisfy the constraints imposed by the cipher used."]
    #[doc = "                      For NIST_KW, this must be \\c 0."]
    #[doc = " \\param ad            The additional data to authenticate. This must be a"]
    #[doc = "                      readable buffer of at least \\p ad_len Bytes, and may"]
    #[doc = "                      be \\c NULL is \\p ad_len is \\c 0."]
    #[doc = " \\param ad_len        The length of \\p ad. For NIST_KW, this must be \\c 0."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes, and may be"]
    #[doc = "                      \\c NULL if \\p ilen is \\c 0."]
    #[doc = " \\param ilen          The length of the input data."]
    #[doc = " \\param output        The buffer for the output data. This must be a"]
    #[doc = "                      writable buffer of at least \\p output_len Bytes, and"]
    #[doc = "                      must not be \\c NULL."]
    #[doc = " \\param output_len    The length of the \\p output buffer in Bytes. For AEAD"]
    #[doc = "                      ciphers, this must be at least \\p ilen + \\p tag_len."]
    #[doc = "                      For NIST_KW, this must be at least \\p ilen + 8"]
    #[doc = "                      (rounded up to a multiple of 8 if KWP is used);"]
    #[doc = "                      \\p ilen + 15 is always a safe value."]
    #[doc = " \\param olen          This will be filled with the actual number of Bytes"]
    #[doc = "                      written to the \\p output buffer. This must point to a"]
    #[doc = "                      writable object of type \\c size_t."]
    #[doc = " \\param tag_len       The desired length of the authentication tag. For AEAD"]
    #[doc = "                      ciphers, this must match the constraints imposed by"]
    #[doc = "                      the cipher used, and in particular must not be \\c 0."]
    #[doc = "                      For NIST_KW, this must be \\c 0."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_auth_encrypt_ext(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
        ad: *const c_types::c_uchar,
        ad_len: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        output_len: size_t,
        olen: *mut size_t,
        tag_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The authenticated encryption (AEAD/NIST_KW) function."]
    #[doc = ""]
    #[doc = " \\note                If the data is not authentic, then the output buffer"]
    #[doc = "                      is zeroed out to prevent the unauthentic plaintext being"]
    #[doc = "                      used, making this interface safer."]
    #[doc = ""]
    #[doc = " \\note                For AEAD modes, the tag must be appended to the"]
    #[doc = "                      ciphertext, as recommended by RFC 5116."]
    #[doc = "                      (NIST_KW doesn't have a separate tag.)"]
    #[doc = ""]
    #[doc = " \\param ctx           The generic cipher context. This must be initialized and"]
    #[doc = "                      bound to a key, with an AEAD algorithm or NIST_KW."]
    #[doc = " \\param iv            The nonce to use. This must be a readable buffer of"]
    #[doc = "                      at least \\p iv_len Bytes and may be \\c NULL if \\p"]
    #[doc = "                      iv_len is \\c 0."]
    #[doc = " \\param iv_len        The length of the nonce. For AEAD ciphers, this must"]
    #[doc = "                      satisfy the constraints imposed by the cipher used."]
    #[doc = "                      For NIST_KW, this must be \\c 0."]
    #[doc = " \\param ad            The additional data to authenticate. This must be a"]
    #[doc = "                      readable buffer of at least \\p ad_len Bytes, and may"]
    #[doc = "                      be \\c NULL is \\p ad_len is \\c 0."]
    #[doc = " \\param ad_len        The length of \\p ad. For NIST_KW, this must be \\c 0."]
    #[doc = " \\param input         The buffer holding the input data. This must be a"]
    #[doc = "                      readable buffer of at least \\p ilen Bytes, and may be"]
    #[doc = "                      \\c NULL if \\p ilen is \\c 0."]
    #[doc = " \\param ilen          The length of the input data. For AEAD ciphers this"]
    #[doc = "                      must be at least \\p tag_len. For NIST_KW this must be"]
    #[doc = "                      at least \\c 8."]
    #[doc = " \\param output        The buffer for the output data. This must be a"]
    #[doc = "                      writable buffer of at least \\p output_len Bytes, and"]
    #[doc = "                      may be \\c NULL if \\p output_len is \\c 0."]
    #[doc = " \\param output_len    The length of the \\p output buffer in Bytes. For AEAD"]
    #[doc = "                      ciphers, this must be at least \\p ilen - \\p tag_len."]
    #[doc = "                      For NIST_KW, this must be at least \\p ilen - 8."]
    #[doc = " \\param olen          This will be filled with the actual number of Bytes"]
    #[doc = "                      written to the \\p output buffer. This must point to a"]
    #[doc = "                      writable object of type \\c size_t."]
    #[doc = " \\param tag_len       The actual length of the authentication tag. For AEAD"]
    #[doc = "                      ciphers, this must match the constraints imposed by"]
    #[doc = "                      the cipher used, and in particular must not be \\c 0."]
    #[doc = "                      For NIST_KW, this must be \\c 0."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA on"]
    #[doc = "                      parameter-verification failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CIPHER_AUTH_FAILED if data is not authentic."]
    #[doc = " \\return              A cipher-specific error code on failure."]
    pub fn mbedtls_cipher_auth_decrypt_ext(
        ctx: *mut mbedtls_cipher_context_t,
        iv: *const c_types::c_uchar,
        iv_len: size_t,
        ad: *const c_types::c_uchar,
        ad_len: size_t,
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        output_len: size_t,
        olen: *mut size_t,
        tag_len: size_t,
    ) -> c_types::c_int;
}
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_NONE: mbedtls_key_exchange_type_t = 0;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_RSA: mbedtls_key_exchange_type_t = 1;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_DHE_RSA: mbedtls_key_exchange_type_t = 2;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECDHE_RSA: mbedtls_key_exchange_type_t =
    3;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
    mbedtls_key_exchange_type_t = 4;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_PSK: mbedtls_key_exchange_type_t = 5;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_DHE_PSK: mbedtls_key_exchange_type_t = 6;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_RSA_PSK: mbedtls_key_exchange_type_t = 7;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECDHE_PSK: mbedtls_key_exchange_type_t =
    8;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECDH_RSA: mbedtls_key_exchange_type_t =
    9;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA: mbedtls_key_exchange_type_t =
    10;
pub const mbedtls_key_exchange_type_t_MBEDTLS_KEY_EXCHANGE_ECJPAKE: mbedtls_key_exchange_type_t =
    11;
pub type mbedtls_key_exchange_type_t = c_types::c_uint;
#[doc = " \\brief   This structure is used for storing ciphersuite information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_ciphersuite_t {
    pub id: c_types::c_int,
    pub name: *const c_types::c_char,
    pub cipher: mbedtls_cipher_type_t,
    pub mac: mbedtls_md_type_t,
    pub key_exchange: mbedtls_key_exchange_type_t,
    pub min_major_ver: c_types::c_int,
    pub min_minor_ver: c_types::c_int,
    pub max_major_ver: c_types::c_int,
    pub max_minor_ver: c_types::c_int,
    pub flags: c_types::c_uchar,
}
impl Default for mbedtls_ssl_ciphersuite_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn mbedtls_ssl_list_ciphersuites() -> *const c_types::c_int;
}
extern "C" {
    pub fn mbedtls_ssl_ciphersuite_from_string(
        ciphersuite_name: *const c_types::c_char,
    ) -> *const mbedtls_ssl_ciphersuite_t;
}
extern "C" {
    pub fn mbedtls_ssl_ciphersuite_from_id(
        ciphersuite_id: c_types::c_int,
    ) -> *const mbedtls_ssl_ciphersuite_t;
}
extern "C" {
    pub fn mbedtls_ssl_get_ciphersuite_sig_pk_alg(
        info: *const mbedtls_ssl_ciphersuite_t,
    ) -> mbedtls_pk_type_t;
}
extern "C" {
    pub fn mbedtls_ssl_get_ciphersuite_sig_alg(
        info: *const mbedtls_ssl_ciphersuite_t,
    ) -> mbedtls_pk_type_t;
}
extern "C" {
    pub fn mbedtls_ssl_ciphersuite_uses_ec(
        info: *const mbedtls_ssl_ciphersuite_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_ssl_ciphersuite_uses_psk(
        info: *const mbedtls_ssl_ciphersuite_t,
    ) -> c_types::c_int;
}
#[doc = " Type-length-value structure that allows for ASN1 using DER."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_asn1_buf {
    #[doc = "< ASN1 type, e.g. MBEDTLS_ASN1_UTF8_STRING."]
    pub tag: c_types::c_int,
    #[doc = "< ASN1 length, in octets."]
    pub len: size_t,
    #[doc = "< ASN1 data, e.g. in ASCII."]
    pub p: *mut c_types::c_uchar,
}
impl Default for mbedtls_asn1_buf {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Container for ASN1 bit strings."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_asn1_bitstring {
    #[doc = "< ASN1 length, in octets."]
    pub len: size_t,
    #[doc = "< Number of unused bits at the end of the string"]
    pub unused_bits: c_types::c_uchar,
    #[doc = "< Raw ASN1 data for the bit string"]
    pub p: *mut c_types::c_uchar,
}
impl Default for mbedtls_asn1_bitstring {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Container for a sequence of ASN.1 items"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_asn1_sequence {
    #[doc = "< Buffer containing the given ASN.1 item."]
    pub buf: mbedtls_asn1_buf,
    #[doc = "< The next entry in the sequence."]
    pub next: *mut mbedtls_asn1_sequence,
}
impl Default for mbedtls_asn1_sequence {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Container for a sequence or list of 'named' ASN.1 data items"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_asn1_named_data {
    #[doc = "< The object identifier."]
    pub oid: mbedtls_asn1_buf,
    #[doc = "< The named value."]
    pub val: mbedtls_asn1_buf,
    #[doc = "< The next entry in the sequence."]
    pub next: *mut mbedtls_asn1_named_data,
    #[doc = "< Merge next item into the current one?"]
    pub next_merged: c_types::c_uchar,
}
impl Default for mbedtls_asn1_named_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief       Get the length of an ASN.1 element."]
    #[doc = "              Updates the pointer to immediately behind the length."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the first byte of the length,"]
    #[doc = "              i.e. immediately after the tag."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              after the length, i.e. the first byte of the content."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param len   On successful completion, \\c *len contains the length"]
    #[doc = "              read from the ASN.1 input."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_OUT_OF_DATA if the ASN.1 element"]
    #[doc = "              would end beyond \\p end."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_LENGTH if the length is unparseable."]
    pub fn mbedtls_asn1_get_len(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        len: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Get the tag and length of the element."]
    #[doc = "              Check for the requested tag."]
    #[doc = "              Updates the pointer to immediately behind the tag and length."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              after the length, i.e. the first byte of the content."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param len   On successful completion, \\c *len contains the length"]
    #[doc = "              read from the ASN.1 input."]
    #[doc = " \\param tag   The expected tag."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_UNEXPECTED_TAG if the data does not start"]
    #[doc = "              with the requested tag."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_OUT_OF_DATA if the ASN.1 element"]
    #[doc = "              would end beyond \\p end."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_LENGTH if the length is unparseable."]
    pub fn mbedtls_asn1_get_tag(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        len: *mut size_t,
        tag: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve a boolean ASN.1 tag and its value."]
    #[doc = "              Updates the pointer to immediately behind the full tag."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the ASN.1 element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param val   On success, the parsed value (\\c 0 or \\c 1)."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 BOOLEAN."]
    pub fn mbedtls_asn1_get_bool(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        val: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve an integer ASN.1 tag and its value."]
    #[doc = "              Updates the pointer to immediately behind the full tag."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the ASN.1 element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param val   On success, the parsed value."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 INTEGER."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_LENGTH if the parsed value does"]
    #[doc = "              not fit in an \\c int."]
    pub fn mbedtls_asn1_get_int(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        val: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve an enumerated ASN.1 tag and its value."]
    #[doc = "              Updates the pointer to immediately behind the full tag."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the ASN.1 element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param val   On success, the parsed value."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 ENUMERATED."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_LENGTH if the parsed value does"]
    #[doc = "              not fit in an \\c int."]
    pub fn mbedtls_asn1_get_enum(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        val: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve a bitstring ASN.1 tag and its value."]
    #[doc = "              Updates the pointer to immediately behind the full tag."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p is equal to \\p end."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param bs    On success, ::mbedtls_asn1_bitstring information about"]
    #[doc = "              the parsed value."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_LENGTH_MISMATCH if the input contains"]
    #[doc = "              extra data after a valid BIT STRING."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 BIT STRING."]
    pub fn mbedtls_asn1_get_bitstring(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        bs: *mut mbedtls_asn1_bitstring,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve a bitstring ASN.1 tag without unused bits and its"]
    #[doc = "              value."]
    #[doc = "              Updates the pointer to the beginning of the bit/octet string."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              of the content of the BIT STRING."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param len   On success, \\c *len is the length of the content in bytes."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_DATA if the input starts with"]
    #[doc = "              a valid BIT STRING with a nonzero number of unused bits."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 BIT STRING."]
    pub fn mbedtls_asn1_get_bitstring_null(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        len: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Parses and splits an ASN.1 \"SEQUENCE OF <tag>\"."]
    #[doc = "              Updates the pointer to immediately behind the full sequence tag."]
    #[doc = ""]
    #[doc = " This function allocates memory for the sequence elements. You can free"]
    #[doc = " the allocated memory with mbedtls_asn1_sequence_free()."]
    #[doc = ""]
    #[doc = " \\note        On error, this function may return a partial list in \\p cur."]
    #[doc = "              You must set `cur->next = NULL` before calling this function!"]
    #[doc = "              Otherwise it is impossible to distinguish a previously non-null"]
    #[doc = "              pointer from a pointer to an object allocated by this function."]
    #[doc = ""]
    #[doc = " \\note        If the sequence is empty, this function does not modify"]
    #[doc = "              \\c *cur. If the sequence is valid and non-empty, this"]
    #[doc = "              function sets `cur->buf.tag` to \\p tag. This allows"]
    #[doc = "              callers to distinguish between an empty sequence and"]
    #[doc = "              a one-element sequence."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p is equal to \\p end."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param cur   A ::mbedtls_asn1_sequence which this function fills."]
    #[doc = "              When this function returns, \\c *cur is the head of a linked"]
    #[doc = "              list. Each node in this list is allocated with"]
    #[doc = "              mbedtls_calloc() apart from \\p cur itself, and should"]
    #[doc = "              therefore be freed with mbedtls_free()."]
    #[doc = "              The list describes the content of the sequence."]
    #[doc = "              The head of the list (i.e. \\c *cur itself) describes the"]
    #[doc = "              first element, `*cur->next` describes the second element, etc."]
    #[doc = "              For each element, `buf.tag == tag`, `buf.len` is the length"]
    #[doc = "              of the content of the content of the element, and `buf.p`"]
    #[doc = "              points to the first byte of the content (i.e. immediately"]
    #[doc = "              past the length of the element)."]
    #[doc = "              Note that list elements may be allocated even on error."]
    #[doc = " \\param tag   Each element of the sequence must have this tag."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_LENGTH_MISMATCH if the input contains"]
    #[doc = "              extra data after a valid SEQUENCE OF \\p tag."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_UNEXPECTED_TAG if the input starts with"]
    #[doc = "              an ASN.1 SEQUENCE in which an element has a tag that"]
    #[doc = "              is different from \\p tag."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_ALLOC_FAILED if a memory allocation failed."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 SEQUENCE."]
    pub fn mbedtls_asn1_get_sequence_of(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        cur: *mut mbedtls_asn1_sequence,
        tag: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Free a heap-allocated linked list presentation of"]
    #[doc = "                 an ASN.1 sequence, including the first element."]
    #[doc = ""]
    #[doc = " There are two common ways to manage the memory used for the representation"]
    #[doc = " of a parsed ASN.1 sequence:"]
    #[doc = " - Allocate a head node `mbedtls_asn1_sequence *head` with mbedtls_calloc()."]
    #[doc = "   Pass this node as the `cur` argument to mbedtls_asn1_get_sequence_of()."]
    #[doc = "   When you have finished processing the sequence,"]
    #[doc = "   call mbedtls_asn1_sequence_free() on `head`."]
    #[doc = " - Allocate a head node `mbedtls_asn1_sequence *head` in any manner,"]
    #[doc = "   for example on the stack. Make sure that `head->next == NULL`."]
    #[doc = "   Pass `head` as the `cur` argument to mbedtls_asn1_get_sequence_of()."]
    #[doc = "   When you have finished processing the sequence,"]
    #[doc = "   call mbedtls_asn1_sequence_free() on `head->cur`,"]
    #[doc = "   then free `head` itself in the appropriate manner."]
    #[doc = ""]
    #[doc = " \\param seq      The address of the first sequence component. This may"]
    #[doc = "                 be \\c NULL, in which case this functions returns"]
    #[doc = "                 immediately."]
    pub fn mbedtls_asn1_sequence_free(seq: *mut mbedtls_asn1_sequence);
}
extern "C" {
    #[doc = " \\brief                Traverse an ASN.1 SEQUENCE container and"]
    #[doc = "                       call a callback for each entry."]
    #[doc = ""]
    #[doc = " This function checks that the input is a SEQUENCE of elements that"]
    #[doc = " each have a \"must\" tag, and calls a callback function on the elements"]
    #[doc = " that have a \"may\" tag."]
    #[doc = ""]
    #[doc = " For example, to validate that the input is a SEQUENCE of `tag1` and call"]
    #[doc = " `cb` on each element, use"]
    #[doc = " ```"]
    #[doc = " mbedtls_asn1_traverse_sequence_of(&p, end, 0xff, tag1, 0, 0, cb, ctx);"]
    #[doc = " ```"]
    #[doc = ""]
    #[doc = " To validate that the input is a SEQUENCE of ANY and call `cb` on"]
    #[doc = " each element, use"]
    #[doc = " ```"]
    #[doc = " mbedtls_asn1_traverse_sequence_of(&p, end, 0, 0, 0, 0, cb, ctx);"]
    #[doc = " ```"]
    #[doc = ""]
    #[doc = " To validate that the input is a SEQUENCE of CHOICE {NULL, OCTET STRING}"]
    #[doc = " and call `cb` on each element that is an OCTET STRING, use"]
    #[doc = " ```"]
    #[doc = " mbedtls_asn1_traverse_sequence_of(&p, end, 0xfe, 0x04, 0xff, 0x04, cb, ctx);"]
    #[doc = " ```"]
    #[doc = ""]
    #[doc = " The callback is called on the elements with a \"may\" tag from left to"]
    #[doc = " right. If the input is not a valid SEQUENCE of elements with a \"must\" tag,"]
    #[doc = " the callback is called on the elements up to the leftmost point where"]
    #[doc = " the input is invalid."]
    #[doc = ""]
    #[doc = " \\warning              This function is still experimental and may change"]
    #[doc = "                       at any time."]
    #[doc = ""]
    #[doc = " \\param p              The address of the pointer to the beginning of"]
    #[doc = "                       the ASN.1 SEQUENCE header. This is updated to"]
    #[doc = "                       point to the end of the ASN.1 SEQUENCE container"]
    #[doc = "                       on a successful invocation."]
    #[doc = " \\param end            The end of the ASN.1 SEQUENCE container."]
    #[doc = " \\param tag_must_mask  A mask to be applied to the ASN.1 tags found within"]
    #[doc = "                       the SEQUENCE before comparing to \\p tag_must_value."]
    #[doc = " \\param tag_must_val   The required value of each ASN.1 tag found in the"]
    #[doc = "                       SEQUENCE, after masking with \\p tag_must_mask."]
    #[doc = "                       Mismatching tags lead to an error."]
    #[doc = "                       For example, a value of \\c 0 for both \\p tag_must_mask"]
    #[doc = "                       and \\p tag_must_val means that every tag is allowed,"]
    #[doc = "                       while a value of \\c 0xFF for \\p tag_must_mask means"]
    #[doc = "                       that \\p tag_must_val is the only allowed tag."]
    #[doc = " \\param tag_may_mask   A mask to be applied to the ASN.1 tags found within"]
    #[doc = "                       the SEQUENCE before comparing to \\p tag_may_value."]
    #[doc = " \\param tag_may_val    The desired value of each ASN.1 tag found in the"]
    #[doc = "                       SEQUENCE, after masking with \\p tag_may_mask."]
    #[doc = "                       Mismatching tags will be silently ignored."]
    #[doc = "                       For example, a value of \\c 0 for \\p tag_may_mask and"]
    #[doc = "                       \\p tag_may_val means that any tag will be considered,"]
    #[doc = "                       while a value of \\c 0xFF for \\p tag_may_mask means"]
    #[doc = "                       that all tags with value different from \\p tag_may_val"]
    #[doc = "                       will be ignored."]
    #[doc = " \\param cb             The callback to trigger for each component"]
    #[doc = "                       in the ASN.1 SEQUENCE that matches \\p tag_may_val."]
    #[doc = "                       The callback function is called with the following"]
    #[doc = "                       parameters:"]
    #[doc = "                       - \\p ctx."]
    #[doc = "                       - The tag of the current element."]
    #[doc = "                       - A pointer to the start of the current element's"]
    #[doc = "                         content inside the input."]
    #[doc = "                       - The length of the content of the current element."]
    #[doc = "                       If the callback returns a non-zero value,"]
    #[doc = "                       the function stops immediately,"]
    #[doc = "                       forwarding the callback's return value."]
    #[doc = " \\param ctx            The context to be passed to the callback \\p cb."]
    #[doc = ""]
    #[doc = " \\return               \\c 0 if successful the entire ASN.1 SEQUENCE"]
    #[doc = "                       was traversed without parsing or callback errors."]
    #[doc = " \\return               #MBEDTLS_ERR_ASN1_LENGTH_MISMATCH if the input"]
    #[doc = "                       contains extra data after a valid SEQUENCE"]
    #[doc = "                       of elements with an accepted tag."]
    #[doc = " \\return               #MBEDTLS_ERR_ASN1_UNEXPECTED_TAG if the input starts"]
    #[doc = "                       with an ASN.1 SEQUENCE in which an element has a tag"]
    #[doc = "                       that is not accepted."]
    #[doc = " \\return               An ASN.1 error code if the input does not start with"]
    #[doc = "                       a valid ASN.1 SEQUENCE."]
    #[doc = " \\return               A non-zero error code forwarded from the callback"]
    #[doc = "                       \\p cb in case the latter returns a non-zero value."]
    pub fn mbedtls_asn1_traverse_sequence_of(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        tag_must_mask: c_types::c_uchar,
        tag_must_val: c_types::c_uchar,
        tag_may_mask: c_types::c_uchar,
        tag_may_val: c_types::c_uchar,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                ctx: *mut c_types::c_void,
                tag: c_types::c_int,
                start: *mut c_types::c_uchar,
                len: size_t,
            ) -> c_types::c_int,
        >,
        ctx: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve an integer ASN.1 tag and its value."]
    #[doc = "              Updates the pointer to immediately behind the full tag."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the ASN.1 element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param X     On success, the parsed value."]
    #[doc = ""]
    #[doc = " \\return      0 if successful."]
    #[doc = " \\return      An ASN.1 error code if the input does not start with"]
    #[doc = "              a valid ASN.1 INTEGER."]
    #[doc = " \\return      #MBEDTLS_ERR_ASN1_INVALID_LENGTH if the parsed value does"]
    #[doc = "              not fit in an \\c int."]
    #[doc = " \\return      An MPI error code if the parsed value is too large."]
    pub fn mbedtls_asn1_get_mpi(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        X: *mut mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve an AlgorithmIdentifier ASN.1 sequence."]
    #[doc = "              Updates the pointer to immediately behind the full"]
    #[doc = "              AlgorithmIdentifier."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the AlgorithmIdentifier element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param alg   The buffer to receive the OID."]
    #[doc = " \\param params The buffer to receive the parameters."]
    #[doc = "              This is zeroized if there are no parameters."]
    #[doc = ""]
    #[doc = " \\return      0 if successful or a specific ASN.1 or MPI error code."]
    pub fn mbedtls_asn1_get_alg(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        alg: *mut mbedtls_asn1_buf,
        params: *mut mbedtls_asn1_buf,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Retrieve an AlgorithmIdentifier ASN.1 sequence with NULL or no"]
    #[doc = "              params."]
    #[doc = "              Updates the pointer to immediately behind the full"]
    #[doc = "              AlgorithmIdentifier."]
    #[doc = ""]
    #[doc = " \\param p     On entry, \\c *p points to the start of the ASN.1 element."]
    #[doc = "              On successful completion, \\c *p points to the first byte"]
    #[doc = "              beyond the AlgorithmIdentifier element."]
    #[doc = "              On error, the value of \\c *p is undefined."]
    #[doc = " \\param end   End of data."]
    #[doc = " \\param alg   The buffer to receive the OID."]
    #[doc = ""]
    #[doc = " \\return      0 if successful or a specific ASN.1 or MPI error code."]
    pub fn mbedtls_asn1_get_alg_null(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        alg: *mut mbedtls_asn1_buf,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       Find a specific named_data entry in a sequence or list based on"]
    #[doc = "              the OID."]
    #[doc = ""]
    #[doc = " \\param list  The list to seek through"]
    #[doc = " \\param oid   The OID to look for"]
    #[doc = " \\param len   Size of the OID"]
    #[doc = ""]
    #[doc = " \\return      NULL if not found, or a pointer to the existing entry."]
    pub fn mbedtls_asn1_find_named_data(
        list: *mut mbedtls_asn1_named_data,
        oid: *const c_types::c_char,
        len: size_t,
    ) -> *mut mbedtls_asn1_named_data;
}
extern "C" {
    #[doc = " \\brief       Free a mbedtls_asn1_named_data entry"]
    #[doc = ""]
    #[doc = " \\param entry The named data entry to free."]
    #[doc = "              This function calls mbedtls_free() on"]
    #[doc = "              `entry->oid.p` and `entry->val.p`."]
    pub fn mbedtls_asn1_free_named_data(entry: *mut mbedtls_asn1_named_data);
}
extern "C" {
    #[doc = " \\brief       Free all entries in a mbedtls_asn1_named_data list."]
    #[doc = ""]
    #[doc = " \\param head  Pointer to the head of the list of named data entries to free."]
    #[doc = "              This function calls mbedtls_asn1_free_named_data() and"]
    #[doc = "              mbedtls_free() on each list element and"]
    #[doc = "              sets \\c *head to \\c NULL."]
    pub fn mbedtls_asn1_free_named_data_list(head: *mut *mut mbedtls_asn1_named_data);
}
#[doc = " Type-length-value structure that allows for ASN1 using DER."]
pub type mbedtls_x509_buf = mbedtls_asn1_buf;
#[doc = " Container for ASN1 bit strings."]
pub type mbedtls_x509_bitstring = mbedtls_asn1_bitstring;
#[doc = " Container for a sequence or list of 'named' ASN.1 data items"]
pub type mbedtls_x509_name = mbedtls_asn1_named_data;
#[doc = " Container for a sequence of ASN.1 items"]
pub type mbedtls_x509_sequence = mbedtls_asn1_sequence;
#[doc = " Container for date and time (precision in seconds)."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mbedtls_x509_time {
    #[doc = "< Date."]
    pub year: c_types::c_int,
    #[doc = "< Date."]
    pub mon: c_types::c_int,
    #[doc = "< Date."]
    pub day: c_types::c_int,
    #[doc = "< Time."]
    pub hour: c_types::c_int,
    #[doc = "< Time."]
    pub min: c_types::c_int,
    #[doc = "< Time."]
    pub sec: c_types::c_int,
}
extern "C" {
    #[doc = " \\brief          Store the certificate DN in printable form into buf;"]
    #[doc = "                 no more than size characters will be written."]
    #[doc = ""]
    #[doc = " \\param buf      Buffer to write to"]
    #[doc = " \\param size     Maximum size of buffer"]
    #[doc = " \\param dn       The X509 name to represent"]
    #[doc = ""]
    #[doc = " \\return         The length of the string written (not including the"]
    #[doc = "                 terminated nul byte), or a negative error code."]
    pub fn mbedtls_x509_dn_gets(
        buf: *mut c_types::c_char,
        size: size_t,
        dn: *const mbedtls_x509_name,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Store the certificate serial in printable form into buf;"]
    #[doc = "                 no more than size characters will be written."]
    #[doc = ""]
    #[doc = " \\param buf      Buffer to write to"]
    #[doc = " \\param size     Maximum size of buffer"]
    #[doc = " \\param serial   The X509 serial to represent"]
    #[doc = ""]
    #[doc = " \\return         The length of the string written (not including the"]
    #[doc = "                 terminated nul byte), or a negative error code."]
    pub fn mbedtls_x509_serial_gets(
        buf: *mut c_types::c_char,
        size: size_t,
        serial: *const mbedtls_x509_buf,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Check a given mbedtls_x509_time against the system time"]
    #[doc = "                 and tell if it's in the past."]
    #[doc = ""]
    #[doc = " \\note           Intended usage is \"if( is_past( valid_to ) ) ERROR\"."]
    #[doc = "                 Hence the return value of 1 if on internal errors."]
    #[doc = ""]
    #[doc = " \\param to       mbedtls_x509_time to check"]
    #[doc = ""]
    #[doc = " \\return         1 if the given time is in the past or an error occurred,"]
    #[doc = "                 0 otherwise."]
    pub fn mbedtls_x509_time_is_past(to: *const mbedtls_x509_time) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Check a given mbedtls_x509_time against the system time"]
    #[doc = "                 and tell if it's in the future."]
    #[doc = ""]
    #[doc = " \\note           Intended usage is \"if( is_future( valid_from ) ) ERROR\"."]
    #[doc = "                 Hence the return value of 1 if on internal errors."]
    #[doc = ""]
    #[doc = " \\param from     mbedtls_x509_time to check"]
    #[doc = ""]
    #[doc = " \\return         1 if the given time is in the future or an error occurred,"]
    #[doc = "                 0 otherwise."]
    pub fn mbedtls_x509_time_is_future(from: *const mbedtls_x509_time) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Checkup routine"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or 1 if the test failed"]
    pub fn mbedtls_x509_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_name(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        cur: *mut mbedtls_x509_name,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_alg_null(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        alg: *mut mbedtls_x509_buf,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_alg(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        alg: *mut mbedtls_x509_buf,
        params: *mut mbedtls_x509_buf,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_rsassa_pss_params(
        params: *const mbedtls_x509_buf,
        md_alg: *mut mbedtls_md_type_t,
        mgf_md: *mut mbedtls_md_type_t,
        salt_len: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_sig(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        sig: *mut mbedtls_x509_buf,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_sig_alg(
        sig_oid: *const mbedtls_x509_buf,
        sig_params: *const mbedtls_x509_buf,
        md_alg: *mut mbedtls_md_type_t,
        pk_alg: *mut mbedtls_pk_type_t,
        sig_opts: *mut *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_time(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        t: *mut mbedtls_x509_time,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_serial(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        serial: *mut mbedtls_x509_buf,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_get_ext(
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        ext: *mut mbedtls_x509_buf,
        tag: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_sig_alg_gets(
        buf: *mut c_types::c_char,
        size: size_t,
        sig_oid: *const mbedtls_x509_buf,
        pk_alg: mbedtls_pk_type_t,
        md_alg: mbedtls_md_type_t,
        sig_opts: *const c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_key_size_helper(
        buf: *mut c_types::c_char,
        buf_size: size_t,
        name: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_string_to_names(
        head: *mut *mut mbedtls_asn1_named_data,
        name: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_set_extension(
        head: *mut *mut mbedtls_asn1_named_data,
        oid: *const c_types::c_char,
        oid_len: size_t,
        critical: c_types::c_int,
        val: *const c_types::c_uchar,
        val_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_write_extensions(
        p: *mut *mut c_types::c_uchar,
        start: *mut c_types::c_uchar,
        first: *mut mbedtls_asn1_named_data,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_write_names(
        p: *mut *mut c_types::c_uchar,
        start: *mut c_types::c_uchar,
        first: *mut mbedtls_asn1_named_data,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn mbedtls_x509_write_sig(
        p: *mut *mut c_types::c_uchar,
        start: *mut c_types::c_uchar,
        oid: *const c_types::c_char,
        oid_len: size_t,
        sig: *mut c_types::c_uchar,
        size: size_t,
    ) -> c_types::c_int;
}
#[doc = " Certificate revocation list entry."]
#[doc = " Contains the CA-specific serial numbers and revocation dates."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_crl_entry {
    pub raw: mbedtls_x509_buf,
    pub serial: mbedtls_x509_buf,
    pub revocation_date: mbedtls_x509_time,
    pub entry_ext: mbedtls_x509_buf,
    pub next: *mut mbedtls_x509_crl_entry,
}
impl Default for mbedtls_x509_crl_entry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Certificate revocation list structure."]
#[doc = " Every CRL may have multiple entries."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_crl {
    #[doc = "< The raw certificate data (DER)."]
    pub raw: mbedtls_x509_buf,
    #[doc = "< The raw certificate body (DER). The part that is To Be Signed."]
    pub tbs: mbedtls_x509_buf,
    #[doc = "< CRL version (1=v1, 2=v2)"]
    pub version: c_types::c_int,
    #[doc = "< CRL signature type identifier"]
    pub sig_oid: mbedtls_x509_buf,
    #[doc = "< The raw issuer data (DER)."]
    pub issuer_raw: mbedtls_x509_buf,
    #[doc = "< The parsed issuer data (named information object)."]
    pub issuer: mbedtls_x509_name,
    pub this_update: mbedtls_x509_time,
    pub next_update: mbedtls_x509_time,
    #[doc = "< The CRL entries containing the certificate revocation times for this CA."]
    pub entry: mbedtls_x509_crl_entry,
    pub crl_ext: mbedtls_x509_buf,
    pub sig_oid2: mbedtls_x509_buf,
    pub sig: mbedtls_x509_buf,
    #[doc = "< Internal representation of the MD algorithm of the signature algorithm, e.g. MBEDTLS_MD_SHA256"]
    pub sig_md: mbedtls_md_type_t,
    #[doc = "< Internal representation of the Public Key algorithm of the signature algorithm, e.g. MBEDTLS_PK_RSA"]
    pub sig_pk: mbedtls_pk_type_t,
    #[doc = "< Signature options to be passed to mbedtls_pk_verify_ext(), e.g. for RSASSA-PSS"]
    pub sig_opts: *mut c_types::c_void,
    pub next: *mut mbedtls_x509_crl,
}
impl Default for mbedtls_x509_crl {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief          Parse a DER-encoded CRL and append it to the chained list"]
    #[doc = ""]
    #[doc = " \\param chain    points to the start of the chain"]
    #[doc = " \\param buf      buffer holding the CRL data in DER format"]
    #[doc = " \\param buflen   size of the buffer"]
    #[doc = "                 (including the terminating null byte for PEM data)"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or a specific X509 or PEM error code"]
    pub fn mbedtls_x509_crl_parse_der(
        chain: *mut mbedtls_x509_crl,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Parse one or more CRLs and append them to the chained list"]
    #[doc = ""]
    #[doc = " \\note           Multiple CRLs are accepted only if using PEM format"]
    #[doc = ""]
    #[doc = " \\param chain    points to the start of the chain"]
    #[doc = " \\param buf      buffer holding the CRL data in PEM or DER format"]
    #[doc = " \\param buflen   size of the buffer"]
    #[doc = "                 (including the terminating null byte for PEM data)"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or a specific X509 or PEM error code"]
    pub fn mbedtls_x509_crl_parse(
        chain: *mut mbedtls_x509_crl,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Load one or more CRLs and append them to the chained list"]
    #[doc = ""]
    #[doc = " \\note           Multiple CRLs are accepted only if using PEM format"]
    #[doc = ""]
    #[doc = " \\param chain    points to the start of the chain"]
    #[doc = " \\param path     filename to read the CRLs from (in PEM or DER encoding)"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or a specific X509 or PEM error code"]
    pub fn mbedtls_x509_crl_parse_file(
        chain: *mut mbedtls_x509_crl,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Returns an informational string about the CRL."]
    #[doc = ""]
    #[doc = " \\param buf      Buffer to write to"]
    #[doc = " \\param size     Maximum size of buffer"]
    #[doc = " \\param prefix   A line prefix"]
    #[doc = " \\param crl      The X509 CRL to represent"]
    #[doc = ""]
    #[doc = " \\return         The length of the string written (not including the"]
    #[doc = "                 terminated nul byte), or a negative error code."]
    pub fn mbedtls_x509_crl_info(
        buf: *mut c_types::c_char,
        size: size_t,
        prefix: *const c_types::c_char,
        crl: *const mbedtls_x509_crl,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Initialize a CRL (chain)"]
    #[doc = ""]
    #[doc = " \\param crl      CRL chain to initialize"]
    pub fn mbedtls_x509_crl_init(crl: *mut mbedtls_x509_crl);
}
extern "C" {
    #[doc = " \\brief          Unallocate all CRL data"]
    #[doc = ""]
    #[doc = " \\param crl      CRL chain to free"]
    pub fn mbedtls_x509_crl_free(crl: *mut mbedtls_x509_crl);
}
#[doc = " Container for an X.509 certificate. The certificate may be chained."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_crt {
    #[doc = "< Indicates if \\c raw is owned"]
    #[doc = "   by the structure or not."]
    pub own_buffer: c_types::c_int,
    #[doc = "< The raw certificate data (DER)."]
    pub raw: mbedtls_x509_buf,
    #[doc = "< The raw certificate body (DER). The part that is To Be Signed."]
    pub tbs: mbedtls_x509_buf,
    #[doc = "< The X.509 version. (1=v1, 2=v2, 3=v3)"]
    pub version: c_types::c_int,
    #[doc = "< Unique id for certificate issued by a specific CA."]
    pub serial: mbedtls_x509_buf,
    #[doc = "< Signature algorithm, e.g. sha1RSA"]
    pub sig_oid: mbedtls_x509_buf,
    #[doc = "< The raw issuer data (DER). Used for quick comparison."]
    pub issuer_raw: mbedtls_x509_buf,
    #[doc = "< The raw subject data (DER). Used for quick comparison."]
    pub subject_raw: mbedtls_x509_buf,
    #[doc = "< The parsed issuer data (named information object)."]
    pub issuer: mbedtls_x509_name,
    #[doc = "< The parsed subject data (named information object)."]
    pub subject: mbedtls_x509_name,
    #[doc = "< Start time of certificate validity."]
    pub valid_from: mbedtls_x509_time,
    #[doc = "< End time of certificate validity."]
    pub valid_to: mbedtls_x509_time,
    pub pk_raw: mbedtls_x509_buf,
    #[doc = "< Container for the public key context."]
    pub pk: mbedtls_pk_context,
    #[doc = "< Optional X.509 v2/v3 issuer unique identifier."]
    pub issuer_id: mbedtls_x509_buf,
    #[doc = "< Optional X.509 v2/v3 subject unique identifier."]
    pub subject_id: mbedtls_x509_buf,
    #[doc = "< Optional X.509 v3 extensions."]
    pub v3_ext: mbedtls_x509_buf,
    #[doc = "< Optional list of raw entries of Subject Alternative Names extension (currently only dNSName and OtherName are listed)."]
    pub subject_alt_names: mbedtls_x509_sequence,
    #[doc = "< Optional list of certificate policies (Only anyPolicy is printed and enforced, however the rest of the policies are still listed)."]
    pub certificate_policies: mbedtls_x509_sequence,
    #[doc = "< Bit string containing detected and parsed extensions"]
    pub ext_types: c_types::c_int,
    #[doc = "< Optional Basic Constraint extension value: 1 if this certificate belongs to a CA, 0 otherwise."]
    pub ca_istrue: c_types::c_int,
    #[doc = "< Optional Basic Constraint extension value: The maximum path length to the root certificate. Path length is 1 higher than RFC 5280 'meaning', so 1+"]
    pub max_pathlen: c_types::c_int,
    #[doc = "< Optional key usage extension value: See the values in x509.h"]
    pub key_usage: c_types::c_uint,
    #[doc = "< Optional list of extended key usage OIDs."]
    pub ext_key_usage: mbedtls_x509_sequence,
    #[doc = "< Optional Netscape certificate type extension value: See the values in x509.h"]
    pub ns_cert_type: c_types::c_uchar,
    #[doc = "< Signature: hash of the tbs part signed with the private key."]
    pub sig: mbedtls_x509_buf,
    #[doc = "< Internal representation of the MD algorithm of the signature algorithm, e.g. MBEDTLS_MD_SHA256"]
    pub sig_md: mbedtls_md_type_t,
    #[doc = "< Internal representation of the Public Key algorithm of the signature algorithm, e.g. MBEDTLS_PK_RSA"]
    pub sig_pk: mbedtls_pk_type_t,
    #[doc = "< Signature options to be passed to mbedtls_pk_verify_ext(), e.g. for RSASSA-PSS"]
    pub sig_opts: *mut c_types::c_void,
    #[doc = "< Next certificate in the CA-chain."]
    pub next: *mut mbedtls_x509_crt,
}
impl Default for mbedtls_x509_crt {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " From RFC 5280 section 4.2.1.6:"]
#[doc = " OtherName ::= SEQUENCE {"]
#[doc = "      type-id    OBJECT IDENTIFIER,"]
#[doc = "      value      [0] EXPLICIT ANY DEFINED BY type-id }"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mbedtls_x509_san_other_name {
    #[doc = "< The type id."]
    pub type_id: mbedtls_x509_buf,
    pub value: mbedtls_x509_san_other_name__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mbedtls_x509_san_other_name__bindgen_ty_1 {
    pub hardware_module_name: mbedtls_x509_san_other_name__bindgen_ty_1__bindgen_ty_1,
}
#[doc = " From RFC 4108 section 5:"]
#[doc = " HardwareModuleName ::= SEQUENCE {"]
#[doc = "                         hwType OBJECT IDENTIFIER,"]
#[doc = "                         hwSerialNum OCTET STRING }"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_san_other_name__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< The object identifier."]
    pub oid: mbedtls_x509_buf,
    #[doc = "< The named value."]
    pub val: mbedtls_x509_buf,
}
impl Default for mbedtls_x509_san_other_name__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mbedtls_x509_san_other_name__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mbedtls_x509_san_other_name {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " A structure for holding the parsed Subject Alternative Name, according to type"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mbedtls_x509_subject_alternative_name {
    #[doc = "< The SAN type, value of MBEDTLS_X509_SAN_XXX."]
    pub type_: c_types::c_int,
    #[doc = "< A union of the supported SAN types"]
    pub san: mbedtls_x509_subject_alternative_name__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mbedtls_x509_subject_alternative_name__bindgen_ty_1 {
    #[doc = "< The otherName supported type."]
    pub other_name: mbedtls_x509_san_other_name,
    #[doc = "< The buffer for the un constructed types. Only dnsName currently supported"]
    pub unstructured_name: mbedtls_x509_buf,
}
impl Default for mbedtls_x509_subject_alternative_name__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for mbedtls_x509_subject_alternative_name {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Security profile for certificate verification."]
#[doc = ""]
#[doc = " All lists are bitfields, built by ORing flags from MBEDTLS_X509_ID_FLAG()."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mbedtls_x509_crt_profile {
    #[doc = "< MDs for signatures"]
    pub allowed_mds: u32,
    #[doc = "< PK algs for signatures"]
    pub allowed_pks: u32,
    #[doc = "< Elliptic curves for ECDSA"]
    pub allowed_curves: u32,
    #[doc = "< Minimum size for RSA keys"]
    pub rsa_min_bitlen: u32,
}
#[doc = " Container for writing a certificate (CRT)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509write_cert {
    pub version: c_types::c_int,
    pub serial: mbedtls_mpi,
    pub subject_key: *mut mbedtls_pk_context,
    pub issuer_key: *mut mbedtls_pk_context,
    pub subject: *mut mbedtls_asn1_named_data,
    pub issuer: *mut mbedtls_asn1_named_data,
    pub md_alg: mbedtls_md_type_t,
    pub not_before: [c_types::c_char; 16usize],
    pub not_after: [c_types::c_char; 16usize],
    pub extensions: *mut mbedtls_asn1_named_data,
}
impl Default for mbedtls_x509write_cert {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Item in a verification chain: cert and flags for it"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_crt_verify_chain_item {
    pub crt: *mut mbedtls_x509_crt,
    pub flags: u32,
}
impl Default for mbedtls_x509_crt_verify_chain_item {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Verification chain as built by \\c mbedtls_crt_verify_chain()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_x509_crt_verify_chain {
    pub items: [mbedtls_x509_crt_verify_chain_item; 10usize],
    pub len: c_types::c_uint,
}
impl Default for mbedtls_x509_crt_verify_chain {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mbedtls_x509_crt_restart_ctx = c_types::c_void;
extern "C" {
    #[doc = " Default security profile. Should provide a good balance between security"]
    #[doc = " and compatibility with current deployments."]
    #[doc = ""]
    #[doc = " This profile permits:"]
    #[doc = " - SHA2 hashes."]
    #[doc = " - All supported elliptic curves."]
    #[doc = " - RSA with 2048 bits and above."]
    #[doc = ""]
    #[doc = " New minor versions of Mbed TLS may extend this profile, for example if"]
    #[doc = " new curves are added to the library. New minor versions of Mbed TLS will"]
    #[doc = " not reduce this profile unless serious security concerns require it."]
    pub static mbedtls_x509_crt_profile_default: mbedtls_x509_crt_profile;
}
extern "C" {
    #[doc = " Expected next default profile. Recommended for new deployments."]
    #[doc = " Currently targets a 128-bit security level, except for allowing RSA-2048."]
    pub static mbedtls_x509_crt_profile_next: mbedtls_x509_crt_profile;
}
extern "C" {
    #[doc = " NSA Suite B profile."]
    pub static mbedtls_x509_crt_profile_suiteb: mbedtls_x509_crt_profile;
}
extern "C" {
    #[doc = " \\brief          Parse a single DER formatted certificate and add it"]
    #[doc = "                 to the end of the provided chained list."]
    #[doc = ""]
    #[doc = " \\param chain    The pointer to the start of the CRT chain to attach to."]
    #[doc = "                 When parsing the first CRT in a chain, this should point"]
    #[doc = "                 to an instance of ::mbedtls_x509_crt initialized through"]
    #[doc = "                 mbedtls_x509_crt_init()."]
    #[doc = " \\param buf      The buffer holding the DER encoded certificate."]
    #[doc = " \\param buflen   The size in Bytes of \\p buf."]
    #[doc = ""]
    #[doc = " \\note           This function makes an internal copy of the CRT buffer"]
    #[doc = "                 \\p buf. In particular, \\p buf may be destroyed or reused"]
    #[doc = "                 after this call returns. To avoid duplicating the CRT"]
    #[doc = "                 buffer (at the cost of stricter lifetime constraints),"]
    #[doc = "                 use mbedtls_x509_crt_parse_der_nocopy() instead."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_x509_crt_parse_der(
        chain: *mut mbedtls_x509_crt,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
#[doc = " \\brief          The type of certificate extension callbacks."]
#[doc = ""]
#[doc = "                 Callbacks of this type are passed to and used by the"]
#[doc = "                 mbedtls_x509_crt_parse_der_with_ext_cb() routine when"]
#[doc = "                 it encounters either an unsupported extension or a"]
#[doc = "                 \"certificate policies\" extension containing any"]
#[doc = "                 unsupported certificate policies."]
#[doc = "                 Future versions of the library may invoke the callback"]
#[doc = "                 in other cases, if and when the need arises."]
#[doc = ""]
#[doc = " \\param p_ctx    An opaque context passed to the callback."]
#[doc = " \\param crt      The certificate being parsed."]
#[doc = " \\param oid      The OID of the extension."]
#[doc = " \\param critical Whether the extension is critical."]
#[doc = " \\param p        Pointer to the start of the extension value"]
#[doc = "                 (the content of the OCTET STRING)."]
#[doc = " \\param end      End of extension value."]
#[doc = ""]
#[doc = " \\note           The callback must fail and return a negative error code"]
#[doc = "                 if it can not parse or does not support the extension."]
#[doc = "                 When the callback fails to parse a critical extension"]
#[doc = "                 mbedtls_x509_crt_parse_der_with_ext_cb() also fails."]
#[doc = "                 When the callback fails to parse a non critical extension"]
#[doc = "                 mbedtls_x509_crt_parse_der_with_ext_cb() simply skips"]
#[doc = "                 the extension and continues parsing."]
#[doc = ""]
#[doc = " \\return         \\c 0 on success."]
#[doc = " \\return         A negative error code on failure."]
pub type mbedtls_x509_crt_ext_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_ctx: *mut c_types::c_void,
        crt: *const mbedtls_x509_crt,
        oid: *const mbedtls_x509_buf,
        critical: c_types::c_int,
        p: *const c_types::c_uchar,
        end: *const c_types::c_uchar,
    ) -> c_types::c_int,
>;
extern "C" {
    #[doc = " \\brief            Parse a single DER formatted certificate and add it"]
    #[doc = "                   to the end of the provided chained list."]
    #[doc = ""]
    #[doc = " \\param chain      The pointer to the start of the CRT chain to attach to."]
    #[doc = "                   When parsing the first CRT in a chain, this should point"]
    #[doc = "                   to an instance of ::mbedtls_x509_crt initialized through"]
    #[doc = "                   mbedtls_x509_crt_init()."]
    #[doc = " \\param buf        The buffer holding the DER encoded certificate."]
    #[doc = " \\param buflen     The size in Bytes of \\p buf."]
    #[doc = " \\param make_copy  When not zero this function makes an internal copy of the"]
    #[doc = "                   CRT buffer \\p buf. In particular, \\p buf may be destroyed"]
    #[doc = "                   or reused after this call returns."]
    #[doc = "                   When zero this function avoids duplicating the CRT buffer"]
    #[doc = "                   by taking temporary ownership thereof until the CRT"]
    #[doc = "                   is destroyed (like mbedtls_x509_crt_parse_der_nocopy())"]
    #[doc = " \\param cb         A callback invoked for every unsupported certificate"]
    #[doc = "                   extension."]
    #[doc = " \\param p_ctx      An opaque context passed to the callback."]
    #[doc = ""]
    #[doc = " \\note             This call is functionally equivalent to"]
    #[doc = "                   mbedtls_x509_crt_parse_der(), and/or"]
    #[doc = "                   mbedtls_x509_crt_parse_der_nocopy()"]
    #[doc = "                   but it calls the callback with every unsupported"]
    #[doc = "                   certificate extension and additionally the"]
    #[doc = "                   \"certificate policies\" extension if it contains any"]
    #[doc = "                   unsupported certificate policies."]
    #[doc = "                   The callback must return a negative error code if it"]
    #[doc = "                   does not know how to handle such an extension."]
    #[doc = "                   When the callback fails to parse a critical extension"]
    #[doc = "                   mbedtls_x509_crt_parse_der_with_ext_cb() also fails."]
    #[doc = "                   When the callback fails to parse a non critical extension"]
    #[doc = "                   mbedtls_x509_crt_parse_der_with_ext_cb() simply skips"]
    #[doc = "                   the extension and continues parsing."]
    #[doc = "                   Future versions of the library may invoke the callback"]
    #[doc = "                   in other cases, if and when the need arises."]
    #[doc = ""]
    #[doc = " \\return           \\c 0 if successful."]
    #[doc = " \\return           A negative error code on failure."]
    pub fn mbedtls_x509_crt_parse_der_with_ext_cb(
        chain: *mut mbedtls_x509_crt,
        buf: *const c_types::c_uchar,
        buflen: size_t,
        make_copy: c_types::c_int,
        cb: mbedtls_x509_crt_ext_cb_t,
        p_ctx: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Parse a single DER formatted certificate and add it"]
    #[doc = "                 to the end of the provided chained list. This is a"]
    #[doc = "                 variant of mbedtls_x509_crt_parse_der() which takes"]
    #[doc = "                 temporary ownership of the CRT buffer until the CRT"]
    #[doc = "                 is destroyed."]
    #[doc = ""]
    #[doc = " \\param chain    The pointer to the start of the CRT chain to attach to."]
    #[doc = "                 When parsing the first CRT in a chain, this should point"]
    #[doc = "                 to an instance of ::mbedtls_x509_crt initialized through"]
    #[doc = "                 mbedtls_x509_crt_init()."]
    #[doc = " \\param buf      The address of the readable buffer holding the DER encoded"]
    #[doc = "                 certificate to use. On success, this buffer must be"]
    #[doc = "                 retained and not be changed for the liftetime of the"]
    #[doc = "                 CRT chain \\p chain, that is, until \\p chain is destroyed"]
    #[doc = "                 through a call to mbedtls_x509_crt_free()."]
    #[doc = " \\param buflen   The size in Bytes of \\p buf."]
    #[doc = ""]
    #[doc = " \\note           This call is functionally equivalent to"]
    #[doc = "                 mbedtls_x509_crt_parse_der(), but it avoids creating a"]
    #[doc = "                 copy of the input buffer at the cost of stronger lifetime"]
    #[doc = "                 constraints. This is useful in constrained environments"]
    #[doc = "                 where duplication of the CRT cannot be tolerated."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_x509_crt_parse_der_nocopy(
        chain: *mut mbedtls_x509_crt,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Parse one DER-encoded or one or more concatenated PEM-encoded"]
    #[doc = "                 certificates and add them to the chained list."]
    #[doc = ""]
    #[doc = "                 For CRTs in PEM encoding, the function parses permissively:"]
    #[doc = "                 if at least one certificate can be parsed, the function"]
    #[doc = "                 returns the number of certificates for which parsing failed"]
    #[doc = "                 (hence \\c 0 if all certificates were parsed successfully)."]
    #[doc = "                 If no certificate could be parsed, the function returns"]
    #[doc = "                 the first (negative) error encountered during parsing."]
    #[doc = ""]
    #[doc = "                 PEM encoded certificates may be interleaved by other data"]
    #[doc = "                 such as human readable descriptions of their content, as"]
    #[doc = "                 long as the certificates are enclosed in the PEM specific"]
    #[doc = "                 '-----{BEGIN/END} CERTIFICATE-----' delimiters."]
    #[doc = ""]
    #[doc = " \\param chain    The chain to which to add the parsed certificates."]
    #[doc = " \\param buf      The buffer holding the certificate data in PEM or DER format."]
    #[doc = "                 For certificates in PEM encoding, this may be a concatenation"]
    #[doc = "                 of multiple certificates; for DER encoding, the buffer must"]
    #[doc = "                 comprise exactly one certificate."]
    #[doc = " \\param buflen   The size of \\p buf, including the terminating \\c NULL byte"]
    #[doc = "                 in case of PEM encoded data."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if all certificates were parsed successfully."]
    #[doc = " \\return         The (positive) number of certificates that couldn't"]
    #[doc = "                 be parsed if parsing was partly successful (see above)."]
    #[doc = " \\return         A negative X509 or PEM error code otherwise."]
    #[doc = ""]
    pub fn mbedtls_x509_crt_parse(
        chain: *mut mbedtls_x509_crt,
        buf: *const c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Load one or more certificates and add them"]
    #[doc = "                 to the chained list. Parses permissively. If some"]
    #[doc = "                 certificates can be parsed, the result is the number"]
    #[doc = "                 of failed certificates it encountered. If none complete"]
    #[doc = "                 correctly, the first error is returned."]
    #[doc = ""]
    #[doc = " \\param chain    points to the start of the chain"]
    #[doc = " \\param path     filename to read the certificates from"]
    #[doc = ""]
    #[doc = " \\return         0 if all certificates parsed successfully, a positive number"]
    #[doc = "                 if partly successful or a specific X509 or PEM error code"]
    pub fn mbedtls_x509_crt_parse_file(
        chain: *mut mbedtls_x509_crt,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Load one or more certificate files from a path and add them"]
    #[doc = "                 to the chained list. Parses permissively. If some"]
    #[doc = "                 certificates can be parsed, the result is the number"]
    #[doc = "                 of failed certificates it encountered. If none complete"]
    #[doc = "                 correctly, the first error is returned."]
    #[doc = ""]
    #[doc = " \\param chain    points to the start of the chain"]
    #[doc = " \\param path     directory / folder to read the certificate files from"]
    #[doc = ""]
    #[doc = " \\return         0 if all certificates parsed successfully, a positive number"]
    #[doc = "                 if partly successful or a specific X509 or PEM error code"]
    pub fn mbedtls_x509_crt_parse_path(
        chain: *mut mbedtls_x509_crt,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function parses an item in the SubjectAlternativeNames"]
    #[doc = "                 extension."]
    #[doc = ""]
    #[doc = " \\param san_buf  The buffer holding the raw data item of the subject"]
    #[doc = "                 alternative name."]
    #[doc = " \\param san      The target structure to populate with the parsed presentation"]
    #[doc = "                 of the subject alternative name encoded in \\p san_raw."]
    #[doc = ""]
    #[doc = " \\note           Only \"dnsName\" and \"otherName\" of type hardware_module_name"]
    #[doc = "                 as defined in RFC 4180 is supported."]
    #[doc = ""]
    #[doc = " \\note           This function should be called on a single raw data of"]
    #[doc = "                 subject alternative name. For example, after successful"]
    #[doc = "                 certificate parsing, one must iterate on every item in the"]
    #[doc = "                 \\p crt->subject_alt_names sequence, and pass it to"]
    #[doc = "                 this function."]
    #[doc = ""]
    #[doc = " \\warning        The target structure contains pointers to the raw data of the"]
    #[doc = "                 parsed certificate, and its lifetime is restricted by the"]
    #[doc = "                 lifetime of the certificate."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success"]
    #[doc = " \\return         #MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE for an unsupported"]
    #[doc = "                 SAN type."]
    #[doc = " \\return         Another negative value for any other failure."]
    pub fn mbedtls_x509_parse_subject_alt_name(
        san_buf: *const mbedtls_x509_buf,
        san: *mut mbedtls_x509_subject_alternative_name,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Returns an informational string about the"]
    #[doc = "                 certificate."]
    #[doc = ""]
    #[doc = " \\param buf      Buffer to write to"]
    #[doc = " \\param size     Maximum size of buffer"]
    #[doc = " \\param prefix   A line prefix"]
    #[doc = " \\param crt      The X509 certificate to represent"]
    #[doc = ""]
    #[doc = " \\return         The length of the string written (not including the"]
    #[doc = "                 terminated nul byte), or a negative error code."]
    pub fn mbedtls_x509_crt_info(
        buf: *mut c_types::c_char,
        size: size_t,
        prefix: *const c_types::c_char,
        crt: *const mbedtls_x509_crt,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Returns an informational string about the"]
    #[doc = "                 verification status of a certificate."]
    #[doc = ""]
    #[doc = " \\param buf      Buffer to write to"]
    #[doc = " \\param size     Maximum size of buffer"]
    #[doc = " \\param prefix   A line prefix"]
    #[doc = " \\param flags    Verification flags created by mbedtls_x509_crt_verify()"]
    #[doc = ""]
    #[doc = " \\return         The length of the string written (not including the"]
    #[doc = "                 terminated nul byte), or a negative error code."]
    pub fn mbedtls_x509_crt_verify_info(
        buf: *mut c_types::c_char,
        size: size_t,
        prefix: *const c_types::c_char,
        flags: u32,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Verify a chain of certificates."]
    #[doc = ""]
    #[doc = "                 The verify callback is a user-supplied callback that"]
    #[doc = "                 can clear / modify / add flags for a certificate. If set,"]
    #[doc = "                 the verification callback is called for each"]
    #[doc = "                 certificate in the chain (from the trust-ca down to the"]
    #[doc = "                 presented crt). The parameters for the callback are:"]
    #[doc = "                 (void *parameter, mbedtls_x509_crt *crt, int certificate_depth,"]
    #[doc = "                 int *flags). With the flags representing current flags for"]
    #[doc = "                 that specific certificate and the certificate depth from"]
    #[doc = "                 the bottom (Peer cert depth = 0)."]
    #[doc = ""]
    #[doc = "                 All flags left after returning from the callback"]
    #[doc = "                 are also returned to the application. The function should"]
    #[doc = "                 return 0 for anything (including invalid certificates)"]
    #[doc = "                 other than fatal error, as a non-zero return code"]
    #[doc = "                 immediately aborts the verification process. For fatal"]
    #[doc = "                 errors, a specific error code should be used (different"]
    #[doc = "                 from MBEDTLS_ERR_X509_CERT_VERIFY_FAILED which should not"]
    #[doc = "                 be returned at this point), or MBEDTLS_ERR_X509_FATAL_ERROR"]
    #[doc = "                 can be used if no better code is available."]
    #[doc = ""]
    #[doc = " \\note           In case verification failed, the results can be displayed"]
    #[doc = "                 using \\c mbedtls_x509_crt_verify_info()"]
    #[doc = ""]
    #[doc = " \\note           Same as \\c mbedtls_x509_crt_verify_with_profile() with the"]
    #[doc = "                 default security profile."]
    #[doc = ""]
    #[doc = " \\note           It is your responsibility to provide up-to-date CRLs for"]
    #[doc = "                 all trusted CAs. If no CRL is provided for the CA that was"]
    #[doc = "                 used to sign the certificate, CRL verification is skipped"]
    #[doc = "                 silently, that is *without* setting any flag."]
    #[doc = ""]
    #[doc = " \\note           The \\c trust_ca list can contain two types of certificates:"]
    #[doc = "                 (1) those of trusted root CAs, so that certificates"]
    #[doc = "                 chaining up to those CAs will be trusted, and (2)"]
    #[doc = "                 self-signed end-entity certificates to be trusted (for"]
    #[doc = "                 specific peers you know) - in that case, the self-signed"]
    #[doc = "                 certificate doesn't need to have the CA bit set."]
    #[doc = ""]
    #[doc = " \\param crt      The certificate chain to be verified."]
    #[doc = " \\param trust_ca The list of trusted CAs."]
    #[doc = " \\param ca_crl   The list of CRLs for trusted CAs."]
    #[doc = " \\param cn       The expected Common Name. This will be checked to be"]
    #[doc = "                 present in the certificate's subjectAltNames extension or,"]
    #[doc = "                 if this extension is absent, as a CN component in its"]
    #[doc = "                 Subject name. Currently only DNS names are supported. This"]
    #[doc = "                 may be \\c NULL if the CN need not be verified."]
    #[doc = " \\param flags    The address at which to store the result of the verification."]
    #[doc = "                 If the verification couldn't be completed, the flag value is"]
    #[doc = "                 set to (uint32_t) -1."]
    #[doc = " \\param f_vrfy   The verification callback to use. See the documentation"]
    #[doc = "                 of mbedtls_x509_crt_verify() for more information."]
    #[doc = " \\param p_vrfy   The context to be passed to \\p f_vrfy."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the chain is valid with respect to the"]
    #[doc = "                 passed CN, CAs, CRLs and security profile."]
    #[doc = " \\return         #MBEDTLS_ERR_X509_CERT_VERIFY_FAILED in case the"]
    #[doc = "                 certificate chain verification failed. In this case,"]
    #[doc = "                 \\c *flags will have one or more"]
    #[doc = "                 \\c MBEDTLS_X509_BADCERT_XXX or \\c MBEDTLS_X509_BADCRL_XXX"]
    #[doc = "                 flags set."]
    #[doc = " \\return         Another negative error code in case of a fatal error"]
    #[doc = "                 encountered during the verification process."]
    pub fn mbedtls_x509_crt_verify(
        crt: *mut mbedtls_x509_crt,
        trust_ca: *mut mbedtls_x509_crt,
        ca_crl: *mut mbedtls_x509_crl,
        cn: *const c_types::c_char,
        flags: *mut u32,
        f_vrfy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_x509_crt,
                arg3: c_types::c_int,
                arg4: *mut u32,
            ) -> c_types::c_int,
        >,
        p_vrfy: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Verify a chain of certificates with respect to"]
    #[doc = "                 a configurable security profile."]
    #[doc = ""]
    #[doc = " \\note           Same as \\c mbedtls_x509_crt_verify(), but with explicit"]
    #[doc = "                 security profile."]
    #[doc = ""]
    #[doc = " \\note           The restrictions on keys (RSA minimum size, allowed curves"]
    #[doc = "                 for ECDSA) apply to all certificates: trusted root,"]
    #[doc = "                 intermediate CAs if any, and end entity certificate."]
    #[doc = ""]
    #[doc = " \\param crt      The certificate chain to be verified."]
    #[doc = " \\param trust_ca The list of trusted CAs."]
    #[doc = " \\param ca_crl   The list of CRLs for trusted CAs."]
    #[doc = " \\param profile  The security profile to use for the verification."]
    #[doc = " \\param cn       The expected Common Name. This may be \\c NULL if the"]
    #[doc = "                 CN need not be verified."]
    #[doc = " \\param flags    The address at which to store the result of the verification."]
    #[doc = "                 If the verification couldn't be completed, the flag value is"]
    #[doc = "                 set to (uint32_t) -1."]
    #[doc = " \\param f_vrfy   The verification callback to use. See the documentation"]
    #[doc = "                 of mbedtls_x509_crt_verify() for more information."]
    #[doc = " \\param p_vrfy   The context to be passed to \\p f_vrfy."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the chain is valid with respect to the"]
    #[doc = "                 passed CN, CAs, CRLs and security profile."]
    #[doc = " \\return         #MBEDTLS_ERR_X509_CERT_VERIFY_FAILED in case the"]
    #[doc = "                 certificate chain verification failed. In this case,"]
    #[doc = "                 \\c *flags will have one or more"]
    #[doc = "                 \\c MBEDTLS_X509_BADCERT_XXX or \\c MBEDTLS_X509_BADCRL_XXX"]
    #[doc = "                 flags set."]
    #[doc = " \\return         Another negative error code in case of a fatal error"]
    #[doc = "                 encountered during the verification process."]
    pub fn mbedtls_x509_crt_verify_with_profile(
        crt: *mut mbedtls_x509_crt,
        trust_ca: *mut mbedtls_x509_crt,
        ca_crl: *mut mbedtls_x509_crl,
        profile: *const mbedtls_x509_crt_profile,
        cn: *const c_types::c_char,
        flags: *mut u32,
        f_vrfy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_x509_crt,
                arg3: c_types::c_int,
                arg4: *mut u32,
            ) -> c_types::c_int,
        >,
        p_vrfy: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Restartable version of \\c mbedtls_crt_verify_with_profile()"]
    #[doc = ""]
    #[doc = " \\note           Performs the same job as \\c mbedtls_crt_verify_with_profile()"]
    #[doc = "                 but can return early and restart according to the limit"]
    #[doc = "                 set with \\c mbedtls_ecp_set_max_ops() to reduce blocking."]
    #[doc = ""]
    #[doc = " \\param crt      The certificate chain to be verified."]
    #[doc = " \\param trust_ca The list of trusted CAs."]
    #[doc = " \\param ca_crl   The list of CRLs for trusted CAs."]
    #[doc = " \\param profile  The security profile to use for the verification."]
    #[doc = " \\param cn       The expected Common Name. This may be \\c NULL if the"]
    #[doc = "                 CN need not be verified."]
    #[doc = " \\param flags    The address at which to store the result of the verification."]
    #[doc = "                 If the verification couldn't be completed, the flag value is"]
    #[doc = "                 set to (uint32_t) -1."]
    #[doc = " \\param f_vrfy   The verification callback to use. See the documentation"]
    #[doc = "                 of mbedtls_x509_crt_verify() for more information."]
    #[doc = " \\param p_vrfy   The context to be passed to \\p f_vrfy."]
    #[doc = " \\param rs_ctx   The restart context to use. This may be set to \\c NULL"]
    #[doc = "                 to disable restartable ECC."]
    #[doc = ""]
    #[doc = " \\return         See \\c mbedtls_crt_verify_with_profile(), or"]
    #[doc = " \\return         #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                 operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    pub fn mbedtls_x509_crt_verify_restartable(
        crt: *mut mbedtls_x509_crt,
        trust_ca: *mut mbedtls_x509_crt,
        ca_crl: *mut mbedtls_x509_crl,
        profile: *const mbedtls_x509_crt_profile,
        cn: *const c_types::c_char,
        flags: *mut u32,
        f_vrfy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_x509_crt,
                arg3: c_types::c_int,
                arg4: *mut u32,
            ) -> c_types::c_int,
        >,
        p_vrfy: *mut c_types::c_void,
        rs_ctx: *mut mbedtls_x509_crt_restart_ctx,
    ) -> c_types::c_int;
}
#[doc = " \\brief               The type of trusted certificate callbacks."]
#[doc = ""]
#[doc = "                      Callbacks of this type are passed to and used by the CRT"]
#[doc = "                      verification routine mbedtls_x509_crt_verify_with_ca_cb()"]
#[doc = "                      when looking for trusted signers of a given certificate."]
#[doc = ""]
#[doc = "                      On success, the callback returns a list of trusted"]
#[doc = "                      certificates to be considered as potential signers"]
#[doc = "                      for the input certificate."]
#[doc = ""]
#[doc = " \\param p_ctx         An opaque context passed to the callback."]
#[doc = " \\param child         The certificate for which to search a potential signer."]
#[doc = "                      This will point to a readable certificate."]
#[doc = " \\param candidate_cas The address at which to store the address of the first"]
#[doc = "                      entry in the generated linked list of candidate signers."]
#[doc = "                      This will not be \\c NULL."]
#[doc = ""]
#[doc = " \\note                The callback must only return a non-zero value on a"]
#[doc = "                      fatal error. If, in contrast, the search for a potential"]
#[doc = "                      signer completes without a single candidate, the"]
#[doc = "                      callback must return \\c 0 and set \\c *candidate_cas"]
#[doc = "                      to \\c NULL."]
#[doc = ""]
#[doc = " \\return              \\c 0 on success. In this case, \\c *candidate_cas points"]
#[doc = "                      to a heap-allocated linked list of instances of"]
#[doc = "                      ::mbedtls_x509_crt, and ownership of this list is passed"]
#[doc = "                      to the caller."]
#[doc = " \\return              A negative error code on failure."]
pub type mbedtls_x509_crt_ca_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_ctx: *mut c_types::c_void,
        child: *const mbedtls_x509_crt,
        candidate_cas: *mut *mut mbedtls_x509_crt,
    ) -> c_types::c_int,
>;
extern "C" {
    #[doc = " \\brief          Check usage of certificate against keyUsage extension."]
    #[doc = ""]
    #[doc = " \\param crt      Leaf certificate used."]
    #[doc = " \\param usage    Intended usage(s) (eg MBEDTLS_X509_KU_KEY_ENCIPHERMENT"]
    #[doc = "                 before using the certificate to perform an RSA key"]
    #[doc = "                 exchange)."]
    #[doc = ""]
    #[doc = " \\note           Except for decipherOnly and encipherOnly, a bit set in the"]
    #[doc = "                 usage argument means this bit MUST be set in the"]
    #[doc = "                 certificate. For decipherOnly and encipherOnly, it means"]
    #[doc = "                 that bit MAY be set."]
    #[doc = ""]
    #[doc = " \\return         0 is these uses of the certificate are allowed,"]
    #[doc = "                 MBEDTLS_ERR_X509_BAD_INPUT_DATA if the keyUsage extension"]
    #[doc = "                 is present but does not match the usage argument."]
    #[doc = ""]
    #[doc = " \\note           You should only call this function on leaf certificates, on"]
    #[doc = "                 (intermediate) CAs the keyUsage extension is automatically"]
    #[doc = "                 checked by \\c mbedtls_x509_crt_verify()."]
    pub fn mbedtls_x509_crt_check_key_usage(
        crt: *const mbedtls_x509_crt,
        usage: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Check usage of certificate against extendedKeyUsage."]
    #[doc = ""]
    #[doc = " \\param crt       Leaf certificate used."]
    #[doc = " \\param usage_oid Intended usage (eg MBEDTLS_OID_SERVER_AUTH or"]
    #[doc = "                  MBEDTLS_OID_CLIENT_AUTH)."]
    #[doc = " \\param usage_len Length of usage_oid (eg given by MBEDTLS_OID_SIZE())."]
    #[doc = ""]
    #[doc = " \\return          0 if this use of the certificate is allowed,"]
    #[doc = "                  MBEDTLS_ERR_X509_BAD_INPUT_DATA if not."]
    #[doc = ""]
    #[doc = " \\note            Usually only makes sense on leaf certificates."]
    pub fn mbedtls_x509_crt_check_extended_key_usage(
        crt: *const mbedtls_x509_crt,
        usage_oid: *const c_types::c_char,
        usage_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Verify the certificate revocation status"]
    #[doc = ""]
    #[doc = " \\param crt      a certificate to be verified"]
    #[doc = " \\param crl      the CRL to verify against"]
    #[doc = ""]
    #[doc = " \\return         1 if the certificate is revoked, 0 otherwise"]
    #[doc = ""]
    pub fn mbedtls_x509_crt_is_revoked(
        crt: *const mbedtls_x509_crt,
        crl: *const mbedtls_x509_crl,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Initialize a certificate (chain)"]
    #[doc = ""]
    #[doc = " \\param crt      Certificate chain to initialize"]
    pub fn mbedtls_x509_crt_init(crt: *mut mbedtls_x509_crt);
}
extern "C" {
    #[doc = " \\brief          Unallocate all certificate data"]
    #[doc = ""]
    #[doc = " \\param crt      Certificate chain to free"]
    pub fn mbedtls_x509_crt_free(crt: *mut mbedtls_x509_crt);
}
extern "C" {
    #[doc = " \\brief           Initialize a CRT writing context"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to initialize"]
    pub fn mbedtls_x509write_crt_init(ctx: *mut mbedtls_x509write_cert);
}
extern "C" {
    #[doc = " \\brief           Set the verion for a Certificate"]
    #[doc = "                  Default: MBEDTLS_X509_CRT_VERSION_3"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param version   version to set (MBEDTLS_X509_CRT_VERSION_1, MBEDTLS_X509_CRT_VERSION_2 or"]
    #[doc = "                                  MBEDTLS_X509_CRT_VERSION_3)"]
    pub fn mbedtls_x509write_crt_set_version(
        ctx: *mut mbedtls_x509write_cert,
        version: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief           Set the serial number for a Certificate."]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param serial    serial number to set"]
    #[doc = ""]
    #[doc = " \\return          0 if successful"]
    pub fn mbedtls_x509write_crt_set_serial(
        ctx: *mut mbedtls_x509write_cert,
        serial: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the validity period for a Certificate"]
    #[doc = "                  Timestamps should be in string format for UTC timezone"]
    #[doc = "                  i.e. \"YYYYMMDDhhmmss\""]
    #[doc = "                  e.g. \"20131231235959\" for December 31st 2013"]
    #[doc = "                       at 23:59:59"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param not_before    not_before timestamp"]
    #[doc = " \\param not_after     not_after timestamp"]
    #[doc = ""]
    #[doc = " \\return          0 if timestamp was parsed successfully, or"]
    #[doc = "                  a specific error code"]
    pub fn mbedtls_x509write_crt_set_validity(
        ctx: *mut mbedtls_x509write_cert,
        not_before: *const c_types::c_char,
        not_after: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the issuer name for a Certificate"]
    #[doc = "                  Issuer names should contain a comma-separated list"]
    #[doc = "                  of OID types and values:"]
    #[doc = "                  e.g. \"C=UK,O=ARM,CN=mbed TLS CA\""]
    #[doc = ""]
    #[doc = " \\param ctx           CRT context to use"]
    #[doc = " \\param issuer_name   issuer name to set"]
    #[doc = ""]
    #[doc = " \\return          0 if issuer name was parsed successfully, or"]
    #[doc = "                  a specific error code"]
    pub fn mbedtls_x509write_crt_set_issuer_name(
        ctx: *mut mbedtls_x509write_cert,
        issuer_name: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the subject name for a Certificate"]
    #[doc = "                  Subject names should contain a comma-separated list"]
    #[doc = "                  of OID types and values:"]
    #[doc = "                  e.g. \"C=UK,O=ARM,CN=mbed TLS Server 1\""]
    #[doc = ""]
    #[doc = " \\param ctx           CRT context to use"]
    #[doc = " \\param subject_name  subject name to set"]
    #[doc = ""]
    #[doc = " \\return          0 if subject name was parsed successfully, or"]
    #[doc = "                  a specific error code"]
    pub fn mbedtls_x509write_crt_set_subject_name(
        ctx: *mut mbedtls_x509write_cert,
        subject_name: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the subject public key for the certificate"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param key       public key to include"]
    pub fn mbedtls_x509write_crt_set_subject_key(
        ctx: *mut mbedtls_x509write_cert,
        key: *mut mbedtls_pk_context,
    );
}
extern "C" {
    #[doc = " \\brief           Set the issuer key used for signing the certificate"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param key       private key to sign with"]
    pub fn mbedtls_x509write_crt_set_issuer_key(
        ctx: *mut mbedtls_x509write_cert,
        key: *mut mbedtls_pk_context,
    );
}
extern "C" {
    #[doc = " \\brief           Set the MD algorithm to use for the signature"]
    #[doc = "                  (e.g. MBEDTLS_MD_SHA1)"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param md_alg    MD algorithm to use"]
    pub fn mbedtls_x509write_crt_set_md_alg(
        ctx: *mut mbedtls_x509write_cert,
        md_alg: mbedtls_md_type_t,
    );
}
extern "C" {
    #[doc = " \\brief           Generic function to add to or replace an extension in the"]
    #[doc = "                  CRT"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param oid       OID of the extension"]
    #[doc = " \\param oid_len   length of the OID"]
    #[doc = " \\param critical  if the extension is critical (per the RFC's definition)"]
    #[doc = " \\param val       value of the extension OCTET STRING"]
    #[doc = " \\param val_len   length of the value data"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_extension(
        ctx: *mut mbedtls_x509write_cert,
        oid: *const c_types::c_char,
        oid_len: size_t,
        critical: c_types::c_int,
        val: *const c_types::c_uchar,
        val_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the basicConstraints extension for a CRT"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param is_ca     is this a CA certificate"]
    #[doc = " \\param max_pathlen   maximum length of certificate chains below this"]
    #[doc = "                      certificate (only for CA certificates, -1 is"]
    #[doc = "                      inlimited)"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_basic_constraints(
        ctx: *mut mbedtls_x509write_cert,
        is_ca: c_types::c_int,
        max_pathlen: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the subjectKeyIdentifier extension for a CRT"]
    #[doc = "                  Requires that mbedtls_x509write_crt_set_subject_key() has been"]
    #[doc = "                  called before"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_subject_key_identifier(
        ctx: *mut mbedtls_x509write_cert,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the authorityKeyIdentifier extension for a CRT"]
    #[doc = "                  Requires that mbedtls_x509write_crt_set_issuer_key() has been"]
    #[doc = "                  called before"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_authority_key_identifier(
        ctx: *mut mbedtls_x509write_cert,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the Key Usage Extension flags"]
    #[doc = "                  (e.g. MBEDTLS_X509_KU_DIGITAL_SIGNATURE | MBEDTLS_X509_KU_KEY_CERT_SIGN)"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to use"]
    #[doc = " \\param key_usage key usage flags to set"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_key_usage(
        ctx: *mut mbedtls_x509write_cert,
        key_usage: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Set the Netscape Cert Type flags"]
    #[doc = "                  (e.g. MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT | MBEDTLS_X509_NS_CERT_TYPE_EMAIL)"]
    #[doc = ""]
    #[doc = " \\param ctx           CRT context to use"]
    #[doc = " \\param ns_cert_type  Netscape Cert Type flags to set"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or MBEDTLS_ERR_X509_ALLOC_FAILED"]
    pub fn mbedtls_x509write_crt_set_ns_cert_type(
        ctx: *mut mbedtls_x509write_cert,
        ns_cert_type: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Free the contents of a CRT write context"]
    #[doc = ""]
    #[doc = " \\param ctx       CRT context to free"]
    pub fn mbedtls_x509write_crt_free(ctx: *mut mbedtls_x509write_cert);
}
extern "C" {
    #[doc = " \\brief           Write a built up certificate to a X509 DER structure"]
    #[doc = "                  Note: data is written at the end of the buffer! Use the"]
    #[doc = "                        return value to determine where you should start"]
    #[doc = "                        using the buffer"]
    #[doc = ""]
    #[doc = " \\param ctx       certificate to write away"]
    #[doc = " \\param buf       buffer to write to"]
    #[doc = " \\param size      size of the buffer"]
    #[doc = " \\param f_rng     RNG function (for signature, see note)"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = ""]
    #[doc = " \\return          length of data written if successful, or a specific"]
    #[doc = "                  error code"]
    #[doc = ""]
    #[doc = " \\note            f_rng may be NULL if RSA is used for signature and the"]
    #[doc = "                  signature is made offline (otherwise f_rng is desirable"]
    #[doc = "                  for countermeasures against timing attacks)."]
    #[doc = "                  ECDSA signatures always require a non-NULL f_rng."]
    pub fn mbedtls_x509write_crt_der(
        ctx: *mut mbedtls_x509write_cert,
        buf: *mut c_types::c_uchar,
        size: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Write a built up certificate to a X509 PEM string"]
    #[doc = ""]
    #[doc = " \\param ctx       certificate to write away"]
    #[doc = " \\param buf       buffer to write to"]
    #[doc = " \\param size      size of the buffer"]
    #[doc = " \\param f_rng     RNG function (for signature, see note)"]
    #[doc = " \\param p_rng     RNG parameter"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific error code"]
    #[doc = ""]
    #[doc = " \\note            f_rng may be NULL if RSA is used for signature and the"]
    #[doc = "                  signature is made offline (otherwise f_rng is desirable"]
    #[doc = "                  for countermeasures against timing attacks)."]
    #[doc = "                  ECDSA signatures always require a non-NULL f_rng."]
    pub fn mbedtls_x509write_crt_pem(
        ctx: *mut mbedtls_x509write_cert,
        buf: *mut c_types::c_uchar,
        size: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
#[doc = " \\brief          The DHM context structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_dhm_context {
    #[doc = "<  The size of \\p P in Bytes."]
    pub len: size_t,
    #[doc = "<  The prime modulus."]
    pub P: mbedtls_mpi,
    #[doc = "<  The generator."]
    pub G: mbedtls_mpi,
    #[doc = "<  Our secret value."]
    pub X: mbedtls_mpi,
    #[doc = "<  Our public key = \\c G^X mod \\c P."]
    pub GX: mbedtls_mpi,
    #[doc = "<  The public key of the peer = \\c G^Y mod \\c P."]
    pub GY: mbedtls_mpi,
    #[doc = "<  The shared secret = \\c G^(XY) mod \\c P."]
    pub K: mbedtls_mpi,
    #[doc = "<  The cached value = \\c R^2 mod \\c P."]
    pub RP: mbedtls_mpi,
    #[doc = "<  The blinding value."]
    pub Vi: mbedtls_mpi,
    #[doc = "<  The unblinding value."]
    pub Vf: mbedtls_mpi,
    #[doc = "<  The previous \\c X."]
    pub pX: mbedtls_mpi,
}
impl Default for mbedtls_dhm_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief          This function initializes the DHM context."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to initialize."]
    pub fn mbedtls_dhm_init(ctx: *mut mbedtls_dhm_context);
}
extern "C" {
    #[doc = " \\brief          This function parses the DHM parameters in a"]
    #[doc = "                 TLS ServerKeyExchange handshake message"]
    #[doc = "                 (DHM modulus, generator, and public key)."]
    #[doc = ""]
    #[doc = " \\note           In a TLS handshake, this is the how the client"]
    #[doc = "                 sets up its DHM context from the server's public"]
    #[doc = "                 DHM key material."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to use. This must be initialized."]
    #[doc = " \\param p        On input, *p must be the start of the input buffer."]
    #[doc = "                 On output, *p is updated to point to the end of the data"]
    #[doc = "                 that has been read. On success, this is the first byte"]
    #[doc = "                 past the end of the ServerKeyExchange parameters."]
    #[doc = "                 On error, this is the point at which an error has been"]
    #[doc = "                 detected, which is usually not useful except to debug"]
    #[doc = "                 failures."]
    #[doc = " \\param end      The end of the input buffer."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_read_params(
        ctx: *mut mbedtls_dhm_context,
        p: *mut *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function generates a DHM key pair and exports its"]
    #[doc = "                 public part together with the DHM parameters in the format"]
    #[doc = "                 used in a TLS ServerKeyExchange handshake message."]
    #[doc = ""]
    #[doc = " \\note           This function assumes that the DHM parameters \\c ctx->P"]
    #[doc = "                 and \\c ctx->G have already been properly set. For that, use"]
    #[doc = "                 mbedtls_dhm_set_group() below in conjunction with"]
    #[doc = "                 mbedtls_mpi_read_binary() and mbedtls_mpi_read_string()."]
    #[doc = ""]
    #[doc = " \\note           In a TLS handshake, this is the how the server generates"]
    #[doc = "                 and exports its DHM key material."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to use. This must be initialized"]
    #[doc = "                 and have the DHM parameters set. It may or may not"]
    #[doc = "                 already have imported the peer's public key."]
    #[doc = " \\param x_size   The private key size in Bytes."]
    #[doc = " \\param olen     The address at which to store the number of Bytes"]
    #[doc = "                 written on success. This must not be \\c NULL."]
    #[doc = " \\param output   The destination buffer. This must be a writable buffer of"]
    #[doc = "                 sufficient size to hold the reduced binary presentation of"]
    #[doc = "                 the modulus, the generator and the public key, each wrapped"]
    #[doc = "                 with a 2-byte length field. It is the responsibility of the"]
    #[doc = "                 caller to ensure that enough space is available. Refer to"]
    #[doc = "                 mbedtls_mpi_size() to computing the byte-size of an MPI."]
    #[doc = " \\param f_rng    The RNG function. Must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                 \\c NULL if \\p f_rng doesn't need a context parameter."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_make_params(
        ctx: *mut mbedtls_dhm_context,
        x_size: c_types::c_int,
        output: *mut c_types::c_uchar,
        olen: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function sets the prime modulus and generator."]
    #[doc = ""]
    #[doc = " \\note           This function can be used to set \\c ctx->P, \\c ctx->G"]
    #[doc = "                 in preparation for mbedtls_dhm_make_params()."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to configure. This must be initialized."]
    #[doc = " \\param P        The MPI holding the DHM prime modulus. This must be"]
    #[doc = "                 an initialized MPI."]
    #[doc = " \\param G        The MPI holding the DHM generator. This must be an"]
    #[doc = "                 initialized MPI."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_set_group(
        ctx: *mut mbedtls_dhm_context,
        P: *const mbedtls_mpi,
        G: *const mbedtls_mpi,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function imports the raw public value of the peer."]
    #[doc = ""]
    #[doc = " \\note           In a TLS handshake, this is the how the server imports"]
    #[doc = "                 the Client's public DHM key."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to use. This must be initialized and have"]
    #[doc = "                 its DHM parameters set, e.g. via mbedtls_dhm_set_group()."]
    #[doc = "                 It may or may not already have generated its own private key."]
    #[doc = " \\param input    The input buffer containing the \\c G^Y value of the peer."]
    #[doc = "                 This must be a readable buffer of size \\p ilen Bytes."]
    #[doc = " \\param ilen     The size of the input buffer \\p input in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_read_public(
        ctx: *mut mbedtls_dhm_context,
        input: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function creates a DHM key pair and exports"]
    #[doc = "                 the raw public key in big-endian format."]
    #[doc = ""]
    #[doc = " \\note           The destination buffer is always fully written"]
    #[doc = "                 so as to contain a big-endian representation of G^X mod P."]
    #[doc = "                 If it is larger than \\c ctx->len, it is padded accordingly"]
    #[doc = "                 with zero-bytes at the beginning."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to use. This must be initialized and"]
    #[doc = "                 have the DHM parameters set. It may or may not already"]
    #[doc = "                 have imported the peer's public key."]
    #[doc = " \\param x_size   The private key size in Bytes."]
    #[doc = " \\param output   The destination buffer. This must be a writable buffer of"]
    #[doc = "                 size \\p olen Bytes."]
    #[doc = " \\param olen     The length of the destination buffer. This must be at least"]
    #[doc = "                 equal to `ctx->len` (the size of \\c P)."]
    #[doc = " \\param f_rng    The RNG function. This must not be \\c NULL."]
    #[doc = " \\param p_rng    The RNG context to be passed to \\p f_rng. This may be \\c NULL"]
    #[doc = "                 if \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_make_public(
        ctx: *mut mbedtls_dhm_context,
        x_size: c_types::c_int,
        output: *mut c_types::c_uchar,
        olen: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function derives and exports the shared secret"]
    #[doc = "                 \\c (G^Y)^X mod \\c P."]
    #[doc = ""]
    #[doc = " \\note           If \\p f_rng is not \\c NULL, it is used to blind the input as"]
    #[doc = "                 a countermeasure against timing attacks. Blinding is used"]
    #[doc = "                 only if our private key \\c X is re-used, and not used"]
    #[doc = "                 otherwise. We recommend always passing a non-NULL"]
    #[doc = "                 \\p f_rng argument."]
    #[doc = ""]
    #[doc = " \\param ctx           The DHM context to use. This must be initialized"]
    #[doc = "                      and have its own private key generated and the peer's"]
    #[doc = "                      public key imported."]
    #[doc = " \\param output        The buffer to write the generated shared key to. This"]
    #[doc = "                      must be a writable buffer of size \\p output_size Bytes."]
    #[doc = " \\param output_size   The size of the destination buffer. This must be at"]
    #[doc = "                      least the size of \\c ctx->len (the size of \\c P)."]
    #[doc = " \\param olen          On exit, holds the actual number of Bytes written."]
    #[doc = " \\param f_rng         The RNG function, for blinding purposes. This may"]
    #[doc = "                      b \\c NULL if blinding isn't needed."]
    #[doc = " \\param p_rng         The RNG context. This may be \\c NULL if \\p f_rng"]
    #[doc = "                      doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              An \\c MBEDTLS_ERR_DHM_XXX error code on failure."]
    pub fn mbedtls_dhm_calc_secret(
        ctx: *mut mbedtls_dhm_context,
        output: *mut c_types::c_uchar,
        output_size: size_t,
        olen: *mut size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function frees and clears the components"]
    #[doc = "                 of a DHM context."]
    #[doc = ""]
    #[doc = " \\param ctx      The DHM context to free and clear. This may be \\c NULL,"]
    #[doc = "                 in which case this function is a no-op. If it is not \\c NULL,"]
    #[doc = "                 it must point to an initialized DHM context."]
    pub fn mbedtls_dhm_free(ctx: *mut mbedtls_dhm_context);
}
extern "C" {
    #[doc = " \\brief             This function parses DHM parameters in PEM or DER format."]
    #[doc = ""]
    #[doc = " \\param dhm         The DHM context to import the DHM parameters into."]
    #[doc = "                    This must be initialized."]
    #[doc = " \\param dhmin       The input buffer. This must be a readable buffer of"]
    #[doc = "                    length \\p dhminlen Bytes."]
    #[doc = " \\param dhminlen    The size of the input buffer \\p dhmin, including the"]
    #[doc = "                    terminating \\c NULL Byte for PEM data."]
    #[doc = ""]
    #[doc = " \\return            \\c 0 on success."]
    #[doc = " \\return            An \\c MBEDTLS_ERR_DHM_XXX or \\c MBEDTLS_ERR_PEM_XXX error"]
    #[doc = "                    code on failure."]
    pub fn mbedtls_dhm_parse_dhm(
        dhm: *mut mbedtls_dhm_context,
        dhmin: *const c_types::c_uchar,
        dhminlen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function loads and parses DHM parameters from a file."]
    #[doc = ""]
    #[doc = " \\param dhm      The DHM context to load the parameters to."]
    #[doc = "                 This must be initialized."]
    #[doc = " \\param path     The filename to read the DHM parameters from."]
    #[doc = "                 This must not be \\c NULL."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         An \\c MBEDTLS_ERR_DHM_XXX or \\c MBEDTLS_ERR_PEM_XXX"]
    #[doc = "                 error code on failure."]
    pub fn mbedtls_dhm_parse_dhmfile(
        dhm: *mut mbedtls_dhm_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          The DMH checkup routine."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         \\c 1 on failure."]
    pub fn mbedtls_dhm_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
#[doc = "< Our key."]
pub const mbedtls_ecdh_side_MBEDTLS_ECDH_OURS: mbedtls_ecdh_side = 0;
#[doc = "< The key of the peer."]
pub const mbedtls_ecdh_side_MBEDTLS_ECDH_THEIRS: mbedtls_ecdh_side = 1;
#[doc = " Defines the source of the imported EC key."]
pub type mbedtls_ecdh_side = c_types::c_uint;
#[doc = " \\warning         Performing multiple operations concurrently on the same"]
#[doc = "                  ECDSA context is not supported; objects of this type"]
#[doc = "                  should not be shared between multiple threads."]
#[doc = " \\brief           The ECDH context structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ecdh_context {
    #[doc = "< The elliptic curve used."]
    pub grp: mbedtls_ecp_group,
    #[doc = "< The private key."]
    pub d: mbedtls_mpi,
    #[doc = "< The public key."]
    pub Q: mbedtls_ecp_point,
    #[doc = "< The value of the public key of the peer."]
    pub Qp: mbedtls_ecp_point,
    #[doc = "< The shared secret."]
    pub z: mbedtls_mpi,
    #[doc = "< The format of point export in TLS messages."]
    pub point_format: c_types::c_int,
    #[doc = "< The blinding value."]
    pub Vi: mbedtls_ecp_point,
    #[doc = "< The unblinding value."]
    pub Vf: mbedtls_ecp_point,
    #[doc = "< The previous \\p d."]
    pub _d: mbedtls_mpi,
}
impl Default for mbedtls_ecdh_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief          Check whether a given group can be used for ECDH."]
    #[doc = ""]
    #[doc = " \\param gid      The ECP group ID to check."]
    #[doc = ""]
    #[doc = " \\return         \\c 1 if the group can be used, \\c 0 otherwise"]
    pub fn mbedtls_ecdh_can_do(gid: mbedtls_ecp_group_id) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates an ECDH keypair on an elliptic"]
    #[doc = "                  curve."]
    #[doc = ""]
    #[doc = "                  This function performs the first of two core computations"]
    #[doc = "                  implemented during the ECDH key exchange. The second core"]
    #[doc = "                  computation is performed by mbedtls_ecdh_compute_shared()."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use. This must be initialized and have"]
    #[doc = "                  domain parameters loaded, for example through"]
    #[doc = "                  mbedtls_ecp_load() or mbedtls_ecp_tls_read_group()."]
    #[doc = " \\param d         The destination MPI (private key)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The destination point (public key)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param f_rng     The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL in case \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX or"]
    #[doc = "                  \\c MBEDTLS_MPI_XXX error code on failure."]
    pub fn mbedtls_ecdh_gen_public(
        grp: *mut mbedtls_ecp_group,
        d: *mut mbedtls_mpi,
        Q: *mut mbedtls_ecp_point,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function computes the shared secret."]
    #[doc = ""]
    #[doc = "                  This function performs the second of two core computations"]
    #[doc = "                  implemented during the ECDH key exchange. The first core"]
    #[doc = "                  computation is performed by mbedtls_ecdh_gen_public()."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\note            If \\p f_rng is not NULL, it is used to implement"]
    #[doc = "                  countermeasures against side-channel attacks."]
    #[doc = "                  For more information, see mbedtls_ecp_mul()."]
    #[doc = ""]
    #[doc = " \\param grp       The ECP group to use. This must be initialized and have"]
    #[doc = "                  domain parameters loaded, for example through"]
    #[doc = "                  mbedtls_ecp_load() or mbedtls_ecp_tls_read_group()."]
    #[doc = " \\param z         The destination MPI (shared secret)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param Q         The public key from another party."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param d         Our secret exponent (private key)."]
    #[doc = "                  This must be initialized."]
    #[doc = " \\param f_rng     The RNG function. This may be \\c NULL if randomization"]
    #[doc = "                  of intermediate results during the ECP computations is"]
    #[doc = "                  not needed (discouraged). See the documentation of"]
    #[doc = "                  mbedtls_ecp_mul() for more."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL if \\p f_rng is \\c NULL or doesn't need a"]
    #[doc = "                  context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX or"]
    #[doc = "                  \\c MBEDTLS_MPI_XXX error code on failure."]
    pub fn mbedtls_ecdh_compute_shared(
        grp: *mut mbedtls_ecp_group,
        z: *mut mbedtls_mpi,
        Q: *const mbedtls_ecp_point,
        d: *const mbedtls_mpi,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function initializes an ECDH context."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to initialize. This must not be \\c NULL."]
    pub fn mbedtls_ecdh_init(ctx: *mut mbedtls_ecdh_context);
}
extern "C" {
    #[doc = " \\brief           This function sets up the ECDH context with the information"]
    #[doc = "                  given."]
    #[doc = ""]
    #[doc = "                  This function should be called after mbedtls_ecdh_init() but"]
    #[doc = "                  before mbedtls_ecdh_make_params(). There is no need to call"]
    #[doc = "                  this function before mbedtls_ecdh_read_params()."]
    #[doc = ""]
    #[doc = "                  This is the first function used by a TLS server for ECDHE"]
    #[doc = "                  ciphersuites."]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to set up. This must be initialized."]
    #[doc = " \\param grp_id    The group id of the group to set up the context for."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    pub fn mbedtls_ecdh_setup(
        ctx: *mut mbedtls_ecdh_context,
        grp_id: mbedtls_ecp_group_id,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function frees a context."]
    #[doc = ""]
    #[doc = " \\param ctx       The context to free. This may be \\c NULL, in which"]
    #[doc = "                  case this function does nothing. If it is not \\c NULL,"]
    #[doc = "                  it must point to an initialized ECDH context."]
    pub fn mbedtls_ecdh_free(ctx: *mut mbedtls_ecdh_context);
}
extern "C" {
    #[doc = " \\brief           This function generates an EC key pair and exports its"]
    #[doc = "                  in the format used in a TLS ServerKeyExchange handshake"]
    #[doc = "                  message."]
    #[doc = ""]
    #[doc = "                  This is the second function used by a TLS server for ECDHE"]
    #[doc = "                  ciphersuites. (It is called after mbedtls_ecdh_setup().)"]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to use. This must be initialized"]
    #[doc = "                  and bound to a group, for example via mbedtls_ecdh_setup()."]
    #[doc = " \\param olen      The address at which to store the number of Bytes written."]
    #[doc = " \\param buf       The destination buffer. This must be a writable buffer of"]
    #[doc = "                  length \\p blen Bytes."]
    #[doc = " \\param blen      The length of the destination buffer \\p buf in Bytes."]
    #[doc = " \\param f_rng     The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL in case \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    pub fn mbedtls_ecdh_make_params(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        blen: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function parses the ECDHE parameters in a"]
    #[doc = "                  TLS ServerKeyExchange handshake message."]
    #[doc = ""]
    #[doc = " \\note            In a TLS handshake, this is the how the client"]
    #[doc = "                  sets up its ECDHE context from the server's public"]
    #[doc = "                  ECDHE key material."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDHE context to use. This must be initialized."]
    #[doc = " \\param buf       On input, \\c *buf must be the start of the input buffer."]
    #[doc = "                  On output, \\c *buf is updated to point to the end of the"]
    #[doc = "                  data that has been read. On success, this is the first byte"]
    #[doc = "                  past the end of the ServerKeyExchange parameters."]
    #[doc = "                  On error, this is the point at which an error has been"]
    #[doc = "                  detected, which is usually not useful except to debug"]
    #[doc = "                  failures."]
    #[doc = " \\param end       The end of the input buffer."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          An \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    #[doc = ""]
    pub fn mbedtls_ecdh_read_params(
        ctx: *mut mbedtls_ecdh_context,
        buf: *mut *const c_types::c_uchar,
        end: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function sets up an ECDH context from an EC key."]
    #[doc = ""]
    #[doc = "                  It is used by clients and servers in place of the"]
    #[doc = "                  ServerKeyEchange for static ECDH, and imports ECDH"]
    #[doc = "                  parameters from the EC key information of a certificate."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to set up. This must be initialized."]
    #[doc = " \\param key       The EC key to use. This must be initialized."]
    #[doc = " \\param side      Defines the source of the key. Possible values are:"]
    #[doc = "                  - #MBEDTLS_ECDH_OURS: The key is ours."]
    #[doc = "                  - #MBEDTLS_ECDH_THEIRS: The key is that of the peer."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    #[doc = ""]
    pub fn mbedtls_ecdh_get_params(
        ctx: *mut mbedtls_ecdh_context,
        key: *const mbedtls_ecp_keypair,
        side: mbedtls_ecdh_side,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function generates a public key and exports it"]
    #[doc = "                  as a TLS ClientKeyExchange payload."]
    #[doc = ""]
    #[doc = "                  This is the second function used by a TLS client for ECDH(E)"]
    #[doc = "                  ciphersuites."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to use. This must be initialized"]
    #[doc = "                  and bound to a group, the latter usually by"]
    #[doc = "                  mbedtls_ecdh_read_params()."]
    #[doc = " \\param olen      The address at which to store the number of Bytes written."]
    #[doc = "                  This must not be \\c NULL."]
    #[doc = " \\param buf       The destination buffer. This must be a writable buffer"]
    #[doc = "                  of length \\p blen Bytes."]
    #[doc = " \\param blen      The size of the destination buffer \\p buf in Bytes."]
    #[doc = " \\param f_rng     The RNG function to use. This must not be \\c NULL."]
    #[doc = " \\param p_rng     The RNG context to be passed to \\p f_rng. This may be"]
    #[doc = "                  \\c NULL in case \\p f_rng doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    pub fn mbedtls_ecdh_make_public(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        blen: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       This function parses and processes the ECDHE payload of a"]
    #[doc = "              TLS ClientKeyExchange message."]
    #[doc = ""]
    #[doc = "              This is the third function used by a TLS server for ECDH(E)"]
    #[doc = "              ciphersuites. (It is called after mbedtls_ecdh_setup() and"]
    #[doc = "              mbedtls_ecdh_make_params().)"]
    #[doc = ""]
    #[doc = " \\see         ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx   The ECDH context to use. This must be initialized"]
    #[doc = "              and bound to a group, for example via mbedtls_ecdh_setup()."]
    #[doc = " \\param buf   The pointer to the ClientKeyExchange payload. This must"]
    #[doc = "              be a readable buffer of length \\p blen Bytes."]
    #[doc = " \\param blen  The length of the input buffer \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\return      \\c 0 on success."]
    #[doc = " \\return      An \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    pub fn mbedtls_ecdh_read_public(
        ctx: *mut mbedtls_ecdh_context,
        buf: *const c_types::c_uchar,
        blen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           This function derives and exports the shared secret."]
    #[doc = ""]
    #[doc = "                  This is the last function used by both TLS client"]
    #[doc = "                  and servers."]
    #[doc = ""]
    #[doc = " \\note            If \\p f_rng is not NULL, it is used to implement"]
    #[doc = "                  countermeasures against side-channel attacks."]
    #[doc = "                  For more information, see mbedtls_ecp_mul()."]
    #[doc = ""]
    #[doc = " \\see             ecp.h"]
    #[doc = ""]
    #[doc = " \\param ctx       The ECDH context to use. This must be initialized"]
    #[doc = "                  and have its own private key generated and the peer's"]
    #[doc = "                  public key imported."]
    #[doc = " \\param olen      The address at which to store the total number of"]
    #[doc = "                  Bytes written on success. This must not be \\c NULL."]
    #[doc = " \\param buf       The buffer to write the generated shared key to. This"]
    #[doc = "                  must be a writable buffer of size \\p blen Bytes."]
    #[doc = " \\param blen      The length of the destination buffer \\p buf in Bytes."]
    #[doc = " \\param f_rng     The RNG function, for blinding purposes. This may"]
    #[doc = "                  b \\c NULL if blinding isn't needed."]
    #[doc = " \\param p_rng     The RNG context. This may be \\c NULL if \\p f_rng"]
    #[doc = "                  doesn't need a context argument."]
    #[doc = ""]
    #[doc = " \\return          \\c 0 on success."]
    #[doc = " \\return          #MBEDTLS_ERR_ECP_IN_PROGRESS if maximum number of"]
    #[doc = "                  operations was reached: see \\c mbedtls_ecp_set_max_ops()."]
    #[doc = " \\return          Another \\c MBEDTLS_ERR_ECP_XXX error code on failure."]
    pub fn mbedtls_ecdh_calc_secret(
        ctx: *mut mbedtls_ecdh_context,
        olen: *mut size_t,
        buf: *mut c_types::c_uchar,
        blen: size_t,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    ) -> c_types::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mbedtls_ssl_premaster_secret {
    pub _pms_rsa: [c_types::c_uchar; 48usize],
    pub _pms_dhm: [c_types::c_uchar; 1024usize],
    pub _pms_ecdh: [c_types::c_uchar; 66usize],
}
impl Default for mbedtls_ssl_premaster_secret {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const mbedtls_ssl_states_MBEDTLS_SSL_HELLO_REQUEST: mbedtls_ssl_states = 0;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CLIENT_HELLO: mbedtls_ssl_states = 1;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_HELLO: mbedtls_ssl_states = 2;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_CERTIFICATE: mbedtls_ssl_states = 3;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_KEY_EXCHANGE: mbedtls_ssl_states = 4;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CERTIFICATE_REQUEST: mbedtls_ssl_states = 5;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_HELLO_DONE: mbedtls_ssl_states = 6;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CLIENT_CERTIFICATE: mbedtls_ssl_states = 7;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CLIENT_KEY_EXCHANGE: mbedtls_ssl_states = 8;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CERTIFICATE_VERIFY: mbedtls_ssl_states = 9;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC: mbedtls_ssl_states = 10;
pub const mbedtls_ssl_states_MBEDTLS_SSL_CLIENT_FINISHED: mbedtls_ssl_states = 11;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC: mbedtls_ssl_states = 12;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_FINISHED: mbedtls_ssl_states = 13;
pub const mbedtls_ssl_states_MBEDTLS_SSL_FLUSH_BUFFERS: mbedtls_ssl_states = 14;
pub const mbedtls_ssl_states_MBEDTLS_SSL_HANDSHAKE_WRAPUP: mbedtls_ssl_states = 15;
pub const mbedtls_ssl_states_MBEDTLS_SSL_HANDSHAKE_OVER: mbedtls_ssl_states = 16;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET: mbedtls_ssl_states = 17;
pub const mbedtls_ssl_states_MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT: mbedtls_ssl_states = 18;
pub type mbedtls_ssl_states = c_types::c_uint;
pub const mbedtls_tls_prf_types_MBEDTLS_SSL_TLS_PRF_NONE: mbedtls_tls_prf_types = 0;
pub const mbedtls_tls_prf_types_MBEDTLS_SSL_TLS_PRF_SSL3: mbedtls_tls_prf_types = 1;
pub const mbedtls_tls_prf_types_MBEDTLS_SSL_TLS_PRF_TLS1: mbedtls_tls_prf_types = 2;
pub const mbedtls_tls_prf_types_MBEDTLS_SSL_TLS_PRF_SHA384: mbedtls_tls_prf_types = 3;
pub const mbedtls_tls_prf_types_MBEDTLS_SSL_TLS_PRF_SHA256: mbedtls_tls_prf_types = 4;
pub type mbedtls_tls_prf_types = c_types::c_uint;
#[doc = " \\brief          Callback type: send data on the network."]
#[doc = ""]
#[doc = " \\note           That callback may be either blocking or non-blocking."]
#[doc = ""]
#[doc = " \\param ctx      Context for the send callback (typically a file descriptor)"]
#[doc = " \\param buf      Buffer holding the data to send"]
#[doc = " \\param len      Length of the data to send"]
#[doc = ""]
#[doc = " \\return         The callback must return the number of bytes sent if any,"]
#[doc = "                 or a non-zero error code."]
#[doc = "                 If performing non-blocking I/O, \\c MBEDTLS_ERR_SSL_WANT_WRITE"]
#[doc = "                 must be returned when the operation would block."]
#[doc = ""]
#[doc = " \\note           The callback is allowed to send fewer bytes than requested."]
#[doc = "                 It must always return the number of bytes actually sent."]
pub type mbedtls_ssl_send_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        buf: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int,
>;
#[doc = " \\brief          Callback type: receive data from the network."]
#[doc = ""]
#[doc = " \\note           That callback may be either blocking or non-blocking."]
#[doc = ""]
#[doc = " \\param ctx      Context for the receive callback (typically a file"]
#[doc = "                 descriptor)"]
#[doc = " \\param buf      Buffer to write the received data to"]
#[doc = " \\param len      Length of the receive buffer"]
#[doc = ""]
#[doc = " \\returns        If data has been received, the positive number of bytes received."]
#[doc = " \\returns        \\c 0 if the connection has been closed."]
#[doc = " \\returns        If performing non-blocking I/O, \\c MBEDTLS_ERR_SSL_WANT_READ"]
#[doc = "                 must be returned when the operation would block."]
#[doc = " \\returns        Another negative error code on other kinds of failures."]
#[doc = ""]
#[doc = " \\note           The callback may receive fewer bytes than the length of the"]
#[doc = "                 buffer. It must always return the number of bytes actually"]
#[doc = "                 received and written to the buffer."]
pub type mbedtls_ssl_recv_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        buf: *mut c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int,
>;
#[doc = " \\brief          Callback type: receive data from the network, with timeout"]
#[doc = ""]
#[doc = " \\note           That callback must block until data is received, or the"]
#[doc = "                 timeout delay expires, or the operation is interrupted by a"]
#[doc = "                 signal."]
#[doc = ""]
#[doc = " \\param ctx      Context for the receive callback (typically a file descriptor)"]
#[doc = " \\param buf      Buffer to write the received data to"]
#[doc = " \\param len      Length of the receive buffer"]
#[doc = " \\param timeout  Maximum nomber of millisecondes to wait for data"]
#[doc = "                 0 means no timeout (potentially waiting forever)"]
#[doc = ""]
#[doc = " \\return         The callback must return the number of bytes received,"]
#[doc = "                 or a non-zero error code:"]
#[doc = "                 \\c MBEDTLS_ERR_SSL_TIMEOUT if the operation timed out,"]
#[doc = "                 \\c MBEDTLS_ERR_SSL_WANT_READ if interrupted by a signal."]
#[doc = ""]
#[doc = " \\note           The callback may receive fewer bytes than the length of the"]
#[doc = "                 buffer. It must always return the number of bytes actually"]
#[doc = "                 received and written to the buffer."]
pub type mbedtls_ssl_recv_timeout_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        buf: *mut c_types::c_uchar,
        len: size_t,
        timeout: u32,
    ) -> c_types::c_int,
>;
#[doc = " \\brief          Callback type: set a pair of timers/delays to watch"]
#[doc = ""]
#[doc = " \\param ctx      Context pointer"]
#[doc = " \\param int_ms   Intermediate delay in milliseconds"]
#[doc = " \\param fin_ms   Final delay in milliseconds"]
#[doc = "                 0 cancels the current timer."]
#[doc = ""]
#[doc = " \\note           This callback must at least store the necessary information"]
#[doc = "                 for the associated \\c mbedtls_ssl_get_timer_t callback to"]
#[doc = "                 return correct information."]
#[doc = ""]
#[doc = " \\note           If using a event-driven style of programming, an event must"]
#[doc = "                 be generated when the final delay is passed. The event must"]
#[doc = "                 cause a call to \\c mbedtls_ssl_handshake() with the proper"]
#[doc = "                 SSL context to be scheduled. Care must be taken to ensure"]
#[doc = "                 that at most one such call happens at a time."]
#[doc = ""]
#[doc = " \\note           Only one timer at a time must be running. Calling this"]
#[doc = "                 function while a timer is running must cancel it. Cancelled"]
#[doc = "                 timers must not generate any event."]
pub type mbedtls_ssl_set_timer_t = ::core::option::Option<
    unsafe extern "C" fn(ctx: *mut c_types::c_void, int_ms: u32, fin_ms: u32),
>;
#[doc = " \\brief          Callback type: get status of timers/delays"]
#[doc = ""]
#[doc = " \\param ctx      Context pointer"]
#[doc = ""]
#[doc = " \\return         This callback must return:"]
#[doc = "                 -1 if cancelled (fin_ms == 0),"]
#[doc = "                  0 if none of the delays have passed,"]
#[doc = "                  1 if only the intermediate delay has passed,"]
#[doc = "                  2 if the final delay has passed."]
pub type mbedtls_ssl_get_timer_t =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut c_types::c_void) -> c_types::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_transform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_handshake_params {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_sig_hash_set_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_key_cert {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_session {
    #[doc = "< MaxFragmentLength negotiated by peer"]
    pub mfl_code: c_types::c_uchar,
    #[doc = "< starting time"]
    pub start: mbedtls_time_t,
    #[doc = "< chosen ciphersuite"]
    pub ciphersuite: c_types::c_int,
    #[doc = "< chosen compression"]
    pub compression: c_types::c_int,
    #[doc = "< session id length"]
    pub id_len: size_t,
    #[doc = "< session identifier"]
    pub id: [c_types::c_uchar; 32usize],
    #[doc = "< the master secret"]
    pub master: [c_types::c_uchar; 48usize],
    #[doc = "< peer X.509 cert chain"]
    pub peer_cert: *mut mbedtls_x509_crt,
    #[doc = "<  verification result"]
    pub verify_result: u32,
    #[doc = "< RFC 5077 session ticket"]
    pub ticket: *mut c_types::c_uchar,
    #[doc = "< session ticket length"]
    pub ticket_len: size_t,
    #[doc = "< ticket lifetime hint"]
    pub ticket_lifetime: u32,
    #[doc = "< flag for truncated hmac activation"]
    pub trunc_hmac: c_types::c_int,
    #[doc = "< flag for EtM activation"]
    pub encrypt_then_mac: c_types::c_int,
}
impl Default for mbedtls_ssl_session {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " SSL/TLS configuration to be shared between mbedtls_ssl_context structures."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_config {
    #[doc = "< max. major version used"]
    pub max_major_ver: c_types::c_uchar,
    #[doc = "< max. minor version used"]
    pub max_minor_ver: c_types::c_uchar,
    #[doc = "< min. major version used"]
    pub min_major_ver: c_types::c_uchar,
    #[doc = "< min. minor version used"]
    pub min_minor_ver: c_types::c_uchar,
    #[doc = "< 0: client, 1: server"]
    pub endpoint: u8,
    #[doc = "< stream (TLS) or datagram (DTLS)"]
    pub transport: u8,
    #[doc = "< MBEDTLS_SSL_VERIFY_XXX"]
    pub authmode: u8,
    #[doc = "< MBEDTLS_LEGACY_XXX"]
    pub allow_legacy_renegotiation: u8,
    #[doc = "< desired fragment length"]
    pub mfl_code: u8,
    #[doc = "< negotiate encrypt-then-mac?"]
    pub encrypt_then_mac: u8,
    #[doc = "< negotiate extended master secret?"]
    pub extended_ms: u8,
    #[doc = "< do cbc record splitting"]
    pub cbc_record_splitting: u8,
    #[doc = "< disable renegotiation?"]
    pub disable_renegotiation: u8,
    #[doc = "< negotiate truncated hmac?"]
    pub trunc_hmac: u8,
    #[doc = "< use session tickets?"]
    pub session_tickets: u8,
    #[doc = "< is this a fallback?"]
    pub fallback: u8,
    #[doc = "< enable sending CA list in"]
    #[doc = "Certificate Request messages?"]
    pub cert_req_ca_list: u8,
    #[doc = "< timeout for mbedtls_ssl_read (ms)"]
    pub read_timeout: u32,
    #[doc = "< grace period for renegotiation"]
    pub renego_max_records: c_types::c_int,
    #[doc = "< value of the record counters"]
    #[doc = "that triggers renegotiation"]
    pub renego_period: [c_types::c_uchar; 8usize],
    #[doc = "< min. bit length of the DHM prime"]
    pub dhm_min_bitlen: c_types::c_uint,
    #[doc = "< allowed ciphersuites per version"]
    pub ciphersuite_list: [*const c_types::c_int; 4usize],
    #[doc = " Callback for printing debug output"]
    pub f_dbg: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: c_types::c_int,
            arg3: *const c_types::c_char,
            arg4: c_types::c_int,
            arg5: *const c_types::c_char,
        ),
    >,
    #[doc = "< context for the debug function"]
    pub p_dbg: *mut c_types::c_void,
    #[doc = " Callback for getting (pseudo-)random numbers"]
    pub f_rng: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut c_types::c_uchar,
            arg3: size_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for the RNG function"]
    pub p_rng: *mut c_types::c_void,
    #[doc = " Callback to retrieve a session from the cache"]
    pub f_get_cache: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut mbedtls_ssl_session,
        ) -> c_types::c_int,
    >,
    #[doc = " Callback to store a session into the cache"]
    pub f_set_cache: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *const mbedtls_ssl_session,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for cache callbacks"]
    pub p_cache: *mut c_types::c_void,
    #[doc = " Callback for setting cert according to SNI extension"]
    pub f_sni: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut mbedtls_ssl_context,
            arg3: *const c_types::c_uchar,
            arg4: size_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for SNI callback"]
    pub p_sni: *mut c_types::c_void,
    #[doc = " Callback to customize X.509 certificate chain verification"]
    pub f_vrfy: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut mbedtls_x509_crt,
            arg3: c_types::c_int,
            arg4: *mut u32,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for X.509 verify calllback"]
    pub p_vrfy: *mut c_types::c_void,
    #[doc = " Callback to create & write a session ticket"]
    pub f_ticket_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *const mbedtls_ssl_session,
            arg3: *mut c_types::c_uchar,
            arg4: *const c_types::c_uchar,
            arg5: *mut size_t,
            arg6: *mut u32,
        ) -> c_types::c_int,
    >,
    #[doc = " Callback to parse a session ticket into a session structure"]
    pub f_ticket_parse: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut mbedtls_ssl_session,
            arg3: *mut c_types::c_uchar,
            arg4: size_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for the ticket callbacks"]
    pub p_ticket: *mut c_types::c_void,
    #[doc = " Callback to export key block and master secret"]
    pub f_export_keys: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *const c_types::c_uchar,
            arg3: *const c_types::c_uchar,
            arg4: size_t,
            arg5: size_t,
            arg6: size_t,
        ) -> c_types::c_int,
    >,
    #[doc = " Callback to export key block, master secret,"]
    #[doc = "  tls_prf and random bytes. Should replace f_export_keys"]
    pub f_export_keys_ext: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *const c_types::c_uchar,
            arg3: *const c_types::c_uchar,
            arg4: size_t,
            arg5: size_t,
            arg6: size_t,
            arg7: *const c_types::c_uchar,
            arg8: *const c_types::c_uchar,
            arg9: mbedtls_tls_prf_types,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for key export callback"]
    pub p_export_keys: *mut c_types::c_void,
    #[doc = "< verification profile"]
    pub cert_profile: *const mbedtls_x509_crt_profile,
    #[doc = "< own certificate/key pair(s)"]
    pub key_cert: *mut mbedtls_ssl_key_cert,
    #[doc = "< trusted CAs"]
    pub ca_chain: *mut mbedtls_x509_crt,
    #[doc = "< trusted CAs CRLs"]
    pub ca_crl: *mut mbedtls_x509_crl,
    #[doc = "< allowed signature hashes"]
    pub sig_hashes: *const c_types::c_int,
    #[doc = "< allowed curves"]
    pub curve_list: *const mbedtls_ecp_group_id,
    #[doc = "< prime modulus for DHM"]
    pub dhm_P: mbedtls_mpi,
    #[doc = "< generator for DHM"]
    pub dhm_G: mbedtls_mpi,
    #[doc = "< ordered list of protocols"]
    pub alpn_list: *mut *const c_types::c_char,
}
impl Default for mbedtls_ssl_config {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ssl_context {
    #[doc = "< configuration information"]
    pub conf: *const mbedtls_ssl_config,
    #[doc = "< SSL handshake: current state"]
    pub state: c_types::c_int,
    #[doc = "< Initial, in progress, pending?"]
    pub renego_status: c_types::c_int,
    #[doc = "< Records since renego request, or with DTLS,"]
    #[doc = "number of retransmissions of request if"]
    #[doc = "renego_max_records is < 0"]
    pub renego_records_seen: c_types::c_int,
    #[doc = "< equal to  MBEDTLS_SSL_MAJOR_VERSION_3"]
    pub major_ver: c_types::c_int,
    #[doc = "< either 0 (SSL3) or 1 (TLS1.0)"]
    pub minor_ver: c_types::c_int,
    #[doc = " Callback to customize X.509 certificate chain verification"]
    pub f_vrfy: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut mbedtls_x509_crt,
            arg3: c_types::c_int,
            arg4: *mut u32,
        ) -> c_types::c_int,
    >,
    #[doc = "< context for X.509 verify callback"]
    pub p_vrfy: *mut c_types::c_void,
    #[doc = "< Callback for network send"]
    pub f_send: mbedtls_ssl_send_t,
    #[doc = "< Callback for network receive"]
    pub f_recv: mbedtls_ssl_recv_t,
    pub f_recv_timeout: mbedtls_ssl_recv_timeout_t,
    #[doc = "< context for I/O operations"]
    pub p_bio: *mut c_types::c_void,
    #[doc = "<  current session data (in)"]
    pub session_in: *mut mbedtls_ssl_session,
    #[doc = "<  current session data (out)"]
    pub session_out: *mut mbedtls_ssl_session,
    #[doc = "<  negotiated session data"]
    pub session: *mut mbedtls_ssl_session,
    #[doc = "<  session data in negotiation"]
    pub session_negotiate: *mut mbedtls_ssl_session,
    #[doc = "<  params required only during"]
    #[doc = "the handshake process"]
    pub handshake: *mut mbedtls_ssl_handshake_params,
    #[doc = "<  current transform params (in)"]
    pub transform_in: *mut mbedtls_ssl_transform,
    #[doc = "<  current transform params (in)"]
    pub transform_out: *mut mbedtls_ssl_transform,
    #[doc = "<  negotiated transform params"]
    pub transform: *mut mbedtls_ssl_transform,
    #[doc = "<  transform params in negotiation"]
    pub transform_negotiate: *mut mbedtls_ssl_transform,
    #[doc = "< context for the timer callbacks"]
    pub p_timer: *mut c_types::c_void,
    #[doc = "< set timer callback"]
    pub f_set_timer: mbedtls_ssl_set_timer_t,
    #[doc = "< get timer callback"]
    pub f_get_timer: mbedtls_ssl_get_timer_t,
    #[doc = "< input buffer"]
    pub in_buf: *mut c_types::c_uchar,
    #[doc = "< 64-bit incoming message counter"]
    #[doc = "TLS: maintained by us"]
    #[doc = "DTLS: read from peer"]
    pub in_ctr: *mut c_types::c_uchar,
    #[doc = "< start of record header"]
    pub in_hdr: *mut c_types::c_uchar,
    #[doc = "< two-bytes message length field"]
    pub in_len: *mut c_types::c_uchar,
    #[doc = "< ivlen-byte IV"]
    pub in_iv: *mut c_types::c_uchar,
    #[doc = "< message contents (in_iv+ivlen)"]
    pub in_msg: *mut c_types::c_uchar,
    #[doc = "< read offset in application data"]
    pub in_offt: *mut c_types::c_uchar,
    #[doc = "< record header: message type"]
    pub in_msgtype: c_types::c_int,
    #[doc = "< record header: message length"]
    pub in_msglen: size_t,
    #[doc = "< amount of data read so far"]
    pub in_left: size_t,
    #[doc = "< current handshake message length,"]
    #[doc = "including the handshake header"]
    pub in_hslen: size_t,
    #[doc = "< # of 0-length encrypted messages"]
    pub nb_zero: c_types::c_int,
    #[doc = "< drop or reuse current message"]
    #[doc = "on next call to record layer?"]
    pub keep_current_message: c_types::c_int,
    #[doc = "< output buffer"]
    pub out_buf: *mut c_types::c_uchar,
    #[doc = "< 64-bit outgoing message counter"]
    pub out_ctr: *mut c_types::c_uchar,
    #[doc = "< start of record header"]
    pub out_hdr: *mut c_types::c_uchar,
    #[doc = "< two-bytes message length field"]
    pub out_len: *mut c_types::c_uchar,
    #[doc = "< ivlen-byte IV"]
    pub out_iv: *mut c_types::c_uchar,
    #[doc = "< message contents (out_iv+ivlen)"]
    pub out_msg: *mut c_types::c_uchar,
    #[doc = "< record header: message type"]
    pub out_msgtype: c_types::c_int,
    #[doc = "< record header: message length"]
    pub out_msglen: size_t,
    #[doc = "< amount of data not yet written"]
    pub out_left: size_t,
    #[doc = "<  Outgoing record sequence  number."]
    pub cur_out_ctr: [c_types::c_uchar; 8usize],
    #[doc = "< current record already splitted?"]
    pub split_done: c_types::c_schar,
    #[doc = "<  flag for client auth."]
    pub client_auth: c_types::c_int,
    #[doc = "< expected peer CN for verification"]
    #[doc = "(and SNI if available)"]
    pub hostname: *mut c_types::c_char,
    #[doc = "<  negotiated protocol"]
    pub alpn_chosen: *const c_types::c_char,
    #[doc = "<  does peer support legacy or"]
    #[doc = "secure renegotiation"]
    pub secure_renegotiation: c_types::c_int,
    #[doc = "<  length of verify data stored"]
    pub verify_data_len: size_t,
    #[doc = "<  previous handshake verify data"]
    pub own_verify_data: [c_types::c_char; 12usize],
    #[doc = "<  previous handshake verify data"]
    pub peer_verify_data: [c_types::c_char; 12usize],
}
impl Default for mbedtls_ssl_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief               Return the name of the ciphersuite associated with the"]
    #[doc = "                      given ID"]
    #[doc = ""]
    #[doc = " \\param ciphersuite_id SSL ciphersuite ID"]
    #[doc = ""]
    #[doc = " \\return              a string containing the ciphersuite name"]
    pub fn mbedtls_ssl_get_ciphersuite_name(
        ciphersuite_id: c_types::c_int,
    ) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief               Return the ID of the ciphersuite associated with the"]
    #[doc = "                      given name"]
    #[doc = ""]
    #[doc = " \\param ciphersuite_name SSL ciphersuite name"]
    #[doc = ""]
    #[doc = " \\return              the ID with the ciphersuite or 0 if not found"]
    pub fn mbedtls_ssl_get_ciphersuite_id(
        ciphersuite_name: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Initialize an SSL context"]
    #[doc = "                 Just makes the context ready for mbedtls_ssl_setup() or"]
    #[doc = "                 mbedtls_ssl_free()"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    pub fn mbedtls_ssl_init(ssl: *mut mbedtls_ssl_context);
}
extern "C" {
    #[doc = " \\brief          Set up an SSL context for use"]
    #[doc = ""]
    #[doc = " \\note           No copy of the configuration context is made, it can be"]
    #[doc = "                 shared by many mbedtls_ssl_context structures."]
    #[doc = ""]
    #[doc = " \\warning        The conf structure will be accessed during the session."]
    #[doc = "                 It must not be modified or freed as long as the session"]
    #[doc = "                 is active."]
    #[doc = ""]
    #[doc = " \\warning        This function must be called exactly once per context."]
    #[doc = "                 Calling mbedtls_ssl_setup again is not supported, even"]
    #[doc = "                 if no session is active."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param conf     SSL configuration to use"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED if"]
    #[doc = "                 memory allocation failed"]
    pub fn mbedtls_ssl_setup(
        ssl: *mut mbedtls_ssl_context,
        conf: *const mbedtls_ssl_config,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Reset an already initialized SSL context for re-use"]
    #[doc = "                 while retaining application-set variables, function"]
    #[doc = "                 pointers and data."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\return         0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED,"]
    #[doc = "MBEDTLS_ERR_SSL_HW_ACCEL_FAILED or"]
    #[doc = "                 MBEDTLS_ERR_SSL_COMPRESSION_FAILED"]
    pub fn mbedtls_ssl_session_reset(ssl: *mut mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the current endpoint type"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param endpoint must be MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER"]
    pub fn mbedtls_ssl_conf_endpoint(conf: *mut mbedtls_ssl_config, endpoint: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief           Set the transport type (TLS or DTLS)."]
    #[doc = "                  Default: TLS"]
    #[doc = ""]
    #[doc = " \\note            For DTLS, you must either provide a recv callback that"]
    #[doc = "                  doesn't block, or one that handles timeouts, see"]
    #[doc = "                  \\c mbedtls_ssl_set_bio(). You also need to provide timer"]
    #[doc = "                  callbacks with \\c mbedtls_ssl_set_timer_cb()."]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration"]
    #[doc = " \\param transport transport type:"]
    #[doc = "                  MBEDTLS_SSL_TRANSPORT_STREAM for TLS,"]
    #[doc = "                  MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS."]
    pub fn mbedtls_ssl_conf_transport(conf: *mut mbedtls_ssl_config, transport: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief          Set the certificate verification mode"]
    #[doc = "                 Default: NONE on server, REQUIRED on client"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param authmode can be:"]
    #[doc = ""]
    #[doc = "  MBEDTLS_SSL_VERIFY_NONE:      peer certificate is not checked"]
    #[doc = "                        (default on server)"]
    #[doc = "                        (insecure on client)"]
    #[doc = ""]
    #[doc = "  MBEDTLS_SSL_VERIFY_OPTIONAL:  peer certificate is checked, however the"]
    #[doc = "                        handshake continues even if verification failed;"]
    #[doc = "                        mbedtls_ssl_get_verify_result() can be called after the"]
    #[doc = "                        handshake is complete."]
    #[doc = ""]
    #[doc = "  MBEDTLS_SSL_VERIFY_REQUIRED:  peer *must* present a valid certificate,"]
    #[doc = "                        handshake is aborted if verification failed."]
    #[doc = "                        (default on client)"]
    #[doc = ""]
    #[doc = " \\note On client, MBEDTLS_SSL_VERIFY_REQUIRED is the recommended mode."]
    #[doc = " With MBEDTLS_SSL_VERIFY_OPTIONAL, the user needs to call mbedtls_ssl_get_verify_result() at"]
    #[doc = " the right time(s), which may not be obvious, while REQUIRED always perform"]
    #[doc = " the verification as soon as possible. For example, REQUIRED was protecting"]
    #[doc = " against the \"triple handshake\" attack even before it was found."]
    pub fn mbedtls_ssl_conf_authmode(conf: *mut mbedtls_ssl_config, authmode: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief          Set the verification callback (Optional)."]
    #[doc = ""]
    #[doc = "                 If set, the provided verify callback is called for each"]
    #[doc = "                 certificate in the peer's CRT chain, including the trusted"]
    #[doc = "                 root. For more information, please see the documentation of"]
    #[doc = "                 \\c mbedtls_x509_crt_verify()."]
    #[doc = ""]
    #[doc = " \\note           For per context callbacks and contexts, please use"]
    #[doc = "                 mbedtls_ssl_set_verify() instead."]
    #[doc = ""]
    #[doc = " \\param conf     The SSL configuration to use."]
    #[doc = " \\param f_vrfy   The verification callback to use during CRT verification."]
    #[doc = " \\param p_vrfy   The opaque context to be passed to the callback."]
    pub fn mbedtls_ssl_conf_verify(
        conf: *mut mbedtls_ssl_config,
        f_vrfy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_x509_crt,
                arg3: c_types::c_int,
                arg4: *mut u32,
            ) -> c_types::c_int,
        >,
        p_vrfy: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief          Set the random number generator callback"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param f_rng    RNG function"]
    #[doc = " \\param p_rng    RNG parameter"]
    pub fn mbedtls_ssl_conf_rng(
        conf: *mut mbedtls_ssl_config,
        f_rng: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_rng: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief          Set the debug callback"]
    #[doc = ""]
    #[doc = "                 The callback has the following argument:"]
    #[doc = "                 void *           opaque context for the callback"]
    #[doc = "                 int              debug level"]
    #[doc = "                 const char *     file name"]
    #[doc = "                 int              line number"]
    #[doc = "                 const char *     message"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param f_dbg    debug function"]
    #[doc = " \\param p_dbg    debug parameter"]
    pub fn mbedtls_ssl_conf_dbg(
        conf: *mut mbedtls_ssl_config,
        f_dbg: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: c_types::c_int,
                arg3: *const c_types::c_char,
                arg4: c_types::c_int,
                arg5: *const c_types::c_char,
            ),
        >,
        p_dbg: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief          Set the underlying BIO callbacks for write, read and"]
    #[doc = "                 read-with-timeout."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param p_bio    parameter (context) shared by BIO callbacks"]
    #[doc = " \\param f_send   write callback"]
    #[doc = " \\param f_recv   read callback"]
    #[doc = " \\param f_recv_timeout blocking read callback with timeout."]
    #[doc = ""]
    #[doc = " \\note           One of f_recv or f_recv_timeout can be NULL, in which case"]
    #[doc = "                 the other is used. If both are non-NULL, f_recv_timeout is"]
    #[doc = "                 used and f_recv is ignored (as if it were NULL)."]
    #[doc = ""]
    #[doc = " \\note           The two most common use cases are:"]
    #[doc = "                 - non-blocking I/O, f_recv != NULL, f_recv_timeout == NULL"]
    #[doc = "                 - blocking I/O, f_recv == NULL, f_recv_timout != NULL"]
    #[doc = ""]
    #[doc = " \\note           For DTLS, you need to provide either a non-NULL"]
    #[doc = "                 f_recv_timeout callback, or a f_recv that doesn't block."]
    #[doc = ""]
    #[doc = " \\note           See the documentations of \\c mbedtls_ssl_send_t,"]
    #[doc = "                 \\c mbedtls_ssl_recv_t and \\c mbedtls_ssl_recv_timeout_t for"]
    #[doc = "                 the conventions those callbacks must follow."]
    #[doc = ""]
    #[doc = " \\note           On some platforms, net_sockets.c provides"]
    #[doc = "                 \\c mbedtls_net_send(), \\c mbedtls_net_recv() and"]
    #[doc = "                 \\c mbedtls_net_recv_timeout() that are suitable to be used"]
    #[doc = "                 here."]
    pub fn mbedtls_ssl_set_bio(
        ssl: *mut mbedtls_ssl_context,
        p_bio: *mut c_types::c_void,
        f_send: mbedtls_ssl_send_t,
        f_recv: mbedtls_ssl_recv_t,
        f_recv_timeout: mbedtls_ssl_recv_timeout_t,
    );
}
extern "C" {
    #[doc = " \\brief          Set a connection-specific verification callback (optional)."]
    #[doc = ""]
    #[doc = "                 If set, the provided verify callback is called for each"]
    #[doc = "                 certificate in the peer's CRT chain, including the trusted"]
    #[doc = "                 root. For more information, please see the documentation of"]
    #[doc = "                 \\c mbedtls_x509_crt_verify()."]
    #[doc = ""]
    #[doc = " \\note           This call is analogous to mbedtls_ssl_conf_verify() but"]
    #[doc = "                 binds the verification callback and context to an SSL context"]
    #[doc = "                 as opposed to an SSL configuration."]
    #[doc = "                 If mbedtls_ssl_conf_verify() and mbedtls_ssl_set_verify()"]
    #[doc = "                 are both used, mbedtls_ssl_set_verify() takes precedence."]
    #[doc = ""]
    #[doc = " \\param ssl      The SSL context to use."]
    #[doc = " \\param f_vrfy   The verification callback to use during CRT verification."]
    #[doc = " \\param p_vrfy   The opaque context to be passed to the callback."]
    pub fn mbedtls_ssl_set_verify(
        ssl: *mut mbedtls_ssl_context,
        f_vrfy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_x509_crt,
                arg3: c_types::c_int,
                arg4: *mut u32,
            ) -> c_types::c_int,
        >,
        p_vrfy: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief          Set the timeout period for mbedtls_ssl_read()"]
    #[doc = "                 (Default: no timeout.)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration context"]
    #[doc = " \\param timeout  Timeout value in milliseconds."]
    #[doc = "                 Use 0 for no timeout (default)."]
    #[doc = ""]
    #[doc = " \\note           With blocking I/O, this will only work if a non-NULL"]
    #[doc = "                 \\c f_recv_timeout was set with \\c mbedtls_ssl_set_bio()."]
    #[doc = "                 With non-blocking I/O, this will only work if timer"]
    #[doc = "                 callbacks were set with \\c mbedtls_ssl_set_timer_cb()."]
    #[doc = ""]
    #[doc = " \\note           With non-blocking I/O, you may also skip this function"]
    #[doc = "                 altogether and handle timeouts at the application layer."]
    pub fn mbedtls_ssl_conf_read_timeout(conf: *mut mbedtls_ssl_config, timeout: u32);
}
extern "C" {
    #[doc = " \\brief          Check whether a buffer contains a valid and authentic record"]
    #[doc = "                 that has not been seen before. (DTLS only)."]
    #[doc = ""]
    #[doc = "                 This function does not change the user-visible state"]
    #[doc = "                 of the SSL context. Its sole purpose is to provide"]
    #[doc = "                 an indication of the legitimacy of an incoming record."]
    #[doc = ""]
    #[doc = "                 This can be useful e.g. in distributed server environments"]
    #[doc = "                 using the DTLS Connection ID feature, in which connections"]
    #[doc = "                 might need to be passed between service instances on a change"]
    #[doc = "                 of peer address, but where such disruptive operations should"]
    #[doc = "                 only happen after the validity of incoming records has been"]
    #[doc = "                 confirmed."]
    #[doc = ""]
    #[doc = " \\param ssl      The SSL context to use."]
    #[doc = " \\param buf      The address of the buffer holding the record to be checked."]
    #[doc = "                 This must be a read/write buffer of length \\p buflen Bytes."]
    #[doc = " \\param buflen   The length of \\p buf in Bytes."]
    #[doc = ""]
    #[doc = " \\note           This routine only checks whether the provided buffer begins"]
    #[doc = "                 with a valid and authentic record that has not been seen"]
    #[doc = "                 before, but does not check potential data following the"]
    #[doc = "                 initial record. In particular, it is possible to pass DTLS"]
    #[doc = "                 datagrams containing multiple records, in which case only"]
    #[doc = "                 the first record is checked."]
    #[doc = ""]
    #[doc = " \\note           This function modifies the input buffer \\p buf. If you need"]
    #[doc = "                 to preserve the original record, you have to maintain a copy."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the record is valid and authentic and has not been"]
    #[doc = "                 seen before."]
    #[doc = " \\return         MBEDTLS_ERR_SSL_INVALID_MAC if the check completed"]
    #[doc = "                 successfully but the record was found to be not authentic."]
    #[doc = " \\return         MBEDTLS_ERR_SSL_INVALID_RECORD if the check completed"]
    #[doc = "                 successfully but the record was found to be invalid for"]
    #[doc = "                 a reason different from authenticity checking."]
    #[doc = " \\return         MBEDTLS_ERR_SSL_UNEXPECTED_RECORD if the check completed"]
    #[doc = "                 successfully but the record was found to be unexpected"]
    #[doc = "                 in the state of the SSL context, including replayed records."]
    #[doc = " \\return         Another negative error code on different kinds of failure."]
    #[doc = "                 In this case, the SSL context becomes unusable and needs"]
    #[doc = "                 to be freed or reset before reuse."]
    pub fn mbedtls_ssl_check_record(
        ssl: *const mbedtls_ssl_context,
        buf: *mut c_types::c_uchar,
        buflen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the timer callbacks (Mandatory for DTLS.)"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param p_timer  parameter (context) shared by timer callbacks"]
    #[doc = " \\param f_set_timer   set timer callback"]
    #[doc = " \\param f_get_timer   get timer callback. Must return:"]
    #[doc = ""]
    #[doc = " \\note           See the documentation of \\c mbedtls_ssl_set_timer_t and"]
    #[doc = "                 \\c mbedtls_ssl_get_timer_t for the conventions this pair of"]
    #[doc = "                 callbacks must follow."]
    #[doc = ""]
    #[doc = " \\note           On some platforms, timing.c provides"]
    #[doc = "                 \\c mbedtls_timing_set_delay() and"]
    #[doc = "                 \\c mbedtls_timing_get_delay() that are suitable for using"]
    #[doc = "                 here, except if using an event-driven style."]
    #[doc = ""]
    #[doc = " \\note           See also the \"DTLS tutorial\" article in our knowledge base."]
    #[doc = "                 https://tls.mbed.org/kb/how-to/dtls-tutorial"]
    pub fn mbedtls_ssl_set_timer_cb(
        ssl: *mut mbedtls_ssl_context,
        p_timer: *mut c_types::c_void,
        f_set_timer: mbedtls_ssl_set_timer_t,
        f_get_timer: mbedtls_ssl_get_timer_t,
    );
}
#[doc = " \\brief           Callback type: generate and write session ticket"]
#[doc = ""]
#[doc = " \\note            This describes what a callback implementation should do."]
#[doc = "                  This callback should generate an encrypted and"]
#[doc = "                  authenticated ticket for the session and write it to the"]
#[doc = "                  output buffer. Here, ticket means the opaque ticket part"]
#[doc = "                  of the NewSessionTicket structure of RFC 5077."]
#[doc = ""]
#[doc = " \\param p_ticket  Context for the callback"]
#[doc = " \\param session   SSL session to be written in the ticket"]
#[doc = " \\param start     Start of the output buffer"]
#[doc = " \\param end       End of the output buffer"]
#[doc = " \\param tlen      On exit, holds the length written"]
#[doc = " \\param lifetime  On exit, holds the lifetime of the ticket in seconds"]
#[doc = ""]
#[doc = " \\return          0 if successful, or"]
#[doc = "                  a specific MBEDTLS_ERR_XXX code."]
pub type mbedtls_ssl_ticket_write_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_ticket: *mut c_types::c_void,
        session: *const mbedtls_ssl_session,
        start: *mut c_types::c_uchar,
        end: *const c_types::c_uchar,
        tlen: *mut size_t,
        lifetime: *mut u32,
    ) -> c_types::c_int,
>;
#[doc = " \\brief           Callback type: Export key block and master secret"]
#[doc = ""]
#[doc = " \\note            This is required for certain uses of TLS, e.g. EAP-TLS"]
#[doc = "                  (RFC 5216) and Thread. The key pointers are ephemeral and"]
#[doc = "                  therefore must not be stored. The master secret and keys"]
#[doc = "                  should not be used directly except as an input to a key"]
#[doc = "                  derivation function."]
#[doc = ""]
#[doc = " \\param p_expkey  Context for the callback"]
#[doc = " \\param ms        Pointer to master secret (fixed length: 48 bytes)"]
#[doc = " \\param kb        Pointer to key block, see RFC 5246 section 6.3"]
#[doc = "                  (variable length: 2 * maclen + 2 * keylen + 2 * ivlen)."]
#[doc = " \\param maclen    MAC length"]
#[doc = " \\param keylen    Key length"]
#[doc = " \\param ivlen     IV length"]
#[doc = ""]
#[doc = " \\return          0 if successful, or"]
#[doc = "                  a specific MBEDTLS_ERR_XXX code."]
pub type mbedtls_ssl_export_keys_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_expkey: *mut c_types::c_void,
        ms: *const c_types::c_uchar,
        kb: *const c_types::c_uchar,
        maclen: size_t,
        keylen: size_t,
        ivlen: size_t,
    ) -> c_types::c_int,
>;
#[doc = " \\brief           Callback type: Export key block, master secret,"]
#[doc = "                                 handshake randbytes and the tls_prf function"]
#[doc = "                                 used to derive keys."]
#[doc = ""]
#[doc = " \\note            This is required for certain uses of TLS, e.g. EAP-TLS"]
#[doc = "                  (RFC 5216) and Thread. The key pointers are ephemeral and"]
#[doc = "                  therefore must not be stored. The master secret and keys"]
#[doc = "                  should not be used directly except as an input to a key"]
#[doc = "                  derivation function."]
#[doc = ""]
#[doc = " \\param p_expkey  Context for the callback."]
#[doc = " \\param ms        Pointer to master secret (fixed length: 48 bytes)."]
#[doc = " \\param kb            Pointer to key block, see RFC 5246 section 6.3."]
#[doc = "                      (variable length: 2 * maclen + 2 * keylen + 2 * ivlen)."]
#[doc = " \\param maclen        MAC length."]
#[doc = " \\param keylen        Key length."]
#[doc = " \\param ivlen         IV length."]
#[doc = " \\param client_random The client random bytes."]
#[doc = " \\param server_random The server random bytes."]
#[doc = " \\param tls_prf_type The tls_prf enum type."]
#[doc = ""]
#[doc = " \\return          0 if successful, or"]
#[doc = "                  a specific MBEDTLS_ERR_XXX code."]
pub type mbedtls_ssl_export_keys_ext_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_expkey: *mut c_types::c_void,
        ms: *const c_types::c_uchar,
        kb: *const c_types::c_uchar,
        maclen: size_t,
        keylen: size_t,
        ivlen: size_t,
        client_random: *const c_types::c_uchar,
        server_random: *const c_types::c_uchar,
        tls_prf_type: mbedtls_tls_prf_types,
    ) -> c_types::c_int,
>;
#[doc = " \\brief           Callback type: parse and load session ticket"]
#[doc = ""]
#[doc = " \\note            This describes what a callback implementation should do."]
#[doc = "                  This callback should parse a session ticket as generated"]
#[doc = "                  by the corresponding mbedtls_ssl_ticket_write_t function,"]
#[doc = "                  and, if the ticket is authentic and valid, load the"]
#[doc = "                  session."]
#[doc = ""]
#[doc = " \\note            The implementation is allowed to modify the first len"]
#[doc = "                  bytes of the input buffer, eg to use it as a temporary"]
#[doc = "                  area for the decrypted ticket contents."]
#[doc = ""]
#[doc = " \\param p_ticket  Context for the callback"]
#[doc = " \\param session   SSL session to be loaded"]
#[doc = " \\param buf       Start of the buffer containing the ticket"]
#[doc = " \\param len       Length of the ticket."]
#[doc = ""]
#[doc = " \\return          0 if successful, or"]
#[doc = "                  MBEDTLS_ERR_SSL_INVALID_MAC if not authentic, or"]
#[doc = "                  MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED if expired, or"]
#[doc = "                  any other non-zero code for other failures."]
pub type mbedtls_ssl_ticket_parse_t = ::core::option::Option<
    unsafe extern "C" fn(
        p_ticket: *mut c_types::c_void,
        session: *mut mbedtls_ssl_session,
        buf: *mut c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int,
>;
extern "C" {
    #[doc = " \\brief           Configure SSL session ticket callbacks (server only)."]
    #[doc = "                  (Default: none.)"]
    #[doc = ""]
    #[doc = " \\note            On server, session tickets are enabled by providing"]
    #[doc = "                  non-NULL callbacks."]
    #[doc = ""]
    #[doc = " \\note            On client, use \\c mbedtls_ssl_conf_session_tickets()."]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration context"]
    #[doc = " \\param f_ticket_write    Callback for writing a ticket"]
    #[doc = " \\param f_ticket_parse    Callback for parsing a ticket"]
    #[doc = " \\param p_ticket          Context shared by the two callbacks"]
    pub fn mbedtls_ssl_conf_session_tickets_cb(
        conf: *mut mbedtls_ssl_config,
        f_ticket_write: mbedtls_ssl_ticket_write_t,
        f_ticket_parse: mbedtls_ssl_ticket_parse_t,
        p_ticket: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief           Configure key export callback."]
    #[doc = "                  (Default: none.)"]
    #[doc = ""]
    #[doc = " \\note            See \\c mbedtls_ssl_export_keys_t."]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration context"]
    #[doc = " \\param f_export_keys     Callback for exporting keys"]
    #[doc = " \\param p_export_keys     Context for the callback"]
    pub fn mbedtls_ssl_conf_export_keys_cb(
        conf: *mut mbedtls_ssl_config,
        f_export_keys: mbedtls_ssl_export_keys_t,
        p_export_keys: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief           Configure extended key export callback."]
    #[doc = "                  (Default: none.)"]
    #[doc = ""]
    #[doc = " \\note            See \\c mbedtls_ssl_export_keys_ext_t."]
    #[doc = " \\warning         Exported key material must not be used for any purpose"]
    #[doc = "                  before the (D)TLS handshake is completed"]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration context"]
    #[doc = " \\param f_export_keys_ext Callback for exporting keys"]
    #[doc = " \\param p_export_keys     Context for the callback"]
    pub fn mbedtls_ssl_conf_export_keys_ext_cb(
        conf: *mut mbedtls_ssl_config,
        f_export_keys_ext: mbedtls_ssl_export_keys_ext_t,
        p_export_keys: *mut c_types::c_void,
    );
}
#[doc = " \\brief          Callback type: generate a cookie"]
#[doc = ""]
#[doc = " \\param ctx      Context for the callback"]
#[doc = " \\param p        Buffer to write to,"]
#[doc = "                 must be updated to point right after the cookie"]
#[doc = " \\param end      Pointer to one past the end of the output buffer"]
#[doc = " \\param info     Client ID info that was passed to"]
#[doc = "                 \\c mbedtls_ssl_set_client_transport_id()"]
#[doc = " \\param ilen     Length of info in bytes"]
#[doc = ""]
#[doc = " \\return         The callback must return 0 on success,"]
#[doc = "                 or a negative error code."]
pub type mbedtls_ssl_cookie_write_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        p: *mut *mut c_types::c_uchar,
        end: *mut c_types::c_uchar,
        info: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int,
>;
#[doc = " \\brief          Callback type: verify a cookie"]
#[doc = ""]
#[doc = " \\param ctx      Context for the callback"]
#[doc = " \\param cookie   Cookie to verify"]
#[doc = " \\param clen     Length of cookie"]
#[doc = " \\param info     Client ID info that was passed to"]
#[doc = "                 \\c mbedtls_ssl_set_client_transport_id()"]
#[doc = " \\param ilen     Length of info in bytes"]
#[doc = ""]
#[doc = " \\return         The callback must return 0 if cookie is valid,"]
#[doc = "                 or a negative error code."]
pub type mbedtls_ssl_cookie_check_t = ::core::option::Option<
    unsafe extern "C" fn(
        ctx: *mut c_types::c_void,
        cookie: *const c_types::c_uchar,
        clen: size_t,
        info: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int,
>;
extern "C" {
    #[doc = " \\brief          Set the session cache callbacks (server-side only)"]
    #[doc = "                 If not set, no session resuming is done (except if session"]
    #[doc = "                 tickets are enabled too)."]
    #[doc = ""]
    #[doc = "                 The session cache has the responsibility to check for stale"]
    #[doc = "                 entries based on timeout. See RFC 5246 for recommendations."]
    #[doc = ""]
    #[doc = "                 Warning: session.peer_cert is cleared by the SSL/TLS layer on"]
    #[doc = "                 connection shutdown, so do not cache the pointer! Either set"]
    #[doc = "                 it to NULL or make a full copy of the certificate."]
    #[doc = ""]
    #[doc = "                 The get callback is called once during the initial handshake"]
    #[doc = "                 to enable session resuming. The get function has the"]
    #[doc = "                 following parameters: (void *parameter, mbedtls_ssl_session *session)"]
    #[doc = "                 If a valid entry is found, it should fill the master of"]
    #[doc = "                 the session object with the cached values and return 0,"]
    #[doc = "                 return 1 otherwise. Optionally peer_cert can be set as well"]
    #[doc = "                 if it is properly present in cache entry."]
    #[doc = ""]
    #[doc = "                 The set callback is called once during the initial handshake"]
    #[doc = "                 to enable session resuming after the entire handshake has"]
    #[doc = "                 been finished. The set function has the following parameters:"]
    #[doc = "                 (void *parameter, const mbedtls_ssl_session *session). The function"]
    #[doc = "                 should create a cache entry for future retrieval based on"]
    #[doc = "                 the data in the session structure and should keep in mind"]
    #[doc = "                 that the mbedtls_ssl_session object presented (and all its referenced"]
    #[doc = "                 data) is cleared by the SSL/TLS layer when the connection is"]
    #[doc = "                 terminated. It is recommended to add metadata to determine if"]
    #[doc = "                 an entry is still valid in the future. Return 0 if"]
    #[doc = "                 successfully cached, return 1 otherwise."]
    #[doc = ""]
    #[doc = " \\param conf           SSL configuration"]
    #[doc = " \\param p_cache        parmater (context) for both callbacks"]
    #[doc = " \\param f_get_cache    session get callback"]
    #[doc = " \\param f_set_cache    session set callback"]
    pub fn mbedtls_ssl_conf_session_cache(
        conf: *mut mbedtls_ssl_config,
        p_cache: *mut c_types::c_void,
        f_get_cache: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_ssl_session,
            ) -> c_types::c_int,
        >,
        f_set_cache: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *const mbedtls_ssl_session,
            ) -> c_types::c_int,
        >,
    );
}
extern "C" {
    #[doc = " \\brief          Request resumption of session (client-side only)"]
    #[doc = "                 Session data is copied from presented session structure."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param session  session context"]
    #[doc = ""]
    #[doc = " \\return         0 if successful,"]
    #[doc = "                 MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed,"]
    #[doc = "                 MBEDTLS_ERR_SSL_BAD_INPUT_DATA if used server-side or"]
    #[doc = "                 arguments are otherwise invalid"]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_get_session()"]
    pub fn mbedtls_ssl_set_session(
        ssl: *mut mbedtls_ssl_context,
        session: *const mbedtls_ssl_session,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Load serialized session data into a session structure."]
    #[doc = "                 On client, this can be used for loading saved sessions"]
    #[doc = "                 before resuming them with mbedstls_ssl_set_session()."]
    #[doc = "                 On server, this can be used for alternative implementations"]
    #[doc = "                 of session cache or session tickets."]
    #[doc = ""]
    #[doc = " \\warning        If a peer certificate chain is associated with the session,"]
    #[doc = "                 the serialized state will only contain the peer's"]
    #[doc = "                 end-entity certificate and the result of the chain"]
    #[doc = "                 verification (unless verification was disabled), but not"]
    #[doc = "                 the rest of the chain."]
    #[doc = ""]
    #[doc = " \\see            mbedtls_ssl_session_save()"]
    #[doc = " \\see            mbedtls_ssl_set_session()"]
    #[doc = ""]
    #[doc = " \\param session  The session structure to be populated. It must have been"]
    #[doc = "                 initialised with mbedtls_ssl_session_init() but not"]
    #[doc = "                 populated yet."]
    #[doc = " \\param buf      The buffer holding the serialized session data. It must be a"]
    #[doc = "                 readable buffer of at least \\p len bytes."]
    #[doc = " \\param len      The size of the serialized data in bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_BAD_INPUT_DATA if input data is invalid."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_VERSION_MISMATCH if the serialized data"]
    #[doc = "                 was generated in a different version or configuration of"]
    #[doc = "                 Mbed TLS."]
    #[doc = " \\return         Another negative value for other kinds of errors (for"]
    #[doc = "                 example, unsupported features in the embedded certificate)."]
    pub fn mbedtls_ssl_session_load(
        session: *mut mbedtls_ssl_session,
        buf: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Save session structure as serialized data in a buffer."]
    #[doc = "                 On client, this can be used for saving session data,"]
    #[doc = "                 potentially in non-volatile storage, for resuming later."]
    #[doc = "                 On server, this can be used for alternative implementations"]
    #[doc = "                 of session cache or session tickets."]
    #[doc = ""]
    #[doc = " \\see            mbedtls_ssl_session_load()"]
    #[doc = " \\see            mbedtls_ssl_get_session_pointer()"]
    #[doc = ""]
    #[doc = " \\param session  The session structure to be saved."]
    #[doc = " \\param buf      The buffer to write the serialized data to. It must be a"]
    #[doc = "                 writeable buffer of at least \\p len bytes, or may be \\c"]
    #[doc = "                 NULL if \\p len is \\c 0."]
    #[doc = " \\param buf_len  The number of bytes available for writing in \\p buf."]
    #[doc = " \\param olen     The size in bytes of the data that has been or would have"]
    #[doc = "                 been written. It must point to a valid \\c size_t."]
    #[doc = ""]
    #[doc = " \\note           \\p olen is updated to the correct value regardless of"]
    #[doc = "                 whether \\p buf_len was large enough. This makes it possible"]
    #[doc = "                 to determine the necessary size by calling this function"]
    #[doc = "                 with \\p buf set to \\c NULL and \\p buf_len to \\c 0."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL if \\p buf is too small."]
    pub fn mbedtls_ssl_session_save(
        session: *const mbedtls_ssl_session,
        buf: *mut c_types::c_uchar,
        buf_len: size_t,
        olen: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Get a pointer to the current session structure, for example"]
    #[doc = "                 to serialize it."]
    #[doc = ""]
    #[doc = " \\warning        Ownership of the session remains with the SSL context, and"]
    #[doc = "                 the returned pointer is only guaranteed to be valid until"]
    #[doc = "                 the next API call operating on the same \\p ssl context."]
    #[doc = ""]
    #[doc = " \\see            mbedtls_ssl_session_save()"]
    #[doc = ""]
    #[doc = " \\param ssl      The SSL context."]
    #[doc = ""]
    #[doc = " \\return         A pointer to the current session if successful."]
    #[doc = " \\return         \\c NULL if no session is active."]
    pub fn mbedtls_ssl_get_session_pointer(
        ssl: *const mbedtls_ssl_context,
    ) -> *const mbedtls_ssl_session;
}
extern "C" {
    #[doc = " \\brief               Set the list of allowed ciphersuites and the preference"]
    #[doc = "                      order. First in the list has the highest preference."]
    #[doc = "                      (Overrides all version-specific lists)"]
    #[doc = ""]
    #[doc = "                      The ciphersuites array is not copied, and must remain"]
    #[doc = "                      valid for the lifetime of the ssl_config."]
    #[doc = ""]
    #[doc = "                      Note: The server uses its own preferences"]
    #[doc = "                      over the preference of the client unless"]
    #[doc = "                      MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE is defined!"]
    #[doc = ""]
    #[doc = " \\param conf          SSL configuration"]
    #[doc = " \\param ciphersuites  0-terminated list of allowed ciphersuites"]
    pub fn mbedtls_ssl_conf_ciphersuites(
        conf: *mut mbedtls_ssl_config,
        ciphersuites: *const c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief               Set the list of allowed ciphersuites and the"]
    #[doc = "                      preference order for a specific version of the protocol."]
    #[doc = "                      (Only useful on the server side)"]
    #[doc = ""]
    #[doc = "                      The ciphersuites array is not copied, and must remain"]
    #[doc = "                      valid for the lifetime of the ssl_config."]
    #[doc = ""]
    #[doc = " \\param conf          SSL configuration"]
    #[doc = " \\param ciphersuites  0-terminated list of allowed ciphersuites"]
    #[doc = " \\param major         Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3"]
    #[doc = "                      supported)"]
    #[doc = " \\param minor         Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,"]
    #[doc = "                      MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,"]
    #[doc = "                      MBEDTLS_SSL_MINOR_VERSION_3 supported)"]
    #[doc = ""]
    #[doc = " \\note                With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0"]
    #[doc = "                      and MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2"]
    pub fn mbedtls_ssl_conf_ciphersuites_for_version(
        conf: *mut mbedtls_ssl_config,
        ciphersuites: *const c_types::c_int,
        major: c_types::c_int,
        minor: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Set the X.509 security profile used for verification"]
    #[doc = ""]
    #[doc = " \\note           The restrictions are enforced for all certificates in the"]
    #[doc = "                 chain. However, signatures in the handshake are not covered"]
    #[doc = "                 by this setting but by \\b mbedtls_ssl_conf_sig_hashes()."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param profile  Profile to use"]
    pub fn mbedtls_ssl_conf_cert_profile(
        conf: *mut mbedtls_ssl_config,
        profile: *const mbedtls_x509_crt_profile,
    );
}
extern "C" {
    #[doc = " \\brief          Set the data required to verify peer certificate"]
    #[doc = ""]
    #[doc = " \\note           See \\c mbedtls_x509_crt_verify() for notes regarding the"]
    #[doc = "                 parameters ca_chain (maps to trust_ca for that function)"]
    #[doc = "                 and ca_crl."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param ca_chain trusted CA chain (meaning all fully trusted top-level CAs)"]
    #[doc = " \\param ca_crl   trusted CA CRLs"]
    pub fn mbedtls_ssl_conf_ca_chain(
        conf: *mut mbedtls_ssl_config,
        ca_chain: *mut mbedtls_x509_crt,
        ca_crl: *mut mbedtls_x509_crl,
    );
}
extern "C" {
    #[doc = " \\brief          Set own certificate chain and private key"]
    #[doc = ""]
    #[doc = " \\note           own_cert should contain in order from the bottom up your"]
    #[doc = "                 certificate chain. The top certificate (self-signed)"]
    #[doc = "                 can be omitted."]
    #[doc = ""]
    #[doc = " \\note           On server, this function can be called multiple times to"]
    #[doc = "                 provision more than one cert/key pair (eg one ECDSA, one"]
    #[doc = "                 RSA with SHA-256, one RSA with SHA-1). An adequate"]
    #[doc = "                 certificate will be selected according to the client's"]
    #[doc = "                 advertised capabilities. In case multiple certificates are"]
    #[doc = "                 adequate, preference is given to the one set by the first"]
    #[doc = "                 call to this function, then second, etc."]
    #[doc = ""]
    #[doc = " \\note           On client, only the first call has any effect. That is,"]
    #[doc = "                 only one client certificate can be provisioned. The"]
    #[doc = "                 server's preferences in its CertficateRequest message will"]
    #[doc = "                 be ignored and our only cert will be sent regardless of"]
    #[doc = "                 whether it matches those preferences - the server can then"]
    #[doc = "                 decide what it wants to do with it."]
    #[doc = ""]
    #[doc = " \\note           The provided \\p pk_key needs to match the public key in the"]
    #[doc = "                 first certificate in \\p own_cert, or all handshakes using"]
    #[doc = "                 that certificate will fail. It is your responsibility"]
    #[doc = "                 to ensure that; this function will not perform any check."]
    #[doc = "                 You may use mbedtls_pk_check_pair() in order to perform"]
    #[doc = "                 this check yourself, but be aware that this function can"]
    #[doc = "                 be computationally expensive on some key types."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param own_cert own public certificate chain"]
    #[doc = " \\param pk_key   own private key"]
    #[doc = ""]
    #[doc = " \\return         0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED"]
    pub fn mbedtls_ssl_conf_own_cert(
        conf: *mut mbedtls_ssl_config,
        own_cert: *mut mbedtls_x509_crt,
        pk_key: *mut mbedtls_pk_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the Diffie-Hellman public P and G values,"]
    #[doc = "                 read as hexadecimal strings (server-side only)"]
    #[doc = "                 (Default values: MBEDTLS_DHM_RFC3526_MODP_2048_[PG])"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param dhm_P    Diffie-Hellman-Merkle modulus"]
    #[doc = " \\param dhm_G    Diffie-Hellman-Merkle generator"]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by \\c mbedtls_ssl_conf_dh_param_bin."]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn mbedtls_ssl_conf_dh_param(
        conf: *mut mbedtls_ssl_config,
        dhm_P: *const c_types::c_char,
        dhm_G: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the Diffie-Hellman public P and G values"]
    #[doc = "                 from big-endian binary presentations."]
    #[doc = "                 (Default values: MBEDTLS_DHM_RFC3526_MODP_2048_[PG]_BIN)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param dhm_P    Diffie-Hellman-Merkle modulus in big-endian binary form"]
    #[doc = " \\param P_len    Length of DHM modulus"]
    #[doc = " \\param dhm_G    Diffie-Hellman-Merkle generator in big-endian binary form"]
    #[doc = " \\param G_len    Length of DHM generator"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn mbedtls_ssl_conf_dh_param_bin(
        conf: *mut mbedtls_ssl_config,
        dhm_P: *const c_types::c_uchar,
        P_len: size_t,
        dhm_G: *const c_types::c_uchar,
        G_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the Diffie-Hellman public P and G values,"]
    #[doc = "                 read from existing context (server-side only)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param dhm_ctx  Diffie-Hellman-Merkle context"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn mbedtls_ssl_conf_dh_param_ctx(
        conf: *mut mbedtls_ssl_config,
        dhm_ctx: *mut mbedtls_dhm_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the minimum length for Diffie-Hellman parameters."]
    #[doc = "                 (Client-side only.)"]
    #[doc = "                 (Default: 1024 bits.)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param bitlen   Minimum bit length of the DHM prime"]
    pub fn mbedtls_ssl_conf_dhm_min_bitlen(conf: *mut mbedtls_ssl_config, bitlen: c_types::c_uint);
}
extern "C" {
    #[doc = " \\brief          Set the allowed curves in order of preference."]
    #[doc = "                 (Default: all defined curves in order of decreasing size,"]
    #[doc = "                 except that Montgomery curves come last. This order"]
    #[doc = "                 is likely to change in a future version.)"]
    #[doc = ""]
    #[doc = "                 On server: this only affects selection of the ECDHE curve;"]
    #[doc = "                 the curves used for ECDH and ECDSA are determined by the"]
    #[doc = "                 list of available certificates instead."]
    #[doc = ""]
    #[doc = "                 On client: this affects the list of curves offered for any"]
    #[doc = "                 use. The server can override our preference order."]
    #[doc = ""]
    #[doc = "                 Both sides: limits the set of curves accepted for use in"]
    #[doc = "                 ECDHE and in the peer's end-entity certificate."]
    #[doc = ""]
    #[doc = " \\note           This has no influence on which curves are allowed inside the"]
    #[doc = "                 certificate chains, see \\c mbedtls_ssl_conf_cert_profile()"]
    #[doc = "                 for that. For the end-entity certificate however, the key"]
    #[doc = "                 will be accepted only if it is allowed both by this list"]
    #[doc = "                 and by the cert profile."]
    #[doc = ""]
    #[doc = " \\note           This list should be ordered by decreasing preference"]
    #[doc = "                 (preferred curve first)."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param curves   Ordered list of allowed curves,"]
    #[doc = "                 terminated by MBEDTLS_ECP_DP_NONE."]
    pub fn mbedtls_ssl_conf_curves(
        conf: *mut mbedtls_ssl_config,
        curves: *const mbedtls_ecp_group_id,
    );
}
extern "C" {
    #[doc = " \\brief          Set the allowed hashes for signatures during the handshake."]
    #[doc = "                 (Default: all SHA-2 hashes, largest first. Also SHA-1 if"]
    #[doc = "                 the compile-time option"]
    #[doc = "                 `MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE` is enabled.)"]
    #[doc = ""]
    #[doc = " \\note           This only affects which hashes are offered and can be used"]
    #[doc = "                 for signatures during the handshake. Hashes for message"]
    #[doc = "                 authentication and the TLS PRF are controlled by the"]
    #[doc = "                 ciphersuite, see \\c mbedtls_ssl_conf_ciphersuites(). Hashes"]
    #[doc = "                 used for certificate signature are controlled by the"]
    #[doc = "                 verification profile, see \\c mbedtls_ssl_conf_cert_profile()."]
    #[doc = ""]
    #[doc = " \\note           This list should be ordered by decreasing preference"]
    #[doc = "                 (preferred hash first)."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param hashes   Ordered list of allowed signature hashes,"]
    #[doc = "                 terminated by \\c MBEDTLS_MD_NONE."]
    pub fn mbedtls_ssl_conf_sig_hashes(
        conf: *mut mbedtls_ssl_config,
        hashes: *const c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Set or reset the hostname to check against the received"]
    #[doc = "                 server certificate. It sets the ServerName TLS extension,"]
    #[doc = "                 too, if that extension is enabled. (client-side only)"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param hostname the server hostname, may be NULL to clear hostname"]
    #[doc = ""]
    #[doc = " \\note           Maximum hostname length MBEDTLS_SSL_MAX_HOST_NAME_LEN."]
    #[doc = ""]
    #[doc = " \\return         0 if successful, MBEDTLS_ERR_SSL_ALLOC_FAILED on"]
    #[doc = "                 allocation failure, MBEDTLS_ERR_SSL_BAD_INPUT_DATA on"]
    #[doc = "                 too long input hostname."]
    #[doc = ""]
    #[doc = "                 Hostname set to the one provided on success (cleared"]
    #[doc = "                 when NULL). On allocation failure hostname is cleared."]
    #[doc = "                 On too long input failure, old hostname is unchanged."]
    pub fn mbedtls_ssl_set_hostname(
        ssl: *mut mbedtls_ssl_context,
        hostname: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set own certificate and key for the current handshake"]
    #[doc = ""]
    #[doc = " \\note           Same as \\c mbedtls_ssl_conf_own_cert() but for use within"]
    #[doc = "                 the SNI callback."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param own_cert own public certificate chain"]
    #[doc = " \\param pk_key   own private key"]
    #[doc = ""]
    #[doc = " \\return         0 on success or MBEDTLS_ERR_SSL_ALLOC_FAILED"]
    pub fn mbedtls_ssl_set_hs_own_cert(
        ssl: *mut mbedtls_ssl_context,
        own_cert: *mut mbedtls_x509_crt,
        pk_key: *mut mbedtls_pk_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the data required to verify peer certificate for the"]
    #[doc = "                 current handshake"]
    #[doc = ""]
    #[doc = " \\note           Same as \\c mbedtls_ssl_conf_ca_chain() but for use within"]
    #[doc = "                 the SNI callback."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param ca_chain trusted CA chain (meaning all fully trusted top-level CAs)"]
    #[doc = " \\param ca_crl   trusted CA CRLs"]
    pub fn mbedtls_ssl_set_hs_ca_chain(
        ssl: *mut mbedtls_ssl_context,
        ca_chain: *mut mbedtls_x509_crt,
        ca_crl: *mut mbedtls_x509_crl,
    );
}
extern "C" {
    #[doc = " \\brief          Set authmode for the current handshake."]
    #[doc = ""]
    #[doc = " \\note           Same as \\c mbedtls_ssl_conf_authmode() but for use within"]
    #[doc = "                 the SNI callback."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param authmode MBEDTLS_SSL_VERIFY_NONE, MBEDTLS_SSL_VERIFY_OPTIONAL or"]
    #[doc = "                 MBEDTLS_SSL_VERIFY_REQUIRED"]
    pub fn mbedtls_ssl_set_hs_authmode(ssl: *mut mbedtls_ssl_context, authmode: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief          Set server side ServerName TLS extension callback"]
    #[doc = "                 (optional, server-side only)."]
    #[doc = ""]
    #[doc = "                 If set, the ServerName callback is called whenever the"]
    #[doc = "                 server receives a ServerName TLS extension from the client"]
    #[doc = "                 during a handshake. The ServerName callback has the"]
    #[doc = "                 following parameters: (void *parameter, mbedtls_ssl_context *ssl,"]
    #[doc = "                 const unsigned char *hostname, size_t len). If a suitable"]
    #[doc = "                 certificate is found, the callback must set the"]
    #[doc = "                 certificate(s) and key(s) to use with \\c"]
    #[doc = "                 mbedtls_ssl_set_hs_own_cert() (can be called repeatedly),"]
    #[doc = "                 and may optionally adjust the CA and associated CRL with \\c"]
    #[doc = "                 mbedtls_ssl_set_hs_ca_chain() as well as the client"]
    #[doc = "                 authentication mode with \\c mbedtls_ssl_set_hs_authmode(),"]
    #[doc = "                 then must return 0. If no matching name is found, the"]
    #[doc = "                 callback must either set a default cert, or"]
    #[doc = "                 return non-zero to abort the handshake at this point."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param f_sni    verification function"]
    #[doc = " \\param p_sni    verification parameter"]
    pub fn mbedtls_ssl_conf_sni(
        conf: *mut mbedtls_ssl_config,
        f_sni: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut mbedtls_ssl_context,
                arg3: *const c_types::c_uchar,
                arg4: size_t,
            ) -> c_types::c_int,
        >,
        p_sni: *mut c_types::c_void,
    );
}
extern "C" {
    #[doc = " \\brief          Set the supported Application Layer Protocols."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param protos   Pointer to a NULL-terminated list of supported protocols,"]
    #[doc = "                 in decreasing preference order. The pointer to the list is"]
    #[doc = "                 recorded by the library for later reference as required, so"]
    #[doc = "                 the lifetime of the table must be atleast as long as the"]
    #[doc = "                 lifetime of the SSL configuration structure."]
    #[doc = ""]
    #[doc = " \\return         0 on success, or MBEDTLS_ERR_SSL_BAD_INPUT_DATA."]
    pub fn mbedtls_ssl_conf_alpn_protocols(
        conf: *mut mbedtls_ssl_config,
        protos: *mut *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Get the name of the negotiated Application Layer Protocol."]
    #[doc = "                 This function should be called after the handshake is"]
    #[doc = "                 completed."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Protcol name, or NULL if no protocol was negotiated."]
    pub fn mbedtls_ssl_get_alpn_protocol(ssl: *const mbedtls_ssl_context)
        -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief          Set the maximum supported version sent from the client side"]
    #[doc = "                 and/or accepted at the server side"]
    #[doc = "                 (Default: MBEDTLS_SSL_MAX_MAJOR_VERSION, MBEDTLS_SSL_MAX_MINOR_VERSION)"]
    #[doc = ""]
    #[doc = " \\note           This ignores ciphersuites from higher versions."]
    #[doc = ""]
    #[doc = " \\note           With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0 and"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param major    Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3 supported)"]
    #[doc = " \\param minor    Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_3 supported)"]
    pub fn mbedtls_ssl_conf_max_version(
        conf: *mut mbedtls_ssl_config,
        major: c_types::c_int,
        minor: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Set the minimum accepted SSL/TLS protocol version"]
    #[doc = "                 (Default: TLS 1.0)"]
    #[doc = ""]
    #[doc = " \\note           Input outside of the SSL_MAX_XXXXX_VERSION and"]
    #[doc = "                 SSL_MIN_XXXXX_VERSION range is ignored."]
    #[doc = ""]
    #[doc = " \\note           MBEDTLS_SSL_MINOR_VERSION_0 (SSL v3) should be avoided."]
    #[doc = ""]
    #[doc = " \\note           With DTLS, use MBEDTLS_SSL_MINOR_VERSION_2 for DTLS 1.0 and"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_3 for DTLS 1.2"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param major    Major version number (only MBEDTLS_SSL_MAJOR_VERSION_3 supported)"]
    #[doc = " \\param minor    Minor version number (MBEDTLS_SSL_MINOR_VERSION_0,"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_1 and MBEDTLS_SSL_MINOR_VERSION_2,"]
    #[doc = "                 MBEDTLS_SSL_MINOR_VERSION_3 supported)"]
    pub fn mbedtls_ssl_conf_min_version(
        conf: *mut mbedtls_ssl_config,
        major: c_types::c_int,
        minor: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Set the fallback flag (client-side only)."]
    #[doc = "                 (Default: MBEDTLS_SSL_IS_NOT_FALLBACK)."]
    #[doc = ""]
    #[doc = " \\note           Set to MBEDTLS_SSL_IS_FALLBACK when preparing a fallback"]
    #[doc = "                 connection, that is a connection with max_version set to a"]
    #[doc = "                 lower value than the value you're willing to use. Such"]
    #[doc = "                 fallback connections are not recommended but are sometimes"]
    #[doc = "                 necessary to interoperate with buggy (version-intolerant)"]
    #[doc = "                 servers."]
    #[doc = ""]
    #[doc = " \\warning        You should NOT set this to MBEDTLS_SSL_IS_FALLBACK for"]
    #[doc = "                 non-fallback connections! This would appear to work for a"]
    #[doc = "                 while, then cause failures when the server is upgraded to"]
    #[doc = "                 support a newer TLS version."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param fallback MBEDTLS_SSL_IS_NOT_FALLBACK or MBEDTLS_SSL_IS_FALLBACK"]
    pub fn mbedtls_ssl_conf_fallback(conf: *mut mbedtls_ssl_config, fallback: c_types::c_char);
}
extern "C" {
    #[doc = " \\brief           Enable or disable Encrypt-then-MAC"]
    #[doc = "                  (Default: MBEDTLS_SSL_ETM_ENABLED)"]
    #[doc = ""]
    #[doc = " \\note            This should always be enabled, it is a security"]
    #[doc = "                  improvement, and should not cause any interoperability"]
    #[doc = "                  issue (used only if the peer supports it too)."]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration"]
    #[doc = " \\param etm       MBEDTLS_SSL_ETM_ENABLED or MBEDTLS_SSL_ETM_DISABLED"]
    pub fn mbedtls_ssl_conf_encrypt_then_mac(conf: *mut mbedtls_ssl_config, etm: c_types::c_char);
}
extern "C" {
    #[doc = " \\brief           Enable or disable Extended Master Secret negotiation."]
    #[doc = "                  (Default: MBEDTLS_SSL_EXTENDED_MS_ENABLED)"]
    #[doc = ""]
    #[doc = " \\note            This should always be enabled, it is a security fix to the"]
    #[doc = "                  protocol, and should not cause any interoperability issue"]
    #[doc = "                  (used only if the peer supports it too)."]
    #[doc = ""]
    #[doc = " \\param conf      SSL configuration"]
    #[doc = " \\param ems       MBEDTLS_SSL_EXTENDED_MS_ENABLED or MBEDTLS_SSL_EXTENDED_MS_DISABLED"]
    pub fn mbedtls_ssl_conf_extended_master_secret(
        conf: *mut mbedtls_ssl_config,
        ems: c_types::c_char,
    );
}
extern "C" {
    #[doc = " \\brief          Whether to send a list of acceptable CAs in"]
    #[doc = "                 CertificateRequest messages."]
    #[doc = "                 (Default: do send)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param cert_req_ca_list   MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED or"]
    #[doc = "                          MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED"]
    pub fn mbedtls_ssl_conf_cert_req_ca_list(
        conf: *mut mbedtls_ssl_config,
        cert_req_ca_list: c_types::c_char,
    );
}
extern "C" {
    #[doc = " \\brief          Set the maximum fragment length to emit and/or negotiate."]
    #[doc = "                 (Typical: the smaller of #MBEDTLS_SSL_IN_CONTENT_LEN and"]
    #[doc = "                 #MBEDTLS_SSL_OUT_CONTENT_LEN, usually `2^14` bytes)"]
    #[doc = "                 (Server: set maximum fragment length to emit,"]
    #[doc = "                 usually negotiated by the client during handshake)"]
    #[doc = "                 (Client: set maximum fragment length to emit *and*"]
    #[doc = "                 negotiate with the server during handshake)"]
    #[doc = "                 (Default: #MBEDTLS_SSL_MAX_FRAG_LEN_NONE)"]
    #[doc = ""]
    #[doc = " \\note           On the client side, the maximum fragment length extension"]
    #[doc = "                 *will not* be used, unless the maximum fragment length has"]
    #[doc = "                 been set via this function to a value different than"]
    #[doc = "                 #MBEDTLS_SSL_MAX_FRAG_LEN_NONE."]
    #[doc = ""]
    #[doc = " \\note           With TLS, this currently only affects ApplicationData (sent"]
    #[doc = "                 with \\c mbedtls_ssl_read()), not handshake messages."]
    #[doc = "                 With DTLS, this affects both ApplicationData and handshake."]
    #[doc = ""]
    #[doc = " \\note           This sets the maximum length for a record's payload,"]
    #[doc = "                 excluding record overhead that will be added to it, see"]
    #[doc = "                 \\c mbedtls_ssl_get_record_expansion()."]
    #[doc = ""]
    #[doc = " \\note           For DTLS, it is also possible to set a limit for the total"]
    #[doc = "                 size of daragrams passed to the transport layer, including"]
    #[doc = "                 record overhead, see \\c mbedtls_ssl_set_mtu()."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param mfl_code Code for maximum fragment length (allowed values:"]
    #[doc = "                 MBEDTLS_SSL_MAX_FRAG_LEN_512,  MBEDTLS_SSL_MAX_FRAG_LEN_1024,"]
    #[doc = "                 MBEDTLS_SSL_MAX_FRAG_LEN_2048, MBEDTLS_SSL_MAX_FRAG_LEN_4096)"]
    #[doc = ""]
    #[doc = " \\return         0 if successful or MBEDTLS_ERR_SSL_BAD_INPUT_DATA"]
    pub fn mbedtls_ssl_conf_max_frag_len(
        conf: *mut mbedtls_ssl_config,
        mfl_code: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Activate negotiation of truncated HMAC"]
    #[doc = "                 (Default: MBEDTLS_SSL_TRUNC_HMAC_DISABLED)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param truncate Enable or disable (MBEDTLS_SSL_TRUNC_HMAC_ENABLED or"]
    #[doc = "                                    MBEDTLS_SSL_TRUNC_HMAC_DISABLED)"]
    pub fn mbedtls_ssl_conf_truncated_hmac(conf: *mut mbedtls_ssl_config, truncate: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief          Enable / Disable 1/n-1 record splitting"]
    #[doc = "                 (Default: MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED)"]
    #[doc = ""]
    #[doc = " \\note           Only affects SSLv3 and TLS 1.0, not higher versions."]
    #[doc = "                 Does not affect non-CBC ciphersuites in any version."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param split    MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED or"]
    #[doc = "                 MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED"]
    pub fn mbedtls_ssl_conf_cbc_record_splitting(
        conf: *mut mbedtls_ssl_config,
        split: c_types::c_char,
    );
}
extern "C" {
    #[doc = " \\brief          Enable / Disable session tickets (client only)."]
    #[doc = "                 (Default: MBEDTLS_SSL_SESSION_TICKETS_ENABLED.)"]
    #[doc = ""]
    #[doc = " \\note           On server, use \\c mbedtls_ssl_conf_session_tickets_cb()."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param use_tickets   Enable or disable (MBEDTLS_SSL_SESSION_TICKETS_ENABLED or"]
    #[doc = "                                         MBEDTLS_SSL_SESSION_TICKETS_DISABLED)"]
    pub fn mbedtls_ssl_conf_session_tickets(
        conf: *mut mbedtls_ssl_config,
        use_tickets: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Enable / Disable renegotiation support for connection when"]
    #[doc = "                 initiated by peer"]
    #[doc = "                 (Default: MBEDTLS_SSL_RENEGOTIATION_DISABLED)"]
    #[doc = ""]
    #[doc = " \\warning        It is recommended to always disable renegotation unless you"]
    #[doc = "                 know you need it and you know what you're doing. In the"]
    #[doc = "                 past, there have been several issues associated with"]
    #[doc = "                 renegotiation or a poor understanding of its properties."]
    #[doc = ""]
    #[doc = " \\note           Server-side, enabling renegotiation also makes the server"]
    #[doc = "                 susceptible to a resource DoS by a malicious client."]
    #[doc = ""]
    #[doc = " \\param conf    SSL configuration"]
    #[doc = " \\param renegotiation     Enable or disable (MBEDTLS_SSL_RENEGOTIATION_ENABLED or"]
    #[doc = "                                             MBEDTLS_SSL_RENEGOTIATION_DISABLED)"]
    pub fn mbedtls_ssl_conf_renegotiation(
        conf: *mut mbedtls_ssl_config,
        renegotiation: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Prevent or allow legacy renegotiation."]
    #[doc = "                 (Default: MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION)"]
    #[doc = ""]
    #[doc = "                 MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION allows connections to"]
    #[doc = "                 be established even if the peer does not support"]
    #[doc = "                 secure renegotiation, but does not allow renegotiation"]
    #[doc = "                 to take place if not secure."]
    #[doc = "                 (Interoperable and secure option)"]
    #[doc = ""]
    #[doc = "                 MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION allows renegotiations"]
    #[doc = "                 with non-upgraded peers. Allowing legacy renegotiation"]
    #[doc = "                 makes the connection vulnerable to specific man in the"]
    #[doc = "                 middle attacks. (See RFC 5746)"]
    #[doc = "                 (Most interoperable and least secure option)"]
    #[doc = ""]
    #[doc = "                 MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE breaks off connections"]
    #[doc = "                 if peer does not support secure renegotiation. Results"]
    #[doc = "                 in interoperability issues with non-upgraded peers"]
    #[doc = "                 that do not support renegotiation altogether."]
    #[doc = "                 (Most secure option, interoperability issues)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param allow_legacy  Prevent or allow (SSL_NO_LEGACY_RENEGOTIATION,"]
    #[doc = "                                        SSL_ALLOW_LEGACY_RENEGOTIATION or"]
    #[doc = "                                        MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE)"]
    pub fn mbedtls_ssl_conf_legacy_renegotiation(
        conf: *mut mbedtls_ssl_config,
        allow_legacy: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Enforce renegotiation requests."]
    #[doc = "                 (Default: enforced, max_records = 16)"]
    #[doc = ""]
    #[doc = "                 When we request a renegotiation, the peer can comply or"]
    #[doc = "                 ignore the request. This function allows us to decide"]
    #[doc = "                 whether to enforce our renegotiation requests by closing"]
    #[doc = "                 the connection if the peer doesn't comply."]
    #[doc = ""]
    #[doc = "                 However, records could already be in transit from the peer"]
    #[doc = "                 when the request is emitted. In order to increase"]
    #[doc = "                 reliability, we can accept a number of records before the"]
    #[doc = "                 expected handshake records."]
    #[doc = ""]
    #[doc = "                 The optimal value is highly dependent on the specific usage"]
    #[doc = "                 scenario."]
    #[doc = ""]
    #[doc = " \\note           With DTLS and server-initiated renegotiation, the"]
    #[doc = "                 HelloRequest is retransmited every time mbedtls_ssl_read() times"]
    #[doc = "                 out or receives Application Data, until:"]
    #[doc = "                 - max_records records have beens seen, if it is >= 0, or"]
    #[doc = "                 - the number of retransmits that would happen during an"]
    #[doc = "                 actual handshake has been reached."]
    #[doc = "                 Please remember the request might be lost a few times"]
    #[doc = "                 if you consider setting max_records to a really low value."]
    #[doc = ""]
    #[doc = " \\warning        On client, the grace period can only happen during"]
    #[doc = "                 mbedtls_ssl_read(), as opposed to mbedtls_ssl_write() and mbedtls_ssl_renegotiate()"]
    #[doc = "                 which always behave as if max_record was 0. The reason is,"]
    #[doc = "                 if we receive application data from the server, we need a"]
    #[doc = "                 place to write it, which only happens during mbedtls_ssl_read()."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param max_records Use MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED if you don't want to"]
    #[doc = "                 enforce renegotiation, or a non-negative value to enforce"]
    #[doc = "                 it but allow for a grace period of max_records records."]
    pub fn mbedtls_ssl_conf_renegotiation_enforced(
        conf: *mut mbedtls_ssl_config,
        max_records: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          Set record counter threshold for periodic renegotiation."]
    #[doc = "                 (Default: 2^48 - 1)"]
    #[doc = ""]
    #[doc = "                 Renegotiation is automatically triggered when a record"]
    #[doc = "                 counter (outgoing or incoming) crosses the defined"]
    #[doc = "                 threshold. The default value is meant to prevent the"]
    #[doc = "                 connection from being closed when the counter is about to"]
    #[doc = "                 reached its maximal value (it is not allowed to wrap)."]
    #[doc = ""]
    #[doc = "                 Lower values can be used to enforce policies such as \"keys"]
    #[doc = "                 must be refreshed every N packets with cipher X\"."]
    #[doc = ""]
    #[doc = "                 The renegotiation period can be disabled by setting"]
    #[doc = "                 conf->disable_renegotiation to"]
    #[doc = "                 MBEDTLS_SSL_RENEGOTIATION_DISABLED."]
    #[doc = ""]
    #[doc = " \\note           When the configured transport is"]
    #[doc = "                 MBEDTLS_SSL_TRANSPORT_DATAGRAM the maximum renegotiation"]
    #[doc = "                 period is 2^48 - 1, and for MBEDTLS_SSL_TRANSPORT_STREAM,"]
    #[doc = "                 the maximum renegotiation period is 2^64 - 1."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration"]
    #[doc = " \\param period   The threshold value: a big-endian 64-bit number."]
    pub fn mbedtls_ssl_conf_renegotiation_period(
        conf: *mut mbedtls_ssl_config,
        period: *const c_types::c_uchar,
    );
}
extern "C" {
    #[doc = " \\brief          Check if there is data already read from the"]
    #[doc = "                 underlying transport but not yet processed."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         0 if nothing's pending, 1 otherwise."]
    #[doc = ""]
    #[doc = " \\note           This is different in purpose and behaviour from"]
    #[doc = "                 \\c mbedtls_ssl_get_bytes_avail in that it considers"]
    #[doc = "                 any kind of unprocessed data, not only unread"]
    #[doc = "                 application data. If \\c mbedtls_ssl_get_bytes"]
    #[doc = "                 returns a non-zero value, this function will"]
    #[doc = "                 also signal pending data, but the converse does"]
    #[doc = "                 not hold. For example, in DTLS there might be"]
    #[doc = "                 further records waiting to be processed from"]
    #[doc = "                 the current underlying transport's datagram."]
    #[doc = ""]
    #[doc = " \\note           If this function returns 1 (data pending), this"]
    #[doc = "                 does not imply that a subsequent call to"]
    #[doc = "                 \\c mbedtls_ssl_read will provide any data;"]
    #[doc = "                 e.g., the unprocessed data might turn out"]
    #[doc = "                 to be an alert or a handshake message."]
    #[doc = ""]
    #[doc = " \\note           This function is useful in the following situation:"]
    #[doc = "                 If the SSL/TLS module successfully returns from an"]
    #[doc = "                 operation - e.g. a handshake or an application record"]
    #[doc = "                 read - and you're awaiting incoming data next, you"]
    #[doc = "                 must not immediately idle on the underlying transport"]
    #[doc = "                 to have data ready, but you need to check the value"]
    #[doc = "                 of this function first. The reason is that the desired"]
    #[doc = "                 data might already be read but not yet processed."]
    #[doc = "                 If, in contrast, a previous call to the SSL/TLS module"]
    #[doc = "                 returned MBEDTLS_ERR_SSL_WANT_READ, it is not necessary"]
    #[doc = "                 to call this function, as the latter error code entails"]
    #[doc = "                 that all internal data has been processed."]
    #[doc = ""]
    pub fn mbedtls_ssl_check_pending(ssl: *const mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Return the number of application data bytes"]
    #[doc = "                 remaining to be read from the current record."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         How many bytes are available in the application"]
    #[doc = "                 data record read buffer."]
    #[doc = ""]
    #[doc = " \\note           When working over a datagram transport, this is"]
    #[doc = "                 useful to detect the current datagram's boundary"]
    #[doc = "                 in case \\c mbedtls_ssl_read has written the maximal"]
    #[doc = "                 amount of data fitting into the input buffer."]
    #[doc = ""]
    pub fn mbedtls_ssl_get_bytes_avail(ssl: *const mbedtls_ssl_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Return the result of the certificate verification"]
    #[doc = ""]
    #[doc = " \\param ssl      The SSL context to use."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if the certificate verification was successful."]
    #[doc = " \\return         \\c -1u if the result is not available. This may happen"]
    #[doc = "                 e.g. if the handshake aborts early, or a verification"]
    #[doc = "                 callback returned a fatal error."]
    #[doc = " \\return         A bitwise combination of \\c MBEDTLS_X509_BADCERT_XXX"]
    #[doc = "                 and \\c MBEDTLS_X509_BADCRL_XXX failure flags; see x509.h."]
    pub fn mbedtls_ssl_get_verify_result(ssl: *const mbedtls_ssl_context) -> u32;
}
extern "C" {
    #[doc = " \\brief          Return the name of the current ciphersuite"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         a string containing the ciphersuite name"]
    pub fn mbedtls_ssl_get_ciphersuite(ssl: *const mbedtls_ssl_context) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief          Return the current SSL version (SSLv3/TLSv1/etc)"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         a string containing the SSL version"]
    pub fn mbedtls_ssl_get_version(ssl: *const mbedtls_ssl_context) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief          Return the (maximum) number of bytes added by the record"]
    #[doc = "                 layer: header + encryption/MAC overhead (inc. padding)"]
    #[doc = ""]
    #[doc = " \\note           This function is not available (always returns an error)"]
    #[doc = "                 when record compression is enabled."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Current maximum record expansion in bytes, or"]
    #[doc = "                 MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE if compression is"]
    #[doc = "                 enabled, which makes expansion much less predictable"]
    pub fn mbedtls_ssl_get_record_expansion(ssl: *const mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Return the maximum fragment length (payload, in bytes) for"]
    #[doc = "                 the output buffer. For the client, this is the configured"]
    #[doc = "                 value. For the server, it is the minimum of two - the"]
    #[doc = "                 configured value and the negotiated one."]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_conf_max_frag_len()"]
    #[doc = " \\sa             mbedtls_ssl_get_max_record_payload()"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Current maximum fragment length for the output buffer."]
    pub fn mbedtls_ssl_get_output_max_frag_len(ssl: *const mbedtls_ssl_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Return the maximum fragment length (payload, in bytes) for"]
    #[doc = "                 the input buffer. This is the negotiated maximum fragment"]
    #[doc = "                 length, or, if there is none, MBEDTLS_SSL_MAX_CONTENT_LEN."]
    #[doc = "                 If it is not defined either, the value is 2^14. This function"]
    #[doc = "                 works as its predecessor, \\c mbedtls_ssl_get_max_frag_len()."]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_conf_max_frag_len()"]
    #[doc = " \\sa             mbedtls_ssl_get_max_record_payload()"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Current maximum fragment length for the output buffer."]
    pub fn mbedtls_ssl_get_input_max_frag_len(ssl: *const mbedtls_ssl_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief          This function is a deprecated approach to getting the max"]
    #[doc = "                 fragment length. Its an alias for"]
    #[doc = "                 \\c mbedtls_ssl_get_output_max_frag_len(), as the behaviour"]
    #[doc = "                 is the same. See \\c mbedtls_ssl_get_output_max_frag_len() for"]
    #[doc = "                 more detail."]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_get_input_max_frag_len()"]
    #[doc = " \\sa             mbedtls_ssl_get_output_max_frag_len()"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Current maximum fragment length for the output buffer."]
    pub fn mbedtls_ssl_get_max_frag_len(ssl: *const mbedtls_ssl_context) -> size_t;
}
extern "C" {
    #[doc = " \\brief          Return the current maximum outgoing record payload in bytes."]
    #[doc = "                 This takes into account the config.h setting \\c"]
    #[doc = "                 MBEDTLS_SSL_OUT_CONTENT_LEN, the configured and negotiated"]
    #[doc = "                 max fragment length extension if used, and for DTLS the"]
    #[doc = "                 path MTU as configured and current record expansion."]
    #[doc = ""]
    #[doc = " \\note           With DTLS, \\c mbedtls_ssl_write() will return an error if"]
    #[doc = "                 called with a larger length value."]
    #[doc = "                 With TLS, \\c mbedtls_ssl_write() will fragment the input if"]
    #[doc = "                 necessary and return the number of bytes written; it is up"]
    #[doc = "                 to the caller to call \\c mbedtls_ssl_write() again in"]
    #[doc = "                 order to send the remaining bytes if any."]
    #[doc = ""]
    #[doc = " \\note           This function is not available (always returns an error)"]
    #[doc = "                 when record compression is enabled."]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_set_mtu()"]
    #[doc = " \\sa             mbedtls_ssl_get_output_max_frag_len()"]
    #[doc = " \\sa             mbedtls_ssl_get_input_max_frag_len()"]
    #[doc = " \\sa             mbedtls_ssl_get_record_expansion()"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         Current maximum payload for an outgoing record,"]
    #[doc = "                 or a negative error code."]
    pub fn mbedtls_ssl_get_max_out_record_payload(
        ssl: *const mbedtls_ssl_context,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Return the peer certificate from the current connection."]
    #[doc = ""]
    #[doc = " \\param  ssl     The SSL context to use. This must be initialized and setup."]
    #[doc = ""]
    #[doc = " \\return         The current peer certificate, if available."]
    #[doc = "                 The returned certificate is owned by the SSL context and"]
    #[doc = "                 is valid only until the next call to the SSL API."]
    #[doc = " \\return         \\c NULL if no peer certificate is available. This might"]
    #[doc = "                 be because the chosen ciphersuite doesn't use CRTs"]
    #[doc = "                 (PSK-based ciphersuites, for example), or because"]
    #[doc = "                 #MBEDTLS_SSL_KEEP_PEER_CERTIFICATE has been disabled,"]
    #[doc = "                 allowing the stack to free the peer's CRT to save memory."]
    #[doc = ""]
    #[doc = " \\note           For one-time inspection of the peer's certificate during"]
    #[doc = "                 the handshake, consider registering an X.509 CRT verification"]
    #[doc = "                 callback through mbedtls_ssl_conf_verify() instead of calling"]
    #[doc = "                 this function. Using mbedtls_ssl_conf_verify() also comes at"]
    #[doc = "                 the benefit of allowing you to influence the verification"]
    #[doc = "                 process, for example by masking expected and tolerated"]
    #[doc = "                 verification failures."]
    #[doc = ""]
    #[doc = " \\warning        You must not use the pointer returned by this function"]
    #[doc = "                 after any further call to the SSL API, including"]
    #[doc = "                 mbedtls_ssl_read() and mbedtls_ssl_write(); this is"]
    #[doc = "                 because the pointer might change during renegotiation,"]
    #[doc = "                 which happens transparently to the user."]
    #[doc = "                 If you want to use the certificate across API calls,"]
    #[doc = "                 you must make a copy."]
    pub fn mbedtls_ssl_get_peer_cert(ssl: *const mbedtls_ssl_context) -> *const mbedtls_x509_crt;
}
extern "C" {
    #[doc = " \\brief          Save session in order to resume it later (client-side only)"]
    #[doc = "                 Session data is copied to presented session structure."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param session  session context"]
    #[doc = ""]
    #[doc = " \\return         0 if successful,"]
    #[doc = "                 MBEDTLS_ERR_SSL_ALLOC_FAILED if memory allocation failed,"]
    #[doc = "                 MBEDTLS_ERR_SSL_BAD_INPUT_DATA if used server-side or"]
    #[doc = "                 arguments are otherwise invalid."]
    #[doc = ""]
    #[doc = " \\note           Only the server certificate is copied, and not the full chain,"]
    #[doc = "                 so you should not attempt to validate the certificate again"]
    #[doc = "                 by calling \\c mbedtls_x509_crt_verify() on it."]
    #[doc = "                 Instead, you should use the results from the verification"]
    #[doc = "                 in the original handshake by calling \\c mbedtls_ssl_get_verify_result()"]
    #[doc = "                 after loading the session again into a new SSL context"]
    #[doc = "                 using \\c mbedtls_ssl_set_session()."]
    #[doc = ""]
    #[doc = " \\note           Once the session object is not needed anymore, you should"]
    #[doc = "                 free it by calling \\c mbedtls_ssl_session_free()."]
    #[doc = ""]
    #[doc = " \\sa             mbedtls_ssl_set_session()"]
    pub fn mbedtls_ssl_get_session(
        ssl: *const mbedtls_ssl_context,
        session: *mut mbedtls_ssl_session,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform the SSL handshake"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         \\c 0 if successful."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_WANT_READ or #MBEDTLS_ERR_SSL_WANT_WRITE"]
    #[doc = "                 if the handshake is incomplete and waiting for data to"]
    #[doc = "                 be available for reading from or writing to the underlying"]
    #[doc = "                 transport - in this case you must call this function again"]
    #[doc = "                 when the underlying transport is ready for the operation."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS if an asynchronous"]
    #[doc = "                 operation is in progress (see"]
    #[doc = "                 mbedtls_ssl_conf_async_private_cb()) - in this case you"]
    #[doc = "                 must call this function again when the operation is ready."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS if a cryptographic"]
    #[doc = "                 operation is in progress (see mbedtls_ecp_set_max_ops()) -"]
    #[doc = "                 in this case you must call this function again to complete"]
    #[doc = "                 the handshake when you're done attending other tasks."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED if DTLS is in use"]
    #[doc = "                 and the client did not demonstrate reachability yet - in"]
    #[doc = "                 this case you must stop using the context (see below)."]
    #[doc = " \\return         Another SSL error code - in this case you must stop using"]
    #[doc = "                 the context (see below)."]
    #[doc = ""]
    #[doc = " \\warning        If this function returns something other than"]
    #[doc = "                 \\c 0,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_READ,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_WRITE,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS or"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS,"]
    #[doc = "                 you must stop using the SSL context for reading or writing,"]
    #[doc = "                 and either free it or call \\c mbedtls_ssl_session_reset()"]
    #[doc = "                 on it before re-using it for a new connection; the current"]
    #[doc = "                 connection must be closed."]
    #[doc = ""]
    #[doc = " \\note           If DTLS is in use, then you may choose to handle"]
    #[doc = "                 #MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED specially for logging"]
    #[doc = "                 purposes, as it is an expected return value rather than an"]
    #[doc = "                 actual error, but you still need to reset/free the context."]
    #[doc = ""]
    #[doc = " \\note           Remarks regarding event-driven DTLS:"]
    #[doc = "                 If the function returns #MBEDTLS_ERR_SSL_WANT_READ, no datagram"]
    #[doc = "                 from the underlying transport layer is currently being processed,"]
    #[doc = "                 and it is safe to idle until the timer or the underlying transport"]
    #[doc = "                 signal a new event. This is not true for a successful handshake,"]
    #[doc = "                 in which case the datagram of the underlying transport that is"]
    #[doc = "                 currently being processed might or might not contain further"]
    #[doc = "                 DTLS records."]
    pub fn mbedtls_ssl_handshake(ssl: *mut mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Perform a single step of the SSL handshake"]
    #[doc = ""]
    #[doc = " \\note           The state of the context (ssl->state) will be at"]
    #[doc = "                 the next state after this function returns \\c 0. Do not"]
    #[doc = "                 call this function if state is MBEDTLS_SSL_HANDSHAKE_OVER."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         See mbedtls_ssl_handshake()."]
    #[doc = ""]
    #[doc = " \\warning        If this function returns something other than \\c 0,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_READ, #MBEDTLS_ERR_SSL_WANT_WRITE,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS or"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS, you must stop using"]
    #[doc = "                 the SSL context for reading or writing, and either free it"]
    #[doc = "                 or call \\c mbedtls_ssl_session_reset() on it before"]
    #[doc = "                 re-using it for a new connection; the current connection"]
    #[doc = "                 must be closed."]
    pub fn mbedtls_ssl_handshake_step(ssl: *mut mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Initiate an SSL renegotiation on the running connection."]
    #[doc = "                 Client: perform the renegotiation right now."]
    #[doc = "                 Server: request renegotiation, which will be performed"]
    #[doc = "                 during the next call to mbedtls_ssl_read() if honored by"]
    #[doc = "                 client."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or any mbedtls_ssl_handshake() return"]
    #[doc = "                 value except #MBEDTLS_ERR_SSL_CLIENT_RECONNECT that can't"]
    #[doc = "                 happen during a renegotiation."]
    #[doc = ""]
    #[doc = " \\warning        If this function returns something other than \\c 0,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_READ, #MBEDTLS_ERR_SSL_WANT_WRITE,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS or"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS, you must stop using"]
    #[doc = "                 the SSL context for reading or writing, and either free it"]
    #[doc = "                 or call \\c mbedtls_ssl_session_reset() on it before"]
    #[doc = "                 re-using it for a new connection; the current connection"]
    #[doc = "                 must be closed."]
    #[doc = ""]
    pub fn mbedtls_ssl_renegotiate(ssl: *mut mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Read at most 'len' application data bytes"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param buf      buffer that will hold the data"]
    #[doc = " \\param len      maximum number of bytes to read"]
    #[doc = ""]
    #[doc = " \\return         The (positive) number of bytes read if successful."]
    #[doc = " \\return         \\c 0 if the read end of the underlying transport was closed"]
    #[doc = "                 without sending a CloseNotify beforehand, which might happen"]
    #[doc = "                 because of various reasons (internal error of an underlying"]
    #[doc = "                 stack, non-conformant peer not sending a CloseNotify and"]
    #[doc = "                 such) - in this case you must stop using the context"]
    #[doc = "                 (see below)."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY if the underlying"]
    #[doc = "                 transport is still functional, but the peer has"]
    #[doc = "                 acknowledged to not send anything anymore."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_WANT_READ or #MBEDTLS_ERR_SSL_WANT_WRITE"]
    #[doc = "                 if the handshake is incomplete and waiting for data to"]
    #[doc = "                 be available for reading from or writing to the underlying"]
    #[doc = "                 transport - in this case you must call this function again"]
    #[doc = "                 when the underlying transport is ready for the operation."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS if an asynchronous"]
    #[doc = "                 operation is in progress (see"]
    #[doc = "                 mbedtls_ssl_conf_async_private_cb()) - in this case you"]
    #[doc = "                 must call this function again when the operation is ready."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS if a cryptographic"]
    #[doc = "                 operation is in progress (see mbedtls_ecp_set_max_ops()) -"]
    #[doc = "                 in this case you must call this function again to complete"]
    #[doc = "                 the handshake when you're done attending other tasks."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_CLIENT_RECONNECT if we're at the server"]
    #[doc = "                 side of a DTLS connection and the client is initiating a"]
    #[doc = "                 new connection using the same source port. See below."]
    #[doc = " \\return         Another SSL error code - in this case you must stop using"]
    #[doc = "                 the context (see below)."]
    #[doc = ""]
    #[doc = " \\warning        If this function returns something other than"]
    #[doc = "                 a positive value,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_READ,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_WRITE,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS or"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CLIENT_RECONNECT,"]
    #[doc = "                 you must stop using the SSL context for reading or writing,"]
    #[doc = "                 and either free it or call \\c mbedtls_ssl_session_reset()"]
    #[doc = "                 on it before re-using it for a new connection; the current"]
    #[doc = "                 connection must be closed."]
    #[doc = ""]
    #[doc = " \\note           When this function returns #MBEDTLS_ERR_SSL_CLIENT_RECONNECT"]
    #[doc = "                 (which can only happen server-side), it means that a client"]
    #[doc = "                 is initiating a new connection using the same source port."]
    #[doc = "                 You can either treat that as a connection close and wait"]
    #[doc = "                 for the client to resend a ClientHello, or directly"]
    #[doc = "                 continue with \\c mbedtls_ssl_handshake() with the same"]
    #[doc = "                 context (as it has been reset internally). Either way, you"]
    #[doc = "                 must make sure this is seen by the application as a new"]
    #[doc = "                 connection: application state, if any, should be reset, and"]
    #[doc = "                 most importantly the identity of the client must be checked"]
    #[doc = "                 again. WARNING: not validating the identity of the client"]
    #[doc = "                 again, or not transmitting the new identity to the"]
    #[doc = "                 application layer, would allow authentication bypass!"]
    #[doc = ""]
    #[doc = " \\note           Remarks regarding event-driven DTLS:"]
    #[doc = "                 - If the function returns #MBEDTLS_ERR_SSL_WANT_READ, no datagram"]
    #[doc = "                   from the underlying transport layer is currently being processed,"]
    #[doc = "                   and it is safe to idle until the timer or the underlying transport"]
    #[doc = "                   signal a new event."]
    #[doc = "                 - This function may return MBEDTLS_ERR_SSL_WANT_READ even if data was"]
    #[doc = "                   initially available on the underlying transport, as this data may have"]
    #[doc = "                   been only e.g. duplicated messages or a renegotiation request."]
    #[doc = "                   Therefore, you must be prepared to receive MBEDTLS_ERR_SSL_WANT_READ even"]
    #[doc = "                   when reacting to an incoming-data event from the underlying transport."]
    #[doc = "                 - On success, the datagram of the underlying transport that is currently"]
    #[doc = "                   being processed may contain further DTLS records. You should call"]
    #[doc = "                   \\c mbedtls_ssl_check_pending to check for remaining records."]
    #[doc = ""]
    pub fn mbedtls_ssl_read(
        ssl: *mut mbedtls_ssl_context,
        buf: *mut c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Try to write exactly 'len' application data bytes"]
    #[doc = ""]
    #[doc = " \\warning        This function will do partial writes in some cases. If the"]
    #[doc = "                 return value is non-negative but less than length, the"]
    #[doc = "                 function must be called again with updated arguments:"]
    #[doc = "                 buf + ret, len - ret (if ret is the return value) until"]
    #[doc = "                 it returns a value equal to the last 'len' argument."]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = " \\param buf      buffer holding the data"]
    #[doc = " \\param len      how many bytes must be written"]
    #[doc = ""]
    #[doc = " \\return         The (non-negative) number of bytes actually written if"]
    #[doc = "                 successful (may be less than \\p len)."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_WANT_READ or #MBEDTLS_ERR_SSL_WANT_WRITE"]
    #[doc = "                 if the handshake is incomplete and waiting for data to"]
    #[doc = "                 be available for reading from or writing to the underlying"]
    #[doc = "                 transport - in this case you must call this function again"]
    #[doc = "                 when the underlying transport is ready for the operation."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS if an asynchronous"]
    #[doc = "                 operation is in progress (see"]
    #[doc = "                 mbedtls_ssl_conf_async_private_cb()) - in this case you"]
    #[doc = "                 must call this function again when the operation is ready."]
    #[doc = " \\return         #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS if a cryptographic"]
    #[doc = "                 operation is in progress (see mbedtls_ecp_set_max_ops()) -"]
    #[doc = "                 in this case you must call this function again to complete"]
    #[doc = "                 the handshake when you're done attending other tasks."]
    #[doc = " \\return         Another SSL error code - in this case you must stop using"]
    #[doc = "                 the context (see below)."]
    #[doc = ""]
    #[doc = " \\warning        If this function returns something other than"]
    #[doc = "                 a non-negative value,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_READ,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_WANT_WRITE,"]
    #[doc = "                 #MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS or"]
    #[doc = "                 #MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS,"]
    #[doc = "                 you must stop using the SSL context for reading or writing,"]
    #[doc = "                 and either free it or call \\c mbedtls_ssl_session_reset()"]
    #[doc = "                 on it before re-using it for a new connection; the current"]
    #[doc = "                 connection must be closed."]
    #[doc = ""]
    #[doc = " \\note           When this function returns #MBEDTLS_ERR_SSL_WANT_WRITE/READ,"]
    #[doc = "                 it must be called later with the *same* arguments,"]
    #[doc = "                 until it returns a value greater that or equal to 0. When"]
    #[doc = "                 the function returns #MBEDTLS_ERR_SSL_WANT_WRITE there may be"]
    #[doc = "                 some partial data in the output buffer, however this is not"]
    #[doc = "                 yet sent."]
    #[doc = ""]
    #[doc = " \\note           If the requested length is greater than the maximum"]
    #[doc = "                 fragment length (either the built-in limit or the one set"]
    #[doc = "                 or negotiated with the peer), then:"]
    #[doc = "                 - with TLS, less bytes than requested are written."]
    #[doc = "                 - with DTLS, MBEDTLS_ERR_SSL_BAD_INPUT_DATA is returned."]
    #[doc = "                 \\c mbedtls_ssl_get_output_max_frag_len() may be used to"]
    #[doc = "                 query the active maximum fragment length."]
    #[doc = ""]
    #[doc = " \\note           Attempting to write 0 bytes will result in an empty TLS"]
    #[doc = "                 application record being sent."]
    pub fn mbedtls_ssl_write(
        ssl: *mut mbedtls_ssl_context,
        buf: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Send an alert message"]
    #[doc = ""]
    #[doc = " \\param ssl       SSL context"]
    #[doc = " \\param level     The alert level of the message"]
    #[doc = "                  (MBEDTLS_SSL_ALERT_LEVEL_WARNING or MBEDTLS_SSL_ALERT_LEVEL_FATAL)"]
    #[doc = " \\param message   The alert message (SSL_ALERT_MSG_*)"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific SSL error code."]
    #[doc = ""]
    #[doc = " \\note           If this function returns something other than 0 or"]
    #[doc = "                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using"]
    #[doc = "                 the SSL context for reading or writing, and either free it or"]
    #[doc = "                 call \\c mbedtls_ssl_session_reset() on it before re-using it"]
    #[doc = "                 for a new connection; the current connection must be closed."]
    pub fn mbedtls_ssl_send_alert_message(
        ssl: *mut mbedtls_ssl_context,
        level: c_types::c_uchar,
        message: c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Notify the peer that the connection is being closed"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or a specific SSL error code."]
    #[doc = ""]
    #[doc = " \\note           If this function returns something other than 0 or"]
    #[doc = "                 MBEDTLS_ERR_SSL_WANT_READ/WRITE, you must stop using"]
    #[doc = "                 the SSL context for reading or writing, and either free it or"]
    #[doc = "                 call \\c mbedtls_ssl_session_reset() on it before re-using it"]
    #[doc = "                 for a new connection; the current connection must be closed."]
    pub fn mbedtls_ssl_close_notify(ssl: *mut mbedtls_ssl_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Free referenced items in an SSL context and clear memory"]
    #[doc = ""]
    #[doc = " \\param ssl      SSL context"]
    pub fn mbedtls_ssl_free(ssl: *mut mbedtls_ssl_context);
}
extern "C" {
    #[doc = " \\brief          Initialize an SSL configuration context"]
    #[doc = "                 Just makes the context ready for"]
    #[doc = "                 mbedtls_ssl_config_defaults() or mbedtls_ssl_config_free()."]
    #[doc = ""]
    #[doc = " \\note           You need to call mbedtls_ssl_config_defaults() unless you"]
    #[doc = "                 manually set all of the relevant fields yourself."]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration context"]
    pub fn mbedtls_ssl_config_init(conf: *mut mbedtls_ssl_config);
}
extern "C" {
    #[doc = " \\brief          Load reasonnable default SSL configuration values."]
    #[doc = "                 (You need to call mbedtls_ssl_config_init() first.)"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration context"]
    #[doc = " \\param endpoint MBEDTLS_SSL_IS_CLIENT or MBEDTLS_SSL_IS_SERVER"]
    #[doc = " \\param transport MBEDTLS_SSL_TRANSPORT_STREAM for TLS, or"]
    #[doc = "                  MBEDTLS_SSL_TRANSPORT_DATAGRAM for DTLS"]
    #[doc = " \\param preset   a MBEDTLS_SSL_PRESET_XXX value"]
    #[doc = ""]
    #[doc = " \\note           See \\c mbedtls_ssl_conf_transport() for notes on DTLS."]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or"]
    #[doc = "                 MBEDTLS_ERR_XXX_ALLOC_FAILED on memory allocation error."]
    pub fn mbedtls_ssl_config_defaults(
        conf: *mut mbedtls_ssl_config,
        endpoint: c_types::c_int,
        transport: c_types::c_int,
        preset: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Free an SSL configuration context"]
    #[doc = ""]
    #[doc = " \\param conf     SSL configuration context"]
    pub fn mbedtls_ssl_config_free(conf: *mut mbedtls_ssl_config);
}
extern "C" {
    #[doc = " \\brief          Initialize SSL session structure"]
    #[doc = ""]
    #[doc = " \\param session  SSL session"]
    pub fn mbedtls_ssl_session_init(session: *mut mbedtls_ssl_session);
}
extern "C" {
    #[doc = " \\brief          Free referenced items in an SSL session including the"]
    #[doc = "                 peer certificate and clear memory"]
    #[doc = ""]
    #[doc = " \\note           A session object can be freed even if the SSL context"]
    #[doc = "                 that was used to retrieve the session is still in use."]
    #[doc = ""]
    #[doc = " \\param session  SSL session"]
    pub fn mbedtls_ssl_session_free(session: *mut mbedtls_ssl_session);
}
extern "C" {
    #[doc = " \\brief          TLS-PRF function for key derivation."]
    #[doc = ""]
    #[doc = " \\param prf      The tls_prf type function type to be used."]
    #[doc = " \\param secret   Secret for the key derivation function."]
    #[doc = " \\param slen     Length of the secret."]
    #[doc = " \\param label    String label for the key derivation function,"]
    #[doc = "                 terminated with null character."]
    #[doc = " \\param random   Random bytes."]
    #[doc = " \\param rlen     Length of the random bytes buffer."]
    #[doc = " \\param dstbuf   The buffer holding the derived key."]
    #[doc = " \\param dlen     Length of the output buffer."]
    #[doc = ""]
    #[doc = " \\return         0 on success. An SSL specific error on failure."]
    pub fn mbedtls_ssl_tls_prf(
        prf: mbedtls_tls_prf_types,
        secret: *const c_types::c_uchar,
        slen: size_t,
        label: *const c_types::c_char,
        random: *const c_types::c_uchar,
        rlen: size_t,
        dstbuf: *mut c_types::c_uchar,
        dlen: size_t,
    ) -> c_types::c_int;
}
#[doc = " Wrapper type for sockets."]
#[doc = ""]
#[doc = " Currently backed by just a file descriptor, but might be more in the future"]
#[doc = " (eg two file descriptors for combined IPv4 + IPv6 support, or additional"]
#[doc = " structures for hand-made UDP demultiplexing)."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mbedtls_net_context {
    #[doc = "< The underlying file descriptor"]
    pub fd: c_types::c_int,
}
extern "C" {
    #[doc = " \\brief          Initialize a context"]
    #[doc = "                 Just makes the context ready to be used or freed safely."]
    #[doc = ""]
    #[doc = " \\param ctx      Context to initialize"]
    pub fn mbedtls_net_init(ctx: *mut mbedtls_net_context);
}
extern "C" {
    #[doc = " \\brief          Initiate a connection with host:port in the given protocol"]
    #[doc = ""]
    #[doc = " \\param ctx      Socket to use"]
    #[doc = " \\param host     Host to connect to"]
    #[doc = " \\param port     Port to connect to"]
    #[doc = " \\param proto    Protocol: MBEDTLS_NET_PROTO_TCP or MBEDTLS_NET_PROTO_UDP"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or one of:"]
    #[doc = "                      MBEDTLS_ERR_NET_SOCKET_FAILED,"]
    #[doc = "                      MBEDTLS_ERR_NET_UNKNOWN_HOST,"]
    #[doc = "                      MBEDTLS_ERR_NET_CONNECT_FAILED"]
    #[doc = ""]
    #[doc = " \\note           Sets the socket in connected mode even with UDP."]
    pub fn mbedtls_net_connect(
        ctx: *mut mbedtls_net_context,
        host: *const c_types::c_char,
        port: *const c_types::c_char,
        proto: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Create a receiving socket on bind_ip:port in the chosen"]
    #[doc = "                 protocol. If bind_ip == NULL, all interfaces are bound."]
    #[doc = ""]
    #[doc = " \\param ctx      Socket to use"]
    #[doc = " \\param bind_ip  IP to bind to, can be NULL"]
    #[doc = " \\param port     Port number to use"]
    #[doc = " \\param proto    Protocol: MBEDTLS_NET_PROTO_TCP or MBEDTLS_NET_PROTO_UDP"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or one of:"]
    #[doc = "                      MBEDTLS_ERR_NET_SOCKET_FAILED,"]
    #[doc = "                      MBEDTLS_ERR_NET_UNKNOWN_HOST,"]
    #[doc = "                      MBEDTLS_ERR_NET_BIND_FAILED,"]
    #[doc = "                      MBEDTLS_ERR_NET_LISTEN_FAILED"]
    #[doc = ""]
    #[doc = " \\note           Regardless of the protocol, opens the sockets and binds it."]
    #[doc = "                 In addition, make the socket listening if protocol is TCP."]
    pub fn mbedtls_net_bind(
        ctx: *mut mbedtls_net_context,
        bind_ip: *const c_types::c_char,
        port: *const c_types::c_char,
        proto: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Accept a connection from a remote client"]
    #[doc = ""]
    #[doc = " \\param bind_ctx  Relevant socket"]
    #[doc = " \\param client_ctx Will contain the connected client socket"]
    #[doc = " \\param client_ip Will contain the client IP address, can be NULL"]
    #[doc = " \\param buf_size  Size of the client_ip buffer"]
    #[doc = " \\param ip_len    Will receive the size of the client IP written,"]
    #[doc = "                  can be NULL if client_ip is null"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or"]
    #[doc = "                  MBEDTLS_ERR_NET_SOCKET_FAILED,"]
    #[doc = "                  MBEDTLS_ERR_NET_BIND_FAILED,"]
    #[doc = "                  MBEDTLS_ERR_NET_ACCEPT_FAILED, or"]
    #[doc = "                  MBEDTLS_ERR_NET_BUFFER_TOO_SMALL if buf_size is too small,"]
    #[doc = "                  MBEDTLS_ERR_SSL_WANT_READ if bind_fd was set to"]
    #[doc = "                  non-blocking and accept() would block."]
    pub fn mbedtls_net_accept(
        bind_ctx: *mut mbedtls_net_context,
        client_ctx: *mut mbedtls_net_context,
        client_ip: *mut c_types::c_void,
        buf_size: size_t,
        ip_len: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Check and wait for the context to be ready for read/write"]
    #[doc = ""]
    #[doc = " \\note           The current implementation of this function uses"]
    #[doc = "                 select() and returns an error if the file descriptor"]
    #[doc = "                 is \\c FD_SETSIZE or greater."]
    #[doc = ""]
    #[doc = " \\param ctx      Socket to check"]
    #[doc = " \\param rw       Bitflag composed of MBEDTLS_NET_POLL_READ and"]
    #[doc = "                 MBEDTLS_NET_POLL_WRITE specifying the events"]
    #[doc = "                 to wait for:"]
    #[doc = "                 - If MBEDTLS_NET_POLL_READ is set, the function"]
    #[doc = "                   will return as soon as the net context is available"]
    #[doc = "                   for reading."]
    #[doc = "                 - If MBEDTLS_NET_POLL_WRITE is set, the function"]
    #[doc = "                   will return as soon as the net context is available"]
    #[doc = "                   for writing."]
    #[doc = " \\param timeout  Maximal amount of time to wait before returning,"]
    #[doc = "                 in milliseconds. If \\c timeout is zero, the"]
    #[doc = "                 function returns immediately. If \\c timeout is"]
    #[doc = "                 -1u, the function blocks potentially indefinitely."]
    #[doc = ""]
    #[doc = " \\return         Bitmask composed of MBEDTLS_NET_POLL_READ/WRITE"]
    #[doc = "                 on success or timeout, or a negative return code otherwise."]
    pub fn mbedtls_net_poll(ctx: *mut mbedtls_net_context, rw: u32, timeout: u32)
        -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the socket blocking"]
    #[doc = ""]
    #[doc = " \\param ctx      Socket to set"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or a non-zero error code"]
    pub fn mbedtls_net_set_block(ctx: *mut mbedtls_net_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Set the socket non-blocking"]
    #[doc = ""]
    #[doc = " \\param ctx      Socket to set"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or a non-zero error code"]
    pub fn mbedtls_net_set_nonblock(ctx: *mut mbedtls_net_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Portable usleep helper"]
    #[doc = ""]
    #[doc = " \\param usec     Amount of microseconds to sleep"]
    #[doc = ""]
    #[doc = " \\note           Real amount of time slept will not be less than"]
    #[doc = "                 select()'s timeout granularity (typically, 10ms)."]
    pub fn mbedtls_net_usleep(usec: c_types::c_ulong);
}
extern "C" {
    #[doc = " \\brief          Read at most 'len' characters. If no error occurs,"]
    #[doc = "                 the actual amount read is returned."]
    #[doc = ""]
    #[doc = " \\param ctx      Socket"]
    #[doc = " \\param buf      The buffer to write to"]
    #[doc = " \\param len      Maximum length of the buffer"]
    #[doc = ""]
    #[doc = " \\return         the number of bytes received,"]
    #[doc = "                 or a non-zero error code; with a non-blocking socket,"]
    #[doc = "                 MBEDTLS_ERR_SSL_WANT_READ indicates read() would block."]
    pub fn mbedtls_net_recv(
        ctx: *mut c_types::c_void,
        buf: *mut c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Write at most 'len' characters. If no error occurs,"]
    #[doc = "                 the actual amount read is returned."]
    #[doc = ""]
    #[doc = " \\param ctx      Socket"]
    #[doc = " \\param buf      The buffer to read from"]
    #[doc = " \\param len      The length of the buffer"]
    #[doc = ""]
    #[doc = " \\return         the number of bytes sent,"]
    #[doc = "                 or a non-zero error code; with a non-blocking socket,"]
    #[doc = "                 MBEDTLS_ERR_SSL_WANT_WRITE indicates write() would block."]
    pub fn mbedtls_net_send(
        ctx: *mut c_types::c_void,
        buf: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Read at most 'len' characters, blocking for at most"]
    #[doc = "                 'timeout' seconds. If no error occurs, the actual amount"]
    #[doc = "                 read is returned."]
    #[doc = ""]
    #[doc = " \\note           The current implementation of this function uses"]
    #[doc = "                 select() and returns an error if the file descriptor"]
    #[doc = "                 is \\c FD_SETSIZE or greater."]
    #[doc = ""]
    #[doc = " \\param ctx      Socket"]
    #[doc = " \\param buf      The buffer to write to"]
    #[doc = " \\param len      Maximum length of the buffer"]
    #[doc = " \\param timeout  Maximum number of milliseconds to wait for data"]
    #[doc = "                 0 means no timeout (wait forever)"]
    #[doc = ""]
    #[doc = " \\return         The number of bytes received if successful."]
    #[doc = "                 MBEDTLS_ERR_SSL_TIMEOUT if the operation timed out."]
    #[doc = "                 MBEDTLS_ERR_SSL_WANT_READ if interrupted by a signal."]
    #[doc = "                 Another negative error code (MBEDTLS_ERR_NET_xxx)"]
    #[doc = "                 for other failures."]
    #[doc = ""]
    #[doc = " \\note           This function will block (until data becomes available or"]
    #[doc = "                 timeout is reached) even if the socket is set to"]
    #[doc = "                 non-blocking. Handling timeouts with non-blocking reads"]
    #[doc = "                 requires a different strategy."]
    pub fn mbedtls_net_recv_timeout(
        ctx: *mut c_types::c_void,
        buf: *mut c_types::c_uchar,
        len: size_t,
        timeout: u32,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Closes down the connection and free associated data"]
    #[doc = ""]
    #[doc = " \\param ctx      The context to close"]
    pub fn mbedtls_net_close(ctx: *mut mbedtls_net_context);
}
extern "C" {
    #[doc = " \\brief          Gracefully shutdown the connection and free associated data"]
    #[doc = ""]
    #[doc = " \\param ctx      The context to free"]
    pub fn mbedtls_net_free(ctx: *mut mbedtls_net_context);
}
#[doc = " \\brief          The SHA-512 context structure."]
#[doc = ""]
#[doc = "                 The structure is used both for SHA-384 and for SHA-512"]
#[doc = "                 checksum calculations. The choice between these two is"]
#[doc = "                 made in the call to mbedtls_sha512_starts_ret()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_sha512_context {
    #[doc = "< The number of Bytes processed."]
    pub total: [u64; 2usize],
    #[doc = "< The intermediate digest state."]
    pub state: [u64; 8usize],
    #[doc = "< The data block being processed."]
    pub buffer: [c_types::c_uchar; 128usize],
    #[doc = "< Determines which function to use:"]
    #[doc = "0: Use SHA-512, or 1: Use SHA-384."]
    pub is384: c_types::c_int,
}
impl Default for mbedtls_sha512_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief          This function initializes a SHA-512 context."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context to initialize. This must"]
    #[doc = "                 not be \\c NULL."]
    pub fn mbedtls_sha512_init(ctx: *mut mbedtls_sha512_context);
}
extern "C" {
    #[doc = " \\brief          This function clears a SHA-512 context."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context to clear. This may be \\c NULL,"]
    #[doc = "                 in which case this function does nothing. If it"]
    #[doc = "                 is not \\c NULL, it must point to an initialized"]
    #[doc = "                 SHA-512 context."]
    pub fn mbedtls_sha512_free(ctx: *mut mbedtls_sha512_context);
}
extern "C" {
    #[doc = " \\brief          This function clones the state of a SHA-512 context."]
    #[doc = ""]
    #[doc = " \\param dst      The destination context. This must be initialized."]
    #[doc = " \\param src      The context to clone. This must be initialized."]
    pub fn mbedtls_sha512_clone(
        dst: *mut mbedtls_sha512_context,
        src: *const mbedtls_sha512_context,
    );
}
extern "C" {
    #[doc = " \\brief          This function starts a SHA-384 or SHA-512 checksum"]
    #[doc = "                 calculation."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context to use. This must be initialized."]
    #[doc = " \\param is384    Determines which function to use. This must be"]
    #[doc = "                 either \\c 0 for SHA-512, or \\c 1 for SHA-384."]
    #[doc = ""]
    #[doc = " \\note           When \\c MBEDTLS_SHA512_NO_SHA384 is defined, \\p is384 must"]
    #[doc = "                 be \\c 0, or the function will return"]
    #[doc = "                 #MBEDTLS_ERR_SHA512_BAD_INPUT_DATA."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_sha512_starts_ret(
        ctx: *mut mbedtls_sha512_context,
        is384: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function feeds an input buffer into an ongoing"]
    #[doc = "                 SHA-512 checksum calculation."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized"]
    #[doc = "                 and have a hash operation started."]
    #[doc = " \\param input    The buffer holding the input data. This must"]
    #[doc = "                 be a readable buffer of length \\p ilen Bytes."]
    #[doc = " \\param ilen     The length of the input data in Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_sha512_update_ret(
        ctx: *mut mbedtls_sha512_context,
        input: *const c_types::c_uchar,
        ilen: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function finishes the SHA-512 operation, and writes"]
    #[doc = "                 the result to the output buffer."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized"]
    #[doc = "                 and have a hash operation started."]
    #[doc = " \\param output   The SHA-384 or SHA-512 checksum result."]
    #[doc = "                 This must be a writable buffer of length \\c 64 Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_sha512_finish_ret(
        ctx: *mut mbedtls_sha512_context,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function processes a single data block within"]
    #[doc = "                 the ongoing SHA-512 computation."]
    #[doc = "                 This function is for internal use only."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized."]
    #[doc = " \\param data     The buffer holding one block of data. This"]
    #[doc = "                 must be a readable buffer of length \\c 128 Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_internal_sha512_process(
        ctx: *mut mbedtls_sha512_context,
        data: *const c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function starts a SHA-384 or SHA-512 checksum"]
    #[doc = "                 calculation."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_sha512_starts_ret() in 2.7.0"]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context to use. This must be initialized."]
    #[doc = " \\param is384    Determines which function to use. This must be either"]
    #[doc = "                 \\c 0 for SHA-512 or \\c 1 for SHA-384."]
    #[doc = ""]
    #[doc = " \\note           When \\c MBEDTLS_SHA512_NO_SHA384 is defined, \\p is384 must"]
    #[doc = "                 be \\c 0, or the function will fail to work."]
    pub fn mbedtls_sha512_starts(ctx: *mut mbedtls_sha512_context, is384: c_types::c_int);
}
extern "C" {
    #[doc = " \\brief          This function feeds an input buffer into an ongoing"]
    #[doc = "                 SHA-512 checksum calculation."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_sha512_update_ret() in 2.7.0."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized"]
    #[doc = "                 and have a hash operation started."]
    #[doc = " \\param input    The buffer holding the data. This must be a readable"]
    #[doc = "                 buffer of length \\p ilen Bytes."]
    #[doc = " \\param ilen     The length of the input data in Bytes."]
    pub fn mbedtls_sha512_update(
        ctx: *mut mbedtls_sha512_context,
        input: *const c_types::c_uchar,
        ilen: size_t,
    );
}
extern "C" {
    #[doc = " \\brief          This function finishes the SHA-512 operation, and writes"]
    #[doc = "                 the result to the output buffer."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_sha512_finish_ret() in 2.7.0."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized"]
    #[doc = "                 and have a hash operation started."]
    #[doc = " \\param output   The SHA-384 or SHA-512 checksum result. This must"]
    #[doc = "                 be a writable buffer of size \\c 64 Bytes."]
    pub fn mbedtls_sha512_finish(ctx: *mut mbedtls_sha512_context, output: *mut c_types::c_uchar);
}
extern "C" {
    #[doc = " \\brief          This function processes a single data block within"]
    #[doc = "                 the ongoing SHA-512 computation. This function is for"]
    #[doc = "                 internal use only."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_internal_sha512_process() in 2.7.0."]
    #[doc = ""]
    #[doc = " \\param ctx      The SHA-512 context. This must be initialized."]
    #[doc = " \\param data     The buffer holding one block of data. This must be"]
    #[doc = "                 a readable buffer of length \\c 128 Bytes."]
    pub fn mbedtls_sha512_process(ctx: *mut mbedtls_sha512_context, data: *const c_types::c_uchar);
}
extern "C" {
    #[doc = " \\brief          This function calculates the SHA-512 or SHA-384"]
    #[doc = "                 checksum of a buffer."]
    #[doc = ""]
    #[doc = "                 The function allocates the context, performs the"]
    #[doc = "                 calculation, and frees the context."]
    #[doc = ""]
    #[doc = "                 The SHA-512 result is calculated as"]
    #[doc = "                 output = SHA-512(input buffer)."]
    #[doc = ""]
    #[doc = " \\param input    The buffer holding the input data. This must be"]
    #[doc = "                 a readable buffer of length \\p ilen Bytes."]
    #[doc = " \\param ilen     The length of the input data in Bytes."]
    #[doc = " \\param output   The SHA-384 or SHA-512 checksum result."]
    #[doc = "                 This must be a writable buffer of length \\c 64 Bytes."]
    #[doc = " \\param is384    Determines which function to use. This must be either"]
    #[doc = "                 \\c 0 for SHA-512, or \\c 1 for SHA-384."]
    #[doc = ""]
    #[doc = " \\note           When \\c MBEDTLS_SHA512_NO_SHA384 is defined, \\p is384 must"]
    #[doc = "                 be \\c 0, or the function will return"]
    #[doc = "                 #MBEDTLS_ERR_SHA512_BAD_INPUT_DATA."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         A negative error code on failure."]
    pub fn mbedtls_sha512_ret(
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        is384: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function calculates the SHA-512 or SHA-384"]
    #[doc = "                 checksum of a buffer."]
    #[doc = ""]
    #[doc = "                 The function allocates the context, performs the"]
    #[doc = "                 calculation, and frees the context."]
    #[doc = ""]
    #[doc = "                 The SHA-512 result is calculated as"]
    #[doc = "                 output = SHA-512(input buffer)."]
    #[doc = ""]
    #[doc = " \\deprecated     Superseded by mbedtls_sha512_ret() in 2.7.0"]
    #[doc = ""]
    #[doc = " \\param input    The buffer holding the data. This must be a"]
    #[doc = "                 readable buffer of length \\p ilen Bytes."]
    #[doc = " \\param ilen     The length of the input data in Bytes."]
    #[doc = " \\param output   The SHA-384 or SHA-512 checksum result. This must"]
    #[doc = "                 be a writable buffer of length \\c 64 Bytes."]
    #[doc = " \\param is384    Determines which function to use. This must be either"]
    #[doc = "                 \\c 0 for SHA-512, or \\c 1 for SHA-384."]
    #[doc = ""]
    #[doc = " \\note           When \\c MBEDTLS_SHA512_NO_SHA384 is defined, \\p is384 must"]
    #[doc = "                 be \\c 0, or the function will fail to work."]
    pub fn mbedtls_sha512(
        input: *const c_types::c_uchar,
        ilen: size_t,
        output: *mut c_types::c_uchar,
        is384: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief          The SHA-384 or SHA-512 checkup routine."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         \\c 1 on failure."]
    pub fn mbedtls_sha512_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
#[doc = " \\brief           Entropy poll callback pointer"]
#[doc = ""]
#[doc = " \\param data      Callback-specific data pointer"]
#[doc = " \\param output    Data to fill"]
#[doc = " \\param len       Maximum size to provide"]
#[doc = " \\param olen      The actual amount of bytes put into the buffer (Can be 0)"]
#[doc = ""]
#[doc = " \\return          0 if no critical failures occurred,"]
#[doc = "                  MBEDTLS_ERR_ENTROPY_SOURCE_FAILED otherwise"]
pub type mbedtls_entropy_f_source_ptr = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut c_types::c_void,
        output: *mut c_types::c_uchar,
        len: size_t,
        olen: *mut size_t,
    ) -> c_types::c_int,
>;
#[doc = " \\brief           Entropy source state"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_entropy_source_state {
    #[doc = "< The entropy source callback"]
    pub f_source: mbedtls_entropy_f_source_ptr,
    #[doc = "< The callback data pointer"]
    pub p_source: *mut c_types::c_void,
    #[doc = "< Amount received in bytes"]
    pub size: size_t,
    #[doc = "< Minimum bytes required before release"]
    pub threshold: size_t,
    #[doc = "< Is the source strong?"]
    pub strong: c_types::c_int,
}
impl Default for mbedtls_entropy_source_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \\brief           Entropy context structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_entropy_context {
    pub accumulator_started: c_types::c_int,
    pub accumulator: mbedtls_sha512_context,
    pub source_count: c_types::c_int,
    pub source: [mbedtls_entropy_source_state; 20usize],
}
impl Default for mbedtls_entropy_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief           Initialize the context"]
    #[doc = ""]
    #[doc = " \\param ctx       Entropy context to initialize"]
    pub fn mbedtls_entropy_init(ctx: *mut mbedtls_entropy_context);
}
extern "C" {
    #[doc = " \\brief           Free the data in the context"]
    #[doc = ""]
    #[doc = " \\param ctx       Entropy context to free"]
    pub fn mbedtls_entropy_free(ctx: *mut mbedtls_entropy_context);
}
extern "C" {
    #[doc = " \\brief           Adds an entropy source to poll"]
    #[doc = "                  (Thread-safe if MBEDTLS_THREADING_C is enabled)"]
    #[doc = ""]
    #[doc = " \\param ctx       Entropy context"]
    #[doc = " \\param f_source  Entropy function"]
    #[doc = " \\param p_source  Function data"]
    #[doc = " \\param threshold Minimum required from source before entropy is released"]
    #[doc = "                  ( with mbedtls_entropy_func() ) (in bytes)"]
    #[doc = " \\param strong    MBEDTLS_ENTROPY_SOURCE_STRONG or"]
    #[doc = "                  MBEDTLS_ENTROPY_SOURCE_WEAK."]
    #[doc = "                  At least one strong source needs to be added."]
    #[doc = "                  Weaker sources (such as the cycle counter) can be used as"]
    #[doc = "                  a complement."]
    #[doc = ""]
    #[doc = " \\return          0 if successful or MBEDTLS_ERR_ENTROPY_MAX_SOURCES"]
    pub fn mbedtls_entropy_add_source(
        ctx: *mut mbedtls_entropy_context,
        f_source: mbedtls_entropy_f_source_ptr,
        p_source: *mut c_types::c_void,
        threshold: size_t,
        strong: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Trigger an extra gather poll for the accumulator"]
    #[doc = "                  (Thread-safe if MBEDTLS_THREADING_C is enabled)"]
    #[doc = ""]
    #[doc = " \\param ctx       Entropy context"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or MBEDTLS_ERR_ENTROPY_SOURCE_FAILED"]
    pub fn mbedtls_entropy_gather(ctx: *mut mbedtls_entropy_context) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Retrieve entropy from the accumulator"]
    #[doc = "                  (Maximum length: MBEDTLS_ENTROPY_BLOCK_SIZE)"]
    #[doc = "                  (Thread-safe if MBEDTLS_THREADING_C is enabled)"]
    #[doc = ""]
    #[doc = " \\param data      Entropy context"]
    #[doc = " \\param output    Buffer to fill"]
    #[doc = " \\param len       Number of bytes desired, must be at most MBEDTLS_ENTROPY_BLOCK_SIZE"]
    #[doc = ""]
    #[doc = " \\return          0 if successful, or MBEDTLS_ERR_ENTROPY_SOURCE_FAILED"]
    pub fn mbedtls_entropy_func(
        data: *mut c_types::c_void,
        output: *mut c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Add data to the accumulator manually"]
    #[doc = "                  (Thread-safe if MBEDTLS_THREADING_C is enabled)"]
    #[doc = ""]
    #[doc = " \\param ctx       Entropy context"]
    #[doc = " \\param data      Data to add"]
    #[doc = " \\param len       Length of data"]
    #[doc = ""]
    #[doc = " \\return          0 if successful"]
    pub fn mbedtls_entropy_update_manual(
        ctx: *mut mbedtls_entropy_context,
        data: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               Write a seed file"]
    #[doc = ""]
    #[doc = " \\param ctx           Entropy context"]
    #[doc = " \\param path          Name of the file"]
    #[doc = ""]
    #[doc = " \\return              0 if successful,"]
    #[doc = "                      MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR on file error, or"]
    #[doc = "                      MBEDTLS_ERR_ENTROPY_SOURCE_FAILED"]
    pub fn mbedtls_entropy_write_seed_file(
        ctx: *mut mbedtls_entropy_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               Read and update a seed file. Seed is added to this"]
    #[doc = "                      instance. No more than MBEDTLS_ENTROPY_MAX_SEED_SIZE bytes are"]
    #[doc = "                      read from the seed file. The rest is ignored."]
    #[doc = ""]
    #[doc = " \\param ctx           Entropy context"]
    #[doc = " \\param path          Name of the file"]
    #[doc = ""]
    #[doc = " \\return              0 if successful,"]
    #[doc = "                      MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR on file error,"]
    #[doc = "                      MBEDTLS_ERR_ENTROPY_SOURCE_FAILED"]
    pub fn mbedtls_entropy_update_seed_file(
        ctx: *mut mbedtls_entropy_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Checkup routine"]
    #[doc = ""]
    #[doc = "                 This module self-test also calls the entropy self-test,"]
    #[doc = "                 mbedtls_entropy_source_self_test();"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or 1 if a test failed"]
    pub fn mbedtls_entropy_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          Checkup routine"]
    #[doc = ""]
    #[doc = "                 Verifies the integrity of the hardware entropy source"]
    #[doc = "                 provided by the function 'mbedtls_hardware_poll()'."]
    #[doc = ""]
    #[doc = "                 Note this is the only hardware entropy source that is known"]
    #[doc = "                 at link time, and other entropy sources configured"]
    #[doc = "                 dynamically at runtime by the function"]
    #[doc = "                 mbedtls_entropy_add_source() will not be tested."]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or 1 if a test failed"]
    pub fn mbedtls_entropy_source_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_ECB: esp_aes_mode_t = 0;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_CBC: esp_aes_mode_t = 1;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_OFB: esp_aes_mode_t = 2;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_CTR: esp_aes_mode_t = 3;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_CFB8: esp_aes_mode_t = 4;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_CFB128: esp_aes_mode_t = 5;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_GCM: esp_aes_mode_t = 6;
pub const esp_aes_mode_t_ESP_AES_BLOCK_MODE_MAX: esp_aes_mode_t = 7;
pub type esp_aes_mode_t = c_types::c_uint;
#[doc = " \\brief          AES context structure"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_aes_context {
    pub key_bytes: u8,
    pub key_in_hardware: u8,
    pub key: [u8; 32usize],
}
#[doc = " \\brief The AES XTS context-type definition."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_aes_xts_context {
    #[doc = "< The AES context to use for AES block"]
    #[doc = "encryption or decryption."]
    pub crypt: esp_aes_context,
    #[doc = "< The AES context used for tweak"]
    #[doc = "computation."]
    pub tweak: esp_aes_context,
}
extern "C" {
    #[doc = " \\brief Lock access to AES hardware unit"]
    #[doc = ""]
    #[doc = " AES hardware unit can only be used by one"]
    #[doc = " consumer at a time."]
    #[doc = ""]
    #[doc = " esp_aes_xxx API calls automatically manage locking & unlocking of"]
    #[doc = " hardware, this function is only needed if you want to call"]
    #[doc = " ets_aes_xxx functions directly."]
    pub fn esp_aes_acquire_hardware();
}
extern "C" {
    #[doc = " \\brief Unlock access to AES hardware unit"]
    #[doc = ""]
    #[doc = " esp_aes_xxx API calls automatically manage locking & unlocking of"]
    #[doc = " hardware, this function is only needed if you want to call"]
    #[doc = " ets_aes_xxx functions directly."]
    pub fn esp_aes_release_hardware();
}
extern "C" {
    #[doc = " \\brief          Initialize AES context"]
    #[doc = ""]
    #[doc = " \\param ctx      AES context to be initialized"]
    pub fn esp_aes_init(ctx: *mut esp_aes_context);
}
extern "C" {
    #[doc = " \\brief          Clear AES context"]
    #[doc = ""]
    #[doc = " \\param ctx      AES context to be cleared"]
    pub fn esp_aes_free(ctx: *mut esp_aes_context);
}
extern "C" {
    #[doc = " \\brief          This function initializes the specified AES XTS context."]
    #[doc = ""]
    #[doc = "                 It must be the first API called before using"]
    #[doc = "                 the context."]
    #[doc = ""]
    #[doc = " \\param ctx      The AES XTS context to initialize."]
    pub fn esp_aes_xts_init(ctx: *mut esp_aes_xts_context);
}
extern "C" {
    #[doc = " \\brief          This function releases and clears the specified AES XTS context."]
    #[doc = ""]
    #[doc = " \\param ctx      The AES XTS context to clear."]
    pub fn esp_aes_xts_free(ctx: *mut esp_aes_xts_context);
}
extern "C" {
    #[doc = " \\brief          AES set key schedule (encryption or decryption)"]
    #[doc = ""]
    #[doc = " \\param ctx      AES context to be initialized"]
    #[doc = " \\param key      encryption key"]
    #[doc = " \\param keybits  must be 128, 192 or 256"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or ERR_AES_INVALID_KEY_LENGTH"]
    pub fn esp_aes_setkey(
        ctx: *mut esp_aes_context,
        key: *const c_types::c_uchar,
        keybits: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          AES-ECB block encryption/decryption"]
    #[doc = ""]
    #[doc = " \\param ctx      AES context"]
    #[doc = " \\param mode     AES_ENCRYPT or AES_DECRYPT"]
    #[doc = " \\param input    16-byte input block"]
    #[doc = " \\param output   16-byte output block"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn esp_aes_crypt_ecb(
        ctx: *mut esp_aes_context,
        mode: c_types::c_int,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          AES-CBC buffer encryption/decryption"]
    #[doc = "                 Length should be a multiple of the block"]
    #[doc = "                 size (16 bytes)"]
    #[doc = ""]
    #[doc = " \\note           Upon exit, the content of the IV is updated so that you can"]
    #[doc = "                 call the function same function again on the following"]
    #[doc = "                 block(s) of data and get the same result as if it was"]
    #[doc = "                 encrypted in one call. This allows a \"streaming\" usage."]
    #[doc = "                 If on the other hand you need to retain the contents of the"]
    #[doc = "                 IV, you should either save it manually or use the cipher"]
    #[doc = "                 module instead."]
    #[doc = ""]
    #[doc = " \\param ctx      AES context"]
    #[doc = " \\param mode     AES_ENCRYPT or AES_DECRYPT"]
    #[doc = " \\param length   length of the input data"]
    #[doc = " \\param iv       initialization vector (updated after use)"]
    #[doc = " \\param input    buffer holding the input data"]
    #[doc = " \\param output   buffer holding the output data"]
    #[doc = ""]
    #[doc = " \\return         0 if successful, or ERR_AES_INVALID_INPUT_LENGTH"]
    pub fn esp_aes_crypt_cbc(
        ctx: *mut esp_aes_context,
        mode: c_types::c_int,
        length: size_t,
        iv: *mut c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          AES-CFB128 buffer encryption/decryption."]
    #[doc = ""]
    #[doc = " Note: Due to the nature of CFB you should use the same key schedule for"]
    #[doc = " both encryption and decryption. So a context initialized with"]
    #[doc = " esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT."]
    #[doc = ""]
    #[doc = " \\note           Upon exit, the content of the IV is updated so that you can"]
    #[doc = "                 call the function same function again on the following"]
    #[doc = "                 block(s) of data and get the same result as if it was"]
    #[doc = "                 encrypted in one call. This allows a \"streaming\" usage."]
    #[doc = "                 If on the other hand you need to retain the contents of the"]
    #[doc = "                 IV, you should either save it manually or use the cipher"]
    #[doc = "                 module instead."]
    #[doc = ""]
    #[doc = " \\param ctx      AES context"]
    #[doc = " \\param mode     AES_ENCRYPT or AES_DECRYPT"]
    #[doc = " \\param length   length of the input data"]
    #[doc = " \\param iv_off   offset in IV (updated after use)"]
    #[doc = " \\param iv       initialization vector (updated after use)"]
    #[doc = " \\param input    buffer holding the input data"]
    #[doc = " \\param output   buffer holding the output data"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn esp_aes_crypt_cfb128(
        ctx: *mut esp_aes_context,
        mode: c_types::c_int,
        length: size_t,
        iv_off: *mut size_t,
        iv: *mut c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          AES-CFB8 buffer encryption/decryption."]
    #[doc = ""]
    #[doc = " Note: Due to the nature of CFB you should use the same key schedule for"]
    #[doc = " both encryption and decryption. So a context initialized with"]
    #[doc = " esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT."]
    #[doc = ""]
    #[doc = " \\note           Upon exit, the content of the IV is updated so that you can"]
    #[doc = "                 call the function same function again on the following"]
    #[doc = "                 block(s) of data and get the same result as if it was"]
    #[doc = "                 encrypted in one call. This allows a \"streaming\" usage."]
    #[doc = "                 If on the other hand you need to retain the contents of the"]
    #[doc = "                 IV, you should either save it manually or use the cipher"]
    #[doc = "                 module instead."]
    #[doc = ""]
    #[doc = " \\param ctx      AES context"]
    #[doc = " \\param mode     AES_ENCRYPT or AES_DECRYPT"]
    #[doc = " \\param length   length of the input data"]
    #[doc = " \\param iv       initialization vector (updated after use)"]
    #[doc = " \\param input    buffer holding the input data"]
    #[doc = " \\param output   buffer holding the output data"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn esp_aes_crypt_cfb8(
        ctx: *mut esp_aes_context,
        mode: c_types::c_int,
        length: size_t,
        iv: *mut c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               AES-CTR buffer encryption/decryption"]
    #[doc = ""]
    #[doc = " Warning: You have to keep the maximum use of your counter in mind!"]
    #[doc = ""]
    #[doc = " Note: Due to the nature of CTR you should use the same key schedule for"]
    #[doc = " both encryption and decryption. So a context initialized with"]
    #[doc = " esp_aes_setkey_enc() for both AES_ENCRYPT and AES_DECRYPT."]
    #[doc = ""]
    #[doc = " \\param ctx           AES context"]
    #[doc = " \\param length        The length of the data"]
    #[doc = " \\param nc_off        The offset in the current stream_block (for resuming"]
    #[doc = "                      within current cipher stream). The offset pointer to"]
    #[doc = "                      should be 0 at the start of a stream."]
    #[doc = " \\param nonce_counter The 128-bit nonce and counter."]
    #[doc = " \\param stream_block  The saved stream-block for resuming. Is overwritten"]
    #[doc = "                      by the function."]
    #[doc = " \\param input         The input data stream"]
    #[doc = " \\param output        The output data stream"]
    #[doc = ""]
    #[doc = " \\return         0 if successful"]
    pub fn esp_aes_crypt_ctr(
        ctx: *mut esp_aes_context,
        length: size_t,
        nc_off: *mut size_t,
        nonce_counter: *mut c_types::c_uchar,
        stream_block: *mut c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief       This function performs an AES-OFB (Output Feedback Mode)"]
    #[doc = "              encryption or decryption operation."]
    #[doc = ""]
    #[doc = " \\param ctx      The AES context to use for encryption or decryption."]
    #[doc = "                 It must be initialized and bound to a key."]
    #[doc = " \\param length   The length of the input data."]
    #[doc = " \\param iv_off   The offset in IV (updated after use)."]
    #[doc = "                 It must point to a valid \\c size_t."]
    #[doc = " \\param iv       The initialization vector (updated after use)."]
    #[doc = "                 It must be a readable and writeable buffer of \\c 16 Bytes."]
    #[doc = " \\param input    The buffer holding the input data."]
    #[doc = "                 It must be readable and of size \\p length Bytes."]
    #[doc = " \\param output   The buffer holding the output data."]
    #[doc = "                 It must be writeable and of size \\p length Bytes."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    pub fn esp_aes_crypt_ofb(
        ctx: *mut esp_aes_context,
        length: size_t,
        iv_off: *mut size_t,
        iv: *mut c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function prepares an XTS context for encryption and"]
    #[doc = "                 sets the encryption key."]
    #[doc = ""]
    #[doc = " \\param ctx      The AES XTS context to which the key should be bound."]
    #[doc = " \\param key      The encryption key. This is comprised of the XTS key1"]
    #[doc = "                 concatenated with the XTS key2."]
    #[doc = " \\param keybits  The size of \\p key passed in bits. Valid options are:"]
    #[doc = "                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>"]
    #[doc = "                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>"]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure."]
    pub fn esp_aes_xts_setkey_enc(
        ctx: *mut esp_aes_xts_context,
        key: *const c_types::c_uchar,
        keybits: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief          This function prepares an XTS context for decryption and"]
    #[doc = "                 sets the decryption key."]
    #[doc = ""]
    #[doc = " \\param ctx      The AES XTS context to which the key should be bound."]
    #[doc = " \\param key      The decryption key. This is comprised of the XTS key1"]
    #[doc = "                 concatenated with the XTS key2."]
    #[doc = " \\param keybits  The size of \\p key passed in bits. Valid options are:"]
    #[doc = "                 <ul><li>256 bits (each of key1 and key2 is a 128-bit key)</li>"]
    #[doc = "                 <li>512 bits (each of key1 and key2 is a 256-bit key)</li></ul>"]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         #MBEDTLS_ERR_AES_INVALID_KEY_LENGTH on failure."]
    pub fn esp_aes_xts_setkey_dec(
        ctx: *mut esp_aes_xts_context,
        key: *const c_types::c_uchar,
        keybits: c_types::c_uint,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Internal AES block encryption function"]
    #[doc = "                  (Only exposed to allow overriding it,"]
    #[doc = "                  see AES_ENCRYPT_ALT)"]
    #[doc = ""]
    #[doc = " \\param ctx       AES context"]
    #[doc = " \\param input     Plaintext block"]
    #[doc = " \\param output    Output (ciphertext) block"]
    pub fn esp_internal_aes_encrypt(
        ctx: *mut esp_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief           Internal AES block decryption function"]
    #[doc = "                  (Only exposed to allow overriding it,"]
    #[doc = "                  see AES_DECRYPT_ALT)"]
    #[doc = ""]
    #[doc = " \\param ctx       AES context"]
    #[doc = " \\param input     Ciphertext block"]
    #[doc = " \\param output    Output (plaintext) block"]
    pub fn esp_internal_aes_decrypt(
        ctx: *mut esp_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " AES-XTS buffer encryption/decryption"]
    pub fn esp_aes_crypt_xts(
        ctx: *mut esp_aes_xts_context,
        mode: c_types::c_int,
        length: size_t,
        data_unit: *const c_types::c_uchar,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " Deprecated, see esp_aes_internal_decrypt"]
    pub fn esp_aes_decrypt(
        ctx: *mut esp_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    );
}
extern "C" {
    #[doc = " Deprecated, see esp_aes_internal_encrypt"]
    pub fn esp_aes_encrypt(
        ctx: *mut esp_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    );
}
#[doc = " \\brief          AES context structure"]
#[doc = ""]
pub type mbedtls_aes_context = esp_aes_context;
#[doc = " \\brief The AES XTS context-type definition."]
pub type mbedtls_aes_xts_context = esp_aes_xts_context;
extern "C" {
    #[doc = " \\brief           Deprecated internal AES block encryption function"]
    #[doc = "                  without return value."]
    #[doc = ""]
    #[doc = " \\deprecated      Superseded by mbedtls_internal_aes_encrypt()"]
    #[doc = ""]
    #[doc = " \\param ctx       The AES context to use for encryption."]
    #[doc = " \\param input     Plaintext block."]
    #[doc = " \\param output    Output (ciphertext) block."]
    pub fn mbedtls_aes_encrypt(
        ctx: *mut mbedtls_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    );
}
extern "C" {
    #[doc = " \\brief           Deprecated internal AES block decryption function"]
    #[doc = "                  without return value."]
    #[doc = ""]
    #[doc = " \\deprecated      Superseded by mbedtls_internal_aes_decrypt()"]
    #[doc = ""]
    #[doc = " \\param ctx       The AES context to use for decryption."]
    #[doc = " \\param input     Ciphertext block."]
    #[doc = " \\param output    Output (plaintext) block."]
    pub fn mbedtls_aes_decrypt(
        ctx: *mut mbedtls_aes_context,
        input: *const c_types::c_uchar,
        output: *mut c_types::c_uchar,
    );
}
extern "C" {
    #[doc = " \\brief          Checkup routine."]
    #[doc = ""]
    #[doc = " \\return         \\c 0 on success."]
    #[doc = " \\return         \\c 1 on failure."]
    pub fn mbedtls_aes_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
#[doc = " \\brief          The CTR_DRBG context structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mbedtls_ctr_drbg_context {
    #[doc = "< The counter (V)."]
    pub counter: [c_types::c_uchar; 16usize],
    #[doc = "< The reseed counter."]
    #[doc = " This is the number of requests that have"]
    #[doc = " been made since the last (re)seeding,"]
    #[doc = " minus one."]
    #[doc = " Before the initial seeding, this field"]
    #[doc = " contains the amount of entropy in bytes"]
    #[doc = " to use as a nonce for the initial seeding,"]
    #[doc = " or -1 if no nonce length has been explicitly"]
    #[doc = " set (see mbedtls_ctr_drbg_set_nonce_len())."]
    pub reseed_counter: c_types::c_int,
    #[doc = "< This determines whether prediction"]
    #[doc = "resistance is enabled, that is"]
    #[doc = "whether to systematically reseed before"]
    #[doc = "each random generation."]
    pub prediction_resistance: c_types::c_int,
    #[doc = "< The amount of entropy grabbed on each"]
    #[doc = "seed or reseed operation, in bytes."]
    pub entropy_len: size_t,
    #[doc = "< The reseed interval."]
    #[doc = " This is the maximum number of requests"]
    #[doc = " that can be made between reseedings."]
    pub reseed_interval: c_types::c_int,
    #[doc = "< The AES context."]
    pub aes_ctx: mbedtls_aes_context,
    pub f_entropy: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut c_types::c_void,
            arg2: *mut c_types::c_uchar,
            arg3: size_t,
        ) -> c_types::c_int,
    >,
    #[doc = "< The context for the entropy function."]
    pub p_entropy: *mut c_types::c_void,
}
impl Default for mbedtls_ctr_drbg_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " \\brief               This function initializes the CTR_DRBG context,"]
    #[doc = "                      and prepares it for mbedtls_ctr_drbg_seed()"]
    #[doc = "                      or mbedtls_ctr_drbg_free()."]
    #[doc = ""]
    #[doc = " \\note                The reseed interval is"]
    #[doc = "                      #MBEDTLS_CTR_DRBG_RESEED_INTERVAL by default."]
    #[doc = "                      You can override it by calling"]
    #[doc = "                      mbedtls_ctr_drbg_set_reseed_interval()."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context to initialize."]
    pub fn mbedtls_ctr_drbg_init(ctx: *mut mbedtls_ctr_drbg_context);
}
extern "C" {
    #[doc = " - The \\p custom string."]
    #[doc = ""]
    #[doc = " \\note                To achieve the nominal security strength permitted"]
    #[doc = "                      by CTR_DRBG, the entropy length must be:"]
    #[doc = "                      - at least 16 bytes for a 128-bit strength"]
    #[doc = "                      (maximum achievable strength when using AES-128);"]
    #[doc = "                      - at least 32 bytes for a 256-bit strength"]
    #[doc = "                      (maximum achievable strength when using AES-256)."]
    #[doc = ""]
    #[doc = "                      In addition, if you do not pass a nonce in \\p custom,"]
    #[doc = "                      the sum of the entropy length"]
    #[doc = "                      and the entropy nonce length must be:"]
    #[doc = "                      - at least 24 bytes for a 128-bit strength"]
    #[doc = "                      (maximum achievable strength when using AES-128);"]
    #[doc = "                      - at least 48 bytes for a 256-bit strength"]
    #[doc = "                      (maximum achievable strength when using AES-256)."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context to seed."]
    #[doc = "                      It must have been initialized with"]
    #[doc = "                      mbedtls_ctr_drbg_init()."]
    #[doc = "                      After a successful call to mbedtls_ctr_drbg_seed(),"]
    #[doc = "                      you may not call mbedtls_ctr_drbg_seed() again on"]
    #[doc = "                      the same context unless you call"]
    #[doc = "                      mbedtls_ctr_drbg_free() and mbedtls_ctr_drbg_init()"]
    #[doc = "                      again first."]
    #[doc = "                      After a failed call to mbedtls_ctr_drbg_seed(),"]
    #[doc = "                      you must call mbedtls_ctr_drbg_free()."]
    #[doc = " \\param f_entropy     The entropy callback, taking as arguments the"]
    #[doc = "                      \\p p_entropy context, the buffer to fill, and the"]
    #[doc = "                      length of the buffer."]
    #[doc = "                      \\p f_entropy is always called with a buffer size"]
    #[doc = "                      less than or equal to the entropy length."]
    #[doc = " \\param p_entropy     The entropy context to pass to \\p f_entropy."]
    #[doc = " \\param custom        The personalization string."]
    #[doc = "                      This can be \\c NULL, in which case the personalization"]
    #[doc = "                      string is empty regardless of the value of \\p len."]
    #[doc = " \\param len           The length of the personalization string."]
    #[doc = "                      This must be at most"]
    #[doc = "                      #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT"]
    #[doc = "                      - #MBEDTLS_CTR_DRBG_ENTROPY_LEN."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on failure."]
    pub fn mbedtls_ctr_drbg_seed(
        ctx: *mut mbedtls_ctr_drbg_context,
        f_entropy: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut c_types::c_void,
                arg2: *mut c_types::c_uchar,
                arg3: size_t,
            ) -> c_types::c_int,
        >,
        p_entropy: *mut c_types::c_void,
        custom: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function resets CTR_DRBG context to the state immediately"]
    #[doc = "                      after initial call of mbedtls_ctr_drbg_init()."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context to clear."]
    pub fn mbedtls_ctr_drbg_free(ctx: *mut mbedtls_ctr_drbg_context);
}
extern "C" {
    #[doc = " \\brief               This function turns prediction resistance on or off."]
    #[doc = "                      The default value is off."]
    #[doc = ""]
    #[doc = " \\note                If enabled, entropy is gathered at the beginning of"]
    #[doc = "                      every call to mbedtls_ctr_drbg_random_with_add()"]
    #[doc = "                      or mbedtls_ctr_drbg_random()."]
    #[doc = "                      Only use this if your entropy source has sufficient"]
    #[doc = "                      throughput."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param resistance    #MBEDTLS_CTR_DRBG_PR_ON or #MBEDTLS_CTR_DRBG_PR_OFF."]
    pub fn mbedtls_ctr_drbg_set_prediction_resistance(
        ctx: *mut mbedtls_ctr_drbg_context,
        resistance: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief               This function sets the amount of entropy grabbed on each"]
    #[doc = "                      seed or reseed."]
    #[doc = ""]
    #[doc = " The default value is #MBEDTLS_CTR_DRBG_ENTROPY_LEN."]
    #[doc = ""]
    #[doc = " \\note                The security strength of CTR_DRBG is bounded by the"]
    #[doc = "                      entropy length. Thus:"]
    #[doc = "                      - When using AES-256"]
    #[doc = "                        (\\c MBEDTLS_CTR_DRBG_USE_128_BIT_KEY is disabled,"]
    #[doc = "                        which is the default),"]
    #[doc = "                        \\p len must be at least 32 (in bytes)"]
    #[doc = "                        to achieve a 256-bit strength."]
    #[doc = "                      - When using AES-128"]
    #[doc = "                        (\\c MBEDTLS_CTR_DRBG_USE_128_BIT_KEY is enabled)"]
    #[doc = "                        \\p len must be at least 16 (in bytes)"]
    #[doc = "                        to achieve a 128-bit strength."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param len           The amount of entropy to grab, in bytes."]
    #[doc = "                      This must be at most #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT"]
    #[doc = "                      and at most the maximum length accepted by the"]
    #[doc = "                      entropy function that is set in the context."]
    pub fn mbedtls_ctr_drbg_set_entropy_len(ctx: *mut mbedtls_ctr_drbg_context, len: size_t);
}
extern "C" {
    #[doc = " \\brief               This function sets the amount of entropy grabbed"]
    #[doc = "                      as a nonce for the initial seeding."]
    #[doc = ""]
    #[doc = " Call this function before calling mbedtls_ctr_drbg_seed() to read"]
    #[doc = " a nonce from the entropy source during the initial seeding."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param len           The amount of entropy to grab for the nonce, in bytes."]
    #[doc = "                      This must be at most #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT"]
    #[doc = "                      and at most the maximum length accepted by the"]
    #[doc = "                      entropy function that is set in the context."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG if \\p len is"]
    #[doc = "                      more than #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED"]
    #[doc = "                      if the initial seeding has already taken place."]
    pub fn mbedtls_ctr_drbg_set_nonce_len(
        ctx: *mut mbedtls_ctr_drbg_context,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function sets the reseed interval."]
    #[doc = ""]
    #[doc = " The reseed interval is the number of calls to mbedtls_ctr_drbg_random()"]
    #[doc = " or mbedtls_ctr_drbg_random_with_add() after which the entropy function"]
    #[doc = " is called again."]
    #[doc = ""]
    #[doc = " The default value is #MBEDTLS_CTR_DRBG_RESEED_INTERVAL."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param interval      The reseed interval."]
    pub fn mbedtls_ctr_drbg_set_reseed_interval(
        ctx: *mut mbedtls_ctr_drbg_context,
        interval: c_types::c_int,
    );
}
extern "C" {
    #[doc = " \\brief               This function reseeds the CTR_DRBG context, that is"]
    #[doc = "                      extracts data from the entropy source."]
    #[doc = ""]
    #[doc = " \\note                This function is not thread-safe. It is not safe"]
    #[doc = "                      to call this function if another thread might be"]
    #[doc = "                      concurrently obtaining random numbers from the same"]
    #[doc = "                      context or updating or reseeding the same context."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param additional    Additional data to add to the state. Can be \\c NULL."]
    #[doc = " \\param len           The length of the additional data."]
    #[doc = "                      This must be less than"]
    #[doc = "                      #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - \\c entropy_len"]
    #[doc = "                      where \\c entropy_len is the entropy length"]
    #[doc = "                      configured for the context."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on failure."]
    pub fn mbedtls_ctr_drbg_reseed(
        ctx: *mut mbedtls_ctr_drbg_context,
        additional: *const c_types::c_uchar,
        len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief              This function updates the state of the CTR_DRBG context."]
    #[doc = ""]
    #[doc = " \\note                This function is not thread-safe. It is not safe"]
    #[doc = "                      to call this function if another thread might be"]
    #[doc = "                      concurrently obtaining random numbers from the same"]
    #[doc = "                      context or updating or reseeding the same context."]
    #[doc = ""]
    #[doc = " \\param ctx          The CTR_DRBG context."]
    #[doc = " \\param additional   The data to update the state with. This must not be"]
    #[doc = "                     \\c NULL unless \\p add_len is \\c 0."]
    #[doc = " \\param add_len      Length of \\p additional in bytes. This must be at"]
    #[doc = "                     most #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT."]
    #[doc = ""]
    #[doc = " \\return             \\c 0 on success."]
    #[doc = " \\return             #MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG if"]
    #[doc = "                     \\p add_len is more than"]
    #[doc = "                     #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT."]
    #[doc = " \\return             An error from the underlying AES cipher on failure."]
    pub fn mbedtls_ctr_drbg_update_ret(
        ctx: *mut mbedtls_ctr_drbg_context,
        additional: *const c_types::c_uchar,
        add_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief   This function updates a CTR_DRBG instance with additional"]
    #[doc = "          data and uses it to generate random data."]
    #[doc = ""]
    #[doc = " This function automatically reseeds if the reseed counter is exceeded"]
    #[doc = " or prediction resistance is enabled."]
    #[doc = ""]
    #[doc = " \\note                This function is not thread-safe. It is not safe"]
    #[doc = "                      to call this function if another thread might be"]
    #[doc = "                      concurrently obtaining random numbers from the same"]
    #[doc = "                      context or updating or reseeding the same context."]
    #[doc = ""]
    #[doc = " \\param p_rng         The CTR_DRBG context. This must be a pointer to a"]
    #[doc = "                      #mbedtls_ctr_drbg_context structure."]
    #[doc = " \\param output        The buffer to fill."]
    #[doc = " \\param output_len    The length of the buffer in bytes."]
    #[doc = " \\param additional    Additional data to update. Can be \\c NULL, in which"]
    #[doc = "                      case the additional data is empty regardless of"]
    #[doc = "                      the value of \\p add_len."]
    #[doc = " \\param add_len       The length of the additional data"]
    #[doc = "                      if \\p additional is not \\c NULL."]
    #[doc = "                      This must be less than #MBEDTLS_CTR_DRBG_MAX_INPUT"]
    #[doc = "                      and less than"]
    #[doc = "                      #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - \\c entropy_len"]
    #[doc = "                      where \\c entropy_len is the entropy length"]
    #[doc = "                      configured for the context."]
    #[doc = ""]
    #[doc = " \\return    \\c 0 on success."]
    #[doc = " \\return    #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED or"]
    #[doc = "            #MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG on failure."]
    pub fn mbedtls_ctr_drbg_random_with_add(
        p_rng: *mut c_types::c_void,
        output: *mut c_types::c_uchar,
        output_len: size_t,
        additional: *const c_types::c_uchar,
        add_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\param p_rng         The CTR_DRBG context. This must be a pointer to a"]
    #[doc = "                      #mbedtls_ctr_drbg_context structure."]
    #[doc = " \\param output        The buffer to fill."]
    #[doc = " \\param output_len    The length of the buffer in bytes."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED or"]
    #[doc = "                      #MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG on failure."]
    pub fn mbedtls_ctr_drbg_random(
        p_rng: *mut c_types::c_void,
        output: *mut c_types::c_uchar,
        output_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief              This function updates the state of the CTR_DRBG context."]
    #[doc = ""]
    #[doc = " \\deprecated         Superseded by mbedtls_ctr_drbg_update_ret()"]
    #[doc = "                     in 2.16.0."]
    #[doc = ""]
    #[doc = " \\note               If \\p add_len is greater than"]
    #[doc = "                     #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT, only the first"]
    #[doc = "                     #MBEDTLS_CTR_DRBG_MAX_SEED_INPUT Bytes are used."]
    #[doc = "                     The remaining Bytes are silently discarded."]
    #[doc = ""]
    #[doc = " \\param ctx          The CTR_DRBG context."]
    #[doc = " \\param additional   The data to update the state with."]
    #[doc = " \\param add_len      Length of \\p additional data."]
    pub fn mbedtls_ctr_drbg_update(
        ctx: *mut mbedtls_ctr_drbg_context,
        additional: *const c_types::c_uchar,
        add_len: size_t,
    );
}
extern "C" {
    #[doc = " \\brief               This function writes a seed file."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param path          The name of the file."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR on file error."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on reseed"]
    #[doc = "                      failure."]
    pub fn mbedtls_ctr_drbg_write_seed_file(
        ctx: *mut mbedtls_ctr_drbg_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               This function reads and updates a seed file. The seed"]
    #[doc = "                      is added to this instance."]
    #[doc = ""]
    #[doc = " \\param ctx           The CTR_DRBG context."]
    #[doc = " \\param path          The name of the file."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR on file error."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED on"]
    #[doc = "                      reseed failure."]
    #[doc = " \\return              #MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG if the existing"]
    #[doc = "                      seed file is too large."]
    pub fn mbedtls_ctr_drbg_update_seed_file(
        ctx: *mut mbedtls_ctr_drbg_context,
        path: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief               The CTR_DRBG checkup routine."]
    #[doc = ""]
    #[doc = " \\return              \\c 0 on success."]
    #[doc = " \\return              \\c 1 on failure."]
    pub fn mbedtls_ctr_drbg_self_test(verbose: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    #[doc = " \\brief Translate a mbed TLS error code into a string representation,"]
    #[doc = "        Result is truncated if necessary and always includes a terminating"]
    #[doc = "        null byte."]
    #[doc = ""]
    #[doc = " \\param errnum    error code"]
    #[doc = " \\param buffer    buffer to place representation in"]
    #[doc = " \\param buflen    length of the buffer"]
    pub fn mbedtls_strerror(errnum: c_types::c_int, buffer: *mut c_types::c_char, buflen: size_t);
}
extern "C" {
    #[doc = " \\brief Translate the high-level part of an Mbed TLS error code into a string"]
    #[doc = "        representation."]
    #[doc = ""]
    #[doc = " This function returns a const pointer to an un-modifiable string. The caller"]
    #[doc = " must not try to modify the string. It is intended to be used mostly for"]
    #[doc = " logging purposes."]
    #[doc = ""]
    #[doc = " \\param error_code    error code"]
    #[doc = ""]
    #[doc = " \\return The string representation of the error code, or \\c NULL if the error"]
    #[doc = "         code is unknown."]
    pub fn mbedtls_high_level_strerr(error_code: c_types::c_int) -> *const c_types::c_char;
}
extern "C" {
    #[doc = " \\brief Translate the low-level part of an Mbed TLS error code into a string"]
    #[doc = "        representation."]
    #[doc = ""]
    #[doc = " This function returns a const pointer to an un-modifiable string. The caller"]
    #[doc = " must not try to modify the string. It is intended to be used mostly for"]
    #[doc = " logging purposes."]
    #[doc = ""]
    #[doc = " \\param error_code    error code"]
    #[doc = ""]
    #[doc = " \\return The string representation of the error code, or \\c NULL if the error"]
    #[doc = "         code is unknown."]
    pub fn mbedtls_low_level_strerr(error_code: c_types::c_int) -> *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_cas: [*const c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cas_len: [size_t; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cas_der: [*const c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cas_der_len: [size_t; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cas_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_cas_pem_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_pwd_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_pwd_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha1_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha256_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_rsa_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha1_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha256_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mbedtls_test_ca_crt_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha1_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha256_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_rsa_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_rsa_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha1_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha256_der_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_pwd_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_key_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_pwd_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha1: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa_sha256: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_ca_crt_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha1_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_sha256_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_ca_crt_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_ca_crt_rsa_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_ca_crt: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_ca_key: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_ca_pwd: *const c_types::c_char;
}
extern "C" {
    pub static mbedtls_test_ca_crt_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_key_len: size_t;
}
extern "C" {
    pub static mbedtls_test_ca_pwd_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_pwd_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_pwd_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha1_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha256_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_rsa_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha1_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha256_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mbedtls_test_srv_crt_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha1_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha256_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_rsa_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_rsa_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha1_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha256_der_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_pwd_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_key_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_pwd_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha1: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa_sha256: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_srv_crt_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha1_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_sha256_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_srv_crt_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_srv_crt_rsa_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_srv_crt: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_srv_key: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_srv_pwd: *const c_types::c_char;
}
extern "C" {
    pub static mbedtls_test_srv_crt_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_key_len: size_t;
}
extern "C" {
    pub static mbedtls_test_srv_pwd_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_pwd_ec_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_pwd_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_rsa_pem: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_ec_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_rsa_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_rsa_der: [c_types::c_uchar; 0usize];
}
extern "C" {
    pub static mbedtls_test_cli_crt_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_pwd_ec_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_pwd_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_crt_rsa_pem_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_crt_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_ec_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_rsa_der_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_crt_rsa_der_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_pwd_ec: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_key_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_pwd_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mut mbedtls_test_cli_crt_rsa: [c_types::c_char; 0usize];
}
extern "C" {
    pub static mbedtls_test_cli_crt_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_pwd_ec_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_pwd_rsa_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_crt_rsa_len: size_t;
}
extern "C" {
    pub static mut mbedtls_test_cli_crt: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_cli_key: *const c_types::c_char;
}
extern "C" {
    pub static mut mbedtls_test_cli_pwd: *const c_types::c_char;
}
extern "C" {
    pub static mbedtls_test_cli_crt_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_key_len: size_t;
}
extern "C" {
    pub static mbedtls_test_cli_pwd_len: size_t;
}
pub const esp_tls_conn_state_ESP_TLS_INIT: esp_tls_conn_state = 0;
pub const esp_tls_conn_state_ESP_TLS_CONNECTING: esp_tls_conn_state = 1;
pub const esp_tls_conn_state_ESP_TLS_HANDSHAKE: esp_tls_conn_state = 2;
pub const esp_tls_conn_state_ESP_TLS_FAIL: esp_tls_conn_state = 3;
pub const esp_tls_conn_state_ESP_TLS_DONE: esp_tls_conn_state = 4;
#[doc = "  @brief ESP-TLS Connection State"]
pub type esp_tls_conn_state = c_types::c_uint;
#[doc = "  @brief ESP-TLS Connection State"]
pub use self::esp_tls_conn_state as esp_tls_conn_state_t;
pub const esp_tls_role_ESP_TLS_CLIENT: esp_tls_role = 0;
pub const esp_tls_role_ESP_TLS_SERVER: esp_tls_role = 1;
pub type esp_tls_role = c_types::c_uint;
pub use self::esp_tls_role as esp_tls_role_t;
#[doc = "  @brief ESP-TLS preshared key and hint structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct psk_key_hint {
    #[doc = "< key in PSK authentication mode in binary format"]
    pub key: *const u8,
    #[doc = "< length of the key"]
    pub key_size: size_t,
    #[doc = "< hint in PSK authentication mode in string format"]
    pub hint: *const c_types::c_char,
}
impl Default for psk_key_hint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "  @brief ESP-TLS preshared key and hint structure"]
pub type psk_hint_key_t = psk_key_hint;
#[doc = "  @brief Keep alive parameters structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tls_keep_alive_cfg {
    #[doc = "< Enable keep-alive timeout"]
    pub keep_alive_enable: bool,
    #[doc = "< Keep-alive idle time (second)"]
    pub keep_alive_idle: c_types::c_int,
    #[doc = "< Keep-alive interval time (second)"]
    pub keep_alive_interval: c_types::c_int,
    #[doc = "< Keep-alive packet retry send count"]
    pub keep_alive_count: c_types::c_int,
}
#[doc = "  @brief Keep alive parameters structure"]
pub type tls_keep_alive_cfg_t = tls_keep_alive_cfg;
#[doc = " @brief      ESP-TLS configuration parameters"]
#[doc = ""]
#[doc = " @note       Note about format of certificates:"]
#[doc = "             - This structure includes certificates of a Certificate Authority, of client or server as well"]
#[doc = "             as private keys, which may be of PEM or DER format. In case of PEM format, the buffer must be"]
#[doc = "             NULL terminated (with NULL character included in certificate size)."]
#[doc = "             - Certificate Authority's certificate may be a chain of certificates in case of PEM format,"]
#[doc = "             but could be only one certificate in case of DER format"]
#[doc = "             - Variables names of certificates and private key buffers and sizes are defined as unions providing"]
#[doc = "             backward compatibility for legacy *_pem_buf and *_pem_bytes names which suggested only PEM format"]
#[doc = "             was supported. It is encouraged to use generic names such as cacert_buf and cacert_bytes."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct esp_tls_cfg {
    #[doc = "< Application protocols required for HTTP2."]
    #[doc = "If HTTP2/ALPN support is required, a list"]
    #[doc = "of protocols that should be negotiated."]
    #[doc = "The format is length followed by protocol"]
    #[doc = "name."]
    #[doc = "For the most common cases the following is ok:"]
    #[doc = "const char **alpn_protos = { \"h2\", NULL };"]
    #[doc = "- where 'h2' is the protocol name"]
    pub alpn_protos: *mut *const c_types::c_char,
    pub __bindgen_anon_1: esp_tls_cfg__bindgen_ty_1,
    pub __bindgen_anon_2: esp_tls_cfg__bindgen_ty_2,
    pub __bindgen_anon_3: esp_tls_cfg__bindgen_ty_3,
    pub __bindgen_anon_4: esp_tls_cfg__bindgen_ty_4,
    pub __bindgen_anon_5: esp_tls_cfg__bindgen_ty_5,
    pub __bindgen_anon_6: esp_tls_cfg__bindgen_ty_6,
    #[doc = "< Client key decryption password string"]
    pub clientkey_password: *const c_types::c_uchar,
    #[doc = "< String length of the password pointed to by"]
    #[doc = "clientkey_password"]
    pub clientkey_password_len: c_types::c_uint,
    #[doc = "< Configure non-blocking mode. If set to true the"]
    #[doc = "underneath socket will be configured in non"]
    #[doc = "blocking mode after tls session is established"]
    pub non_block: bool,
    #[doc = "< Enable this option to use secure element or"]
    #[doc = "atecc608a chip ( Integrated with ESP32-WROOM-32SE )"]
    pub use_secure_element: bool,
    #[doc = "< Network timeout in milliseconds"]
    pub timeout_ms: c_types::c_int,
    #[doc = "< Use a global ca_store for all the connections in which"]
    #[doc = "this bool is set."]
    pub use_global_ca_store: bool,
    #[doc = "< If non-NULL, server certificate CN must match this name."]
    #[doc = "If NULL, server certificate CN must match hostname."]
    pub common_name: *const c_types::c_char,
    #[doc = "< Skip any validation of server certificate CN field"]
    pub skip_common_name: bool,
    #[doc = "< Enable TCP keep-alive timeout for SSL connection"]
    pub keep_alive_cfg: *mut tls_keep_alive_cfg_t,
    #[doc = "< Pointer to PSK hint and key. if not NULL (and certificates are NULL)"]
    #[doc = "then PSK authentication is enabled with configured setup."]
    #[doc = "Important note: the pointer must be valid for connection"]
    pub psk_hint_key: *const psk_hint_key_t,
    pub crt_bundle_attach:
        ::core::option::Option<unsafe extern "C" fn(conf: *mut c_types::c_void) -> esp_err_t>,
    #[doc = "< Pointer for digital signature peripheral context"]
    pub ds_data: *mut c_types::c_void,
    #[doc = "< Use non-TLS connection: When set to true, the esp-tls uses"]
    #[doc = "plain TCP transport rather then TLS/SSL connection."]
    #[doc = "Note, that it is possible to connect using a plain tcp transport"]
    #[doc = "directly with esp_tls_plain_tcp_connect() API"]
    pub is_plain_tcp: bool,
    #[doc = "< The name of interface for data to go through. Use the default interface without setting"]
    pub if_name: *mut ifreq,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_1 {
    #[doc = "< Certificate Authority's certificate in a buffer."]
    #[doc = "Format may be PEM or DER, depending on mbedtls-support"]
    #[doc = "This buffer should be NULL terminated in case of PEM"]
    pub cacert_buf: *const c_types::c_uchar,
    #[doc = "< CA certificate buffer legacy name"]
    pub cacert_pem_buf: *const c_types::c_uchar,
}
impl Default for esp_tls_cfg__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_2 {
    #[doc = "< Size of Certificate Authority certificate"]
    #[doc = "pointed to by cacert_buf"]
    #[doc = "(including NULL-terminator in case of PEM format)"]
    pub cacert_bytes: c_types::c_uint,
    #[doc = "< Size of Certificate Authority certificate legacy name"]
    pub cacert_pem_bytes: c_types::c_uint,
}
impl Default for esp_tls_cfg__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_3 {
    #[doc = "< Client certificate in a buffer"]
    #[doc = "Format may be PEM or DER, depending on mbedtls-support"]
    #[doc = "This buffer should be NULL terminated in case of PEM"]
    pub clientcert_buf: *const c_types::c_uchar,
    #[doc = "< Client certificate legacy name"]
    pub clientcert_pem_buf: *const c_types::c_uchar,
}
impl Default for esp_tls_cfg__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_4 {
    #[doc = "< Size of client certificate pointed to by"]
    #[doc = "clientcert_pem_buf"]
    #[doc = "(including NULL-terminator in case of PEM format)"]
    pub clientcert_bytes: c_types::c_uint,
    #[doc = "< Size of client certificate legacy name"]
    pub clientcert_pem_bytes: c_types::c_uint,
}
impl Default for esp_tls_cfg__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_5 {
    #[doc = "< Client key in a buffer"]
    #[doc = "Format may be PEM or DER, depending on mbedtls-support"]
    #[doc = "This buffer should be NULL terminated in case of PEM"]
    pub clientkey_buf: *const c_types::c_uchar,
    #[doc = "< Client key legacy name"]
    pub clientkey_pem_buf: *const c_types::c_uchar,
}
impl Default for esp_tls_cfg__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union esp_tls_cfg__bindgen_ty_6 {
    #[doc = "< Size of client key pointed to by"]
    #[doc = "clientkey_pem_buf"]
    #[doc = "(including NULL-terminator in case of PEM format)"]
    pub clientkey_bytes: c_types::c_uint,
    #[doc = "< Size of client key legacy name"]
    pub clientkey_pem_bytes: c_types::c_uint,
}
impl Default for esp_tls_cfg__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for esp_tls_cfg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief      ESP-TLS configuration parameters"]
#[doc = ""]
#[doc = " @note       Note about format of certificates:"]
#[doc = "             - This structure includes certificates of a Certificate Authority, of client or server as well"]
#[doc = "             as private keys, which may be of PEM or DER format. In case of PEM format, the buffer must be"]
#[doc = "             NULL terminated (with NULL character included in certificate size)."]
#[doc = "             - Certificate Authority's certificate may be a chain of certificates in case of PEM format,"]
#[doc = "             but could be only one certificate in case of DER format"]
#[doc = "             - Variables names of certificates and private key buffers and sizes are defined as unions providing"]
#[doc = "             backward compatibility for legacy *_pem_buf and *_pem_bytes names which suggested only PEM format"]
#[doc = "             was supported. It is encouraged to use generic names such as cacert_buf and cacert_bytes."]
pub type esp_tls_cfg_t = esp_tls_cfg;
#[doc = " @brief      ESP-TLS Connection Handle"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_tls {
    #[doc = "< TLS/SSL context"]
    pub ssl: mbedtls_ssl_context,
    #[doc = "< mbedTLS entropy context structure"]
    pub entropy: mbedtls_entropy_context,
    #[doc = "< mbedTLS ctr drbg context structure."]
    #[doc = "CTR_DRBG is deterministic random"]
    #[doc = "bit generation based on AES-256"]
    pub ctr_drbg: mbedtls_ctr_drbg_context,
    #[doc = "< TLS/SSL configuration to be shared"]
    #[doc = "between mbedtls_ssl_context"]
    #[doc = "structures"]
    pub conf: mbedtls_ssl_config,
    #[doc = "< mbedTLS wrapper type for sockets"]
    pub server_fd: mbedtls_net_context,
    #[doc = "< Container for the X.509 CA certificate"]
    pub cacert: mbedtls_x509_crt,
    #[doc = "< Pointer to the cacert being used."]
    pub cacert_ptr: *mut mbedtls_x509_crt,
    #[doc = "< Container for the X.509 client certificate"]
    pub clientcert: mbedtls_x509_crt,
    #[doc = "< Container for the private key of the client"]
    #[doc = "certificate"]
    pub clientkey: mbedtls_pk_context,
    #[doc = "< Underlying socket file descriptor."]
    pub sockfd: c_types::c_int,
    #[doc = "< Callback function for reading data from TLS/SSL"]
    #[doc = "connection."]
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            tls: *mut esp_tls,
            data: *mut c_types::c_char,
            datalen: size_t,
        ) -> ssize_t,
    >,
    #[doc = "< Callback function for writing data to TLS/SSL"]
    #[doc = "connection."]
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            tls: *mut esp_tls,
            data: *const c_types::c_char,
            datalen: size_t,
        ) -> ssize_t,
    >,
    #[doc = "< ESP-TLS Connection state"]
    pub conn_state: esp_tls_conn_state_t,
    #[doc = "< read file descriptors"]
    pub rset: _types_fd_set,
    #[doc = "< write file descriptors"]
    pub wset: _types_fd_set,
    #[doc = "< indicates connection type (TLS or NON-TLS)"]
    pub is_tls: bool,
    #[doc = "< esp-tls role"]
    #[doc = "- ESP_TLS_CLIENT"]
    #[doc = "- ESP_TLS_SERVER"]
    pub role: esp_tls_role_t,
    #[doc = "< handle to error descriptor"]
    pub error_handle: esp_tls_error_handle_t,
}
impl Default for esp_tls {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief      ESP-TLS Connection Handle"]
pub type esp_tls_t = esp_tls;
extern "C" {
    #[doc = " @brief      Create TLS connection"]
    #[doc = ""]
    #[doc = " This function allocates and initializes esp-tls structure handle."]
    #[doc = ""]
    #[doc = " @return      tls     Pointer to esp-tls as esp-tls handle if successfully initialized,"]
    #[doc = "                      NULL if allocation error"]
    pub fn esp_tls_init() -> *mut esp_tls_t;
}
extern "C" {
    #[doc = " @brief      Create a new blocking TLS/SSL connection"]
    #[doc = ""]
    #[doc = " This function establishes a TLS/SSL connection with the specified host in blocking manner."]
    #[doc = ""]
    #[doc = " Note: This API is present for backward compatibility reasons. Alternative function"]
    #[doc = " with the same functionality is `esp_tls_conn_new_sync` (and its asynchronous version"]
    #[doc = " `esp_tls_conn_new_async`)"]
    #[doc = ""]
    #[doc = " @param[in]  hostname  Hostname of the host."]
    #[doc = " @param[in]  hostlen   Length of hostname."]
    #[doc = " @param[in]  port      Port number of the host."]
    #[doc = " @param[in]  cfg       TLS configuration as esp_tls_cfg_t. If you wish to open"]
    #[doc = "                       non-TLS connection, keep this NULL. For TLS connection,"]
    #[doc = "                       a pass pointer to esp_tls_cfg_t. At a minimum, this"]
    #[doc = "                       structure should be zero-initialized."]
    #[doc = ""]
    #[doc = " @return pointer to esp_tls_t, or NULL if connection couldn't be opened."]
    pub fn esp_tls_conn_new(
        hostname: *const c_types::c_char,
        hostlen: c_types::c_int,
        port: c_types::c_int,
        cfg: *const esp_tls_cfg_t,
    ) -> *mut esp_tls_t;
}
extern "C" {
    #[doc = " @brief      Create a new blocking TLS/SSL connection"]
    #[doc = ""]
    #[doc = " This function establishes a TLS/SSL connection with the specified host in blocking manner."]
    #[doc = ""]
    #[doc = " @param[in]  hostname  Hostname of the host."]
    #[doc = " @param[in]  hostlen   Length of hostname."]
    #[doc = " @param[in]  port      Port number of the host."]
    #[doc = " @param[in]  cfg       TLS configuration as esp_tls_cfg_t. If you wish to open"]
    #[doc = "                       non-TLS connection, keep this NULL. For TLS connection,"]
    #[doc = "                       a pass pointer to esp_tls_cfg_t. At a minimum, this"]
    #[doc = "                       structure should be zero-initialized."]
    #[doc = " @param[in]  tls       Pointer to esp-tls as esp-tls handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - -1      If connection establishment fails."]
    #[doc = "             -  1      If connection establishment is successful."]
    #[doc = "             -  0      If connection state is in progress."]
    pub fn esp_tls_conn_new_sync(
        hostname: *const c_types::c_char,
        hostlen: c_types::c_int,
        port: c_types::c_int,
        cfg: *const esp_tls_cfg_t,
        tls: *mut esp_tls_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Create a new blocking TLS/SSL connection with a given \"HTTP\" url"]
    #[doc = ""]
    #[doc = " The behaviour is same as esp_tls_conn_new() API. However this API accepts host's url."]
    #[doc = ""]
    #[doc = " @param[in]  url  url of host."]
    #[doc = " @param[in]  cfg  TLS configuration as esp_tls_cfg_t. If you wish to open"]
    #[doc = "                  non-TLS connection, keep this NULL. For TLS connection,"]
    #[doc = "                  a pass pointer to 'esp_tls_cfg_t'. At a minimum, this"]
    #[doc = "                  structure should be zero-initialized."]
    #[doc = " @return pointer to esp_tls_t, or NULL if connection couldn't be opened."]
    pub fn esp_tls_conn_http_new(
        url: *const c_types::c_char,
        cfg: *const esp_tls_cfg_t,
    ) -> *mut esp_tls_t;
}
extern "C" {
    #[doc = " @brief      Create a new non-blocking TLS/SSL connection"]
    #[doc = ""]
    #[doc = " This function initiates a non-blocking TLS/SSL connection with the specified host, but due to"]
    #[doc = " its non-blocking nature, it doesn't wait for the connection to get established."]
    #[doc = ""]
    #[doc = " @param[in]  hostname  Hostname of the host."]
    #[doc = " @param[in]  hostlen   Length of hostname."]
    #[doc = " @param[in]  port      Port number of the host."]
    #[doc = " @param[in]  cfg       TLS configuration as esp_tls_cfg_t. `non_block` member of"]
    #[doc = "                       this structure should be set to be true."]
    #[doc = " @param[in]  tls       pointer to esp-tls as esp-tls handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - -1      If connection establishment fails."]
    #[doc = "             -  0      If connection establishment is in progress."]
    #[doc = "             -  1      If connection establishment is successful."]
    pub fn esp_tls_conn_new_async(
        hostname: *const c_types::c_char,
        hostlen: c_types::c_int,
        port: c_types::c_int,
        cfg: *const esp_tls_cfg_t,
        tls: *mut esp_tls_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Create a new non-blocking TLS/SSL connection with a given \"HTTP\" url"]
    #[doc = ""]
    #[doc = " The behaviour is same as esp_tls_conn_new() API. However this API accepts host's url."]
    #[doc = ""]
    #[doc = " @param[in]  url     url of host."]
    #[doc = " @param[in]  cfg     TLS configuration as esp_tls_cfg_t."]
    #[doc = " @param[in]  tls     pointer to esp-tls as esp-tls handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - -1     If connection establishment fails."]
    #[doc = "             -  0     If connection establishment is in progress."]
    #[doc = "             -  1     If connection establishment is successful."]
    pub fn esp_tls_conn_http_new_async(
        url: *const c_types::c_char,
        cfg: *const esp_tls_cfg_t,
        tls: *mut esp_tls_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Compatible version of esp_tls_conn_destroy() to close the TLS/SSL connection"]
    #[doc = ""]
    #[doc = " @note This API will be removed in IDFv5.0"]
    #[doc = ""]
    #[doc = " @param[in]  tls  pointer to esp-tls as esp-tls handle."]
    pub fn esp_tls_conn_delete(tls: *mut esp_tls_t);
}
extern "C" {
    #[doc = " @brief      Close the TLS/SSL connection and free any allocated resources."]
    #[doc = ""]
    #[doc = " This function should be called to close each tls connection opened with esp_tls_conn_new() or"]
    #[doc = " esp_tls_conn_http_new() APIs."]
    #[doc = ""]
    #[doc = " @param[in]  tls  pointer to esp-tls as esp-tls handle."]
    #[doc = ""]
    #[doc = " @return    - 0 on success"]
    #[doc = "            - -1 if socket error or an invalid argument"]
    pub fn esp_tls_conn_destroy(tls: *mut esp_tls_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Return the number of application data bytes remaining to be"]
    #[doc = "             read from the current record"]
    #[doc = ""]
    #[doc = " This API is a wrapper over mbedtls's mbedtls_ssl_get_bytes_avail() API."]
    #[doc = ""]
    #[doc = " @param[in]  tls  pointer to esp-tls as esp-tls handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "            - -1  in case of invalid arg"]
    #[doc = "            - bytes available in the application data"]
    #[doc = "              record read buffer"]
    pub fn esp_tls_get_bytes_avail(tls: *mut esp_tls_t) -> ssize_t;
}
extern "C" {
    #[doc = " @brief       Returns the connection socket file descriptor from esp_tls session"]
    #[doc = ""]
    #[doc = " @param[in]   tls          handle to esp_tls context"]
    #[doc = ""]
    #[doc = " @param[out]  sockfd       int pointer to sockfd value."]
    #[doc = ""]
    #[doc = " @return     - ESP_OK on success and value of sockfd will be updated with socket file descriptor for connection"]
    #[doc = "             - ESP_ERR_INVALID_ARG if (tls == NULL || sockfd == NULL)"]
    pub fn esp_tls_get_conn_sockfd(tls: *mut esp_tls_t, sockfd: *mut c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Create a global CA store, initially empty."]
    #[doc = ""]
    #[doc = " This function should be called if the application wants to use the same CA store for multiple connections."]
    #[doc = " This function initialises the global CA store which can be then set by calling esp_tls_set_global_ca_store()."]
    #[doc = " To be effective, this function must be called before any call to esp_tls_set_global_ca_store()."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK             if creating global CA store was successful."]
    #[doc = "             - ESP_ERR_NO_MEM     if an error occured when allocating the mbedTLS resources."]
    pub fn esp_tls_init_global_ca_store() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set the global CA store with the buffer provided in pem format."]
    #[doc = ""]
    #[doc = " This function should be called if the application wants to set the global CA store for"]
    #[doc = " multiple connections i.e. to add the certificates in the provided buffer to the certificate chain."]
    #[doc = " This function implicitly calls esp_tls_init_global_ca_store() if it has not already been called."]
    #[doc = " The application must call this function before calling esp_tls_conn_new()."]
    #[doc = ""]
    #[doc = " @param[in]  cacert_pem_buf    Buffer which has certificates in pem format. This buffer"]
    #[doc = "                               is used for creating a global CA store, which can be used"]
    #[doc = "                               by other tls connections."]
    #[doc = " @param[in]  cacert_pem_bytes  Length of the buffer."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK  if adding certificates was successful."]
    #[doc = "             - Other   if an error occured or an action must be taken by the calling process."]
    pub fn esp_tls_set_global_ca_store(
        cacert_pem_buf: *const c_types::c_uchar,
        cacert_pem_bytes: c_types::c_uint,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Free the global CA store currently being used."]
    #[doc = ""]
    #[doc = " The memory being used by the global CA store to store all the parsed certificates is"]
    #[doc = " freed up. The application can call this API if it no longer needs the global CA store."]
    pub fn esp_tls_free_global_ca_store();
}
extern "C" {
    #[doc = " @brief      Returns last error in esp_tls with detailed mbedtls related error codes."]
    #[doc = "             The error information is cleared internally upon return"]
    #[doc = ""]
    #[doc = " @param[in]  h              esp-tls error handle."]
    #[doc = " @param[out] esp_tls_code   last error code returned from mbedtls api (set to zero if none)"]
    #[doc = "                            This pointer could be NULL if caller does not care about esp_tls_code"]
    #[doc = " @param[out] esp_tls_flags  last certification verification flags (set to zero if none)"]
    #[doc = "                            This pointer could be NULL if caller does not care about esp_tls_code"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "            - ESP_ERR_INVALID_STATE if invalid parameters"]
    #[doc = "            - ESP_OK (0) if no error occurred"]
    #[doc = "            - specific error code (based on ESP_ERR_ESP_TLS_BASE) otherwise"]
    pub fn esp_tls_get_and_clear_last_error(
        h: esp_tls_error_handle_t,
        esp_tls_code: *mut c_types::c_int,
        esp_tls_flags: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Returns the last error captured in esp_tls of a specific type"]
    #[doc = "             The error information is cleared internally upon return"]
    #[doc = ""]
    #[doc = " @param[in]  h              esp-tls error handle."]
    #[doc = " @param[in]  err_type       specific error type"]
    #[doc = " @param[out] error_code     last error code returned from mbedtls api (set to zero if none)"]
    #[doc = "                            This pointer could be NULL if caller does not care about esp_tls_code"]
    #[doc = " @return"]
    #[doc = "            - ESP_ERR_INVALID_STATE if invalid parameters"]
    #[doc = "            - ESP_OK if a valid error returned and was cleared"]
    pub fn esp_tls_get_and_clear_error_type(
        h: esp_tls_error_handle_t,
        err_type: esp_tls_error_type_t,
        error_code: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get the pointer to the global CA store currently being used."]
    #[doc = ""]
    #[doc = " The application must first call esp_tls_set_global_ca_store(). Then the same"]
    #[doc = " CA store could be used by the application for APIs other than esp_tls."]
    #[doc = ""]
    #[doc = " @note       Modifying the pointer might cause a failure in verifying the certificates."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - Pointer to the global CA store currently being used    if successful."]
    #[doc = "             - NULL                                                   if there is no global CA store set."]
    pub fn esp_tls_get_global_ca_store() -> *mut mbedtls_x509_crt;
}
extern "C" {
    #[doc = " @brief Creates a plain TCP connection, returning a valid socket fd on success or an error handle"]
    #[doc = ""]
    #[doc = " @param[in]  host      Hostname of the host."]
    #[doc = " @param[in]  hostlen   Length of hostname."]
    #[doc = " @param[in]  port      Port number of the host."]
    #[doc = " @param[in]  cfg       ESP-TLS configuration as esp_tls_cfg_t."]
    #[doc = " @param[out] error_handle ESP-TLS error handle holding potential errors occurred during connection"]
    #[doc = " @param[out] sockfd    Socket descriptor if successfully connected on TCP layer"]
    #[doc = " @return     ESP_OK   on success"]
    #[doc = "             ESP_ERR_INVALID_ARG if invalid output parameters"]
    #[doc = "             ESP-TLS based error codes on failure"]
    pub fn esp_tls_plain_tcp_connect(
        host: *const c_types::c_char,
        hostlen: c_types::c_int,
        port: c_types::c_int,
        cfg: *const esp_tls_cfg_t,
        error_handle: esp_tls_error_handle_t,
        sockfd: *mut c_types::c_int,
    ) -> esp_err_t;
}
#[doc = "< Monitor the first boot. In bootloader this state is changed to ESP_OTA_IMG_PENDING_VERIFY."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_NEW: esp_ota_img_states_t = 0;
#[doc = "< First boot for this app was. If while the second boot this state is then it will be changed to ABORTED."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_PENDING_VERIFY: esp_ota_img_states_t = 1;
#[doc = "< App was confirmed as workable. App can boot and work without limits."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_VALID: esp_ota_img_states_t = 2;
#[doc = "< App was confirmed as non-workable. This app will not selected to boot at all."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_INVALID: esp_ota_img_states_t = 3;
#[doc = "< App could not confirm the workable or non-workable. In bootloader IMG_PENDING_VERIFY state will be changed to IMG_ABORTED. This app will not selected to boot at all."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_ABORTED: esp_ota_img_states_t = 4;
#[doc = "< Undefined. App can boot and work without limits."]
pub const esp_ota_img_states_t_ESP_OTA_IMG_UNDEFINED: esp_ota_img_states_t = 4294967295;
#[doc = " OTA_DATA states for checking operability of the app."]
pub type esp_ota_img_states_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_ota_select_entry_t {
    pub ota_seq: u32,
    pub seq_label: [u8; 20usize],
    pub ota_state: u32,
    pub crc: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_partition_pos_t {
    pub offset: u32,
    pub size: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_partition_info_t {
    pub magic: u16,
    pub type_: u8,
    pub subtype: u8,
    pub pos: esp_partition_pos_t,
    pub label: [u8; 16usize],
    pub flags: u32,
}
extern "C" {
    pub fn esp_partition_table_verify(
        partition_table: *const esp_partition_info_t,
        log_errors: bool,
        num_partitions: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Check whether the region on the main flash is safe to write."]
    #[doc = ""]
    #[doc = " @param addr Start address of the region"]
    #[doc = " @param size Size of the region"]
    #[doc = ""]
    #[doc = " @return true if the region is safe to write, otherwise false."]
    pub fn esp_partition_main_flash_region_safe(addr: size_t, size: size_t) -> bool;
}
#[doc = "< chip ID: ESP32"]
pub const esp_chip_id_t_ESP_CHIP_ID_ESP32: esp_chip_id_t = 0;
#[doc = "< chip ID: ESP32-S2"]
pub const esp_chip_id_t_ESP_CHIP_ID_ESP32S2: esp_chip_id_t = 2;
#[doc = "< chip ID: ESP32-C3"]
pub const esp_chip_id_t_ESP_CHIP_ID_ESP32C3: esp_chip_id_t = 5;
#[doc = "< chip ID: ESP32-S3"]
pub const esp_chip_id_t_ESP_CHIP_ID_ESP32S3: esp_chip_id_t = 9;
#[doc = "< chip ID: ESP32-H2"]
pub const esp_chip_id_t_ESP_CHIP_ID_ESP32H2: esp_chip_id_t = 10;
#[doc = "< Invalid chip ID (we defined it to make sure the esp_chip_id_t is 2 bytes size)"]
pub const esp_chip_id_t_ESP_CHIP_ID_INVALID: esp_chip_id_t = 65535;
#[doc = " @brief ESP chip ID"]
#[doc = ""]
pub type esp_chip_id_t = c_types::c_ushort;
#[doc = "< SPI mode QIO"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_QIO: esp_image_spi_mode_t = 0;
#[doc = "< SPI mode QOUT"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_QOUT: esp_image_spi_mode_t = 1;
#[doc = "< SPI mode DIO"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_DIO: esp_image_spi_mode_t = 2;
#[doc = "< SPI mode DOUT"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_DOUT: esp_image_spi_mode_t = 3;
#[doc = "< SPI mode FAST_READ"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_FAST_READ: esp_image_spi_mode_t = 4;
#[doc = "< SPI mode SLOW_READ"]
pub const esp_image_spi_mode_t_ESP_IMAGE_SPI_MODE_SLOW_READ: esp_image_spi_mode_t = 5;
#[doc = " @brief SPI flash mode, used in esp_image_header_t"]
pub type esp_image_spi_mode_t = c_types::c_uint;
#[doc = "< SPI clock frequency 40 MHz"]
pub const esp_image_spi_freq_t_ESP_IMAGE_SPI_SPEED_40M: esp_image_spi_freq_t = 0;
#[doc = "< SPI clock frequency 26 MHz"]
pub const esp_image_spi_freq_t_ESP_IMAGE_SPI_SPEED_26M: esp_image_spi_freq_t = 1;
#[doc = "< SPI clock frequency 20 MHz"]
pub const esp_image_spi_freq_t_ESP_IMAGE_SPI_SPEED_20M: esp_image_spi_freq_t = 2;
#[doc = "< SPI clock frequency 80 MHz"]
pub const esp_image_spi_freq_t_ESP_IMAGE_SPI_SPEED_80M: esp_image_spi_freq_t = 15;
#[doc = " @brief SPI flash clock frequency"]
pub type esp_image_spi_freq_t = c_types::c_uint;
#[doc = "< SPI flash size 1 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_1MB: esp_image_flash_size_t = 0;
#[doc = "< SPI flash size 2 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_2MB: esp_image_flash_size_t = 1;
#[doc = "< SPI flash size 4 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_4MB: esp_image_flash_size_t = 2;
#[doc = "< SPI flash size 8 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_8MB: esp_image_flash_size_t = 3;
#[doc = "< SPI flash size 16 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_16MB: esp_image_flash_size_t = 4;
#[doc = "< SPI flash size 32 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_32MB: esp_image_flash_size_t = 5;
#[doc = "< SPI flash size 64 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_64MB: esp_image_flash_size_t = 6;
#[doc = "< SPI flash size 128 MB"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_128MB: esp_image_flash_size_t = 7;
#[doc = "< SPI flash size MAX"]
pub const esp_image_flash_size_t_ESP_IMAGE_FLASH_SIZE_MAX: esp_image_flash_size_t = 8;
#[doc = " @brief Supported SPI flash sizes"]
pub type esp_image_flash_size_t = c_types::c_uint;
#[doc = " @brief Main header of binary image"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct esp_image_header_t {
    #[doc = "< Magic word ESP_IMAGE_HEADER_MAGIC"]
    pub magic: u8,
    #[doc = "< Count of memory segments"]
    pub segment_count: u8,
    #[doc = "< flash read mode (esp_image_spi_mode_t as uint8_t)"]
    pub spi_mode: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    #[doc = "< Entry address"]
    pub entry_addr: u32,
    #[doc = "< WP pin when SPI pins set via efuse (read by ROM bootloader,"]
    #[doc = " the IDF bootloader uses software to configure the WP"]
    #[doc = " pin and sets this field to 0xEE=disabled)"]
    pub wp_pin: u8,
    #[doc = "< Drive settings for the SPI flash pins (read by ROM bootloader)"]
    pub spi_pin_drv: [u8; 3usize],
    #[doc = "< Chip identification number"]
    pub chip_id: esp_chip_id_t,
    #[doc = "< Minimum chip revision supported by image"]
    pub min_chip_rev: u8,
    #[doc = "< Reserved bytes in additional header space, currently unused"]
    pub reserved: [u8; 8usize],
    #[doc = "< If 1, a SHA256 digest \"simple hash\" (of the entire image) is appended after the checksum."]
    #[doc = " Included in image length. This digest"]
    #[doc = " is separate to secure boot and only used for detecting corruption."]
    #[doc = " For secure boot signed images, the signature"]
    #[doc = " is appended after this (and the simple hash is included in the signed data)."]
    pub hash_appended: u8,
}
impl Default for esp_image_header_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl esp_image_header_t {
    #[inline]
    pub fn spi_speed(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_spi_speed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn spi_size(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_spi_size(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(spi_speed: u8, spi_size: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let spi_speed: u8 = unsafe { ::core::mem::transmute(spi_speed) };
            spi_speed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let spi_size: u8 = unsafe { ::core::mem::transmute(spi_size) };
            spi_size as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " @brief Header of binary image segment"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_image_segment_header_t {
    #[doc = "< Address of segment"]
    pub load_addr: u32,
    #[doc = "< Length of data"]
    pub data_len: u32,
}
#[doc = " @brief Description about application."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_app_desc_t {
    #[doc = "< Magic word ESP_APP_DESC_MAGIC_WORD"]
    pub magic_word: u32,
    #[doc = "< Secure version"]
    pub secure_version: u32,
    #[doc = "< reserv1"]
    pub reserv1: [u32; 2usize],
    #[doc = "< Application version"]
    pub version: [c_types::c_char; 32usize],
    #[doc = "< Project name"]
    pub project_name: [c_types::c_char; 32usize],
    #[doc = "< Compile time"]
    pub time: [c_types::c_char; 16usize],
    #[doc = "< Compile date"]
    pub date: [c_types::c_char; 16usize],
    #[doc = "< Version IDF"]
    pub idf_ver: [c_types::c_char; 32usize],
    #[doc = "< sha256 of elf file"]
    pub app_elf_sha256: [u8; 32usize],
    #[doc = "< reserv2"]
    pub reserv2: [u32; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_image_metadata_t {
    pub start_addr: u32,
    pub image: esp_image_header_t,
    pub segments: [esp_image_segment_header_t; 16usize],
    pub segment_data: [u32; 16usize],
    pub image_len: u32,
    pub image_digest: [u8; 32usize],
}
impl Default for esp_image_metadata_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const esp_image_load_mode_t_ESP_IMAGE_VERIFY: esp_image_load_mode_t = 0;
pub const esp_image_load_mode_t_ESP_IMAGE_VERIFY_SILENT: esp_image_load_mode_t = 1;
pub type esp_image_load_mode_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_retain_mem_t {
    #[doc = "< Partition of application which worked before goes to the deep sleep."]
    pub partition: esp_partition_pos_t,
    #[doc = "< Reboot counter. Reset only when power is off."]
    pub reboot_counter: u16,
    #[doc = "< Reserve"]
    pub reserve: u16,
    #[doc = "< Check sum crc32"]
    pub crc: u32,
}
extern "C" {
    #[doc = " @brief Verify an app image."]
    #[doc = ""]
    #[doc = " If encryption is enabled, data will be transparently decrypted."]
    #[doc = ""]
    #[doc = " @param mode Mode of operation (verify, silent verify, or load)."]
    #[doc = " @param part Partition to load the app from."]
    #[doc = " @param[inout] data Pointer to the image metadata structure which is be filled in by this function."]
    #[doc = "                    'start_addr' member should be set (to the start address of the image.)"]
    #[doc = "                    Other fields will all be initialised by this function."]
    #[doc = ""]
    #[doc = " Image validation checks:"]
    #[doc = " - Magic byte."]
    #[doc = " - Partition smaller than 16MB."]
    #[doc = " - All segments & image fit in partition."]
    #[doc = " - 8 bit image checksum is valid."]
    #[doc = " - SHA-256 of image is valid (if image has this appended)."]
    #[doc = " - (Signature) if signature verification is enabled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK if verify or load was successful"]
    #[doc = " - ESP_ERR_IMAGE_FLASH_FAIL if a SPI flash error occurs"]
    #[doc = " - ESP_ERR_IMAGE_INVALID if the image appears invalid."]
    #[doc = " - ESP_ERR_INVALID_ARG if the partition or data pointers are invalid."]
    pub fn esp_image_verify(
        mode: esp_image_load_mode_t,
        part: *const esp_partition_pos_t,
        data: *mut esp_image_metadata_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get metadata of app"]
    #[doc = ""]
    #[doc = " If encryption is enabled, data will be transparently decrypted."]
    #[doc = ""]
    #[doc = " @param part Partition to load the app from."]
    #[doc = " @param[out] metadata Pointer to the image metadata structure which is be filled in by this function."]
    #[doc = "                      Fields will all be initialised by this function."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK if filling of metadata was successful"]
    pub fn esp_image_get_metadata(
        part: *const esp_partition_pos_t,
        metadata: *mut esp_image_metadata_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Verify and load an app image (available only in space of bootloader)."]
    #[doc = ""]
    #[doc = " If encryption is enabled, data will be transparently decrypted."]
    #[doc = ""]
    #[doc = " @param part Partition to load the app from."]
    #[doc = " @param[inout] data Pointer to the image metadata structure which is be filled in by this function."]
    #[doc = "                    'start_addr' member should be set (to the start address of the image.)"]
    #[doc = "                    Other fields will all be initialised by this function."]
    #[doc = ""]
    #[doc = " Image validation checks:"]
    #[doc = " - Magic byte."]
    #[doc = " - Partition smaller than 16MB."]
    #[doc = " - All segments & image fit in partition."]
    #[doc = " - 8 bit image checksum is valid."]
    #[doc = " - SHA-256 of image is valid (if image has this appended)."]
    #[doc = " - (Signature) if signature verification is enabled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK if verify or load was successful"]
    #[doc = " - ESP_ERR_IMAGE_FLASH_FAIL if a SPI flash error occurs"]
    #[doc = " - ESP_ERR_IMAGE_INVALID if the image appears invalid."]
    #[doc = " - ESP_ERR_INVALID_ARG if the partition or data pointers are invalid."]
    pub fn bootloader_load_image(
        part: *const esp_partition_pos_t,
        data: *mut esp_image_metadata_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Load an app image without verification (available only in space of bootloader)."]
    #[doc = ""]
    #[doc = " If encryption is enabled, data will be transparently decrypted."]
    #[doc = ""]
    #[doc = " @param part Partition to load the app from."]
    #[doc = " @param[inout] data Pointer to the image metadata structure which is be filled in by this function."]
    #[doc = "                    'start_addr' member should be set (to the start address of the image.)"]
    #[doc = "                    Other fields will all be initialised by this function."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = " - ESP_OK if verify or load was successful"]
    #[doc = " - ESP_ERR_IMAGE_FLASH_FAIL if a SPI flash error occurs"]
    #[doc = " - ESP_ERR_IMAGE_INVALID if the image appears invalid."]
    #[doc = " - ESP_ERR_INVALID_ARG if the partition or data pointers are invalid."]
    pub fn bootloader_load_image_no_verify(
        part: *const esp_partition_pos_t,
        data: *mut esp_image_metadata_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Verify the bootloader image."]
    #[doc = ""]
    #[doc = " @param[out] If result is ESP_OK and this pointer is non-NULL, it"]
    #[doc = " will be set to the length of the bootloader image."]
    #[doc = ""]
    #[doc = " @return As per esp_image_load_metadata()."]
    pub fn esp_image_verify_bootloader(length: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Verify the bootloader image."]
    #[doc = ""]
    #[doc = " @param[out] Metadata for the image. Only valid if result is ESP_OK."]
    #[doc = ""]
    #[doc = " @return As per esp_image_load_metadata()."]
    pub fn esp_image_verify_bootloader_data(data: *mut esp_image_metadata_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the flash size of the image"]
    #[doc = ""]
    #[doc = " @param app_flash_size The value configured in the image header"]
    #[doc = " @return Actual size, in bytes."]
    pub fn esp_image_get_flash_size(app_flash_size: esp_image_flash_size_t) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct esp_image_flash_mapping_t {
    pub drom_addr: u32,
    pub drom_load_addr: u32,
    pub drom_size: u32,
    pub irom_addr: u32,
    pub irom_load_addr: u32,
    pub irom_size: u32,
}
#[doc = " @brief Opaque handle for an application OTA update"]
#[doc = ""]
#[doc = " esp_ota_begin() returns a handle which is then used for subsequent"]
#[doc = " calls to esp_ota_write() and esp_ota_end()."]
pub type esp_ota_handle_t = u32;
extern "C" {
    #[doc = " @brief   Return esp_app_desc structure. This structure includes app version."]
    #[doc = ""]
    #[doc = " Return description for running app."]
    #[doc = " @return Pointer to esp_app_desc structure."]
    pub fn esp_ota_get_app_description() -> *const esp_app_desc_t;
}
extern "C" {
    #[doc = " @brief   Fill the provided buffer with SHA256 of the ELF file, formatted as hexadecimal, null-terminated."]
    #[doc = " If the buffer size is not sufficient to fit the entire SHA256 in hex plus a null terminator,"]
    #[doc = " the largest possible number of bytes will be written followed by a null."]
    #[doc = " @param dst   Destination buffer"]
    #[doc = " @param size  Size of the buffer"]
    #[doc = " @return      Number of bytes written to dst (including null terminator)"]
    pub fn esp_ota_get_app_elf_sha256(dst: *mut c_types::c_char, size: size_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief   Commence an OTA update writing to the specified partition."]
    #[doc = ""]
    #[doc = " The specified partition is erased to the specified image size."]
    #[doc = ""]
    #[doc = " If image size is not yet known, pass OTA_SIZE_UNKNOWN which will"]
    #[doc = " cause the entire partition to be erased."]
    #[doc = ""]
    #[doc = " On success, this function allocates memory that remains in use"]
    #[doc = " until esp_ota_end() is called with the returned handle."]
    #[doc = ""]
    #[doc = " Note: If the rollback option is enabled and the running application has the ESP_OTA_IMG_PENDING_VERIFY state then"]
    #[doc = " it will lead to the ESP_ERR_OTA_ROLLBACK_INVALID_STATE error. Confirm the running app before to run download a new app,"]
    #[doc = " use esp_ota_mark_app_valid_cancel_rollback() function for it (this should be done as early as possible when you first download a new application)."]
    #[doc = ""]
    #[doc = " @param partition Pointer to info for partition which will receive the OTA update. Required."]
    #[doc = " @param image_size Size of new OTA app image. Partition will be erased in order to receive this size of image. If 0 or OTA_SIZE_UNKNOWN, the entire partition is erased."]
    #[doc = " @param out_handle On success, returns a handle which should be used for subsequent esp_ota_write() and esp_ota_end() calls."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: OTA operation commenced successfully."]
    #[doc = "    - ESP_ERR_INVALID_ARG: partition or out_handle arguments were NULL, or partition doesn't point to an OTA app partition."]
    #[doc = "    - ESP_ERR_NO_MEM: Cannot allocate memory for OTA operation."]
    #[doc = "    - ESP_ERR_OTA_PARTITION_CONFLICT: Partition holds the currently running firmware, cannot update in place."]
    #[doc = "    - ESP_ERR_NOT_FOUND: Partition argument not found in partition table."]
    #[doc = "    - ESP_ERR_OTA_SELECT_INFO_INVALID: The OTA data partition contains invalid data."]
    #[doc = "    - ESP_ERR_INVALID_SIZE: Partition doesn't fit in configured flash size."]
    #[doc = "    - ESP_ERR_FLASH_OP_TIMEOUT or ESP_ERR_FLASH_OP_FAIL: Flash write failed."]
    #[doc = "    - ESP_ERR_OTA_ROLLBACK_INVALID_STATE: If the running app has not confirmed state. Before performing an update, the application must be valid."]
    pub fn esp_ota_begin(
        partition: *const esp_partition_t,
        image_size: size_t,
        out_handle: *mut esp_ota_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Write OTA update data to partition"]
    #[doc = ""]
    #[doc = " This function can be called multiple times as"]
    #[doc = " data is received during the OTA operation. Data is written"]
    #[doc = " sequentially to the partition."]
    #[doc = ""]
    #[doc = " @param handle  Handle obtained from esp_ota_begin"]
    #[doc = " @param data    Data buffer to write"]
    #[doc = " @param size    Size of data buffer in bytes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Data was written to flash successfully."]
    #[doc = "    - ESP_ERR_INVALID_ARG: handle is invalid."]
    #[doc = "    - ESP_ERR_OTA_VALIDATE_FAILED: First byte of image contains invalid app image magic byte."]
    #[doc = "    - ESP_ERR_FLASH_OP_TIMEOUT or ESP_ERR_FLASH_OP_FAIL: Flash write failed."]
    #[doc = "    - ESP_ERR_OTA_SELECT_INFO_INVALID: OTA data partition has invalid contents"]
    pub fn esp_ota_write(
        handle: esp_ota_handle_t,
        data: *const c_types::c_void,
        size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Write OTA update data to partition"]
    #[doc = ""]
    #[doc = " This function can write data in non contiguous manner."]
    #[doc = " If flash encryption is enabled, data should be 16 byte aligned."]
    #[doc = ""]
    #[doc = " @param handle  Handle obtained from esp_ota_begin"]
    #[doc = " @param data    Data buffer to write"]
    #[doc = " @param size    Size of data buffer in bytes"]
    #[doc = " @param offset  Offset in flash partition"]
    #[doc = ""]
    #[doc = " @note While performing OTA, if the packets arrive out of order, esp_ota_write_with_offset() can be used to write data in non contiguous manner."]
    #[doc = "       Use of esp_ota_write_with_offset() in combination with esp_ota_write() is not recommended."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Data was written to flash successfully."]
    #[doc = "    - ESP_ERR_INVALID_ARG: handle is invalid."]
    #[doc = "    - ESP_ERR_OTA_VALIDATE_FAILED: First byte of image contains invalid app image magic byte."]
    #[doc = "    - ESP_ERR_FLASH_OP_TIMEOUT or ESP_ERR_FLASH_OP_FAIL: Flash write failed."]
    #[doc = "    - ESP_ERR_OTA_SELECT_INFO_INVALID: OTA data partition has invalid contents"]
    pub fn esp_ota_write_with_offset(
        handle: esp_ota_handle_t,
        data: *const c_types::c_void,
        size: size_t,
        offset: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Finish OTA update and validate newly written app image."]
    #[doc = ""]
    #[doc = " @param handle  Handle obtained from esp_ota_begin()."]
    #[doc = ""]
    #[doc = " @note After calling esp_ota_end(), the handle is no longer valid and any memory associated with it is freed (regardless of result)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Newly written OTA app image is valid."]
    #[doc = "    - ESP_ERR_NOT_FOUND: OTA handle was not found."]
    #[doc = "    - ESP_ERR_INVALID_ARG: Handle was never written to."]
    #[doc = "    - ESP_ERR_OTA_VALIDATE_FAILED: OTA image is invalid (either not a valid app image, or - if secure boot is enabled - signature failed to verify.)"]
    #[doc = "    - ESP_ERR_INVALID_STATE: If flash encryption is enabled, this result indicates an internal error writing the final encrypted bytes to flash."]
    pub fn esp_ota_end(handle: esp_ota_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Abort OTA update, free the handle and memory associated with it."]
    #[doc = ""]
    #[doc = " @param handle obtained from esp_ota_begin()."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: Handle and its associated memory is freed successfully."]
    #[doc = "    - ESP_ERR_NOT_FOUND: OTA handle was not found."]
    pub fn esp_ota_abort(handle: esp_ota_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure OTA data for a new boot partition"]
    #[doc = ""]
    #[doc = " @note If this function returns ESP_OK, calling esp_restart() will boot the newly configured app partition."]
    #[doc = ""]
    #[doc = " @param partition Pointer to info for partition containing app image to boot."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "    - ESP_OK: OTA data updated, next reboot will use specified partition."]
    #[doc = "    - ESP_ERR_INVALID_ARG: partition argument was NULL or didn't point to a valid OTA partition of type \"app\"."]
    #[doc = "    - ESP_ERR_OTA_VALIDATE_FAILED: Partition contained invalid app image. Also returned if secure boot is enabled and signature validation failed."]
    #[doc = "    - ESP_ERR_NOT_FOUND: OTA data partition not found."]
    #[doc = "    - ESP_ERR_FLASH_OP_TIMEOUT or ESP_ERR_FLASH_OP_FAIL: Flash erase or write failed."]
    pub fn esp_ota_set_boot_partition(partition: *const esp_partition_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get partition info of currently configured boot app"]
    #[doc = ""]
    #[doc = " If esp_ota_set_boot_partition() has been called, the partition which was set by that function will be returned."]
    #[doc = ""]
    #[doc = " If esp_ota_set_boot_partition() has not been called, the result is usually the same as esp_ota_get_running_partition()."]
    #[doc = " The two results are not equal if the configured boot partition does not contain a valid app (meaning that the running partition"]
    #[doc = " will be an app that the bootloader chose via fallback)."]
    #[doc = ""]
    #[doc = " If the OTA data partition is not present or not valid then the result is the first app partition found in the"]
    #[doc = " partition table. In priority order, this means: the factory app, the first OTA app slot, or the test app partition."]
    #[doc = ""]
    #[doc = " Note that there is no guarantee the returned partition is a valid app. Use esp_image_verify(ESP_IMAGE_VERIFY, ...) to verify if the"]
    #[doc = " returned partition contains a bootable image."]
    #[doc = ""]
    #[doc = " @return Pointer to info for partition structure, or NULL if partition table is invalid or a flash read operation failed. Any returned pointer is valid for the lifetime of the application."]
    pub fn esp_ota_get_boot_partition() -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Get partition info of currently running app"]
    #[doc = ""]
    #[doc = " This function is different to esp_ota_get_boot_partition() in that"]
    #[doc = " it ignores any change of selected boot partition caused by"]
    #[doc = " esp_ota_set_boot_partition(). Only the app whose code is currently"]
    #[doc = " running will have its partition information returned."]
    #[doc = ""]
    #[doc = " The partition returned by this function may also differ from esp_ota_get_boot_partition() if the configured boot"]
    #[doc = " partition is somehow invalid, and the bootloader fell back to a different app partition at boot."]
    #[doc = ""]
    #[doc = " @return Pointer to info for partition structure, or NULL if no partition is found or flash read operation failed. Returned pointer is valid for the lifetime of the application."]
    pub fn esp_ota_get_running_partition() -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Return the next OTA app partition which should be written with a new firmware."]
    #[doc = ""]
    #[doc = " Call this function to find an OTA app partition which can be passed to esp_ota_begin()."]
    #[doc = ""]
    #[doc = " Finds next partition round-robin, starting from the current running partition."]
    #[doc = ""]
    #[doc = " @param start_from If set, treat this partition info as describing the current running partition. Can be NULL, in which case esp_ota_get_running_partition() is used to find the currently running partition. The result of this function is never the same as this argument."]
    #[doc = ""]
    #[doc = " @return Pointer to info for partition which should be updated next. NULL result indicates invalid OTA data partition, or that no eligible OTA app slot partition was found."]
    #[doc = ""]
    pub fn esp_ota_get_next_update_partition(
        start_from: *const esp_partition_t,
    ) -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Returns esp_app_desc structure for app partition. This structure includes app version."]
    #[doc = ""]
    #[doc = " Returns a description for the requested app partition."]
    #[doc = " @param[in] partition     Pointer to app partition. (only app partition)"]
    #[doc = " @param[out] app_desc     Structure of info about app."]
    #[doc = " @return"]
    #[doc = "  - ESP_OK                Successful."]
    #[doc = "  - ESP_ERR_NOT_FOUND     app_desc structure is not found. Magic word is incorrect."]
    #[doc = "  - ESP_ERR_NOT_SUPPORTED Partition is not application."]
    #[doc = "  - ESP_ERR_INVALID_ARG   Arguments is NULL or if partition's offset exceeds partition size."]
    #[doc = "  - ESP_ERR_INVALID_SIZE  Read would go out of bounds of the partition."]
    #[doc = "  - or one of error codes from lower-level flash driver."]
    pub fn esp_ota_get_partition_description(
        partition: *const esp_partition_t,
        app_desc: *mut esp_app_desc_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns number of ota partitions provided in partition table."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Number of OTA partitions"]
    pub fn esp_ota_get_app_partition_count() -> u8;
}
extern "C" {
    #[doc = " @brief This function is called to indicate that the running app is working well."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: if successful."]
    pub fn esp_ota_mark_app_valid_cancel_rollback() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief This function is called to roll back to the previously workable app with reboot."]
    #[doc = ""]
    #[doc = " If rollback is successful then device will reset else API will return with error code."]
    #[doc = " Checks applications on a flash drive that can be booted in case of rollback."]
    #[doc = " If the flash does not have at least one app (except the running app) then rollback is not possible."]
    #[doc = " @return"]
    #[doc = "  - ESP_FAIL: if not successful."]
    #[doc = "  - ESP_ERR_OTA_ROLLBACK_FAILED: The rollback is not possible due to flash does not have any apps."]
    pub fn esp_ota_mark_app_invalid_rollback_and_reboot() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns last partition with invalid state (ESP_OTA_IMG_INVALID or ESP_OTA_IMG_ABORTED)."]
    #[doc = ""]
    #[doc = " @return partition."]
    pub fn esp_ota_get_last_invalid_partition() -> *const esp_partition_t;
}
extern "C" {
    #[doc = " @brief Returns state for given partition."]
    #[doc = ""]
    #[doc = " @param[in] partition  Pointer to partition."]
    #[doc = " @param[out] ota_state state of partition (if this partition has a record in otadata)."]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                 Successful."]
    #[doc = "        - ESP_ERR_INVALID_ARG:    partition or ota_state arguments were NULL."]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED:  partition is not ota."]
    #[doc = "        - ESP_ERR_NOT_FOUND:      Partition table does not have otadata or state was not found for given partition."]
    pub fn esp_ota_get_state_partition(
        partition: *const esp_partition_t,
        ota_state: *mut esp_ota_img_states_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase previous boot app partition and corresponding otadata select for this partition."]
    #[doc = ""]
    #[doc = " When current app is marked to as valid then you can erase previous app partition."]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:   Successful, otherwise ESP_ERR."]
    pub fn esp_ota_erase_last_boot_app_partition() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Checks applications on the slots which can be booted in case of rollback."]
    #[doc = ""]
    #[doc = " These applications should be valid (marked in otadata as not UNDEFINED, INVALID or ABORTED and crc is good) and be able booted,"]
    #[doc = " and secure_version of app >= secure_version of efuse (if anti-rollback is enabled)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - True: Returns true if the slots have at least one app (except the running app)."]
    #[doc = "        - False: The rollback is not possible."]
    pub fn esp_ota_check_rollback_is_possible() -> bool;
}
pub type http_data_cb = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut http_parser,
        at: *const c_types::c_char,
        length: size_t,
    ) -> c_types::c_int,
>;
pub type http_cb =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut http_parser) -> c_types::c_int>;
pub const http_method_HTTP_DELETE: http_method = 0;
pub const http_method_HTTP_GET: http_method = 1;
pub const http_method_HTTP_HEAD: http_method = 2;
pub const http_method_HTTP_POST: http_method = 3;
pub const http_method_HTTP_PUT: http_method = 4;
pub const http_method_HTTP_CONNECT: http_method = 5;
pub const http_method_HTTP_OPTIONS: http_method = 6;
pub const http_method_HTTP_TRACE: http_method = 7;
pub const http_method_HTTP_COPY: http_method = 8;
pub const http_method_HTTP_LOCK: http_method = 9;
pub const http_method_HTTP_MKCOL: http_method = 10;
pub const http_method_HTTP_MOVE: http_method = 11;
pub const http_method_HTTP_PROPFIND: http_method = 12;
pub const http_method_HTTP_PROPPATCH: http_method = 13;
pub const http_method_HTTP_SEARCH: http_method = 14;
pub const http_method_HTTP_UNLOCK: http_method = 15;
pub const http_method_HTTP_BIND: http_method = 16;
pub const http_method_HTTP_REBIND: http_method = 17;
pub const http_method_HTTP_UNBIND: http_method = 18;
pub const http_method_HTTP_ACL: http_method = 19;
pub const http_method_HTTP_REPORT: http_method = 20;
pub const http_method_HTTP_MKACTIVITY: http_method = 21;
pub const http_method_HTTP_CHECKOUT: http_method = 22;
pub const http_method_HTTP_MERGE: http_method = 23;
pub const http_method_HTTP_MSEARCH: http_method = 24;
pub const http_method_HTTP_NOTIFY: http_method = 25;
pub const http_method_HTTP_SUBSCRIBE: http_method = 26;
pub const http_method_HTTP_UNSUBSCRIBE: http_method = 27;
pub const http_method_HTTP_PATCH: http_method = 28;
pub const http_method_HTTP_PURGE: http_method = 29;
pub const http_method_HTTP_MKCALENDAR: http_method = 30;
pub const http_method_HTTP_LINK: http_method = 31;
pub const http_method_HTTP_UNLINK: http_method = 32;
pub type http_method = c_types::c_uint;
pub const http_parser_type_HTTP_REQUEST: http_parser_type = 0;
pub const http_parser_type_HTTP_RESPONSE: http_parser_type = 1;
pub const http_parser_type_HTTP_BOTH: http_parser_type = 2;
pub type http_parser_type = c_types::c_uint;
pub const flags_F_CHUNKED: flags = 1;
pub const flags_F_CONNECTION_KEEP_ALIVE: flags = 2;
pub const flags_F_CONNECTION_CLOSE: flags = 4;
pub const flags_F_CONNECTION_UPGRADE: flags = 8;
pub const flags_F_TRAILING: flags = 16;
pub const flags_F_UPGRADE: flags = 32;
pub const flags_F_SKIPBODY: flags = 64;
pub const flags_F_CONTENTLENGTH: flags = 128;
pub type flags = c_types::c_uint;
pub const http_errno_HPE_OK: http_errno = 0;
pub const http_errno_HPE_CB_message_begin: http_errno = 1;
pub const http_errno_HPE_CB_url: http_errno = 2;
pub const http_errno_HPE_CB_header_field: http_errno = 3;
pub const http_errno_HPE_CB_header_value: http_errno = 4;
pub const http_errno_HPE_CB_headers_complete: http_errno = 5;
pub const http_errno_HPE_CB_body: http_errno = 6;
pub const http_errno_HPE_CB_message_complete: http_errno = 7;
pub const http_errno_HPE_CB_status: http_errno = 8;
pub const http_errno_HPE_CB_chunk_header: http_errno = 9;
pub const http_errno_HPE_CB_chunk_complete: http_errno = 10;
pub const http_errno_HPE_INVALID_EOF_STATE: http_errno = 11;
pub const http_errno_HPE_HEADER_OVERFLOW: http_errno = 12;
pub const http_errno_HPE_CLOSED_CONNECTION: http_errno = 13;
pub const http_errno_HPE_INVALID_VERSION: http_errno = 14;
pub const http_errno_HPE_INVALID_STATUS: http_errno = 15;
pub const http_errno_HPE_INVALID_METHOD: http_errno = 16;
pub const http_errno_HPE_INVALID_URL: http_errno = 17;
pub const http_errno_HPE_INVALID_HOST: http_errno = 18;
pub const http_errno_HPE_INVALID_PORT: http_errno = 19;
pub const http_errno_HPE_INVALID_PATH: http_errno = 20;
pub const http_errno_HPE_INVALID_QUERY_STRING: http_errno = 21;
pub const http_errno_HPE_INVALID_FRAGMENT: http_errno = 22;
pub const http_errno_HPE_LF_EXPECTED: http_errno = 23;
pub const http_errno_HPE_INVALID_HEADER_TOKEN: http_errno = 24;
pub const http_errno_HPE_INVALID_CONTENT_LENGTH: http_errno = 25;
pub const http_errno_HPE_UNEXPECTED_CONTENT_LENGTH: http_errno = 26;
pub const http_errno_HPE_INVALID_CHUNK_SIZE: http_errno = 27;
pub const http_errno_HPE_INVALID_CONSTANT: http_errno = 28;
pub const http_errno_HPE_INVALID_INTERNAL_STATE: http_errno = 29;
pub const http_errno_HPE_STRICT: http_errno = 30;
pub const http_errno_HPE_PAUSED: http_errno = 31;
pub const http_errno_HPE_UNKNOWN: http_errno = 32;
pub type http_errno = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct http_parser {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub nread: u32,
    pub content_length: u64,
    #[doc = " READ-ONLY"]
    pub http_major: c_types::c_ushort,
    pub http_minor: c_types::c_ushort,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    #[doc = " PUBLIC"]
    pub data: *mut c_types::c_void,
}
impl Default for http_parser {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl http_parser {
    #[inline]
    pub fn type_(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn state(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_state(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn header_state(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_header_state(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn index(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_index(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn lenient_http_headers(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lenient_http_headers(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: c_types::c_uint,
        flags: c_types::c_uint,
        state: c_types::c_uint,
        header_state: c_types::c_uint,
        index: c_types::c_uint,
        lenient_http_headers: c_types::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(2usize, 8u8, {
            let flags: u32 = unsafe { ::core::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(10usize, 7u8, {
            let state: u32 = unsafe { ::core::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(17usize, 7u8, {
            let header_state: u32 = unsafe { ::core::mem::transmute(header_state) };
            header_state as u64
        });
        __bindgen_bitfield_unit.set(24usize, 7u8, {
            let index: u32 = unsafe { ::core::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let lenient_http_headers: u32 = unsafe { ::core::mem::transmute(lenient_http_headers) };
            lenient_http_headers as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn status_code(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_status_code(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn method(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_method(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn http_errno(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(24usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_http_errno(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(24usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn upgrade(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_upgrade(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_2.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        status_code: c_types::c_uint,
        method: c_types::c_uint,
        http_errno: c_types::c_uint,
        upgrade: c_types::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let status_code: u32 = unsafe { ::core::mem::transmute(status_code) };
            status_code as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let method: u32 = unsafe { ::core::mem::transmute(method) };
            method as u64
        });
        __bindgen_bitfield_unit.set(24usize, 7u8, {
            let http_errno: u32 = unsafe { ::core::mem::transmute(http_errno) };
            http_errno as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let upgrade: u32 = unsafe { ::core::mem::transmute(upgrade) };
            upgrade as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct http_parser_settings {
    pub on_message_begin: http_cb,
    pub on_url: http_data_cb,
    pub on_status: http_data_cb,
    pub on_header_field: http_data_cb,
    pub on_header_value: http_data_cb,
    pub on_headers_complete: http_cb,
    pub on_body: http_data_cb,
    pub on_message_complete: http_cb,
    pub on_chunk_header: http_cb,
    pub on_chunk_complete: http_cb,
}
pub const http_parser_url_fields_UF_SCHEMA: http_parser_url_fields = 0;
pub const http_parser_url_fields_UF_HOST: http_parser_url_fields = 1;
pub const http_parser_url_fields_UF_PORT: http_parser_url_fields = 2;
pub const http_parser_url_fields_UF_PATH: http_parser_url_fields = 3;
pub const http_parser_url_fields_UF_QUERY: http_parser_url_fields = 4;
pub const http_parser_url_fields_UF_FRAGMENT: http_parser_url_fields = 5;
pub const http_parser_url_fields_UF_USERINFO: http_parser_url_fields = 6;
pub const http_parser_url_fields_UF_MAX: http_parser_url_fields = 7;
pub type http_parser_url_fields = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct http_parser_url {
    pub field_set: u16,
    pub port: u16,
    pub field_data: [http_parser_url__bindgen_ty_1; 7usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct http_parser_url__bindgen_ty_1 {
    pub off: u16,
    pub len: u16,
}
extern "C" {
    pub fn http_parser_version() -> c_types::c_ulong;
}
extern "C" {
    pub fn http_parser_init(parser: *mut http_parser, type_: http_parser_type);
}
extern "C" {
    pub fn http_parser_settings_init(settings: *mut http_parser_settings);
}
extern "C" {
    pub fn http_parser_execute(
        parser: *mut http_parser,
        settings: *const http_parser_settings,
        data: *const c_types::c_char,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn http_should_keep_alive(parser: *const http_parser) -> c_types::c_int;
}
extern "C" {
    pub fn http_method_str(m: http_method) -> *const c_types::c_char;
}
extern "C" {
    pub fn http_errno_name(err: http_errno) -> *const c_types::c_char;
}
extern "C" {
    pub fn http_errno_description(err: http_errno) -> *const c_types::c_char;
}
extern "C" {
    pub fn http_parser_url_init(u: *mut http_parser_url);
}
extern "C" {
    pub fn http_parser_parse_url(
        buf: *const c_types::c_char,
        buflen: size_t,
        is_connect: c_types::c_int,
        u: *mut http_parser_url,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn http_parser_pause(parser: *mut http_parser, paused: c_types::c_int);
}
extern "C" {
    pub fn http_body_is_final(parser: *const http_parser) -> c_types::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_http_client {
    _unused: [u8; 0],
}
pub type esp_http_client_handle_t = *mut esp_http_client;
pub type esp_http_client_event_handle_t = *mut esp_http_client_event;
#[doc = "< This event occurs when there are any errors during execution"]
pub const esp_http_client_event_id_t_HTTP_EVENT_ERROR: esp_http_client_event_id_t = 0;
#[doc = "< Once the HTTP has been connected to the server, no data exchange has been performed"]
pub const esp_http_client_event_id_t_HTTP_EVENT_ON_CONNECTED: esp_http_client_event_id_t = 1;
#[doc = "< After sending all the headers to the server"]
pub const esp_http_client_event_id_t_HTTP_EVENT_HEADERS_SENT: esp_http_client_event_id_t = 2;
#[doc = "< This header has been kept for backward compatability"]
#[doc = "and will be deprecated in future versions esp-idf"]
pub const esp_http_client_event_id_t_HTTP_EVENT_HEADER_SENT: esp_http_client_event_id_t = 2;
#[doc = "< Occurs when receiving each header sent from the server"]
pub const esp_http_client_event_id_t_HTTP_EVENT_ON_HEADER: esp_http_client_event_id_t = 3;
#[doc = "< Occurs when receiving data from the server, possibly multiple portions of the packet"]
pub const esp_http_client_event_id_t_HTTP_EVENT_ON_DATA: esp_http_client_event_id_t = 4;
#[doc = "< Occurs when finish a HTTP session"]
pub const esp_http_client_event_id_t_HTTP_EVENT_ON_FINISH: esp_http_client_event_id_t = 5;
#[doc = "< The connection has been disconnected"]
pub const esp_http_client_event_id_t_HTTP_EVENT_DISCONNECTED: esp_http_client_event_id_t = 6;
#[doc = " @brief   HTTP Client events id"]
pub type esp_http_client_event_id_t = c_types::c_uint;
#[doc = " @brief      HTTP Client events data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_http_client_event {
    #[doc = "< event_id, to know the cause of the event"]
    pub event_id: esp_http_client_event_id_t,
    #[doc = "< esp_http_client_handle_t context"]
    pub client: esp_http_client_handle_t,
    #[doc = "< data of the event"]
    pub data: *mut c_types::c_void,
    #[doc = "< data length of data"]
    pub data_len: c_types::c_int,
    #[doc = "< user_data context, from esp_http_client_config_t user_data"]
    pub user_data: *mut c_types::c_void,
    #[doc = "< For HTTP_EVENT_ON_HEADER event_id, it's store current http header key"]
    pub header_key: *mut c_types::c_char,
    #[doc = "< For HTTP_EVENT_ON_HEADER event_id, it's store current http header value"]
    pub header_value: *mut c_types::c_char,
}
impl Default for esp_http_client_event {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief      HTTP Client events data"]
pub type esp_http_client_event_t = esp_http_client_event;
#[doc = "< Unknown"]
pub const esp_http_client_transport_t_HTTP_TRANSPORT_UNKNOWN: esp_http_client_transport_t = 0;
#[doc = "< Transport over tcp"]
pub const esp_http_client_transport_t_HTTP_TRANSPORT_OVER_TCP: esp_http_client_transport_t = 1;
#[doc = "< Transport over ssl"]
pub const esp_http_client_transport_t_HTTP_TRANSPORT_OVER_SSL: esp_http_client_transport_t = 2;
#[doc = " @brief      HTTP Client transport"]
pub type esp_http_client_transport_t = c_types::c_uint;
pub type http_event_handle_cb =
    ::core::option::Option<unsafe extern "C" fn(evt: *mut esp_http_client_event_t) -> esp_err_t>;
#[doc = "< HTTP GET Method"]
pub const esp_http_client_method_t_HTTP_METHOD_GET: esp_http_client_method_t = 0;
#[doc = "< HTTP POST Method"]
pub const esp_http_client_method_t_HTTP_METHOD_POST: esp_http_client_method_t = 1;
#[doc = "< HTTP PUT Method"]
pub const esp_http_client_method_t_HTTP_METHOD_PUT: esp_http_client_method_t = 2;
#[doc = "< HTTP PATCH Method"]
pub const esp_http_client_method_t_HTTP_METHOD_PATCH: esp_http_client_method_t = 3;
#[doc = "< HTTP DELETE Method"]
pub const esp_http_client_method_t_HTTP_METHOD_DELETE: esp_http_client_method_t = 4;
#[doc = "< HTTP HEAD Method"]
pub const esp_http_client_method_t_HTTP_METHOD_HEAD: esp_http_client_method_t = 5;
#[doc = "< HTTP NOTIFY Method"]
pub const esp_http_client_method_t_HTTP_METHOD_NOTIFY: esp_http_client_method_t = 6;
#[doc = "< HTTP SUBSCRIBE Method"]
pub const esp_http_client_method_t_HTTP_METHOD_SUBSCRIBE: esp_http_client_method_t = 7;
#[doc = "< HTTP UNSUBSCRIBE Method"]
pub const esp_http_client_method_t_HTTP_METHOD_UNSUBSCRIBE: esp_http_client_method_t = 8;
#[doc = "< HTTP OPTIONS Method"]
pub const esp_http_client_method_t_HTTP_METHOD_OPTIONS: esp_http_client_method_t = 9;
#[doc = "< HTTP COPY Method"]
pub const esp_http_client_method_t_HTTP_METHOD_COPY: esp_http_client_method_t = 10;
#[doc = "< HTTP MOVE Method"]
pub const esp_http_client_method_t_HTTP_METHOD_MOVE: esp_http_client_method_t = 11;
#[doc = "< HTTP LOCK Method"]
pub const esp_http_client_method_t_HTTP_METHOD_LOCK: esp_http_client_method_t = 12;
#[doc = "< HTTP UNLOCK Method"]
pub const esp_http_client_method_t_HTTP_METHOD_UNLOCK: esp_http_client_method_t = 13;
#[doc = "< HTTP PROPFIND Method"]
pub const esp_http_client_method_t_HTTP_METHOD_PROPFIND: esp_http_client_method_t = 14;
#[doc = "< HTTP PROPPATCH Method"]
pub const esp_http_client_method_t_HTTP_METHOD_PROPPATCH: esp_http_client_method_t = 15;
#[doc = "< HTTP MKCOL Method"]
pub const esp_http_client_method_t_HTTP_METHOD_MKCOL: esp_http_client_method_t = 16;
pub const esp_http_client_method_t_HTTP_METHOD_MAX: esp_http_client_method_t = 17;
#[doc = " @brief HTTP method"]
pub type esp_http_client_method_t = c_types::c_uint;
#[doc = "< No authention"]
pub const esp_http_client_auth_type_t_HTTP_AUTH_TYPE_NONE: esp_http_client_auth_type_t = 0;
#[doc = "< HTTP Basic authentication"]
pub const esp_http_client_auth_type_t_HTTP_AUTH_TYPE_BASIC: esp_http_client_auth_type_t = 1;
#[doc = "< HTTP Disgest authentication"]
pub const esp_http_client_auth_type_t_HTTP_AUTH_TYPE_DIGEST: esp_http_client_auth_type_t = 2;
#[doc = " @brief HTTP Authentication type"]
pub type esp_http_client_auth_type_t = c_types::c_uint;
#[doc = " @brief HTTP configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_http_client_config_t {
    #[doc = "< HTTP URL, the information on the URL is most important, it overrides the other fields below, if any"]
    pub url: *const c_types::c_char,
    #[doc = "< Domain or IP as string"]
    pub host: *const c_types::c_char,
    #[doc = "< Port to connect, default depend on esp_http_client_transport_t (80 or 443)"]
    pub port: c_types::c_int,
    #[doc = "< Using for Http authentication"]
    pub username: *const c_types::c_char,
    #[doc = "< Using for Http authentication"]
    pub password: *const c_types::c_char,
    #[doc = "< Http authentication type, see `esp_http_client_auth_type_t`"]
    pub auth_type: esp_http_client_auth_type_t,
    #[doc = "< HTTP Path, if not set, default is `/`"]
    pub path: *const c_types::c_char,
    #[doc = "< HTTP query"]
    pub query: *const c_types::c_char,
    #[doc = "< SSL server certification, PEM format as string, if the client requires to verify server"]
    pub cert_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by cert_pem. May be 0 for null-terminated pem"]
    pub cert_len: size_t,
    #[doc = "< SSL client certification, PEM format as string, if the server requires to verify client"]
    pub client_cert_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_cert_pem. May be 0 for null-terminated pem"]
    pub client_cert_len: size_t,
    #[doc = "< SSL client key, PEM format as string, if the server requires to verify client"]
    pub client_key_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_key_pem. May be 0 for null-terminated pem"]
    pub client_key_len: size_t,
    #[doc = "< Client key decryption password string"]
    pub client_key_password: *const c_types::c_char,
    #[doc = "< String length of the password pointed to by client_key_password"]
    pub client_key_password_len: size_t,
    #[doc = "< The User Agent string to send with HTTP requests"]
    pub user_agent: *const c_types::c_char,
    #[doc = "< HTTP Method"]
    pub method: esp_http_client_method_t,
    #[doc = "< Network timeout in milliseconds"]
    pub timeout_ms: c_types::c_int,
    #[doc = "< Disable HTTP automatic redirects"]
    pub disable_auto_redirect: bool,
    #[doc = "< Max number of redirections on receiving HTTP redirect status code, using default value if zero"]
    pub max_redirection_count: c_types::c_int,
    #[doc = "< Max connection retries on receiving HTTP unauthorized status code, using default value if zero. Disables authorization retry if -1"]
    pub max_authorization_retries: c_types::c_int,
    #[doc = "< HTTP Event Handle"]
    pub event_handler: http_event_handle_cb,
    #[doc = "< HTTP transport type, see `esp_http_client_transport_t`"]
    pub transport_type: esp_http_client_transport_t,
    #[doc = "< HTTP receive buffer size"]
    pub buffer_size: c_types::c_int,
    #[doc = "< HTTP transmit buffer size"]
    pub buffer_size_tx: c_types::c_int,
    #[doc = "< HTTP user_data context"]
    pub user_data: *mut c_types::c_void,
    #[doc = "< Set asynchronous mode, only supported with HTTPS for now"]
    pub is_async: bool,
    #[doc = "< Use a global ca_store for all the connections in which this bool is set."]
    pub use_global_ca_store: bool,
    #[doc = "< Skip any validation of server certificate CN field"]
    pub skip_cert_common_name_check: bool,
    #[doc = "< Function pointer to esp_crt_bundle_attach. Enables the use of certification"]
    #[doc = "bundle for server verification, must be enabled in menuconfig"]
    pub crt_bundle_attach:
        ::core::option::Option<unsafe extern "C" fn(conf: *mut c_types::c_void) -> esp_err_t>,
    #[doc = "< Enable keep-alive timeout"]
    pub keep_alive_enable: bool,
    #[doc = "< Keep-alive idle time. Default is 5 (second)"]
    pub keep_alive_idle: c_types::c_int,
    #[doc = "< Keep-alive interval time. Default is 5 (second)"]
    pub keep_alive_interval: c_types::c_int,
    #[doc = "< Keep-alive packet retry send count. Default is 3 counts"]
    pub keep_alive_count: c_types::c_int,
    #[doc = "< The name of interface for data to go through. Use the default interface without setting"]
    pub if_name: *mut ifreq,
}
impl Default for esp_http_client_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const HttpStatus_Code_HttpStatus_Ok: HttpStatus_Code = 200;
pub const HttpStatus_Code_HttpStatus_MultipleChoices: HttpStatus_Code = 300;
pub const HttpStatus_Code_HttpStatus_MovedPermanently: HttpStatus_Code = 301;
pub const HttpStatus_Code_HttpStatus_Found: HttpStatus_Code = 302;
pub const HttpStatus_Code_HttpStatus_SeeOther: HttpStatus_Code = 303;
pub const HttpStatus_Code_HttpStatus_TemporaryRedirect: HttpStatus_Code = 307;
pub const HttpStatus_Code_HttpStatus_PermanentRedirect: HttpStatus_Code = 308;
pub const HttpStatus_Code_HttpStatus_BadRequest: HttpStatus_Code = 400;
pub const HttpStatus_Code_HttpStatus_Unauthorized: HttpStatus_Code = 401;
pub const HttpStatus_Code_HttpStatus_Forbidden: HttpStatus_Code = 403;
pub const HttpStatus_Code_HttpStatus_NotFound: HttpStatus_Code = 404;
pub const HttpStatus_Code_HttpStatus_InternalError: HttpStatus_Code = 500;
#[doc = " Enum for the HTTP status codes."]
pub type HttpStatus_Code = c_types::c_uint;
extern "C" {
    #[doc = " @brief      Start a HTTP session"]
    #[doc = "             This function must be the first function to call,"]
    #[doc = "             and it returns a esp_http_client_handle_t that you must use as input to other functions in the interface."]
    #[doc = "             This call MUST have a corresponding call to esp_http_client_cleanup when the operation is complete."]
    #[doc = ""]
    #[doc = " @param[in]  config   The configurations, see `http_client_config_t`"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - `esp_http_client_handle_t`"]
    #[doc = "     - NULL if any errors"]
    pub fn esp_http_client_init(
        config: *const esp_http_client_config_t,
    ) -> esp_http_client_handle_t;
}
extern "C" {
    #[doc = " @brief      Invoke this function after `esp_http_client_init` and all the options calls are made, and will perform the"]
    #[doc = "             transfer as described in the options. It must be called with the same esp_http_client_handle_t as input as the esp_http_client_init call returned."]
    #[doc = "             esp_http_client_perform performs the entire request in either blocking or non-blocking manner. By default, the API performs request in a blocking manner and returns when done,"]
    #[doc = "             or if it failed, and in non-blocking manner, it returns if EAGAIN/EWOULDBLOCK or EINPROGRESS is encountered, or if it failed. And in case of non-blocking request,"]
    #[doc = "             the user may call this API multiple times unless request & response is complete or there is a failure. To enable non-blocking esp_http_client_perform(), `is_async` member of esp_http_client_config_t"]
    #[doc = "             must be set while making a call to esp_http_client_init() API."]
    #[doc = "             You can do any amount of calls to esp_http_client_perform while using the same esp_http_client_handle_t. The underlying connection may be kept open if the server allows it."]
    #[doc = "             If you intend to transfer more than one file, you are even encouraged to do so."]
    #[doc = "             esp_http_client will then attempt to re-use the same connection for the following transfers, thus making the operations faster, less CPU intense and using less network resources."]
    #[doc = "             Just note that you will have to use `esp_http_client_set_**` between the invokes to set options for the following esp_http_client_perform."]
    #[doc = ""]
    #[doc = " @note       You must never call this function simultaneously from two places using the same client handle."]
    #[doc = "             Let the function return first before invoking it another time."]
    #[doc = "             If you want parallel transfers, you must use several esp_http_client_handle_t."]
    #[doc = "             This function include `esp_http_client_open` -> `esp_http_client_write` -> `esp_http_client_fetch_headers` -> `esp_http_client_read` (and option) `esp_http_client_close`."]
    #[doc = ""]
    #[doc = " @param      client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK on successful"]
    #[doc = "  - ESP_FAIL on error"]
    pub fn esp_http_client_perform(client: esp_http_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set URL for client, when performing this behavior, the options in the URL will replace the old ones"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  url     The url"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK"]
    #[doc = "  - ESP_FAIL"]
    pub fn esp_http_client_set_url(
        client: esp_http_client_handle_t,
        url: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set post data, this function must be called before `esp_http_client_perform`."]
    #[doc = "             Note: The data parameter passed to this function is a pointer and this function will not copy the data"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  data    post data pointer"]
    #[doc = " @param[in]  len     post length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK"]
    #[doc = "  - ESP_FAIL"]
    pub fn esp_http_client_set_post_field(
        client: esp_http_client_handle_t,
        data: *const c_types::c_char,
        len: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get current post field information"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[out] data    Point to post data pointer"]
    #[doc = ""]
    #[doc = " @return     Size of post data"]
    pub fn esp_http_client_get_post_field(
        client: esp_http_client_handle_t,
        data: *mut *mut c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Set http request header, this function must be called after esp_http_client_init and before any"]
    #[doc = "             perform function"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  key     The header key"]
    #[doc = " @param[in]  value   The header value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK"]
    #[doc = "  - ESP_FAIL"]
    pub fn esp_http_client_set_header(
        client: esp_http_client_handle_t,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get http request header."]
    #[doc = "             The value parameter will be set to NULL if there is no header which is same as"]
    #[doc = "             the key specified, otherwise the address of header value will be assigned to value parameter."]
    #[doc = "             This function must be called after `esp_http_client_init`."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  key     The header key"]
    #[doc = " @param[out] value   The header value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_FAIL"]
    pub fn esp_http_client_get_header(
        client: esp_http_client_handle_t,
        key: *const c_types::c_char,
        value: *mut *mut c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get http request username."]
    #[doc = "             The address of username buffer will be assigned to value parameter."]
    #[doc = "             This function must be called after `esp_http_client_init`."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[out] value   The username value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_get_username(
        client: esp_http_client_handle_t,
        value: *mut *mut c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set http request username."]
    #[doc = "             The value of username parameter will be assigned to username buffer."]
    #[doc = "             If the username parameter is NULL then username buffer will be freed."]
    #[doc = ""]
    #[doc = " @param[in]  client    The esp_http_client handle"]
    #[doc = " @param[in]  username  The username value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_set_username(
        client: esp_http_client_handle_t,
        username: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get http request password."]
    #[doc = "             The address of password buffer will be assigned to value parameter."]
    #[doc = "             This function must be called after `esp_http_client_init`."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[out] value   The password value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_get_password(
        client: esp_http_client_handle_t,
        value: *mut *mut c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set http request password."]
    #[doc = "             The value of password parameter will be assigned to password buffer."]
    #[doc = "             If the password parameter is NULL then password buffer will be freed."]
    #[doc = ""]
    #[doc = " @param[in]  client    The esp_http_client handle"]
    #[doc = " @param[in]  password  The password value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_set_password(
        client: esp_http_client_handle_t,
        password: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set http request auth_type."]
    #[doc = ""]
    #[doc = " @param[in]  client    The esp_http_client handle"]
    #[doc = " @param[in]  auth_type The esp_http_client auth type"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_set_authtype(
        client: esp_http_client_handle_t,
        auth_type: esp_http_client_auth_type_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get HTTP client session errno"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - (-1) if invalid argument"]
    #[doc = "         - errno"]
    pub fn esp_http_client_get_errno(client: esp_http_client_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Set http request method"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  method  The method"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_set_method(
        client: esp_http_client_handle_t,
        method: esp_http_client_method_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Set http request timeout"]
    #[doc = ""]
    #[doc = " @param[in]  client      The esp_http_client handle"]
    #[doc = " @param[in]  timeout_ms  The timeout value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_ERR_INVALID_ARG"]
    pub fn esp_http_client_set_timeout_ms(
        client: esp_http_client_handle_t,
        timeout_ms: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Delete http request header"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param[in]  key     The key"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK"]
    #[doc = "  - ESP_FAIL"]
    pub fn esp_http_client_delete_header(
        client: esp_http_client_handle_t,
        key: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      This function will be open the connection, write all header strings and return"]
    #[doc = ""]
    #[doc = " @param[in]  client     The esp_http_client handle"]
    #[doc = " @param[in]  write_len  HTTP Content length need to write to the server"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK"]
    #[doc = "  - ESP_FAIL"]
    pub fn esp_http_client_open(
        client: esp_http_client_handle_t,
        write_len: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief     This function will write data to the HTTP connection previously opened by esp_http_client_open()"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param      buffer  The buffer"]
    #[doc = " @param[in]  len     This value must not be larger than the write_len parameter provided to esp_http_client_open()"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) if any errors"]
    #[doc = "     - Length of data written"]
    pub fn esp_http_client_write(
        client: esp_http_client_handle_t,
        buffer: *const c_types::c_char,
        len: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      This function need to call after esp_http_client_open, it will read from http stream, process all receive headers"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (0) if stream doesn't contain content-length header, or chunked encoding (checked by `esp_http_client_is_chunked` response)"]
    #[doc = "     - (-1: ESP_FAIL) if any errors"]
    #[doc = "     - Download data length defined by content-length header"]
    pub fn esp_http_client_fetch_headers(client: esp_http_client_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Check response data is chunked"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return     true or false"]
    pub fn esp_http_client_is_chunked_response(client: esp_http_client_handle_t) -> bool;
}
extern "C" {
    #[doc = " @brief      Read data from http stream"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param      buffer  The buffer"]
    #[doc = " @param[in]  len     The length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) if any errors"]
    #[doc = "     - Length of data was read"]
    pub fn esp_http_client_read(
        client: esp_http_client_handle_t,
        buffer: *mut c_types::c_char,
        len: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Get http response status code, the valid value if this function invoke after `esp_http_client_perform`"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return     Status code"]
    pub fn esp_http_client_get_status_code(client: esp_http_client_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Get http response content length (from header Content-Length)"]
    #[doc = "             the valid value if this function invoke after `esp_http_client_perform`"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) Chunked transfer"]
    #[doc = "     - Content-Length value as bytes"]
    pub fn esp_http_client_get_content_length(client: esp_http_client_handle_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Close http connection, still kept all http request resources"]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_FAIL"]
    pub fn esp_http_client_close(client: esp_http_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      This function must be the last function to call for an session."]
    #[doc = "             It is the opposite of the esp_http_client_init function and must be called with the same handle as input that a esp_http_client_init call returned."]
    #[doc = "             This might close all connections this handle has used and possibly has kept open until now."]
    #[doc = "             Don't call this function if you intend to transfer more files, re-using handles is a key to good performance with esp_http_client."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_FAIL"]
    pub fn esp_http_client_cleanup(client: esp_http_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Get transport type"]
    #[doc = ""]
    #[doc = " @param[in]  client   The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - HTTP_TRANSPORT_UNKNOWN"]
    #[doc = "     - HTTP_TRANSPORT_OVER_TCP"]
    #[doc = "     - HTTP_TRANSPORT_OVER_SSL"]
    pub fn esp_http_client_get_transport_type(
        client: esp_http_client_handle_t,
    ) -> esp_http_client_transport_t;
}
extern "C" {
    #[doc = " @brief      Set redirection URL."]
    #[doc = "             When received the 30x code from the server, the client stores the redirect URL provided by the server."]
    #[doc = "             This function will set the current URL to redirect to enable client to execute the redirection request."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_FAIL"]
    pub fn esp_http_client_set_redirection(client: esp_http_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      On receiving HTTP Status code 401, this API can be invoked to add authorization"]
    #[doc = "             information."]
    #[doc = ""]
    #[doc = " @note       There is a possibility of receiving body message with redirection status codes, thus make sure"]
    #[doc = "             to flush off body data after calling this API."]
    #[doc = ""]
    #[doc = " @param[in]  client   The esp_http_client handle"]
    pub fn esp_http_client_add_auth(client: esp_http_client_handle_t);
}
extern "C" {
    #[doc = " @brief      Checks if entire data in the response has been read without any error."]
    #[doc = ""]
    #[doc = " @param[in]  client   The esp_http_client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true"]
    #[doc = "     - false"]
    pub fn esp_http_client_is_complete_data_received(client: esp_http_client_handle_t) -> bool;
}
extern "C" {
    #[doc = " @brief      Helper API to read larger data chunks"]
    #[doc = "             This is a helper API which internally calls `esp_http_client_read` multiple times till the end of data is reached or till the buffer gets full."]
    #[doc = ""]
    #[doc = " @param[in]  client   The esp_http_client handle"]
    #[doc = " @param      buffer   The buffer"]
    #[doc = " @param[in]  len      The buffer length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Length of data was read"]
    pub fn esp_http_client_read_response(
        client: esp_http_client_handle_t,
        buffer: *mut c_types::c_char,
        len: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief       Process all remaining response data"]
    #[doc = "              This uses an internal buffer to repeatedly receive, parse, and discard response data until complete data is processed."]
    #[doc = "              As no additional user-supplied buffer is required, this may be preferrable to `esp_http_client_read_response` in situations where the content of the response may be ignored."]
    #[doc = ""]
    #[doc = " @param[in]  client  The esp_http_client handle"]
    #[doc = " @param      len     Length of data discarded"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK                 If successful, len will have discarded length"]
    #[doc = "     - ESP_FAIL               If failed to read response"]
    #[doc = "     - ESP_ERR_INVALID_ARG    If the client is NULL"]
    pub fn esp_http_client_flush_response(
        client: esp_http_client_handle_t,
        len: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief          Get URL from client"]
    #[doc = ""]
    #[doc = " @param[in]      client   The esp_http_client handle"]
    #[doc = " @param[inout]   url      The buffer to store URL"]
    #[doc = " @param[in]      len      The buffer length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK"]
    #[doc = "     - ESP_FAIL"]
    pub fn esp_http_client_get_url(
        client: esp_http_client_handle_t,
        url: *mut c_types::c_char,
        len: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief          Get Chunk-Length from client"]
    #[doc = ""]
    #[doc = " @param[in]      client   The esp_http_client handle"]
    #[doc = " @param[out]     len      Variable to store length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK                 If successful, len will have length of current chunk"]
    #[doc = "     - ESP_FAIL               If the server is not a chunked server"]
    #[doc = "     - ESP_ERR_INVALID_ARG    If the client or len are NULL"]
    pub fn esp_http_client_get_chunk_length(
        client: esp_http_client_handle_t,
        len: *mut c_types::c_int,
    ) -> esp_err_t;
}
#[doc = " @brief   HTTP Server Instance Handle"]
#[doc = ""]
#[doc = " Every instance of the server will have a unique handle."]
pub type httpd_handle_t = *mut c_types::c_void;
#[doc = " @brief   HTTP Method Type wrapper over \"enum http_method\""]
#[doc = "          available in \"http_parser\" library"]
pub use self::http_method as httpd_method_t;
#[doc = " @brief  Prototype for freeing context data (if any)"]
#[doc = " @param[in] ctx   object to free"]
pub type httpd_free_ctx_fn_t =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut c_types::c_void)>;
#[doc = " @brief  Function prototype for opening a session."]
#[doc = ""]
#[doc = " Called immediately after the socket was opened to set up the send/recv functions and"]
#[doc = " other parameters of the socket."]
#[doc = ""]
#[doc = " @param[in] hd       server instance"]
#[doc = " @param[in] sockfd   session socket file descriptor"]
#[doc = " @return"]
#[doc = "  - ESP_OK   : On success"]
#[doc = "  - Any value other than ESP_OK will signal the server to close the socket immediately"]
pub type httpd_open_func_t = ::core::option::Option<
    unsafe extern "C" fn(hd: httpd_handle_t, sockfd: c_types::c_int) -> esp_err_t,
>;
#[doc = " @brief  Function prototype for closing a session."]
#[doc = ""]
#[doc = " @note   It's possible that the socket descriptor is invalid at this point, the function"]
#[doc = "         is called for all terminated sessions. Ensure proper handling of return codes."]
#[doc = ""]
#[doc = " @param[in] hd   server instance"]
#[doc = " @param[in] sockfd   session socket file descriptor"]
pub type httpd_close_func_t =
    ::core::option::Option<unsafe extern "C" fn(hd: httpd_handle_t, sockfd: c_types::c_int)>;
#[doc = " @brief  Function prototype for URI matching."]
#[doc = ""]
#[doc = " @param[in] reference_uri   URI/template with respect to which the other URI is matched"]
#[doc = " @param[in] uri_to_match    URI/template being matched to the reference URI/template"]
#[doc = " @param[in] match_upto      For specifying the actual length of `uri_to_match` up to"]
#[doc = "                            which the matching algorithm is to be applied (The maximum"]
#[doc = "                            value is `strlen(uri_to_match)`, independent of the length"]
#[doc = "                            of `reference_uri`)"]
#[doc = " @return true on match"]
pub type httpd_uri_match_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        reference_uri: *const c_types::c_char,
        uri_to_match: *const c_types::c_char,
        match_upto: size_t,
    ) -> bool,
>;
#[doc = " @brief   HTTP Server Configuration Structure"]
#[doc = ""]
#[doc = " @note    Use HTTPD_DEFAULT_CONFIG() to initialize the configuration"]
#[doc = "          to a default value and then modify only those fields that are"]
#[doc = "          specifically determined by the use case."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct httpd_config {
    #[doc = "< Priority of FreeRTOS task which runs the server"]
    pub task_priority: c_types::c_uint,
    #[doc = "< The maximum stack size allowed for the server task"]
    pub stack_size: size_t,
    #[doc = "< The core the HTTP server task will run on"]
    pub core_id: BaseType_t,
    #[doc = " TCP Port number for receiving and transmitting HTTP traffic"]
    pub server_port: u16,
    #[doc = " UDP Port number for asynchronously exchanging control signals"]
    #[doc = " between various components of the server"]
    pub ctrl_port: u16,
    #[doc = "< Max number of sockets/clients connected at any time"]
    pub max_open_sockets: u16,
    #[doc = "< Maximum allowed uri handlers"]
    pub max_uri_handlers: u16,
    #[doc = "< Maximum allowed additional headers in HTTP response"]
    pub max_resp_headers: u16,
    #[doc = "< Number of backlog connections"]
    pub backlog_conn: u16,
    #[doc = "< Purge \"Least Recently Used\" connection"]
    pub lru_purge_enable: bool,
    #[doc = "< Timeout for recv function (in seconds)"]
    pub recv_wait_timeout: u16,
    #[doc = "< Timeout for send function (in seconds)"]
    pub send_wait_timeout: u16,
    #[doc = " Global user context."]
    #[doc = ""]
    #[doc = " This field can be used to store arbitrary user data within the server context."]
    #[doc = " The value can be retrieved using the server handle, available e.g. in the httpd_req_t struct."]
    #[doc = ""]
    #[doc = " When shutting down, the server frees up the user context by"]
    #[doc = " calling free() on the global_user_ctx field. If you wish to use a custom"]
    #[doc = " function for freeing the global user context, please specify that here."]
    pub global_user_ctx: *mut c_types::c_void,
    #[doc = " Free function for global user context"]
    pub global_user_ctx_free_fn: httpd_free_ctx_fn_t,
    #[doc = " Global transport context."]
    #[doc = ""]
    #[doc = " Similar to global_user_ctx, but used for session encoding or encryption (e.g. to hold the SSL context)."]
    #[doc = " It will be freed using free(), unless global_transport_ctx_free_fn is specified."]
    pub global_transport_ctx: *mut c_types::c_void,
    #[doc = " Free function for global transport context"]
    pub global_transport_ctx_free_fn: httpd_free_ctx_fn_t,
    #[doc = " Custom session opening callback."]
    #[doc = ""]
    #[doc = " Called on a new session socket just after accept(), but before reading any data."]
    #[doc = ""]
    #[doc = " This is an opportunity to set up e.g. SSL encryption using global_transport_ctx"]
    #[doc = " and the send/recv/pending session overrides."]
    #[doc = ""]
    #[doc = " If a context needs to be maintained between these functions, store it in the session using"]
    #[doc = " httpd_sess_set_transport_ctx() and retrieve it later with httpd_sess_get_transport_ctx()"]
    #[doc = ""]
    #[doc = " Returning a value other than ESP_OK will immediately close the new socket."]
    pub open_fn: httpd_open_func_t,
    #[doc = " Custom session closing callback."]
    #[doc = ""]
    #[doc = " Called when a session is deleted, before freeing user and transport contexts and before"]
    #[doc = " closing the socket. This is a place for custom de-init code common to all sockets."]
    #[doc = ""]
    #[doc = " Set the user or transport context to NULL if it was freed here, so the server does not"]
    #[doc = " try to free it again."]
    #[doc = ""]
    #[doc = " This function is run for all terminated sessions, including sessions where the socket"]
    #[doc = " was closed by the network stack - that is, the file descriptor may not be valid anymore."]
    pub close_fn: httpd_close_func_t,
    #[doc = " URI matcher function."]
    #[doc = ""]
    #[doc = " Called when searching for a matching URI:"]
    #[doc = "     1) whose request handler is to be executed right"]
    #[doc = "        after an HTTP request is successfully parsed"]
    #[doc = "     2) in order to prevent duplication while registering"]
    #[doc = "        a new URI handler using `httpd_register_uri_handler()`"]
    #[doc = ""]
    #[doc = " Available options are:"]
    #[doc = "     1) NULL : Internally do basic matching using `strncmp()`"]
    #[doc = "     2) `httpd_uri_match_wildcard()` : URI wildcard matcher"]
    #[doc = ""]
    #[doc = " Users can implement their own matching functions (See description"]
    #[doc = " of the `httpd_uri_match_func_t` function prototype)"]
    pub uri_match_fn: httpd_uri_match_func_t,
}
impl Default for httpd_config {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   HTTP Server Configuration Structure"]
#[doc = ""]
#[doc = " @note    Use HTTPD_DEFAULT_CONFIG() to initialize the configuration"]
#[doc = "          to a default value and then modify only those fields that are"]
#[doc = "          specifically determined by the use case."]
pub type httpd_config_t = httpd_config;
extern "C" {
    #[doc = " @brief Starts the web server"]
    #[doc = ""]
    #[doc = " Create an instance of HTTP server and allocate memory/resources for it"]
    #[doc = " depending upon the specified configuration."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = ""]
    #[doc = " //Function for starting the webserver"]
    #[doc = " httpd_handle_t start_webserver(void)"]
    #[doc = " {"]
    #[doc = "      // Generate default configuration"]
    #[doc = "      httpd_config_t config = HTTPD_DEFAULT_CONFIG();"]
    #[doc = ""]
    #[doc = "      // Empty handle to http_server"]
    #[doc = "      httpd_handle_t server = NULL;"]
    #[doc = ""]
    #[doc = "      // Start the httpd server"]
    #[doc = "      if (httpd_start(&server, &config) == ESP_OK) {"]
    #[doc = "          // Register URI handlers"]
    #[doc = "          httpd_register_uri_handler(server, &uri_get);"]
    #[doc = "          httpd_register_uri_handler(server, &uri_post);"]
    #[doc = "      }"]
    #[doc = "      // If server failed to start, handle will be NULL"]
    #[doc = "      return server;"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param[in]  config   Configuration for new instance of the server"]
    #[doc = " @param[out] handle   Handle to newly created instance of the server. NULL on error"]
    #[doc = " @return"]
    #[doc = "  - ESP_OK    : Instance created successfully"]
    #[doc = "  - ESP_ERR_INVALID_ARG      : Null argument(s)"]
    #[doc = "  - ESP_ERR_HTTPD_ALLOC_MEM  : Failed to allocate memory for instance"]
    #[doc = "  - ESP_ERR_HTTPD_TASK       : Failed to launch server task"]
    pub fn httpd_start(handle: *mut httpd_handle_t, config: *const httpd_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stops the web server"]
    #[doc = ""]
    #[doc = " Deallocates memory/resources used by an HTTP server instance and"]
    #[doc = " deletes it. Once deleted the handle can no longer be used for accessing"]
    #[doc = " the instance."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = ""]
    #[doc = " // Function for stopping the webserver"]
    #[doc = " void stop_webserver(httpd_handle_t server)"]
    #[doc = " {"]
    #[doc = "      // Ensure handle is non NULL"]
    #[doc = "      if (server != NULL) {"]
    #[doc = "          // Stop the httpd server"]
    #[doc = "          httpd_stop(server);"]
    #[doc = "      }"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param[in] handle Handle to server returned by httpd_start"]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Server stopped successfully"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Handle argument is Null"]
    pub fn httpd_stop(handle: httpd_handle_t) -> esp_err_t;
}
#[doc = " @brief HTTP Request Data Structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct httpd_req {
    #[doc = "< Handle to server instance"]
    pub handle: httpd_handle_t,
    #[doc = "< The type of HTTP request, -1 if unsupported method"]
    pub method: c_types::c_int,
    #[doc = "< The URI of this request (1 byte extra for null termination)"]
    pub uri: [c_types::c_char; 513usize],
    #[doc = "< Length of the request body"]
    pub content_len: size_t,
    #[doc = "< Internally used members"]
    pub aux: *mut c_types::c_void,
    #[doc = " User context pointer passed during URI registration."]
    pub user_ctx: *mut c_types::c_void,
    #[doc = " Session Context Pointer"]
    #[doc = ""]
    #[doc = " A session context. Contexts are maintained across 'sessions' for a"]
    #[doc = " given open TCP connection. One session could have multiple request"]
    #[doc = " responses. The web server will ensure that the context persists"]
    #[doc = " across all these request and responses."]
    #[doc = ""]
    #[doc = " By default, this is NULL. URI Handlers can set this to any meaningful"]
    #[doc = " value."]
    #[doc = ""]
    #[doc = " If the underlying socket gets closed, and this pointer is non-NULL,"]
    #[doc = " the web server will free up the context by calling free(), unless"]
    #[doc = " free_ctx function is set."]
    pub sess_ctx: *mut c_types::c_void,
    #[doc = " Pointer to free context hook"]
    #[doc = ""]
    #[doc = " Function to free session context"]
    #[doc = ""]
    #[doc = " If the web server's socket closes, it frees up the session context by"]
    #[doc = " calling free() on the sess_ctx member. If you wish to use a custom"]
    #[doc = " function for freeing the session context, please specify that here."]
    pub free_ctx: httpd_free_ctx_fn_t,
    #[doc = " Flag indicating if Session Context changes should be ignored"]
    #[doc = ""]
    #[doc = " By default, if you change the sess_ctx in some URI handler, the http server"]
    #[doc = " will internally free the earlier context (if non NULL), after the URI handler"]
    #[doc = " returns. If you want to manage the allocation/reallocation/freeing of"]
    #[doc = " sess_ctx yourself, set this flag to true, so that the server will not"]
    #[doc = " perform any checks on it. The context will be cleared by the server"]
    #[doc = " (by calling free_ctx or free()) only if the socket gets closed."]
    pub ignore_sess_ctx_changes: bool,
}
impl Default for httpd_req {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief HTTP Request Data Structure"]
pub type httpd_req_t = httpd_req;
#[doc = " @brief Structure for URI handler"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct httpd_uri {
    #[doc = "< The URI to handle"]
    pub uri: *const c_types::c_char,
    #[doc = "< Method supported by the URI"]
    pub method: httpd_method_t,
    #[doc = " Handler to call for supported request method. This must"]
    #[doc = " return ESP_OK, or else the underlying socket will be closed."]
    pub handler: ::core::option::Option<unsafe extern "C" fn(r: *mut httpd_req_t) -> esp_err_t>,
    #[doc = " Pointer to user context data which will be available to handler"]
    pub user_ctx: *mut c_types::c_void,
}
impl Default for httpd_uri {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Structure for URI handler"]
pub type httpd_uri_t = httpd_uri;
extern "C" {
    #[doc = " @brief   Registers a URI handler"]
    #[doc = ""]
    #[doc = " @note    URI handlers can be registered in real time as long as the"]
    #[doc = "          server handle is valid."]
    #[doc = ""]
    #[doc = " Example usage:"]
    #[doc = " @code{c}"]
    #[doc = ""]
    #[doc = " esp_err_t my_uri_handler(httpd_req_t* req)"]
    #[doc = " {"]
    #[doc = "     // Recv , Process and Send"]
    #[doc = "     ...."]
    #[doc = "     ...."]
    #[doc = "     ...."]
    #[doc = ""]
    #[doc = "     // Fail condition"]
    #[doc = "     if (....) {"]
    #[doc = "         // Return fail to close session //"]
    #[doc = "         return ESP_FAIL;"]
    #[doc = "     }"]
    #[doc = ""]
    #[doc = "     // On success"]
    #[doc = "     return ESP_OK;"]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " // URI handler structure"]
    #[doc = " httpd_uri_t my_uri {"]
    #[doc = "     .uri      = \"/my_uri/path/xyz\","]
    #[doc = "     .method   = HTTPD_GET,"]
    #[doc = "     .handler  = my_uri_handler,"]
    #[doc = "     .user_ctx = NULL"]
    #[doc = " };"]
    #[doc = ""]
    #[doc = " // Register handler"]
    #[doc = " if (httpd_register_uri_handler(server_handle, &my_uri) != ESP_OK) {"]
    #[doc = "    // If failed to register handler"]
    #[doc = "    ...."]
    #[doc = " }"]
    #[doc = ""]
    #[doc = " @endcode"]
    #[doc = ""]
    #[doc = " @param[in] handle      handle to HTTPD server instance"]
    #[doc = " @param[in] uri_handler pointer to handler that needs to be registered"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully registering the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_HANDLERS_FULL  : If no slots left for new handler"]
    #[doc = "  - ESP_ERR_HTTPD_HANDLER_EXISTS : If handler with same URI and"]
    #[doc = "                                   method is already registered"]
    pub fn httpd_register_uri_handler(
        handle: httpd_handle_t,
        uri_handler: *const httpd_uri_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Unregister a URI handler"]
    #[doc = ""]
    #[doc = " @param[in] handle    handle to HTTPD server instance"]
    #[doc = " @param[in] uri       URI string"]
    #[doc = " @param[in] method    HTTP method"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully deregistering the handler"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_NOT_FOUND   : Handler with specified URI and method not found"]
    pub fn httpd_unregister_uri_handler(
        handle: httpd_handle_t,
        uri: *const c_types::c_char,
        method: httpd_method_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Unregister all URI handlers with the specified uri string"]
    #[doc = ""]
    #[doc = " @param[in] handle   handle to HTTPD server instance"]
    #[doc = " @param[in] uri      uri string specifying all handlers that need"]
    #[doc = "                     to be deregisterd"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully deregistering all such handlers"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_NOT_FOUND   : No handler registered with specified uri string"]
    pub fn httpd_unregister_uri(handle: httpd_handle_t, uri: *const c_types::c_char) -> esp_err_t;
}
pub const httpd_err_code_t_HTTPD_500_INTERNAL_SERVER_ERROR: httpd_err_code_t = 0;
pub const httpd_err_code_t_HTTPD_501_METHOD_NOT_IMPLEMENTED: httpd_err_code_t = 1;
pub const httpd_err_code_t_HTTPD_505_VERSION_NOT_SUPPORTED: httpd_err_code_t = 2;
pub const httpd_err_code_t_HTTPD_400_BAD_REQUEST: httpd_err_code_t = 3;
pub const httpd_err_code_t_HTTPD_401_UNAUTHORIZED: httpd_err_code_t = 4;
pub const httpd_err_code_t_HTTPD_403_FORBIDDEN: httpd_err_code_t = 5;
pub const httpd_err_code_t_HTTPD_404_NOT_FOUND: httpd_err_code_t = 6;
pub const httpd_err_code_t_HTTPD_405_METHOD_NOT_ALLOWED: httpd_err_code_t = 7;
pub const httpd_err_code_t_HTTPD_408_REQ_TIMEOUT: httpd_err_code_t = 8;
pub const httpd_err_code_t_HTTPD_411_LENGTH_REQUIRED: httpd_err_code_t = 9;
pub const httpd_err_code_t_HTTPD_414_URI_TOO_LONG: httpd_err_code_t = 10;
pub const httpd_err_code_t_HTTPD_431_REQ_HDR_FIELDS_TOO_LARGE: httpd_err_code_t = 11;
pub const httpd_err_code_t_HTTPD_ERR_CODE_MAX: httpd_err_code_t = 12;
#[doc = " @brief Error codes sent as HTTP response in case of errors"]
#[doc = "        encountered during processing of an HTTP request"]
pub type httpd_err_code_t = c_types::c_uint;
#[doc = " @brief  Function prototype for HTTP error handling."]
#[doc = ""]
#[doc = " This function is executed upon HTTP errors generated during"]
#[doc = " internal processing of an HTTP request. This is used to override"]
#[doc = " the default behavior on error, which is to send HTTP error response"]
#[doc = " and close the underlying socket."]
#[doc = ""]
#[doc = " @note"]
#[doc = "  - If implemented, the server will not automatically send out HTTP"]
#[doc = "    error response codes, therefore, httpd_resp_send_err() must be"]
#[doc = "    invoked inside this function if user wishes to generate HTTP"]
#[doc = "    error responses."]
#[doc = "  - When invoked, the validity of `uri`, `method`, `content_len`"]
#[doc = "    and `user_ctx` fields of the httpd_req_t parameter is not"]
#[doc = "    guaranteed as the HTTP request may be partially received/parsed."]
#[doc = "  - The function must return ESP_OK if underlying socket needs to"]
#[doc = "    be kept open. Any other value will ensure that the socket is"]
#[doc = "    closed. The return value is ignored when error is of type"]
#[doc = "    `HTTPD_500_INTERNAL_SERVER_ERROR` and the socket closed anyway."]
#[doc = ""]
#[doc = " @param[in] req    HTTP request for which the error needs to be handled"]
#[doc = " @param[in] error  Error type"]
#[doc = ""]
#[doc = " @return"]
#[doc = "  - ESP_OK   : error handled successful"]
#[doc = "  - ESP_FAIL : failure indicates that the underlying socket needs to be closed"]
pub type httpd_err_handler_func_t = ::core::option::Option<
    unsafe extern "C" fn(req: *mut httpd_req_t, error: httpd_err_code_t) -> esp_err_t,
>;
extern "C" {
    #[doc = " @brief  Function for registering HTTP error handlers"]
    #[doc = ""]
    #[doc = " This function maps a handler function to any supported error code"]
    #[doc = " given by `httpd_err_code_t`. See prototype `httpd_err_handler_func_t`"]
    #[doc = " above for details."]
    #[doc = ""]
    #[doc = " @param[in] handle     HTTP server handle"]
    #[doc = " @param[in] error      Error type"]
    #[doc = " @param[in] handler_fn User implemented handler function"]
    #[doc = "                       (Pass NULL to unset any previously set handler)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : handler registered successfully"]
    #[doc = "  - ESP_ERR_INVALID_ARG : invalid error code or server handle"]
    pub fn httpd_register_err_handler(
        handle: httpd_handle_t,
        error: httpd_err_code_t,
        handler_fn: httpd_err_handler_func_t,
    ) -> esp_err_t;
}
#[doc = " @brief  Prototype for HTTPDs low-level send function"]
#[doc = ""]
#[doc = " @note   User specified send function must handle errors internally,"]
#[doc = "         depending upon the set value of errno, and return specific"]
#[doc = "         HTTPD_SOCK_ERR_ codes, which will eventually be conveyed as"]
#[doc = "         return value of httpd_send() function"]
#[doc = ""]
#[doc = " @param[in] hd        server instance"]
#[doc = " @param[in] sockfd    session socket file descriptor"]
#[doc = " @param[in] buf       buffer with bytes to send"]
#[doc = " @param[in] buf_len   data size"]
#[doc = " @param[in] flags     flags for the send() function"]
#[doc = " @return"]
#[doc = "  - Bytes : The number of bytes sent successfully"]
#[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
#[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket send()"]
#[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket send()"]
pub type httpd_send_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        buf: *const c_types::c_char,
        buf_len: size_t,
        flags: c_types::c_int,
    ) -> c_types::c_int,
>;
#[doc = " @brief  Prototype for HTTPDs low-level recv function"]
#[doc = ""]
#[doc = " @note   User specified recv function must handle errors internally,"]
#[doc = "         depending upon the set value of errno, and return specific"]
#[doc = "         HTTPD_SOCK_ERR_ codes, which will eventually be conveyed as"]
#[doc = "         return value of httpd_req_recv() function"]
#[doc = ""]
#[doc = " @param[in] hd        server instance"]
#[doc = " @param[in] sockfd    session socket file descriptor"]
#[doc = " @param[in] buf       buffer with bytes to send"]
#[doc = " @param[in] buf_len   data size"]
#[doc = " @param[in] flags     flags for the send() function"]
#[doc = " @return"]
#[doc = "  - Bytes : The number of bytes received successfully"]
#[doc = "  - 0     : Buffer length parameter is zero / connection closed by peer"]
#[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
#[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket recv()"]
#[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket recv()"]
pub type httpd_recv_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        buf: *mut c_types::c_char,
        buf_len: size_t,
        flags: c_types::c_int,
    ) -> c_types::c_int,
>;
#[doc = " @brief  Prototype for HTTPDs low-level \"get pending bytes\" function"]
#[doc = ""]
#[doc = " @note   User specified pending function must handle errors internally,"]
#[doc = "         depending upon the set value of errno, and return specific"]
#[doc = "         HTTPD_SOCK_ERR_ codes, which will be handled accordingly in"]
#[doc = "         the server task."]
#[doc = ""]
#[doc = " @param[in] hd       server instance"]
#[doc = " @param[in] sockfd   session socket file descriptor"]
#[doc = " @return"]
#[doc = "  - Bytes : The number of bytes waiting to be received"]
#[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
#[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket pending()"]
#[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket pending()"]
pub type httpd_pending_func_t = ::core::option::Option<
    unsafe extern "C" fn(hd: httpd_handle_t, sockfd: c_types::c_int) -> c_types::c_int,
>;
extern "C" {
    #[doc = " @brief   Override web server's receive function (by session FD)"]
    #[doc = ""]
    #[doc = " This function overrides the web server's receive function. This same function is"]
    #[doc = " used to read HTTP request packets."]
    #[doc = ""]
    #[doc = " @note    This API is supposed to be called either from the context of"]
    #[doc = "          - an http session APIs where sockfd is a valid parameter"]
    #[doc = "          - a URI handler where sockfd is obtained using httpd_req_to_sockfd()"]
    #[doc = ""]
    #[doc = " @param[in] hd        HTTPD instance handle"]
    #[doc = " @param[in] sockfd    Session socket FD"]
    #[doc = " @param[in] recv_func The receive function to be set for this session"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully registering override"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_sess_set_recv_override(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        recv_func: httpd_recv_func_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Override web server's send function (by session FD)"]
    #[doc = ""]
    #[doc = " This function overrides the web server's send function. This same function is"]
    #[doc = " used to send out any response to any HTTP request."]
    #[doc = ""]
    #[doc = " @note    This API is supposed to be called either from the context of"]
    #[doc = "          - an http session APIs where sockfd is a valid parameter"]
    #[doc = "          - a URI handler where sockfd is obtained using httpd_req_to_sockfd()"]
    #[doc = ""]
    #[doc = " @param[in] hd        HTTPD instance handle"]
    #[doc = " @param[in] sockfd    Session socket FD"]
    #[doc = " @param[in] send_func The send function to be set for this session"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully registering override"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_sess_set_send_override(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        send_func: httpd_send_func_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Override web server's pending function (by session FD)"]
    #[doc = ""]
    #[doc = " This function overrides the web server's pending function. This function is"]
    #[doc = " used to test for pending bytes in a socket."]
    #[doc = ""]
    #[doc = " @note    This API is supposed to be called either from the context of"]
    #[doc = "          - an http session APIs where sockfd is a valid parameter"]
    #[doc = "          - a URI handler where sockfd is obtained using httpd_req_to_sockfd()"]
    #[doc = ""]
    #[doc = " @param[in] hd           HTTPD instance handle"]
    #[doc = " @param[in] sockfd       Session socket FD"]
    #[doc = " @param[in] pending_func The receive function to be set for this session"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully registering override"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_sess_set_pending_override(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        pending_func: httpd_pending_func_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Get the Socket Descriptor from the HTTP request"]
    #[doc = ""]
    #[doc = " This API will return the socket descriptor of the session for"]
    #[doc = " which URI handler was executed on reception of HTTP request."]
    #[doc = " This is useful when user wants to call functions that require"]
    #[doc = " session socket fd, from within a URI handler, ie. :"]
    #[doc = "      httpd_sess_get_ctx(),"]
    #[doc = "      httpd_sess_trigger_close(),"]
    #[doc = "      httpd_sess_update_lru_counter()."]
    #[doc = ""]
    #[doc = " @note    This API is supposed to be called only from the context of"]
    #[doc = "          a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = ""]
    #[doc = " @param[in] r The request whose socket descriptor should be found"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Socket descriptor : The socket descriptor for this request"]
    #[doc = "  - -1 : Invalid/NULL request pointer"]
    pub fn httpd_req_to_sockfd(r: *mut httpd_req_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief   API to read content data from the HTTP request"]
    #[doc = ""]
    #[doc = " This API will read HTTP content data from the HTTP request into"]
    #[doc = " provided buffer. Use content_len provided in httpd_req_t structure"]
    #[doc = " to know the length of data to be fetched. If content_len is too"]
    #[doc = " large for the buffer then user may have to make multiple calls to"]
    #[doc = " this function, each time fetching 'buf_len' number of bytes,"]
    #[doc = " while the pointer to content data is incremented internally by"]
    #[doc = " the same number."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - If an error is returned, the URI handler must further return an error."]
    #[doc = "    This will ensure that the erroneous socket is closed and cleaned up by"]
    #[doc = "    the web server."]
    #[doc = "  - Presently Chunked Encoding is not supported"]
    #[doc = ""]
    #[doc = " @param[in] r         The request being responded to"]
    #[doc = " @param[in] buf       Pointer to a buffer that the data will be read into"]
    #[doc = " @param[in] buf_len   Length of the buffer"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Bytes : Number of bytes read into the buffer successfully"]
    #[doc = "  - 0     : Buffer length parameter is zero / connection closed by peer"]
    #[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
    #[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket recv()"]
    #[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket recv()"]
    pub fn httpd_req_recv(
        r: *mut httpd_req_t,
        buf: *mut c_types::c_char,
        buf_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief   Search for a field in request headers and"]
    #[doc = "          return the string length of it's value"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - Once httpd_resp_send() API is called all request headers"]
    #[doc = "    are purged, so request headers need be copied into separate"]
    #[doc = "    buffers if they are required later."]
    #[doc = ""]
    #[doc = " @param[in]  r        The request being responded to"]
    #[doc = " @param[in]  field    The header field to be searched in the request"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Length    : If field is found in the request URL"]
    #[doc = "  - Zero      : Field not found / Invalid request / Null arguments"]
    pub fn httpd_req_get_hdr_value_len(
        r: *mut httpd_req_t,
        field: *const c_types::c_char,
    ) -> size_t;
}
extern "C" {
    #[doc = " @brief   Get the value string of a field from the request headers"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - Once httpd_resp_send() API is called all request headers"]
    #[doc = "    are purged, so request headers need be copied into separate"]
    #[doc = "    buffers if they are required later."]
    #[doc = "  - If output size is greater than input, then the value is truncated,"]
    #[doc = "    accompanied by truncation error as return value."]
    #[doc = "  - Use httpd_req_get_hdr_value_len() to know the right buffer length"]
    #[doc = ""]
    #[doc = " @param[in]  r        The request being responded to"]
    #[doc = " @param[in]  field    The field to be searched in the header"]
    #[doc = " @param[out] val      Pointer to the buffer into which the value will be copied if the field is found"]
    #[doc = " @param[in]  val_size Size of the user buffer \"val\""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Field found in the request header and value string copied"]
    #[doc = "  - ESP_ERR_NOT_FOUND          : Key not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG        : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ  : Invalid HTTP request pointer"]
    #[doc = "  - ESP_ERR_HTTPD_RESULT_TRUNC : Value string truncated"]
    pub fn httpd_req_get_hdr_value_str(
        r: *mut httpd_req_t,
        field: *const c_types::c_char,
        val: *mut c_types::c_char,
        val_size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Get Query string length from the request URL"]
    #[doc = ""]
    #[doc = " @note    This API is supposed to be called only from the context of"]
    #[doc = "          a URI handler where httpd_req_t* request pointer is valid"]
    #[doc = ""]
    #[doc = " @param[in]  r    The request being responded to"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Length    : Query is found in the request URL"]
    #[doc = "  - Zero      : Query not found / Null arguments / Invalid request"]
    pub fn httpd_req_get_url_query_len(r: *mut httpd_req_t) -> size_t;
}
extern "C" {
    #[doc = " @brief   Get Query string from the request URL"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - Presently, the user can fetch the full URL query string, but decoding"]
    #[doc = "    will have to be performed by the user. Request headers can be read using"]
    #[doc = "    httpd_req_get_hdr_value_str() to know the 'Content-Type' (eg. Content-Type:"]
    #[doc = "    application/x-www-form-urlencoded) and then the appropriate decoding"]
    #[doc = "    algorithm needs to be applied."]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid"]
    #[doc = "  - If output size is greater than input, then the value is truncated,"]
    #[doc = "    accompanied by truncation error as return value"]
    #[doc = "  - Prior to calling this function, one can use httpd_req_get_url_query_len()"]
    #[doc = "    to know the query string length beforehand and hence allocate the buffer"]
    #[doc = "    of right size (usually query string length + 1 for null termination)"]
    #[doc = "    for storing the query string"]
    #[doc = ""]
    #[doc = " @param[in]  r         The request being responded to"]
    #[doc = " @param[out] buf       Pointer to the buffer into which the query string will be copied (if found)"]
    #[doc = " @param[in]  buf_len   Length of output buffer"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Query is found in the request URL and copied to buffer"]
    #[doc = "  - ESP_ERR_NOT_FOUND          : Query not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG        : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ  : Invalid HTTP request pointer"]
    #[doc = "  - ESP_ERR_HTTPD_RESULT_TRUNC : Query string truncated"]
    pub fn httpd_req_get_url_query_str(
        r: *mut httpd_req_t,
        buf: *mut c_types::c_char,
        buf_len: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Helper function to get a URL query tag from a query"]
    #[doc = "          string of the type param1=val1&param2=val2"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - The components of URL query string (keys and values) are not URLdecoded."]
    #[doc = "    The user must check for 'Content-Type' field in the request headers and"]
    #[doc = "    then depending upon the specified encoding (URLencoded or otherwise) apply"]
    #[doc = "    the appropriate decoding algorithm."]
    #[doc = "  - If actual value size is greater than val_size, then the value is truncated,"]
    #[doc = "    accompanied by truncation error as return value."]
    #[doc = ""]
    #[doc = " @param[in]  qry       Pointer to query string"]
    #[doc = " @param[in]  key       The key to be searched in the query string"]
    #[doc = " @param[out] val       Pointer to the buffer into which the value will be copied if the key is found"]
    #[doc = " @param[in]  val_size  Size of the user buffer \"val\""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Key is found in the URL query string and copied to buffer"]
    #[doc = "  - ESP_ERR_NOT_FOUND          : Key not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG        : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_RESULT_TRUNC : Value string truncated"]
    pub fn httpd_query_key_value(
        qry: *const c_types::c_char,
        key: *const c_types::c_char,
        val: *mut c_types::c_char,
        val_size: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Get the value string of a cookie value from the \"Cookie\" request headers by cookie name."]
    #[doc = ""]
    #[doc = " @param[in]       req             Pointer to the HTTP request"]
    #[doc = " @param[in]       cookie_name     The cookie name to be searched in the request"]
    #[doc = " @param[out]      val             Pointer to the buffer into which the value of cookie will be copied if the cookie is found"]
    #[doc = " @param[inout]    val_size        Pointer to size of the user buffer \"val\". This variable will contain cookie length if"]
    #[doc = "                                  ESP_OK is returned and required buffer length incase ESP_ERR_HTTPD_RESULT_TRUNC is returned."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Key is found in the cookie string and copied to buffer"]
    #[doc = "  - ESP_ERR_NOT_FOUND          : Key not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG        : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_RESULT_TRUNC : Value string truncated"]
    #[doc = "  - ESP_ERR_NO_MEM             : Memory allocation failure"]
    pub fn httpd_req_get_cookie_val(
        req: *mut httpd_req_t,
        cookie_name: *const c_types::c_char,
        val: *mut c_types::c_char,
        val_size: *mut size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Test if a URI matches the given wildcard template."]
    #[doc = ""]
    #[doc = " Template may end with \"?\" to make the previous character optional (typically a slash),"]
    #[doc = " \"*\" for a wildcard match, and \"?*\" to make the previous character optional, and if present,"]
    #[doc = " allow anything to follow."]
    #[doc = ""]
    #[doc = " Example:"]
    #[doc = "   - * matches everything"]
    #[doc = "   - /foo/? matches /foo and /foo/"]
    #[doc = "   - /foo/\\* (sans the backslash) matches /foo/ and /foo/bar, but not /foo or /fo"]
    #[doc = "   - /foo/?* or /foo/\\*?  (sans the backslash) matches /foo/, /foo/bar, and also /foo, but not /foox or /fo"]
    #[doc = ""]
    #[doc = " The special characters \"?\" and \"*\" anywhere else in the template will be taken literally."]
    #[doc = ""]
    #[doc = " @param[in] uri_template   URI template (pattern)"]
    #[doc = " @param[in] uri_to_match   URI to be matched"]
    #[doc = " @param[in] match_upto     how many characters of the URI buffer to test"]
    #[doc = "                          (there may be trailing query string etc.)"]
    #[doc = ""]
    #[doc = " @return true if a match was found"]
    pub fn httpd_uri_match_wildcard(
        uri_template: *const c_types::c_char,
        uri_to_match: *const c_types::c_char,
        match_upto: size_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief   API to send a complete HTTP response."]
    #[doc = ""]
    #[doc = " This API will send the data as an HTTP response to the request."]
    #[doc = " This assumes that you have the entire response ready in a single"]
    #[doc = " buffer. If you wish to send response in incremental chunks use"]
    #[doc = " httpd_resp_send_chunk() instead."]
    #[doc = ""]
    #[doc = " If no status code and content-type were set, by default this"]
    #[doc = " will send 200 OK status code and content type as text/html."]
    #[doc = " You may call the following functions before this API to configure"]
    #[doc = " the response headers :"]
    #[doc = "      httpd_resp_set_status() - for setting the HTTP status string,"]
    #[doc = "      httpd_resp_set_type()   - for setting the Content Type,"]
    #[doc = "      httpd_resp_set_hdr()    - for appending any additional field"]
    #[doc = "                                value entries in the response header"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - Once this API is called, the request has been responded to."]
    #[doc = "  - No additional data can then be sent for the request."]
    #[doc = "  - Once this API is called, all request headers are purged, so"]
    #[doc = "    request headers need be copied into separate buffers if"]
    #[doc = "    they are required later."]
    #[doc = ""]
    #[doc = " @param[in] r         The request being responded to"]
    #[doc = " @param[in] buf       Buffer from where the content is to be fetched"]
    #[doc = " @param[in] buf_len   Length of the buffer, HTTPD_RESP_USE_STRLEN to use strlen()"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully sending the response packet"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null request pointer"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_HDR    : Essential headers are too large for internal buffer"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_SEND   : Error in raw send"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request"]
    pub fn httpd_resp_send(
        r: *mut httpd_req_t,
        buf: *const c_types::c_char,
        buf_len: ssize_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   API to send one HTTP chunk"]
    #[doc = ""]
    #[doc = " This API will send the data as an HTTP response to the"]
    #[doc = " request. This API will use chunked-encoding and send the response"]
    #[doc = " in the form of chunks. If you have the entire response contained in"]
    #[doc = " a single buffer, please use httpd_resp_send() instead."]
    #[doc = ""]
    #[doc = " If no status code and content-type were set, by default this will"]
    #[doc = " send 200 OK status code and content type as text/html. You may"]
    #[doc = " call the following functions before this API to configure the"]
    #[doc = " response headers"]
    #[doc = "      httpd_resp_set_status() - for setting the HTTP status string,"]
    #[doc = "      httpd_resp_set_type()   - for setting the Content Type,"]
    #[doc = "      httpd_resp_set_hdr()    - for appending any additional field"]
    #[doc = "                                value entries in the response header"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = " - This API is supposed to be called only from the context of"]
    #[doc = "   a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = " - When you are finished sending all your chunks, you must call"]
    #[doc = "   this function with buf_len as 0."]
    #[doc = " - Once this API is called, all request headers are purged, so"]
    #[doc = "   request headers need be copied into separate buffers if they"]
    #[doc = "   are required later."]
    #[doc = ""]
    #[doc = " @param[in] r         The request being responded to"]
    #[doc = " @param[in] buf       Pointer to a buffer that stores the data"]
    #[doc = " @param[in] buf_len   Length of the buffer, HTTPD_RESP_USE_STRLEN to use strlen()"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully sending the response packet chunk"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null request pointer"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_HDR    : Essential headers are too large for internal buffer"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_SEND   : Error in raw send"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request pointer"]
    pub fn httpd_resp_send_chunk(
        r: *mut httpd_req_t,
        buf: *const c_types::c_char,
        buf_len: ssize_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   API to set the HTTP status code"]
    #[doc = ""]
    #[doc = " This API sets the status of the HTTP response to the value specified."]
    #[doc = " By default, the '200 OK' response is sent as the response."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - This API only sets the status to this value. The status isn't"]
    #[doc = "    sent out until any of the send APIs is executed."]
    #[doc = "  - Make sure that the lifetime of the status string is valid till"]
    #[doc = "    send function is called."]
    #[doc = ""]
    #[doc = " @param[in] r         The request being responded to"]
    #[doc = " @param[in] status    The HTTP status code of this response"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On success"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request pointer"]
    pub fn httpd_resp_set_status(r: *mut httpd_req_t, status: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   API to set the HTTP content type"]
    #[doc = ""]
    #[doc = " This API sets the 'Content Type' field of the response."]
    #[doc = " The default content type is 'text/html'."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - This API only sets the content type to this value. The type"]
    #[doc = "    isn't sent out until any of the send APIs is executed."]
    #[doc = "  - Make sure that the lifetime of the type string is valid till"]
    #[doc = "    send function is called."]
    #[doc = ""]
    #[doc = " @param[in] r     The request being responded to"]
    #[doc = " @param[in] type  The Content Type of the response"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK   : On success"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request pointer"]
    pub fn httpd_resp_set_type(r: *mut httpd_req_t, type_: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   API to append any additional headers"]
    #[doc = ""]
    #[doc = " This API sets any additional header fields that need to be sent in the response."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - The header isn't sent out until any of the send APIs is executed."]
    #[doc = "  - The maximum allowed number of additional headers is limited to"]
    #[doc = "    value of max_resp_headers in config structure."]
    #[doc = "  - Make sure that the lifetime of the field value strings are valid till"]
    #[doc = "    send function is called."]
    #[doc = ""]
    #[doc = " @param[in] r     The request being responded to"]
    #[doc = " @param[in] field The field name of the HTTP header"]
    #[doc = " @param[in] value The value of this HTTP header"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully appending new header"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_HDR    : Total additional headers exceed max allowed"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request pointer"]
    pub fn httpd_resp_set_hdr(
        r: *mut httpd_req_t,
        field: *const c_types::c_char,
        value: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   For sending out error code in response to HTTP request."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - Once this API is called, all request headers are purged, so"]
    #[doc = "    request headers need be copied into separate buffers if"]
    #[doc = "    they are required later."]
    #[doc = "  - If you wish to send additional data in the body of the"]
    #[doc = "    response, please use the lower-level functions directly."]
    #[doc = ""]
    #[doc = " @param[in] req     Pointer to the HTTP request for which the response needs to be sent"]
    #[doc = " @param[in] error   Error type to send"]
    #[doc = " @param[in] msg     Error message string (pass NULL for default message)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : On successfully sending the response packet"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    #[doc = "  - ESP_ERR_HTTPD_RESP_SEND   : Error in raw send"]
    #[doc = "  - ESP_ERR_HTTPD_INVALID_REQ : Invalid request pointer"]
    pub fn httpd_resp_send_err(
        req: *mut httpd_req_t,
        error: httpd_err_code_t,
        msg: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Raw HTTP send"]
    #[doc = ""]
    #[doc = " Call this API if you wish to construct your custom response packet."]
    #[doc = " When using this, all essential header, eg. HTTP version, Status Code,"]
    #[doc = " Content Type and Length, Encoding, etc. will have to be constructed"]
    #[doc = " manually, and HTTP delimeters (CRLF) will need to be placed correctly"]
    #[doc = " for separating sub-sections of the HTTP response packet."]
    #[doc = ""]
    #[doc = " If the send override function is set, this API will end up"]
    #[doc = " calling that function eventually to send data out."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  - This API is supposed to be called only from the context of"]
    #[doc = "    a URI handler where httpd_req_t* request pointer is valid."]
    #[doc = "  - Unless the response has the correct HTTP structure (which the"]
    #[doc = "    user must now ensure) it is not guaranteed that it will be"]
    #[doc = "    recognized by the client. For most cases, you wouldn't have"]
    #[doc = "    to call this API, but you would rather use either of :"]
    #[doc = "          httpd_resp_send(),"]
    #[doc = "          httpd_resp_send_chunk()"]
    #[doc = ""]
    #[doc = " @param[in] r         The request being responded to"]
    #[doc = " @param[in] buf       Buffer from where the fully constructed packet is to be read"]
    #[doc = " @param[in] buf_len   Length of the buffer"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - Bytes : Number of bytes that were sent successfully"]
    #[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
    #[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket send()"]
    #[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket send()"]
    pub fn httpd_send(
        r: *mut httpd_req_t,
        buf: *const c_types::c_char,
        buf_len: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " A low level API to send data on a given socket"]
    #[doc = ""]
    #[doc = " @note This API is not recommended to be used in any request handler."]
    #[doc = " Use this only for advanced use cases, wherein some asynchronous"]
    #[doc = " data is to be sent over a socket."]
    #[doc = ""]
    #[doc = " This internally calls the default send function, or the function registered by"]
    #[doc = " httpd_sess_set_send_override()."]
    #[doc = ""]
    #[doc = " @param[in] hd        server instance"]
    #[doc = " @param[in] sockfd    session socket file descriptor"]
    #[doc = " @param[in] buf       buffer with bytes to send"]
    #[doc = " @param[in] buf_len   data size"]
    #[doc = " @param[in] flags     flags for the send() function"]
    #[doc = " @return"]
    #[doc = "  - Bytes : The number of bytes sent successfully"]
    #[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
    #[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket send()"]
    #[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket send()"]
    pub fn httpd_socket_send(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        buf: *const c_types::c_char,
        buf_len: size_t,
        flags: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " A low level API to receive data from a given socket"]
    #[doc = ""]
    #[doc = " @note This API is not recommended to be used in any request handler."]
    #[doc = " Use this only for advanced use cases, wherein some asynchronous"]
    #[doc = " communication is required."]
    #[doc = ""]
    #[doc = " This internally calls the default recv function, or the function registered by"]
    #[doc = " httpd_sess_set_recv_override()."]
    #[doc = ""]
    #[doc = " @param[in] hd        server instance"]
    #[doc = " @param[in] sockfd    session socket file descriptor"]
    #[doc = " @param[in] buf       buffer with bytes to send"]
    #[doc = " @param[in] buf_len   data size"]
    #[doc = " @param[in] flags     flags for the send() function"]
    #[doc = " @return"]
    #[doc = "  - Bytes : The number of bytes received successfully"]
    #[doc = "  - 0     : Buffer length parameter is zero / connection closed by peer"]
    #[doc = "  - HTTPD_SOCK_ERR_INVALID  : Invalid arguments"]
    #[doc = "  - HTTPD_SOCK_ERR_TIMEOUT  : Timeout/interrupted while calling socket recv()"]
    #[doc = "  - HTTPD_SOCK_ERR_FAIL     : Unrecoverable error while calling socket recv()"]
    pub fn httpd_socket_recv(
        hd: httpd_handle_t,
        sockfd: c_types::c_int,
        buf: *mut c_types::c_char,
        buf_len: size_t,
        flags: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief   Get session context from socket descriptor"]
    #[doc = ""]
    #[doc = " Typically if a session context is created, it is available to URI handlers"]
    #[doc = " through the httpd_req_t structure. But, there are cases where the web"]
    #[doc = " server's send/receive functions may require the context (for example, for"]
    #[doc = " accessing keying information etc). Since the send/receive function only have"]
    #[doc = " the socket descriptor at their disposal, this API provides them with a way to"]
    #[doc = " retrieve the session context."]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor for which the context should be extracted."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - void* : Pointer to the context associated with this session"]
    #[doc = "  - NULL  : Empty context / Invalid handle / Invalid socket fd"]
    pub fn httpd_sess_get_ctx(
        handle: httpd_handle_t,
        sockfd: c_types::c_int,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Set session context by socket descriptor"]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor for which the context should be extracted."]
    #[doc = " @param[in] ctx       Context object to assign to the session"]
    #[doc = " @param[in] free_fn   Function that should be called to free the context"]
    pub fn httpd_sess_set_ctx(
        handle: httpd_handle_t,
        sockfd: c_types::c_int,
        ctx: *mut c_types::c_void,
        free_fn: httpd_free_ctx_fn_t,
    );
}
extern "C" {
    #[doc = " @brief   Get session 'transport' context by socket descriptor"]
    #[doc = " @see     httpd_sess_get_ctx()"]
    #[doc = ""]
    #[doc = " This context is used by the send/receive functions, for example to manage SSL context."]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor for which the context should be extracted."]
    #[doc = " @return"]
    #[doc = "  - void* : Pointer to the transport context associated with this session"]
    #[doc = "  - NULL  : Empty context / Invalid handle / Invalid socket fd"]
    pub fn httpd_sess_get_transport_ctx(
        handle: httpd_handle_t,
        sockfd: c_types::c_int,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Set session 'transport' context by socket descriptor"]
    #[doc = " @see     httpd_sess_set_ctx()"]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor for which the context should be extracted."]
    #[doc = " @param[in] ctx       Transport context object to assign to the session"]
    #[doc = " @param[in] free_fn   Function that should be called to free the transport context"]
    pub fn httpd_sess_set_transport_ctx(
        handle: httpd_handle_t,
        sockfd: c_types::c_int,
        ctx: *mut c_types::c_void,
        free_fn: httpd_free_ctx_fn_t,
    );
}
extern "C" {
    #[doc = " @brief   Get HTTPD global user context (it was set in the server config struct)"]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @return global user context"]
    pub fn httpd_get_global_user_ctx(handle: httpd_handle_t) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Get HTTPD global transport context (it was set in the server config struct)"]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @return global transport context"]
    pub fn httpd_get_global_transport_ctx(handle: httpd_handle_t) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Trigger an httpd session close externally"]
    #[doc = ""]
    #[doc = " @note    Calling this API is only required in special circumstances wherein"]
    #[doc = "          some application requires to close an httpd client session asynchronously."]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor of the session to be closed"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK    : On successfully initiating closure"]
    #[doc = "  - ESP_FAIL  : Failure to queue work"]
    #[doc = "  - ESP_ERR_NOT_FOUND   : Socket fd not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_sess_trigger_close(handle: httpd_handle_t, sockfd: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Update LRU counter for a given socket"]
    #[doc = ""]
    #[doc = " LRU Counters are internally associated with each session to monitor"]
    #[doc = " how recently a session exchanged traffic. When LRU purge is enabled,"]
    #[doc = " if a client is requesting for connection but maximum number of"]
    #[doc = " sockets/sessions is reached, then the session having the earliest"]
    #[doc = " LRU counter is closed automatically."]
    #[doc = ""]
    #[doc = " Updating the LRU counter manually prevents the socket from being purged"]
    #[doc = " due to the Least Recently Used (LRU) logic, even though it might not"]
    #[doc = " have received traffic for some time. This is useful when all open"]
    #[doc = " sockets/session are frequently exchanging traffic but the user specifically"]
    #[doc = " wants one of the sessions to be kept open, irrespective of when it last"]
    #[doc = " exchanged a packet."]
    #[doc = ""]
    #[doc = " @note    Calling this API is only necessary if the LRU Purge Enable option"]
    #[doc = "          is enabled."]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] sockfd    The socket descriptor of the session for which LRU counter"]
    #[doc = "                      is to be updated"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK : Socket found and LRU counter updated"]
    #[doc = "  - ESP_ERR_NOT_FOUND   : Socket not found"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_sess_update_lru_counter(
        handle: httpd_handle_t,
        sockfd: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Returns list of current socket descriptors of active sessions"]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in,out] fds   In: Size of provided client_fds array"]
    #[doc = "                      Out: Number of valid client fds returned in client_fds,"]
    #[doc = " @param[out] client_fds  Array of client fds"]
    #[doc = ""]
    #[doc = " @note Size of provided array has to be equal or greater then maximum number of opened"]
    #[doc = "       sockets, configured upon initialization with max_open_sockets field in"]
    #[doc = "       httpd_config_t structure."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK              : Successfully retrieved session list"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Wrong arguments or list is longer than provided array"]
    pub fn httpd_get_client_list(
        handle: httpd_handle_t,
        fds: *mut size_t,
        client_fds: *mut c_types::c_int,
    ) -> esp_err_t;
}
#[doc = " @brief   Prototype of the HTTPD work function"]
#[doc = "          Please refer to httpd_queue_work() for more details."]
#[doc = " @param[in] arg   The arguments for this work function"]
pub type httpd_work_fn_t = ::core::option::Option<unsafe extern "C" fn(arg: *mut c_types::c_void)>;
extern "C" {
    #[doc = " @brief   Queue execution of a function in HTTPD's context"]
    #[doc = ""]
    #[doc = " This API queues a work function for asynchronous execution"]
    #[doc = ""]
    #[doc = " @note    Some protocols require that the web server generate some asynchronous data"]
    #[doc = "          and send it to the persistently opened connection. This facility is for use"]
    #[doc = "          by such protocols."]
    #[doc = ""]
    #[doc = " @param[in] handle    Handle to server returned by httpd_start"]
    #[doc = " @param[in] work      Pointer to the function to be executed in the HTTPD's context"]
    #[doc = " @param[in] arg       Pointer to the arguments that should be passed to this function"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "  - ESP_OK   : On successfully queueing the work"]
    #[doc = "  - ESP_FAIL : Failure in ctrl socket"]
    #[doc = "  - ESP_ERR_INVALID_ARG : Null arguments"]
    pub fn httpd_queue_work(
        handle: httpd_handle_t,
        work: httpd_work_fn_t,
        arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_websocket_client {
    _unused: [u8; 0],
}
pub type esp_websocket_client_handle_t = *mut esp_websocket_client;
extern "C" {
    pub static mut WEBSOCKET_EVENTS: esp_event_base_t;
}
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_ANY: esp_websocket_event_id_t = -1;
#[doc = "< This event occurs when there are any errors during execution"]
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_ERROR: esp_websocket_event_id_t = 0;
#[doc = "< Once the Websocket has been connected to the server, no data exchange has been performed"]
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_CONNECTED: esp_websocket_event_id_t = 1;
#[doc = "< The connection has been disconnected"]
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_DISCONNECTED: esp_websocket_event_id_t = 2;
#[doc = "< When receiving data from the server, possibly multiple portions of the packet"]
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_DATA: esp_websocket_event_id_t = 3;
#[doc = "< The connection has been closed cleanly"]
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_CLOSED: esp_websocket_event_id_t = 4;
pub const esp_websocket_event_id_t_WEBSOCKET_EVENT_MAX: esp_websocket_event_id_t = 5;
#[doc = " @brief Websocket Client events id"]
pub type esp_websocket_event_id_t = c_types::c_int;
#[doc = " @brief Websocket event data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_websocket_event_data_t {
    #[doc = "< Data pointer"]
    pub data_ptr: *const c_types::c_char,
    #[doc = "< Data length"]
    pub data_len: c_types::c_int,
    #[doc = "< Received opcode"]
    pub op_code: u8,
    #[doc = "< esp_websocket_client_handle_t context"]
    pub client: esp_websocket_client_handle_t,
    #[doc = "< user_data context, from esp_websocket_client_config_t user_data"]
    pub user_context: *mut c_types::c_void,
    #[doc = "< Total payload length, payloads exceeding buffer will be posted through multiple events"]
    pub payload_len: c_types::c_int,
    #[doc = "< Actual offset for the data associated with this event"]
    pub payload_offset: c_types::c_int,
}
impl Default for esp_websocket_event_data_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "< Transport unknown"]
pub const esp_websocket_transport_t_WEBSOCKET_TRANSPORT_UNKNOWN: esp_websocket_transport_t = 0;
#[doc = "< Transport over tcp"]
pub const esp_websocket_transport_t_WEBSOCKET_TRANSPORT_OVER_TCP: esp_websocket_transport_t = 1;
#[doc = "< Transport over ssl"]
pub const esp_websocket_transport_t_WEBSOCKET_TRANSPORT_OVER_SSL: esp_websocket_transport_t = 2;
#[doc = " @brief Websocket Client transport"]
pub type esp_websocket_transport_t = c_types::c_uint;
#[doc = " @brief Websocket client setup configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_websocket_client_config_t {
    #[doc = "< Websocket URI, the information on the URI can be overrides the other fields below, if any"]
    pub uri: *const c_types::c_char,
    #[doc = "< Domain or IP as string"]
    pub host: *const c_types::c_char,
    #[doc = "< Port to connect, default depend on esp_websocket_transport_t (80 or 443)"]
    pub port: c_types::c_int,
    #[doc = "< Using for Http authentication - Not supported for now"]
    pub username: *const c_types::c_char,
    #[doc = "< Using for Http authentication - Not supported for now"]
    pub password: *const c_types::c_char,
    #[doc = "< HTTP Path, if not set, default is `/`"]
    pub path: *const c_types::c_char,
    #[doc = "< Disable the automatic reconnect function when disconnected"]
    pub disable_auto_reconnect: bool,
    #[doc = "< HTTP user data context"]
    pub user_context: *mut c_types::c_void,
    #[doc = "< Websocket task priority"]
    pub task_prio: c_types::c_int,
    #[doc = "< Websocket task stack"]
    pub task_stack: c_types::c_int,
    #[doc = "< Websocket buffer size"]
    pub buffer_size: c_types::c_int,
    #[doc = "< Pointer to certificate data in PEM or DER format for server verify (with SSL), default is NULL, not required to verify the server. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in cert_len."]
    pub cert_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by cert_pem. May be 0 for null-terminated pem"]
    pub cert_len: size_t,
    #[doc = "< Pointer to certificate data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_key` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_cert_len."]
    pub client_cert: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_cert. May be 0 for null-terminated pem"]
    pub client_cert_len: size_t,
    #[doc = "< Pointer to private key data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_cert` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_key_len"]
    pub client_key: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_key_pem. May be 0 for null-terminated pem"]
    pub client_key_len: size_t,
    #[doc = "< Websocket transport type, see `esp_websocket_transport_t"]
    pub transport: esp_websocket_transport_t,
    #[doc = "< Websocket subprotocol"]
    pub subprotocol: *const c_types::c_char,
    #[doc = "< Websocket user-agent"]
    pub user_agent: *const c_types::c_char,
    #[doc = "< Websocket additional headers"]
    pub headers: *const c_types::c_char,
    #[doc = "< Period before connection is aborted due to no PONGs received"]
    pub pingpong_timeout_sec: c_types::c_int,
    #[doc = "< Disable auto-disconnect due to no PONG received within pingpong_timeout_sec"]
    pub disable_pingpong_discon: bool,
    #[doc = "< Use a global ca_store for all the connections in which this bool is set."]
    pub use_global_ca_store: bool,
    #[doc = "< Skip any validation of server certificate CN field"]
    pub skip_cert_common_name_check: bool,
    #[doc = "< Enable keep-alive timeout"]
    pub keep_alive_enable: bool,
    #[doc = "< Keep-alive idle time. Default is 5 (second)"]
    pub keep_alive_idle: c_types::c_int,
    #[doc = "< Keep-alive interval time. Default is 5 (second)"]
    pub keep_alive_interval: c_types::c_int,
    #[doc = "< Keep-alive packet retry send count. Default is 3 counts"]
    pub keep_alive_count: c_types::c_int,
    #[doc = "< Websocket ping interval, defaults to 10 seconds if not set"]
    pub ping_interval_sec: size_t,
    #[doc = "< The name of interface for data to go through. Use the default interface without setting"]
    pub if_name: *mut ifreq,
}
impl Default for esp_websocket_client_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief      Start a Websocket session"]
    #[doc = "             This function must be the first function to call,"]
    #[doc = "             and it returns a esp_websocket_client_handle_t that you must use as input to other functions in the interface."]
    #[doc = "             This call MUST have a corresponding call to esp_websocket_client_destroy when the operation is complete."]
    #[doc = ""]
    #[doc = " @param[in]  config  The configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - `esp_websocket_client_handle_t`"]
    #[doc = "     - NULL if any errors"]
    pub fn esp_websocket_client_init(
        config: *const esp_websocket_client_config_t,
    ) -> esp_websocket_client_handle_t;
}
extern "C" {
    #[doc = " @brief      Set URL for client, when performing this behavior, the options in the URL will replace the old ones"]
    #[doc = "             Must stop the WebSocket client before set URI if the client has been connected"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  uri     The uri"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_set_uri(
        client: esp_websocket_client_handle_t,
        uri: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Open the WebSocket connection"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_start(client: esp_websocket_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Stops the WebSocket connection without websocket closing handshake"]
    #[doc = ""]
    #[doc = " This API stops ws client and closes TCP connection directly without sending"]
    #[doc = " close frames. It is a good practice to close the connection in a clean way"]
    #[doc = " using esp_websocket_client_close()."]
    #[doc = ""]
    #[doc = "  Notes:"]
    #[doc = "  - Cannot be called from the websocket event handler"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_stop(client: esp_websocket_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Destroy the WebSocket connection and free all resources."]
    #[doc = "             This function must be the last function to call for an session."]
    #[doc = "             It is the opposite of the esp_websocket_client_init function and must be called with the same handle as input that a esp_websocket_client_init call returned."]
    #[doc = "             This might close all connections this handle has used."]
    #[doc = ""]
    #[doc = "  Notes:"]
    #[doc = "  - Cannot be called from the websocket event handler"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_destroy(client: esp_websocket_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Generic write data to the WebSocket connection; defaults to binary send"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  data    The data"]
    #[doc = " @param[in]  len     The length"]
    #[doc = " @param[in]  timeout Write data timeout in RTOS ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Number of data was sent"]
    #[doc = "     - (-1) if any errors"]
    pub fn esp_websocket_client_send(
        client: esp_websocket_client_handle_t,
        data: *const c_types::c_char,
        len: c_types::c_int,
        timeout: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Write binary data to the WebSocket connection (data send with WS OPCODE=02, i.e. binary)"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  data    The data"]
    #[doc = " @param[in]  len     The length"]
    #[doc = " @param[in]  timeout Write data timeout in RTOS ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Number of data was sent"]
    #[doc = "     - (-1) if any errors"]
    pub fn esp_websocket_client_send_bin(
        client: esp_websocket_client_handle_t,
        data: *const c_types::c_char,
        len: c_types::c_int,
        timeout: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Write textual data to the WebSocket connection (data send with WS OPCODE=01, i.e. text)"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  data    The data"]
    #[doc = " @param[in]  len     The length"]
    #[doc = " @param[in]  timeout Write data timeout in RTOS ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Number of data was sent"]
    #[doc = "     - (-1) if any errors"]
    pub fn esp_websocket_client_send_text(
        client: esp_websocket_client_handle_t,
        data: *const c_types::c_char,
        len: c_types::c_int,
        timeout: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief      Close the WebSocket connection in a clean way"]
    #[doc = ""]
    #[doc = " Sequence of clean close initiated by client:"]
    #[doc = " * Client sends CLOSE frame"]
    #[doc = " * Client waits until server echos the CLOSE frame"]
    #[doc = " * Client waits until server closes the connection"]
    #[doc = " * Client is stopped the same way as by the `esp_websocket_client_stop()`"]
    #[doc = ""]
    #[doc = "  Notes:"]
    #[doc = "  - Cannot be called from the websocket event handler"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  timeout Timeout in RTOS ticks for waiting"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_close(
        client: esp_websocket_client_handle_t,
        timeout: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Close the WebSocket connection in a clean way with custom code/data"]
    #[doc = "             Closing sequence is the same as for esp_websocket_client_close()"]
    #[doc = ""]
    #[doc = "  Notes:"]
    #[doc = "  - Cannot be called from the websocket event handler"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client"]
    #[doc = " @param[in]  code    Close status code as defined in RFC6455 section-7.4"]
    #[doc = " @param[in]  data    Additional data to closing message"]
    #[doc = " @param[in]  len     The length of the additional data"]
    #[doc = " @param[in]  timeout Timeout in RTOS ticks for waiting"]
    #[doc = ""]
    #[doc = " @return     esp_err_t"]
    pub fn esp_websocket_client_close_with_code(
        client: esp_websocket_client_handle_t,
        code: c_types::c_int,
        data: *const c_types::c_char,
        len: c_types::c_int,
        timeout: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Check the WebSocket client connection state"]
    #[doc = ""]
    #[doc = " @param[in]  client  The client handle"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true"]
    #[doc = "     - false"]
    pub fn esp_websocket_client_is_connected(client: esp_websocket_client_handle_t) -> bool;
}
extern "C" {
    #[doc = " @brief Register the Websocket Events"]
    #[doc = ""]
    #[doc = " @param client            The client handle"]
    #[doc = " @param event             The event id"]
    #[doc = " @param event_handler     The callback function"]
    #[doc = " @param event_handler_arg User context"]
    #[doc = " @return esp_err_t"]
    pub fn esp_websocket_register_events(
        client: esp_websocket_client_handle_t,
        event: esp_websocket_event_id_t,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mdns_search_once_s {
    _unused: [u8; 0],
}
#[doc = " @brief   Asynchronous query handle"]
pub type mdns_search_once_t = mdns_search_once_s;
pub const mdns_ip_protocol_t_MDNS_IP_PROTOCOL_V4: mdns_ip_protocol_t = 0;
pub const mdns_ip_protocol_t_MDNS_IP_PROTOCOL_V6: mdns_ip_protocol_t = 1;
pub const mdns_ip_protocol_t_MDNS_IP_PROTOCOL_MAX: mdns_ip_protocol_t = 2;
#[doc = " @brief   mDNS enum to specify the ip_protocol type"]
pub type mdns_ip_protocol_t = c_types::c_uint;
#[doc = " @brief   mDNS basic text item structure"]
#[doc = "          Used in mdns_service_add()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mdns_txt_item_t {
    #[doc = "< item key name"]
    pub key: *const c_types::c_char,
    #[doc = "< item value string"]
    pub value: *const c_types::c_char,
}
impl Default for mdns_txt_item_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   mDNS query linked list IP item"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mdns_ip_addr_s {
    #[doc = "< IP address"]
    pub addr: esp_ip_addr_t,
    #[doc = "< next IP, or NULL for the last IP in the list"]
    pub next: *mut mdns_ip_addr_s,
}
impl Default for mdns_ip_addr_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   mDNS query linked list IP item"]
pub type mdns_ip_addr_t = mdns_ip_addr_s;
pub const mdns_if_internal_MDNS_IF_STA: mdns_if_internal = 0;
pub const mdns_if_internal_MDNS_IF_AP: mdns_if_internal = 1;
pub const mdns_if_internal_MDNS_IF_ETH: mdns_if_internal = 2;
pub const mdns_if_internal_MDNS_IF_MAX: mdns_if_internal = 3;
pub type mdns_if_internal = c_types::c_uint;
pub use self::mdns_if_internal as mdns_if_t;
#[doc = " @brief   mDNS query result structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mdns_result_s {
    #[doc = "< next result, or NULL for the last result in the list"]
    pub next: *mut mdns_result_s,
    #[doc = "< interface index"]
    pub tcpip_if: mdns_if_t,
    #[doc = "< time to live"]
    pub ttl: u32,
    #[doc = "< ip_protocol type of the interface (v4/v6)"]
    pub ip_protocol: mdns_ip_protocol_t,
    #[doc = "< instance name"]
    pub instance_name: *mut c_types::c_char,
    #[doc = "< service type"]
    pub service_type: *mut c_types::c_char,
    #[doc = "< srevice protocol"]
    pub proto: *mut c_types::c_char,
    #[doc = "< hostname"]
    pub hostname: *mut c_types::c_char,
    #[doc = "< service port"]
    pub port: u16,
    #[doc = "< txt record"]
    pub txt: *mut mdns_txt_item_t,
    #[doc = "< array of txt value len of each record"]
    pub txt_value_len: *mut u8,
    #[doc = "< number of txt items"]
    pub txt_count: size_t,
    #[doc = "< linked list of IP addresses found"]
    pub addr: *mut mdns_ip_addr_t,
}
impl Default for mdns_result_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   mDNS query result structure"]
pub type mdns_result_t = mdns_result_s;
pub type mdns_query_notify_t =
    ::core::option::Option<unsafe extern "C" fn(search: *mut mdns_search_once_t)>;
extern "C" {
    #[doc = " @brief  Initialize mDNS on given interface"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK on success"]
    #[doc = "     - ESP_ERR_INVALID_STATE when failed to register event handler"]
    #[doc = "     - ESP_ERR_NO_MEM on memory error"]
    #[doc = "     - ESP_FAIL when failed to start mdns task"]
    pub fn mdns_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Stop and free mDNS server"]
    #[doc = ""]
    pub fn mdns_free();
}
extern "C" {
    #[doc = " @brief  Set the hostname for mDNS server"]
    #[doc = "         required if you want to advertise services"]
    #[doc = ""]
    #[doc = " @param  hostname     Hostname to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_hostname_set(hostname: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Adds a hostname and address to be delegated"]
    #[doc = "         A/AAAA queries will be replied for the hostname and"]
    #[doc = "         services can be added to this host."]
    #[doc = ""]
    #[doc = " @param  hostname     Hostname to add"]
    #[doc = " @param  address_list The IP address list of the host"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE mDNS is not running"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    #[doc = ""]
    pub fn mdns_delegate_hostname_add(
        hostname: *const c_types::c_char,
        address_list: *const mdns_ip_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Remove a delegated hostname"]
    #[doc = "         All the services added to this host will also be removed."]
    #[doc = ""]
    #[doc = " @param  hostname     Hostname to remove"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE mDNS is not running"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    #[doc = ""]
    pub fn mdns_delegate_hostname_remove(hostname: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Query whether a hostname has been added"]
    #[doc = ""]
    #[doc = " @param  hostname     Hostname to query"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true   The hostname has been added."]
    #[doc = "     - false  The hostname has not been added."]
    #[doc = ""]
    pub fn mdns_hostname_exists(hostname: *const c_types::c_char) -> bool;
}
extern "C" {
    #[doc = " @brief  Set the default instance name for mDNS server"]
    #[doc = ""]
    #[doc = " @param  instance_name     Instance name to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_instance_name_set(instance_name: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Add service to mDNS server"]
    #[doc = ""]
    #[doc = " @note The value length of txt items will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  instance_name    instance name to set. If NULL,"]
    #[doc = "                          global instance name or hostname will be used."]
    #[doc = "                          Note that MDNS_MULTIPLE_INSTANCE config option"]
    #[doc = "                          needs to be enabled for adding multiple instances"]
    #[doc = "                          with the same instance type."]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  port             service port"]
    #[doc = " @param  txt              string array of TXT data (eg. {{\"var\",\"val\"},{\"other\",\"2\"}})"]
    #[doc = " @param  num_items        number of items in TXT data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    #[doc = "     - ESP_FAIL failed to add service"]
    pub fn mdns_service_add(
        instance_name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        port: u16,
        txt: *mut mdns_txt_item_t,
        num_items: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Add service to mDNS server with a delegated hostname"]
    #[doc = ""]
    #[doc = " @note The value length of txt items will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  instance_name    instance name to set. If NULL,"]
    #[doc = "                          global instance name or hostname will be used"]
    #[doc = "                          Note that MDNS_MULTIPLE_INSTANCE config option"]
    #[doc = "                          needs to be enabled for adding multiple instances"]
    #[doc = "                          with the same instance type."]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname         service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  port             service port"]
    #[doc = " @param  txt              string array of TXT data (eg. {{\"var\",\"val\"},{\"other\",\"2\"}})"]
    #[doc = " @param  num_items        number of items in TXT data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    #[doc = "     - ESP_FAIL failed to add service"]
    pub fn mdns_service_add_for_host(
        instance_name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        port: u16,
        txt: *mut mdns_txt_item_t,
        num_items: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Check whether a service has been added."]
    #[doc = ""]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname         service hostname. If NULL, checks for the local hostname."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true   Correspondding service has been added."]
    #[doc = "     - false  Service not found."]
    pub fn mdns_service_exists(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief  Check whether a service has been added."]
    #[doc = ""]
    #[doc = " @param  instance         instance name"]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname         service hostname. If NULL, checks for the local hostname."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true   Correspondding service has been added."]
    #[doc = "     - false  Service not found."]
    pub fn mdns_service_exists_with_instance(
        instance: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief  Remove service from mDNS server"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_remove(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Remove service from mDNS server with hostname"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_remove_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set instance name for service"]
    #[doc = ""]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  instance_name    instance name to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_instance_name_set(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        instance_name: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set instance name for service with hostname"]
    #[doc = ""]
    #[doc = " @param  service_type     service type (_http, _ftp, etc)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname         service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  instance_name    instance name to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_instance_name_set_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        instance_name: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set service port"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  port         service port"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_port_set(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        port: u16,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set service port with hostname"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  port         service port"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_port_set_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        port: u16,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Replace all TXT items for service"]
    #[doc = ""]
    #[doc = " @note The value length of txt items will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  txt          array of TXT data (eg. {{\"var\",\"val\"},{\"other\",\"2\"}})"]
    #[doc = " @param  num_items    number of items in TXT data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_set(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        txt: *mut mdns_txt_item_t,
        num_items: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Replace all TXT items for service with hostname"]
    #[doc = ""]
    #[doc = " @note The value length of txt items will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  txt          array of TXT data (eg. {{\"var\",\"val\"},{\"other\",\"2\"}})"]
    #[doc = " @param  num_items    number of items in TXT data"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_set_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        txt: *mut mdns_txt_item_t,
        num_items: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set/Add TXT item for service TXT record"]
    #[doc = ""]
    #[doc = " @note The value length will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  key          the key that you want to add/update"]
    #[doc = " @param  value        the new value of the key"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_set(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set/Add TXT item for service TXT record"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  key          the key that you want to add/update"]
    #[doc = " @param  value        the new value of the key"]
    #[doc = " @param  value_len    the length of the value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_set_with_explicit_value_len(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
        value_len: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set/Add TXT item for service TXT record with hostname"]
    #[doc = ""]
    #[doc = " @note The value length will be automatically decided by strlen"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  key          the key that you want to add/update"]
    #[doc = " @param  value        the new value of the key"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_set_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Set/Add TXT item for service TXT record with hostname and txt value length"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  key          the key that you want to add/update"]
    #[doc = " @param  value        the new value of the key"]
    #[doc = " @param  value_len    the length of the value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_set_for_host_with_explicit_value_len(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
        value_len: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Remove TXT item for service TXT record"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  key          the key that you want to remove"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_remove(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        key: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Remove TXT item for service TXT record with hostname"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _ftp, etc)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp)"]
    #[doc = " @param  hostname     service hostname. If NULL, local hostname will be used."]
    #[doc = " @param  key          the key that you want to remove"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NOT_FOUND Service not found"]
    #[doc = "     - ESP_ERR_NO_MEM memory error"]
    pub fn mdns_service_txt_item_remove_for_host(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        hostname: *const c_types::c_char,
        key: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Remove and free all services from mDNS server"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn mdns_service_remove_all() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deletes the finished query. Call this only after the search has ended!"]
    #[doc = ""]
    #[doc = " @param search pointer to search object"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  search has not finished"]
    #[doc = "     - ESP_ERR_INVALID_ARG    pointer to search object is NULL"]
    pub fn mdns_query_async_delete(search: *mut mdns_search_once_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get results from search pointer. Results available as a pointer to the output parameter."]
    #[doc = "        Pointer to search object has to be deleted via `mdns_query_async_delete` once the query has finished."]
    #[doc = "        The results although have to be freed manually."]
    #[doc = ""]
    #[doc = " @param search pointer to search object"]
    #[doc = " @param timeout time in milliseconds to wait for answers"]
    #[doc = " @param results pointer to the results of the query"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      True if search has finished before or at timeout"]
    #[doc = "      False if search timeout is over"]
    pub fn mdns_query_async_get_results(
        search: *mut mdns_search_once_t,
        timeout: u32,
        results: *mut *mut mdns_result_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief  Query mDNS for host or service asynchronousely."]
    #[doc = "         Search has to be tested for progress and deleted manually!"]
    #[doc = ""]
    #[doc = " @param  name         service instance or host name (NULL for PTR queries)"]
    #[doc = " @param  service_type service type (_http, _arduino, _ftp etc.) (NULL for host queries)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp, etc.) (NULL for host queries)"]
    #[doc = " @param  type         type of query (MDNS_TYPE_*)"]
    #[doc = " @param  timeout      time in milliseconds during which mDNS query is active"]
    #[doc = " @param  max_results  maximum results to be collected"]
    #[doc = " @param  notifier     Notification function to be called when the result is ready, can be NULL"]
    #[doc = ""]
    #[doc = " @return mdns_search_once_s pointer to new search object if query initiated successfully."]
    #[doc = "         NULL otherwise."]
    pub fn mdns_query_async_new(
        name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        type_: u16,
        timeout: u32,
        max_results: size_t,
        notifier: mdns_query_notify_t,
    ) -> *mut mdns_search_once_t;
}
extern "C" {
    #[doc = " @brief  Query mDNS for host or service"]
    #[doc = "         All following query methods are derived from this one"]
    #[doc = ""]
    #[doc = " @param  name         service instance or host name (NULL for PTR queries)"]
    #[doc = " @param  service_type service type (_http, _arduino, _ftp etc.) (NULL for host queries)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp, etc.) (NULL for host queries)"]
    #[doc = " @param  type         type of query (MDNS_TYPE_*)"]
    #[doc = " @param  timeout      time in milliseconds to wait for answers."]
    #[doc = " @param  max_results  maximum results to be collected"]
    #[doc = " @param  results      pointer to the results of the query"]
    #[doc = "                      results must be freed using mdns_query_results_free below"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    timeout was not given"]
    pub fn mdns_query(
        name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        type_: u16,
        timeout: u32,
        max_results: size_t,
        results: *mut *mut mdns_result_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Free query results"]
    #[doc = ""]
    #[doc = " @param  results      linked list of results to be freed"]
    pub fn mdns_query_results_free(results: *mut mdns_result_t);
}
extern "C" {
    #[doc = " @brief  Query mDNS for service"]
    #[doc = ""]
    #[doc = " @param  service_type service type (_http, _arduino, _ftp etc.)"]
    #[doc = " @param  proto        service protocol (_tcp, _udp, etc.)"]
    #[doc = " @param  timeout      time in milliseconds to wait for answer."]
    #[doc = " @param  max_results  maximum results to be collected"]
    #[doc = " @param  results      pointer to the results of the query"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    parameter error"]
    pub fn mdns_query_ptr(
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        timeout: u32,
        max_results: size_t,
        results: *mut *mut mdns_result_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Query mDNS for SRV record"]
    #[doc = ""]
    #[doc = " @param  instance_name    service instance name"]
    #[doc = " @param  service_type     service type (_http, _arduino, _ftp etc.)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp, etc.)"]
    #[doc = " @param  timeout          time in milliseconds to wait for answer."]
    #[doc = " @param  result           pointer to the result of the query"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    parameter error"]
    pub fn mdns_query_srv(
        instance_name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        timeout: u32,
        result: *mut *mut mdns_result_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Query mDNS for TXT record"]
    #[doc = ""]
    #[doc = " @param  instance_name    service instance name"]
    #[doc = " @param  service_type     service type (_http, _arduino, _ftp etc.)"]
    #[doc = " @param  proto            service protocol (_tcp, _udp, etc.)"]
    #[doc = " @param  timeout          time in milliseconds to wait for answer."]
    #[doc = " @param  result           pointer to the result of the query"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    parameter error"]
    pub fn mdns_query_txt(
        instance_name: *const c_types::c_char,
        service_type: *const c_types::c_char,
        proto: *const c_types::c_char,
        timeout: u32,
        result: *mut *mut mdns_result_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Query mDNS for A record"]
    #[doc = ""]
    #[doc = " @param  host_name    host name to look for"]
    #[doc = " @param  timeout      time in milliseconds to wait for answer."]
    #[doc = " @param  addr         pointer to the resulting IP4 address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    parameter error"]
    pub fn mdns_query_a(
        host_name: *const c_types::c_char,
        timeout: u32,
        addr: *mut esp_ip4_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Query mDNS for A record"]
    #[doc = ""]
    #[doc = " Please note that hostname must not contain domain name, as mDNS uses '.local' domain."]
    #[doc = ""]
    #[doc = " @param  host_name    host name to look for"]
    #[doc = " @param  timeout      time in milliseconds to wait for answer. If 0, max_results needs to be defined"]
    #[doc = " @param  addr         pointer to the resulting IP6 address"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK success"]
    #[doc = "     - ESP_ERR_INVALID_STATE  mDNS is not running"]
    #[doc = "     - ESP_ERR_NO_MEM         memory error"]
    #[doc = "     - ESP_ERR_INVALID_ARG    parameter error"]
    pub fn mdns_query_aaaa(
        host_name: *const c_types::c_char,
        timeout: u32,
        addr: *mut esp_ip6_addr_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   System event handler"]
    #[doc = "          This method controls the service state on all active interfaces and applications are required"]
    #[doc = "          to call it from the system event handler for normal operation of mDNS service."]
    #[doc = ""]
    #[doc = " Please note that hostname must not contain domain name, as mDNS uses '.local' domain."]
    #[doc = ""]
    #[doc = " @param  ctx          The system event context"]
    #[doc = " @param  event        The system event"]
    pub fn mdns_handle_system_event(
        ctx: *mut c_types::c_void,
        event: *mut system_event_t,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_mqtt_client {
    _unused: [u8; 0],
}
pub type esp_mqtt_client_handle_t = *mut esp_mqtt_client;
pub const esp_mqtt_event_id_t_MQTT_EVENT_ANY: esp_mqtt_event_id_t = -1;
#[doc = "< on error event, additional context: connection return code, error handle from esp_tls (if supported)"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_ERROR: esp_mqtt_event_id_t = 0;
#[doc = "< connected event, additional context: session_present flag"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_CONNECTED: esp_mqtt_event_id_t = 1;
#[doc = "< disconnected event"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_DISCONNECTED: esp_mqtt_event_id_t = 2;
#[doc = "< subscribed event, additional context:"]
#[doc = "- msg_id               message id"]
#[doc = "- data                 pointer to the received data"]
#[doc = "- data_len             length of the data for this event"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_SUBSCRIBED: esp_mqtt_event_id_t = 3;
#[doc = "< unsubscribed event"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_UNSUBSCRIBED: esp_mqtt_event_id_t = 4;
#[doc = "< published event, additional context:  msg_id"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_PUBLISHED: esp_mqtt_event_id_t = 5;
#[doc = "< data event, additional context:"]
#[doc = "- msg_id               message id"]
#[doc = "- topic                pointer to the received topic"]
#[doc = "- topic_len            length of the topic"]
#[doc = "- data                 pointer to the received data"]
#[doc = "- data_len             length of the data for this event"]
#[doc = "- current_data_offset  offset of the current data for this event"]
#[doc = "- total_data_len       total length of the data received"]
#[doc = "- retain               retain flag of the message"]
#[doc = "- qos                  qos level of the message"]
#[doc = "- dup                  dup flag of the message"]
#[doc = "Note: Multiple MQTT_EVENT_DATA could be fired for one message, if it is"]
#[doc = "longer than internal buffer. In that case only first event contains topic"]
#[doc = "pointer and length, other contain data only with current data length"]
#[doc = "and current data offset updating."]
pub const esp_mqtt_event_id_t_MQTT_EVENT_DATA: esp_mqtt_event_id_t = 6;
#[doc = "< The event occurs before connecting"]
pub const esp_mqtt_event_id_t_MQTT_EVENT_BEFORE_CONNECT: esp_mqtt_event_id_t = 7;
#[doc = "< Notification on delete of one message from the internal outbox,"]
#[doc = "if the message couldn't have been sent and acknowledged before expiring"]
#[doc = "defined in OUTBOX_EXPIRED_TIMEOUT_MS."]
#[doc = "(events are not posted upon deletion of successfully acknowledged messages)"]
#[doc = "- This event id is posted only if MQTT_REPORT_DELETED_MESSAGES==1"]
#[doc = "- Additional context: msg_id (id of the deleted message)."]
pub const esp_mqtt_event_id_t_MQTT_EVENT_DELETED: esp_mqtt_event_id_t = 8;
#[doc = " @brief MQTT event types."]
#[doc = ""]
#[doc = " User event handler receives context data in `esp_mqtt_event_t` structure with"]
#[doc = "  - `user_context` - user data from `esp_mqtt_client_config_t`"]
#[doc = "  - `client` - mqtt client handle"]
#[doc = "  - various other data depending on event type"]
#[doc = ""]
pub type esp_mqtt_event_id_t = c_types::c_int;
#[doc = "< Connection accepted"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_ACCEPTED: esp_mqtt_connect_return_code_t =
    0;
#[doc = "< MQTT connection refused reason: Wrong protocol"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_REFUSE_PROTOCOL:
    esp_mqtt_connect_return_code_t = 1;
#[doc = "< MQTT connection refused reason: ID rejected"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_REFUSE_ID_REJECTED:
    esp_mqtt_connect_return_code_t = 2;
#[doc = "< MQTT connection refused reason: Server unavailable"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_REFUSE_SERVER_UNAVAILABLE:
    esp_mqtt_connect_return_code_t = 3;
#[doc = "< MQTT connection refused reason: Wrong user"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_REFUSE_BAD_USERNAME:
    esp_mqtt_connect_return_code_t = 4;
#[doc = "< MQTT connection refused reason: Wrong username or password"]
pub const esp_mqtt_connect_return_code_t_MQTT_CONNECTION_REFUSE_NOT_AUTHORIZED:
    esp_mqtt_connect_return_code_t = 5;
#[doc = " MQTT connection error codes propagated via ERROR event"]
pub type esp_mqtt_connect_return_code_t = c_types::c_uint;
pub const esp_mqtt_error_type_t_MQTT_ERROR_TYPE_NONE: esp_mqtt_error_type_t = 0;
pub const esp_mqtt_error_type_t_MQTT_ERROR_TYPE_TCP_TRANSPORT: esp_mqtt_error_type_t = 1;
pub const esp_mqtt_error_type_t_MQTT_ERROR_TYPE_CONNECTION_REFUSED: esp_mqtt_error_type_t = 2;
#[doc = " MQTT connection error codes propagated via ERROR event"]
pub type esp_mqtt_error_type_t = c_types::c_uint;
pub const esp_mqtt_transport_t_MQTT_TRANSPORT_UNKNOWN: esp_mqtt_transport_t = 0;
#[doc = "< MQTT over TCP, using scheme: ``mqtt``"]
pub const esp_mqtt_transport_t_MQTT_TRANSPORT_OVER_TCP: esp_mqtt_transport_t = 1;
#[doc = "< MQTT over SSL, using scheme: ``mqtts``"]
pub const esp_mqtt_transport_t_MQTT_TRANSPORT_OVER_SSL: esp_mqtt_transport_t = 2;
#[doc = "< MQTT over Websocket, using scheme:: ``ws``"]
pub const esp_mqtt_transport_t_MQTT_TRANSPORT_OVER_WS: esp_mqtt_transport_t = 3;
#[doc = "< MQTT over Websocket Secure, using scheme: ``wss``"]
pub const esp_mqtt_transport_t_MQTT_TRANSPORT_OVER_WSS: esp_mqtt_transport_t = 4;
pub type esp_mqtt_transport_t = c_types::c_uint;
pub const esp_mqtt_protocol_ver_t_MQTT_PROTOCOL_UNDEFINED: esp_mqtt_protocol_ver_t = 0;
pub const esp_mqtt_protocol_ver_t_MQTT_PROTOCOL_V_3_1: esp_mqtt_protocol_ver_t = 1;
pub const esp_mqtt_protocol_ver_t_MQTT_PROTOCOL_V_3_1_1: esp_mqtt_protocol_ver_t = 2;
#[doc = "  MQTT protocol version used for connection"]
pub type esp_mqtt_protocol_ver_t = c_types::c_uint;
#[doc = " @brief MQTT error code structure to be passed as a contextual information into ERROR event"]
#[doc = ""]
#[doc = " Important: This structure extends `esp_tls_last_error` error structure and is backward compatible with it"]
#[doc = " (so might be down-casted and treated as `esp_tls_last_error` error, but recommended to update applications if used this way previously)"]
#[doc = ""]
#[doc = " Use this structure directly checking error_type first and then appropriate error code depending on the source of the error:"]
#[doc = ""]
#[doc = " | error_type | related member variables | note |"]
#[doc = " | MQTT_ERROR_TYPE_TCP_TRANSPORT | esp_tls_last_esp_err, esp_tls_stack_err, esp_tls_cert_verify_flags, sock_errno | Error reported from tcp_transport/esp-tls |"]
#[doc = " | MQTT_ERROR_TYPE_CONNECTION_REFUSED | connect_return_code | Internal error reported from MQTT broker on connection |"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_mqtt_error_codes {
    #[doc = "< last esp_err code reported from esp-tls component"]
    pub esp_tls_last_esp_err: esp_err_t,
    #[doc = "< tls specific error code reported from underlying tls stack"]
    pub esp_tls_stack_err: c_types::c_int,
    #[doc = "< tls flags reported from underlying tls stack during certificate verification"]
    pub esp_tls_cert_verify_flags: c_types::c_int,
    #[doc = "< error type referring to the source of the error"]
    pub error_type: esp_mqtt_error_type_t,
    #[doc = "< connection refused error code reported from MQTT broker on connection"]
    pub connect_return_code: esp_mqtt_connect_return_code_t,
    #[doc = "< errno from the underlying socket"]
    pub esp_transport_sock_errno: c_types::c_int,
}
impl Default for esp_mqtt_error_codes {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief MQTT error code structure to be passed as a contextual information into ERROR event"]
#[doc = ""]
#[doc = " Important: This structure extends `esp_tls_last_error` error structure and is backward compatible with it"]
#[doc = " (so might be down-casted and treated as `esp_tls_last_error` error, but recommended to update applications if used this way previously)"]
#[doc = ""]
#[doc = " Use this structure directly checking error_type first and then appropriate error code depending on the source of the error:"]
#[doc = ""]
#[doc = " | error_type | related member variables | note |"]
#[doc = " | MQTT_ERROR_TYPE_TCP_TRANSPORT | esp_tls_last_esp_err, esp_tls_stack_err, esp_tls_cert_verify_flags, sock_errno | Error reported from tcp_transport/esp-tls |"]
#[doc = " | MQTT_ERROR_TYPE_CONNECTION_REFUSED | connect_return_code | Internal error reported from MQTT broker on connection |"]
pub type esp_mqtt_error_codes_t = esp_mqtt_error_codes;
#[doc = " MQTT event configuration structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_mqtt_event_t {
    #[doc = "< MQTT event type"]
    pub event_id: esp_mqtt_event_id_t,
    #[doc = "< MQTT client handle for this event"]
    pub client: esp_mqtt_client_handle_t,
    #[doc = "< User context passed from MQTT client config"]
    pub user_context: *mut c_types::c_void,
    #[doc = "< Data associated with this event"]
    pub data: *mut c_types::c_char,
    #[doc = "< Length of the data for this event"]
    pub data_len: c_types::c_int,
    #[doc = "< Total length of the data (longer data are supplied with multiple events)"]
    pub total_data_len: c_types::c_int,
    #[doc = "< Actual offset for the data associated with this event"]
    pub current_data_offset: c_types::c_int,
    #[doc = "< Topic associated with this event"]
    pub topic: *mut c_types::c_char,
    #[doc = "< Length of the topic for this event associated with this event"]
    pub topic_len: c_types::c_int,
    #[doc = "< MQTT messaged id of message"]
    pub msg_id: c_types::c_int,
    #[doc = "< MQTT session_present flag for connection event"]
    pub session_present: c_types::c_int,
    #[doc = "< esp-mqtt error handle including esp-tls errors as well as internal mqtt errors"]
    pub error_handle: *mut esp_mqtt_error_codes_t,
    #[doc = "< Retained flag of the message associated with this event"]
    pub retain: bool,
    #[doc = "< qos of the messages associated with this event"]
    pub qos: c_types::c_int,
    #[doc = "< dup flag of the message associated with this event"]
    pub dup: bool,
}
impl Default for esp_mqtt_event_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type esp_mqtt_event_handle_t = *mut esp_mqtt_event_t;
pub type mqtt_event_callback_t =
    ::core::option::Option<unsafe extern "C" fn(event: esp_mqtt_event_handle_t) -> esp_err_t>;
#[doc = " MQTT client configuration structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_mqtt_client_config_t {
    #[doc = "< handle for MQTT events as a callback in legacy mode"]
    pub event_handle: mqtt_event_callback_t,
    #[doc = "< handle for MQTT event loop library"]
    pub event_loop_handle: esp_event_loop_handle_t,
    #[doc = "< MQTT server domain (ipv4 as string)"]
    pub host: *const c_types::c_char,
    #[doc = "< Complete MQTT broker URI"]
    pub uri: *const c_types::c_char,
    #[doc = "< MQTT server port"]
    pub port: u32,
    #[doc = "< Selects a NULL client id"]
    pub set_null_client_id: bool,
    #[doc = "< Set client id."]
    #[doc = "Ignored if set_null_client_id == true"]
    #[doc = "If NULL set the default client id."]
    #[doc = "Default client id is ``ESP32_%CHIPID%`` where %CHIPID% are last 3 bytes of MAC address in hex format"]
    pub client_id: *const c_types::c_char,
    #[doc = "< MQTT username"]
    pub username: *const c_types::c_char,
    #[doc = "< MQTT password"]
    pub password: *const c_types::c_char,
    #[doc = "< LWT (Last Will and Testament) message topic (NULL by default)"]
    pub lwt_topic: *const c_types::c_char,
    #[doc = "< LWT message (NULL by default)"]
    pub lwt_msg: *const c_types::c_char,
    #[doc = "< LWT message qos"]
    pub lwt_qos: c_types::c_int,
    #[doc = "< LWT retained message flag"]
    pub lwt_retain: c_types::c_int,
    #[doc = "< LWT message length"]
    pub lwt_msg_len: c_types::c_int,
    #[doc = "< mqtt clean session, default clean_session is true"]
    pub disable_clean_session: c_types::c_int,
    #[doc = "< mqtt keepalive, default is 120 seconds"]
    pub keepalive: c_types::c_int,
    #[doc = "< this mqtt client will reconnect to server (when errors/disconnect). Set disable_auto_reconnect=true to disable"]
    pub disable_auto_reconnect: bool,
    #[doc = "< pass user context to this option, then can receive that context in ``event->user_context``"]
    pub user_context: *mut c_types::c_void,
    #[doc = "< MQTT task priority, default is 5, can be changed in ``make menuconfig``"]
    pub task_prio: c_types::c_int,
    #[doc = "< MQTT task stack size, default is 6144 bytes, can be changed in ``make menuconfig``"]
    pub task_stack: c_types::c_int,
    #[doc = "< size of MQTT send/receive buffer, default is 1024 (only receive buffer size if ``out_buffer_size`` defined)"]
    pub buffer_size: c_types::c_int,
    #[doc = "< Pointer to certificate data in PEM or DER format for server verify (with SSL), default is NULL, not required to verify the server. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in cert_len."]
    pub cert_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by cert_pem. May be 0 for null-terminated pem"]
    pub cert_len: size_t,
    #[doc = "< Pointer to certificate data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_key_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_cert_len."]
    pub client_cert_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_cert_pem. May be 0 for null-terminated pem"]
    pub client_cert_len: size_t,
    #[doc = "< Pointer to private key data in PEM or DER format for SSL mutual authentication, default is NULL, not required if mutual authentication is not needed. If it is not NULL, also `client_cert_pem` has to be provided. PEM-format must have a terminating NULL-character. DER-format requires the length to be passed in client_key_len"]
    pub client_key_pem: *const c_types::c_char,
    #[doc = "< Length of the buffer pointed to by client_key_pem. May be 0 for null-terminated pem"]
    pub client_key_len: size_t,
    #[doc = "< overrides URI transport"]
    pub transport: esp_mqtt_transport_t,
    #[doc = "< Refresh connection after this value (in milliseconds)"]
    pub refresh_connection_after_ms: c_types::c_int,
    #[doc = "< Pointer to PSK struct defined in esp_tls.h to enable PSK authentication (as alternative to certificate verification). If not NULL and server/client certificates are NULL, PSK is enabled"]
    pub psk_hint_key: *const psk_key_hint,
    #[doc = "< Use a global ca_store for all the connections in which this bool is set."]
    pub use_global_ca_store: bool,
    #[doc = "< Pointer to ESP x509 Certificate Bundle attach function for the usage of certification bundles in mqtts"]
    pub crt_bundle_attach:
        ::core::option::Option<unsafe extern "C" fn(conf: *mut c_types::c_void) -> esp_err_t>,
    #[doc = "< Reconnect to the broker after this value in miliseconds if auto reconnect is not disabled (defaults to 10s)"]
    pub reconnect_timeout_ms: c_types::c_int,
    #[doc = "< NULL-terminated list of supported application protocols to be used for ALPN"]
    pub alpn_protos: *mut *const c_types::c_char,
    #[doc = "< Client key decryption password string"]
    pub clientkey_password: *const c_types::c_char,
    #[doc = "< String length of the password pointed to by clientkey_password"]
    pub clientkey_password_len: c_types::c_int,
    #[doc = "< MQTT protocol version used for connection, defaults to value from menuconfig"]
    pub protocol_ver: esp_mqtt_protocol_ver_t,
    #[doc = "< size of MQTT output buffer. If not defined, both output and input buffers have the same size defined as ``buffer_size``"]
    pub out_buffer_size: c_types::c_int,
    #[doc = "< Skip any validation of server certificate CN field, this reduces the security of TLS and makes the mqtt client susceptible to MITM attacks"]
    pub skip_cert_common_name_check: bool,
    #[doc = "< enable secure element for enabling SSL connection"]
    pub use_secure_element: bool,
    #[doc = "< carrier of handle for digital signature parameters"]
    pub ds_data: *mut c_types::c_void,
    #[doc = "< Abort network operation if it is not completed after this value, in milliseconds (defaults to 10s)"]
    pub network_timeout_ms: c_types::c_int,
    #[doc = "< Set disable_keepalive=true to turn off keep-alive mechanism, false by default (keepalive is active by default). Note: setting the config value `keepalive` to `0` doesn't disable keepalive feature, but uses a default keepalive period"]
    pub disable_keepalive: bool,
    #[doc = "< Path in the URI"]
    pub path: *const c_types::c_char,
    #[doc = "< timeout for retansmit of failded packet"]
    pub message_retransmit_timeout: c_types::c_int,
}
impl Default for esp_mqtt_client_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Creates mqtt client handle based on the configuration"]
    #[doc = ""]
    #[doc = " @param config    mqtt configuration structure"]
    #[doc = ""]
    #[doc = " @return mqtt_client_handle if successfully created, NULL on error"]
    pub fn esp_mqtt_client_init(
        config: *const esp_mqtt_client_config_t,
    ) -> esp_mqtt_client_handle_t;
}
extern "C" {
    #[doc = " @brief Sets mqtt connection URI. This API is usually used to overrides the URI"]
    #[doc = " configured in esp_mqtt_client_init"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = " @param uri"]
    #[doc = ""]
    #[doc = " @return ESP_FAIL if URI parse error, ESP_OK on success"]
    pub fn esp_mqtt_client_set_uri(
        client: esp_mqtt_client_handle_t,
        uri: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Starts mqtt client with already created client handle"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    #[doc = "         ESP_FAIL on other error"]
    pub fn esp_mqtt_client_start(client: esp_mqtt_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief This api is typically used to force reconnection upon a specific event"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    #[doc = "         ESP_FAIL if client is in invalid state"]
    pub fn esp_mqtt_client_reconnect(client: esp_mqtt_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief This api is typically used to force disconnection from the broker"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    pub fn esp_mqtt_client_disconnect(client: esp_mqtt_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stops mqtt client tasks"]
    #[doc = ""]
    #[doc = "  * Notes:"]
    #[doc = "  - Cannot be called from the mqtt event handler"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @return ESP_OK on success"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    #[doc = "         ESP_FAIL if client is in invalid state"]
    pub fn esp_mqtt_client_stop(client: esp_mqtt_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Subscribe the client to defined topic with defined qos"]
    #[doc = ""]
    #[doc = " Notes:"]
    #[doc = " - Client must be connected to send subscribe message"]
    #[doc = " - This API is could be executed from a user task or"]
    #[doc = " from a mqtt event callback i.e. internal mqtt task"]
    #[doc = " (API is protected by internal mutex, so it might block"]
    #[doc = " if a longer data receive operation is in progress."]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = " @param topic"]
    #[doc = " @param qos"]
    #[doc = ""]
    #[doc = " @return message_id of the subscribe message on success"]
    #[doc = "         -1 on failure"]
    pub fn esp_mqtt_client_subscribe(
        client: esp_mqtt_client_handle_t,
        topic: *const c_types::c_char,
        qos: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Unsubscribe the client from defined topic"]
    #[doc = ""]
    #[doc = " Notes:"]
    #[doc = " - Client must be connected to send unsubscribe message"]
    #[doc = " - It is thread safe, please refer to `esp_mqtt_client_subscribe` for details"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = " @param topic"]
    #[doc = ""]
    #[doc = " @return message_id of the subscribe message on success"]
    #[doc = "         -1 on failure"]
    pub fn esp_mqtt_client_unsubscribe(
        client: esp_mqtt_client_handle_t,
        topic: *const c_types::c_char,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Client to send a publish message to the broker"]
    #[doc = ""]
    #[doc = " Notes:"]
    #[doc = " - This API might block for several seconds, either due to network timeout (10s)"]
    #[doc = "   or if publishing payloads longer than internal buffer (due to message"]
    #[doc = "   fragmentation)"]
    #[doc = " - Client doesn't have to be connected for this API to work, enqueueing the messages"]
    #[doc = "   with qos>1 (returning -1 for all the qos=0 messages if disconnected)."]
    #[doc = "   If MQTT_SKIP_PUBLISH_IF_DISCONNECTED is enabled, this API will not attempt to publish"]
    #[doc = "   when the client is not connected and will always return -1."]
    #[doc = " - It is thread safe, please refer to `esp_mqtt_client_subscribe` for details"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = " @param topic     topic string"]
    #[doc = " @param data      payload string (set to NULL, sending empty payload message)"]
    #[doc = " @param len       data length, if set to 0, length is calculated from payload string"]
    #[doc = " @param qos       qos of publish message"]
    #[doc = " @param retain    retain flag"]
    #[doc = ""]
    #[doc = " @return message_id of the publish message (for QoS 0 message_id will always be zero) on success."]
    #[doc = "         -1 on failure."]
    pub fn esp_mqtt_client_publish(
        client: esp_mqtt_client_handle_t,
        topic: *const c_types::c_char,
        data: *const c_types::c_char,
        len: c_types::c_int,
        qos: c_types::c_int,
        retain: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Enqueue a message to the outbox, to be sent later. Typically used for messages with qos>0, but could"]
    #[doc = " be also used for qos=0 messages if store=true."]
    #[doc = ""]
    #[doc = " This API generates and stores the publish message into the internal outbox and the actual sending"]
    #[doc = " to the network is performed in the mqtt-task context (in contrast to the esp_mqtt_client_publish()"]
    #[doc = " which sends the publish message immediately in the user task's context)."]
    #[doc = " Thus, it could be used as a non blocking version of esp_mqtt_client_publish()."]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = " @param topic     topic string"]
    #[doc = " @param data      payload string (set to NULL, sending empty payload message)"]
    #[doc = " @param len       data length, if set to 0, length is calculated from payload string"]
    #[doc = " @param qos       qos of publish message"]
    #[doc = " @param retain    retain flag"]
    #[doc = " @param store     if true, all messages are enqueued; otherwise only qos1 and qos 2 are enqueued"]
    #[doc = ""]
    #[doc = " @return message_id if queued successfully, -1 otherwise"]
    pub fn esp_mqtt_client_enqueue(
        client: esp_mqtt_client_handle_t,
        topic: *const c_types::c_char,
        data: *const c_types::c_char,
        len: c_types::c_int,
        qos: c_types::c_int,
        retain: c_types::c_int,
        store: bool,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Destroys the client handle"]
    #[doc = ""]
    #[doc = " Notes:"]
    #[doc = "  - Cannot be called from the mqtt event handler"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @return ESP_OK"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    pub fn esp_mqtt_client_destroy(client: esp_mqtt_client_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set configuration structure, typically used when updating the config (i.e. on \"before_connect\" event"]
    #[doc = ""]
    #[doc = " @param client    mqtt client handle"]
    #[doc = ""]
    #[doc = " @param config    mqtt configuration structure"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_NO_MEM if failed to allocate"]
    #[doc = "         ESP_ERR_INVALID_ARG if conflicts on transport configuration."]
    #[doc = "         ESP_OK on success"]
    pub fn esp_mqtt_set_config(
        client: esp_mqtt_client_handle_t,
        config: *const esp_mqtt_client_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Registers mqtt event"]
    #[doc = ""]
    #[doc = " @param client            mqtt client handle"]
    #[doc = " @param event             event type"]
    #[doc = " @param event_handler     handler callback"]
    #[doc = " @param event_handler_arg handlers context"]
    #[doc = ""]
    #[doc = " @return ESP_ERR_NO_MEM if failed to allocate"]
    #[doc = "         ESP_ERR_INVALID_ARG on wrong initialization"]
    #[doc = "         ESP_OK on success"]
    pub fn esp_mqtt_client_register_event(
        client: esp_mqtt_client_handle_t,
        event: esp_mqtt_event_id_t,
        event_handler: esp_event_handler_t,
        event_handler_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get outbox size"]
    #[doc = ""]
    #[doc = " @param client            mqtt client handle"]
    #[doc = " @return outbox size"]
    #[doc = "         0 on wrong initialization"]
    pub fn esp_mqtt_client_get_outbox_size(client: esp_mqtt_client_handle_t) -> c_types::c_int;
}
#[doc = " Opaque pointer type representing non-volatile storage handle"]
pub type nvs_handle_t = u32;
pub type nvs_handle = nvs_handle_t;
#[doc = "< Read only"]
pub const nvs_open_mode_t_NVS_READONLY: nvs_open_mode_t = 0;
#[doc = "< Read and write"]
pub const nvs_open_mode_t_NVS_READWRITE: nvs_open_mode_t = 1;
#[doc = " @brief Mode of opening the non-volatile storage"]
pub type nvs_open_mode_t = c_types::c_uint;
#[doc = " @brief Mode of opening the non-volatile storage"]
pub use self::nvs_open_mode_t as nvs_open_mode;
#[doc = "< Type uint8_t"]
pub const nvs_type_t_NVS_TYPE_U8: nvs_type_t = 1;
#[doc = "< Type int8_t"]
pub const nvs_type_t_NVS_TYPE_I8: nvs_type_t = 17;
#[doc = "< Type uint16_t"]
pub const nvs_type_t_NVS_TYPE_U16: nvs_type_t = 2;
#[doc = "< Type int16_t"]
pub const nvs_type_t_NVS_TYPE_I16: nvs_type_t = 18;
#[doc = "< Type uint32_t"]
pub const nvs_type_t_NVS_TYPE_U32: nvs_type_t = 4;
#[doc = "< Type int32_t"]
pub const nvs_type_t_NVS_TYPE_I32: nvs_type_t = 20;
#[doc = "< Type uint64_t"]
pub const nvs_type_t_NVS_TYPE_U64: nvs_type_t = 8;
#[doc = "< Type int64_t"]
pub const nvs_type_t_NVS_TYPE_I64: nvs_type_t = 24;
#[doc = "< Type string"]
pub const nvs_type_t_NVS_TYPE_STR: nvs_type_t = 33;
#[doc = "< Type blob"]
pub const nvs_type_t_NVS_TYPE_BLOB: nvs_type_t = 66;
#[doc = "< Must be last"]
pub const nvs_type_t_NVS_TYPE_ANY: nvs_type_t = 255;
#[doc = " @brief Types of variables"]
#[doc = ""]
pub type nvs_type_t = c_types::c_uint;
#[doc = " @brief information about entry obtained from nvs_entry_info function"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvs_entry_info_t {
    #[doc = "< Namespace to which key-value belong"]
    pub namespace_name: [c_types::c_char; 16usize],
    #[doc = "< Key of stored key-value pair"]
    pub key: [c_types::c_char; 16usize],
    #[doc = "< Type of stored key-value pair"]
    pub type_: nvs_type_t,
}
impl Default for nvs_entry_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvs_opaque_iterator_t {
    _unused: [u8; 0],
}
#[doc = " Opaque pointer type representing iterator to nvs entries"]
pub type nvs_iterator_t = *mut nvs_opaque_iterator_t;
extern "C" {
    #[doc = " @brief      Open non-volatile storage with a given namespace from the default NVS partition"]
    #[doc = ""]
    #[doc = " Multiple internal ESP-IDF and third party application modules can store"]
    #[doc = " their key-value pairs in the NVS module. In order to reduce possible"]
    #[doc = " conflicts on key names, each module can use its own namespace."]
    #[doc = " The default NVS partition is the one that is labelled \"nvs\" in the partition"]
    #[doc = " table."]
    #[doc = ""]
    #[doc = " @param[in]  name        Namespace name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[in]  open_mode   NVS_READWRITE or NVS_READONLY. If NVS_READONLY, will"]
    #[doc = "                         open a handle for reading only. All write requests will"]
    #[doc = "             be rejected for this handle."]
    #[doc = " @param[out] out_handle  If successful (return code is zero), handle will be"]
    #[doc = "                         returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if storage handle was opened successfully"]
    #[doc = "             - ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized"]
    #[doc = "             - ESP_ERR_NVS_PART_NOT_FOUND if the partition with label \"nvs\" is not found"]
    #[doc = "             - ESP_ERR_NVS_NOT_FOUND id namespace doesn't exist yet and"]
    #[doc = "               mode is NVS_READONLY"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if namespace name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "             - other error codes from the underlying storage driver"]
    pub fn nvs_open(
        name: *const c_types::c_char,
        open_mode: nvs_open_mode_t,
        out_handle: *mut nvs_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Open non-volatile storage with a given namespace from specified partition"]
    #[doc = ""]
    #[doc = " The behaviour is same as nvs_open() API. However this API can operate on a specified NVS"]
    #[doc = " partition instead of default NVS partition. Note that the specified partition must be registered"]
    #[doc = " with NVS using nvs_flash_init_partition() API."]
    #[doc = ""]
    #[doc = " @param[in]  part_name   Label (name) of the partition of interest for object read/write/erase"]
    #[doc = " @param[in]  name        Namespace name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[in]  open_mode   NVS_READWRITE or NVS_READONLY. If NVS_READONLY, will"]
    #[doc = "                         open a handle for reading only. All write requests will"]
    #[doc = "             be rejected for this handle."]
    #[doc = " @param[out] out_handle  If successful (return code is zero), handle will be"]
    #[doc = "                         returned in this argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if storage handle was opened successfully"]
    #[doc = "             - ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized"]
    #[doc = "             - ESP_ERR_NVS_PART_NOT_FOUND if the partition with specified name is not found"]
    #[doc = "             - ESP_ERR_NVS_NOT_FOUND id namespace doesn't exist yet and"]
    #[doc = "               mode is NVS_READONLY"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if namespace name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "             - other error codes from the underlying storage driver"]
    pub fn nvs_open_from_partition(
        part_name: *const c_types::c_char,
        name: *const c_types::c_char,
        open_mode: nvs_open_mode_t,
        out_handle: *mut nvs_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = "@{*/"]
    #[doc = " @brief      set int8_t value for given key"]
    #[doc = ""]
    #[doc = " Set value for the key, given its name. Note that the actual storage will not be updated"]
    #[doc = " until \\c nvs_commit is called."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle obtained from nvs_open function."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = " @param[in]  key     Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[in]  value   The value to set."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if value was set successfully"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the"]
    #[doc = "               underlying storage to save the value"]
    #[doc = "             - ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash"]
    #[doc = "               write operation has failed. The value was written however, and"]
    #[doc = "               update will be finished after re-initialization of nvs, provided that"]
    #[doc = "               flash operation doesn't fail again."]
    pub fn nvs_set_i8(handle: nvs_handle_t, key: *const c_types::c_char, value: i8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set uint8_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_u8(handle: nvs_handle_t, key: *const c_types::c_char, value: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set int16_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_i16(handle: nvs_handle_t, key: *const c_types::c_char, value: i16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set uint16_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_u16(handle: nvs_handle_t, key: *const c_types::c_char, value: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set int32_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_i32(handle: nvs_handle_t, key: *const c_types::c_char, value: i32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set uint32_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_u32(handle: nvs_handle_t, key: *const c_types::c_char, value: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set int64_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_i64(handle: nvs_handle_t, key: *const c_types::c_char, value: i64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set uint64_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_set_i8 except for the data type."]
    pub fn nvs_set_u64(handle: nvs_handle_t, key: *const c_types::c_char, value: u64) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      set string for given key"]
    #[doc = ""]
    #[doc = " Set value for the key, given its name. Note that the actual storage will not be updated"]
    #[doc = " until \\c nvs_commit is called."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle obtained from nvs_open function."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = " @param[in]  key     Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[in]  value   The value to set."]
    #[doc = "                     For strings, the maximum length (including null character) is"]
    #[doc = "                     4000 bytes, if there is one complete page free for writing."]
    #[doc = "                     This decreases, however, if the free space is fragmented."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if value was set successfully"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the"]
    #[doc = "               underlying storage to save the value"]
    #[doc = "             - ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash"]
    #[doc = "               write operation has failed. The value was written however, and"]
    #[doc = "               update will be finished after re-initialization of nvs, provided that"]
    #[doc = "               flash operation doesn't fail again."]
    #[doc = "             - ESP_ERR_NVS_VALUE_TOO_LONG if the string value is too long"]
    pub fn nvs_set_str(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        value: *const c_types::c_char,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief       set variable length binary value for given key"]
    #[doc = ""]
    #[doc = " This family of functions set value for the key, given its name. Note that"]
    #[doc = " actual storage will not be updated until nvs_commit function is called."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Handle obtained from nvs_open function."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = " @param[in]  key     Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[in]  value   The value to set."]
    #[doc = " @param[in]  length  length of binary value to set, in bytes; Maximum length is"]
    #[doc = "                     508000 bytes or (97.6% of the partition size - 4000) bytes"]
    #[doc = "                     whichever is lower."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if value was set successfully"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - ESP_ERR_NVS_READ_ONLY if storage handle was opened as read only"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NVS_NOT_ENOUGH_SPACE if there is not enough space in the"]
    #[doc = "               underlying storage to save the value"]
    #[doc = "             - ESP_ERR_NVS_REMOVE_FAILED if the value wasn't updated because flash"]
    #[doc = "               write operation has failed. The value was written however, and"]
    #[doc = "               update will be finished after re-initialization of nvs, provided that"]
    #[doc = "               flash operation doesn't fail again."]
    #[doc = "             - ESP_ERR_NVS_VALUE_TOO_LONG if the value is too long"]
    pub fn nvs_set_blob(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        value: *const c_types::c_void,
        length: size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = "@{*/"]
    #[doc = " @brief      get int8_t value for given key"]
    #[doc = ""]
    #[doc = " These functions retrieve value for the key, given its name. If \\c key does not"]
    #[doc = " exist, or the requested variable type doesn't match the type which was used"]
    #[doc = " when setting a value, an error is returned."]
    #[doc = ""]
    #[doc = " In case of any error, out_value is not modified."]
    #[doc = ""]
    #[doc = " \\c out_value has to be a pointer to an already allocated variable of the given type."]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example of using nvs_get_i32:"]
    #[doc = " int32_t max_buffer_size = 4096; // default value"]
    #[doc = " esp_err_t err = nvs_get_i32(my_handle, \"max_buffer_size\", &max_buffer_size);"]
    #[doc = " assert(err == ESP_OK || err == ESP_ERR_NVS_NOT_FOUND);"]
    #[doc = " // if ESP_ERR_NVS_NOT_FOUND was returned, max_buffer_size will still"]
    #[doc = " // have its default value."]
    #[doc = ""]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @param[in]     handle     Handle obtained from nvs_open function."]
    #[doc = " @param[in]     key        Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param         out_value  Pointer to the output value."]
    #[doc = "                           May be NULL for nvs_get_str and nvs_get_blob, in this"]
    #[doc = "                           case required length will be returned in length argument."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if the value was retrieved successfully"]
    #[doc = "             - ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NVS_INVALID_LENGTH if length is not sufficient to store data"]
    pub fn nvs_get_i8(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut i8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get uint8_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_u8(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get int16_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_i16(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut i16,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get uint16_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_u16(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut u16,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get int32_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_i32(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut i32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get uint32_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_u32(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get int64_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_i64(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut i64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get uint64_t value for given key"]
    #[doc = ""]
    #[doc = " This function is the same as \\c nvs_get_i8 except for the data type."]
    pub fn nvs_get_u64(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut u64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = "@{*/"]
    #[doc = " @brief      get string value for given key"]
    #[doc = ""]
    #[doc = " These functions retrieve the data of an entry, given its key. If key does not"]
    #[doc = " exist, or the requested variable type doesn't match the type which was used"]
    #[doc = " when setting a value, an error is returned."]
    #[doc = ""]
    #[doc = " In case of any error, out_value is not modified."]
    #[doc = ""]
    #[doc = " All functions expect out_value to be a pointer to an already allocated variable"]
    #[doc = " of the given type."]
    #[doc = ""]
    #[doc = " nvs_get_str and nvs_get_blob functions support WinAPI-style length queries."]
    #[doc = " To get the size necessary to store the value, call nvs_get_str or nvs_get_blob"]
    #[doc = " with zero out_value and non-zero pointer to length. Variable pointed to"]
    #[doc = " by length argument will be set to the required length. For nvs_get_str,"]
    #[doc = " this length includes the zero terminator. When calling nvs_get_str and"]
    #[doc = " nvs_get_blob with non-zero out_value, length has to be non-zero and has to"]
    #[doc = " point to the length available in out_value."]
    #[doc = " It is suggested that nvs_get/set_str is used for zero-terminated C strings, and"]
    #[doc = " nvs_get/set_blob used for arbitrary data structures."]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example (without error checking) of using nvs_get_str to get a string into dynamic array:"]
    #[doc = " size_t required_size;"]
    #[doc = " nvs_get_str(my_handle, \"server_name\", NULL, &required_size);"]
    #[doc = " char* server_name = malloc(required_size);"]
    #[doc = " nvs_get_str(my_handle, \"server_name\", server_name, &required_size);"]
    #[doc = ""]
    #[doc = " // Example (without error checking) of using nvs_get_blob to get a binary data"]
    #[doc = " into a static array:"]
    #[doc = " uint8_t mac_addr[6];"]
    #[doc = " size_t size = sizeof(mac_addr);"]
    #[doc = " nvs_get_blob(my_handle, \"dst_mac_addr\", mac_addr, &size);"]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @param[in]     handle     Handle obtained from nvs_open function."]
    #[doc = " @param[in]     key        Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = " @param[out]    out_value  Pointer to the output value."]
    #[doc = "                           May be NULL for nvs_get_str and nvs_get_blob, in this"]
    #[doc = "                           case required length will be returned in length argument."]
    #[doc = " @param[inout]  length     A non-zero pointer to the variable holding the length of out_value."]
    #[doc = "                           In case out_value a zero, will be set to the length"]
    #[doc = "                           required to hold the value. In case out_value is not"]
    #[doc = "                           zero, will be set to the actual length of the value"]
    #[doc = "                           written. For nvs_get_str this includes zero terminator."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if the value was retrieved successfully"]
    #[doc = "             - ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - ESP_ERR_NVS_INVALID_NAME if key name doesn't satisfy constraints"]
    #[doc = "             - ESP_ERR_NVS_INVALID_LENGTH if \\c length is not sufficient to store data"]
    pub fn nvs_get_str(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut c_types::c_char,
        length: *mut size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      get blob value for given key"]
    #[doc = ""]
    #[doc = " This function behaves the same as \\c nvs_get_str, except for the data type."]
    pub fn nvs_get_blob(
        handle: nvs_handle_t,
        key: *const c_types::c_char,
        out_value: *mut c_types::c_void,
        length: *mut size_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Erase key-value pair with given key name."]
    #[doc = ""]
    #[doc = " Note that actual storage may not be updated until nvs_commit function is called."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Storage handle obtained with nvs_open."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = ""]
    #[doc = " @param[in]  key     Key name. Maximal length is (NVS_KEY_NAME_MAX_SIZE-1) characters. Shouldn't be empty."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "              - ESP_OK if erase operation was successful"]
    #[doc = "              - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "              - ESP_ERR_NVS_READ_ONLY if handle was opened as read only"]
    #[doc = "              - ESP_ERR_NVS_NOT_FOUND if the requested key doesn't exist"]
    #[doc = "              - other error codes from the underlying storage driver"]
    pub fn nvs_erase_key(handle: nvs_handle_t, key: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Erase all key-value pairs in a namespace"]
    #[doc = ""]
    #[doc = " Note that actual storage may not be updated until nvs_commit function is called."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Storage handle obtained with nvs_open."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "              - ESP_OK if erase operation was successful"]
    #[doc = "              - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "              - ESP_ERR_NVS_READ_ONLY if handle was opened as read only"]
    #[doc = "              - other error codes from the underlying storage driver"]
    pub fn nvs_erase_all(handle: nvs_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Write any pending changes to non-volatile storage"]
    #[doc = ""]
    #[doc = " After setting any values, nvs_commit() must be called to ensure changes are written"]
    #[doc = " to non-volatile storage. Individual implementations may write to storage at other times,"]
    #[doc = " but this is not guaranteed."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Storage handle obtained with nvs_open."]
    #[doc = "                     Handles that were opened read only cannot be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if the changes have been written successfully"]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL"]
    #[doc = "             - other error codes from the underlying storage driver"]
    pub fn nvs_commit(handle: nvs_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Close the storage handle and free any allocated resources"]
    #[doc = ""]
    #[doc = " This function should be called for each handle opened with nvs_open once"]
    #[doc = " the handle is not in use any more. Closing the handle may not automatically"]
    #[doc = " write the changes to nonvolatile storage. This has to be done explicitly using"]
    #[doc = " nvs_commit function."]
    #[doc = " Once this function is called on a handle, the handle should no longer be used."]
    #[doc = ""]
    #[doc = " @param[in]  handle  Storage handle to close"]
    pub fn nvs_close(handle: nvs_handle_t);
}
#[doc = " @note Info about storage space NVS."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvs_stats_t {
    #[doc = "< Amount of used entries."]
    pub used_entries: size_t,
    #[doc = "< Amount of free entries."]
    pub free_entries: size_t,
    #[doc = "< Amount all available entries."]
    pub total_entries: size_t,
    #[doc = "< Amount name space."]
    pub namespace_count: size_t,
}
extern "C" {
    #[doc = " @brief      Fill structure nvs_stats_t. It provides info about used memory the partition."]
    #[doc = ""]
    #[doc = " This function calculates to runtime the number of used entries, free entries, total entries,"]
    #[doc = " and amount namespace in partition."]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example of nvs_get_stats() to get the number of used entries and free entries:"]
    #[doc = " nvs_stats_t nvs_stats;"]
    #[doc = " nvs_get_stats(NULL, &nvs_stats);"]
    #[doc = " printf(\"Count: UsedEntries = (%d), FreeEntries = (%d), AllEntries = (%d)\\n\","]
    #[doc = "nvs_stats.used_entries, nvs_stats.free_entries, nvs_stats.total_entries);"]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @param[in]   part_name   Partition name NVS in the partition table."]
    #[doc = "                          If pass a NULL than will use NVS_DEFAULT_PART_NAME (\"nvs\")."]
    #[doc = ""]
    #[doc = " @param[out]  nvs_stats   Returns filled structure nvs_states_t."]
    #[doc = "                          It provides info about used memory the partition."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if the changes have been written successfully."]
    #[doc = "               Return param nvs_stats will be filled."]
    #[doc = "             - ESP_ERR_NVS_PART_NOT_FOUND if the partition with label \"name\" is not found."]
    #[doc = "               Return param nvs_stats will be filled 0."]
    #[doc = "             - ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized."]
    #[doc = "               Return param nvs_stats will be filled 0."]
    #[doc = "             - ESP_ERR_INVALID_ARG if nvs_stats equal to NULL."]
    #[doc = "             - ESP_ERR_INVALID_STATE if there is page with the status of INVALID."]
    #[doc = "               Return param nvs_stats will be filled not with correct values because"]
    #[doc = "               not all pages will be counted. Counting will be interrupted at the first INVALID page."]
    pub fn nvs_get_stats(
        part_name: *const c_types::c_char,
        nvs_stats: *mut nvs_stats_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      Calculate all entries in a namespace."]
    #[doc = ""]
    #[doc = " An entry represents the smallest storage unit in NVS."]
    #[doc = " Strings and blobs may occupy more than one entry."]
    #[doc = " Note that to find out the total number of entries occupied by the namespace,"]
    #[doc = " add one to the returned value used_entries (if err is equal to ESP_OK)."]
    #[doc = " Because the name space entry takes one entry."]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example of nvs_get_used_entry_count() to get amount of all key-value pairs in one namespace:"]
    #[doc = " nvs_handle_t handle;"]
    #[doc = " nvs_open(\"namespace1\", NVS_READWRITE, &handle);"]
    #[doc = " ..."]
    #[doc = " size_t used_entries;"]
    #[doc = " size_t total_entries_namespace;"]
    #[doc = " if(nvs_get_used_entry_count(handle, &used_entries) == ESP_OK){"]
    #[doc = "     // the total number of entries occupied by the namespace"]
    #[doc = "     total_entries_namespace = used_entries + 1;"]
    #[doc = " }"]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @param[in]   handle              Handle obtained from nvs_open function."]
    #[doc = ""]
    #[doc = " @param[out]  used_entries        Returns amount of used entries from a namespace."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "             - ESP_OK if the changes have been written successfully."]
    #[doc = "               Return param used_entries will be filled valid value."]
    #[doc = "             - ESP_ERR_NVS_NOT_INITIALIZED if the storage driver is not initialized."]
    #[doc = "               Return param used_entries will be filled 0."]
    #[doc = "             - ESP_ERR_NVS_INVALID_HANDLE if handle has been closed or is NULL."]
    #[doc = "               Return param used_entries will be filled 0."]
    #[doc = "             - ESP_ERR_INVALID_ARG if used_entries equal to NULL."]
    #[doc = "             - Other error codes from the underlying storage driver."]
    #[doc = "               Return param used_entries will be filled 0."]
    pub fn nvs_get_used_entry_count(handle: nvs_handle_t, used_entries: *mut size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief       Create an iterator to enumerate NVS entries based on one or more parameters"]
    #[doc = ""]
    #[doc = " \\code{c}"]
    #[doc = " // Example of listing all the key-value pairs of any type under specified partition and namespace"]
    #[doc = " nvs_iterator_t it = nvs_entry_find(partition, namespace, NVS_TYPE_ANY);"]
    #[doc = " while (it != NULL) {"]
    #[doc = "         nvs_entry_info_t info;"]
    #[doc = "         nvs_entry_info(it, &info);"]
    #[doc = "         it = nvs_entry_next(it);"]
    #[doc = "         printf(\"key '%s', type '%d' \\n\", info.key, info.type);"]
    #[doc = " };"]
    #[doc = " // Note: no need to release iterator obtained from nvs_entry_find function when"]
    #[doc = " //       nvs_entry_find or nvs_entry_next function return NULL, indicating no other"]
    #[doc = " //       element for specified criteria was found."]
    #[doc = " }"]
    #[doc = " \\endcode"]
    #[doc = ""]
    #[doc = " @param[in]   part_name       Partition name"]
    #[doc = ""]
    #[doc = " @param[in]   namespace_name  Set this value if looking for entries with"]
    #[doc = "                              a specific namespace. Pass NULL otherwise."]
    #[doc = ""]
    #[doc = " @param[in]   type            One of nvs_type_t values."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          Iterator used to enumerate all the entries found,"]
    #[doc = "          or NULL if no entry satisfying criteria was found."]
    #[doc = "          Iterator obtained through this function has to be released"]
    #[doc = "          using nvs_release_iterator when not used any more."]
    pub fn nvs_entry_find(
        part_name: *const c_types::c_char,
        namespace_name: *const c_types::c_char,
        type_: nvs_type_t,
    ) -> nvs_iterator_t;
}
extern "C" {
    #[doc = " @brief       Returns next item matching the iterator criteria, NULL if no such item exists."]
    #[doc = ""]
    #[doc = " Note that any copies of the iterator will be invalid after this call."]
    #[doc = ""]
    #[doc = " @param[in]   iterator     Iterator obtained from nvs_entry_find function. Must be non-NULL."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "          NULL if no entry was found, valid nvs_iterator_t otherwise."]
    pub fn nvs_entry_next(iterator: nvs_iterator_t) -> nvs_iterator_t;
}
extern "C" {
    #[doc = " @brief       Fills nvs_entry_info_t structure with information about entry pointed to by the iterator."]
    #[doc = ""]
    #[doc = " @param[in]   iterator     Iterator obtained from nvs_entry_find or nvs_entry_next function. Must be non-NULL."]
    #[doc = ""]
    #[doc = " @param[out]  out_info     Structure to which entry information is copied."]
    pub fn nvs_entry_info(iterator: nvs_iterator_t, out_info: *mut nvs_entry_info_t);
}
extern "C" {
    #[doc = " @brief       Release iterator"]
    #[doc = ""]
    #[doc = " @param[in]   iterator    Release iterator obtained from nvs_entry_find function. NULL argument is allowed."]
    #[doc = ""]
    pub fn nvs_release_iterator(iterator: nvs_iterator_t);
}
#[doc = " @brief Key for encryption and decryption"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nvs_sec_cfg_t {
    #[doc = "<  XTS encryption and decryption key"]
    pub eky: [u8; 32usize],
    #[doc = "<  XTS tweak key"]
    pub tky: [u8; 32usize],
}
extern "C" {
    #[doc = " @brief Initialize the default NVS partition."]
    #[doc = ""]
    #[doc = " This API initialises the default NVS partition. The default NVS partition"]
    #[doc = " is the one that is labeled \"nvs\" in the partition table."]
    #[doc = ""]
    #[doc = " When \"NVS_ENCRYPTION\" is enabled in the menuconfig, this API enables"]
    #[doc = " the NVS encryption for the default NVS partition as follows"]
    #[doc = "      1. Read security configurations from the first NVS key"]
    #[doc = "         partition listed in the partition table. (NVS key partition is"]
    #[doc = "         any \"data\" type partition which has the subtype value set to \"nvs_keys\")"]
    #[doc = "      2. If the NVS key partiton obtained in the previous step is empty,"]
    #[doc = "         generate and store new keys in that NVS key partiton."]
    #[doc = "      3. Internally call \"nvs_flash_secure_init()\" with"]
    #[doc = "         the security configurations obtained/generated in the previous steps."]
    #[doc = ""]
    #[doc = " Post initialization NVS read/write APIs"]
    #[doc = " remain the same irrespective of NVS encryption."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if storage was successfully initialized."]
    #[doc = "      - ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages"]
    #[doc = "        (which may happen if NVS partition was truncated)"]
    #[doc = "      - ESP_ERR_NOT_FOUND if no partition with label \"nvs\" is found in the partition table"]
    #[doc = "      - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    #[doc = "      - error codes from nvs_flash_read_security_cfg API (when \"NVS_ENCRYPTION\" is enabled)."]
    #[doc = "      - error codes from nvs_flash_generate_keys API (when \"NVS_ENCRYPTION\" is enabled)."]
    #[doc = "      - error codes from nvs_flash_secure_init_partition API (when \"NVS_ENCRYPTION\" is enabled) ."]
    pub fn nvs_flash_init() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize NVS flash storage for the specified partition."]
    #[doc = ""]
    #[doc = " @param[in]  partition_label   Label of the partition. Must be no longer than 16 characters."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if storage was successfully initialized."]
    #[doc = "      - ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages"]
    #[doc = "        (which may happen if NVS partition was truncated)"]
    #[doc = "      - ESP_ERR_NOT_FOUND if specified partition is not found in the partition table"]
    #[doc = "      - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    pub fn nvs_flash_init_partition(partition_label: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize NVS flash storage for the partition specified by partition pointer."]
    #[doc = ""]
    #[doc = " @param[in] partition pointer to a partition obtained by the ESP partition API."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if storage was successfully initialized"]
    #[doc = "      - ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages"]
    #[doc = "        (which may happen if NVS partition was truncated)"]
    #[doc = "      - ESP_ERR_INVALID_ARG in case partition is NULL"]
    #[doc = "      - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    pub fn nvs_flash_init_partition_ptr(partition: *const esp_partition_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deinitialize NVS storage for the default NVS partition"]
    #[doc = ""]
    #[doc = " Default NVS partition is the partition with \"nvs\" label in the partition table."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success (storage was deinitialized)"]
    #[doc = "      - ESP_ERR_NVS_NOT_INITIALIZED if the storage was not initialized prior to this call"]
    pub fn nvs_flash_deinit() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deinitialize NVS storage for the given NVS partition"]
    #[doc = ""]
    #[doc = " @param[in]  partition_label   Label of the partition"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NVS_NOT_INITIALIZED if the storage for given partition was not"]
    #[doc = "        initialized prior to this call"]
    pub fn nvs_flash_deinit_partition(partition_label: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase the default NVS partition"]
    #[doc = ""]
    #[doc = " Erases all contents of the default NVS partition (one with label \"nvs\")."]
    #[doc = ""]
    #[doc = " @note If the partition is initialized, this function first de-initializes it. Afterwards, the partition has to"]
    #[doc = "       be initialized again to be used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if there is no NVS partition labeled \"nvs\" in the"]
    #[doc = "        partition table"]
    #[doc = "      - different error in case de-initialization fails (shouldn't happen)"]
    pub fn nvs_flash_erase() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase specified NVS partition"]
    #[doc = ""]
    #[doc = " Erase all content of a specified NVS partition"]
    #[doc = ""]
    #[doc = " @note If the partition is initialized, this function first de-initializes it. Afterwards, the partition has to"]
    #[doc = "       be initialized again to be used."]
    #[doc = ""]
    #[doc = " @param[in]  part_name    Name (label) of the partition which should be erased"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if there is no NVS partition with the specified name"]
    #[doc = "        in the partition table"]
    #[doc = "      - different error in case de-initialization fails (shouldn't happen)"]
    pub fn nvs_flash_erase_partition(part_name: *const c_types::c_char) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Erase custom partition."]
    #[doc = ""]
    #[doc = " Erase all content of specified custom partition."]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = "  If the partition is initialized, this function first de-initializes it."]
    #[doc = "  Afterwards, the partition has to be initialized again to be used."]
    #[doc = ""]
    #[doc = " @param[in] partition pointer to a partition obtained by the ESP partition API."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NOT_FOUND if there is no partition with the specified"]
    #[doc = "        parameters in the partition table"]
    #[doc = "      - ESP_ERR_INVALID_ARG in case partition is NULL"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    pub fn nvs_flash_erase_partition_ptr(partition: *const esp_partition_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize the default NVS partition."]
    #[doc = ""]
    #[doc = " This API initialises the default NVS partition. The default NVS partition"]
    #[doc = " is the one that is labeled \"nvs\" in the partition table."]
    #[doc = ""]
    #[doc = " @param[in]  cfg Security configuration (keys) to be used for NVS encryption/decryption."]
    #[doc = "                              If cfg is NULL, no encryption is used."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if storage has been initialized successfully."]
    #[doc = "      - ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages"]
    #[doc = "        (which may happen if NVS partition was truncated)"]
    #[doc = "      - ESP_ERR_NOT_FOUND if no partition with label \"nvs\" is found in the partition table"]
    #[doc = "      - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    pub fn nvs_flash_secure_init(cfg: *mut nvs_sec_cfg_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize NVS flash storage for the specified partition."]
    #[doc = ""]
    #[doc = " @param[in]  partition_label   Label of the partition. Note that internally, a reference to"]
    #[doc = "                               passed value is kept and it should be accessible for future operations"]
    #[doc = ""]
    #[doc = " @param[in]  cfg Security configuration (keys) to be used for NVS encryption/decryption."]
    #[doc = "                              If cfg is null, no encryption/decryption is used."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if storage has been initialized successfully."]
    #[doc = "      - ESP_ERR_NVS_NO_FREE_PAGES if the NVS storage contains no empty pages"]
    #[doc = "        (which may happen if NVS partition was truncated)"]
    #[doc = "      - ESP_ERR_NOT_FOUND if specified partition is not found in the partition table"]
    #[doc = "      - ESP_ERR_NO_MEM in case memory could not be allocated for the internal structures"]
    #[doc = "      - one of the error codes from the underlying flash storage driver"]
    pub fn nvs_flash_secure_init_partition(
        partition_label: *const c_types::c_char,
        cfg: *mut nvs_sec_cfg_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Generate and store NVS keys in the provided esp partition"]
    #[doc = ""]
    #[doc = " @param[in]  partition Pointer to partition structure obtained using"]
    #[doc = "                       esp_partition_find_first or esp_partition_get."]
    #[doc = "                       Must be non-NULL."]
    #[doc = " @param[out] cfg       Pointer to nvs security configuration structure."]
    #[doc = "                       Pointer must be non-NULL."]
    #[doc = "                       Generated keys will be populated in this structure."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      -ESP_OK, if cfg was read successfully;"]
    #[doc = "      -ESP_INVALID_ARG, if partition or cfg;"]
    #[doc = "      -or error codes from esp_partition_write/erase APIs."]
    pub fn nvs_flash_generate_keys(
        partition: *const esp_partition_t,
        cfg: *mut nvs_sec_cfg_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read NVS security configuration from a partition."]
    #[doc = ""]
    #[doc = " @param[in]  partition Pointer to partition structure obtained using"]
    #[doc = "                       esp_partition_find_first or esp_partition_get."]
    #[doc = "                       Must be non-NULL."]
    #[doc = " @param[out] cfg       Pointer to nvs security configuration structure."]
    #[doc = "                       Pointer must be non-NULL."]
    #[doc = ""]
    #[doc = " @note  Provided partition is assumed to be marked 'encrypted'."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      -ESP_OK, if cfg was read successfully;"]
    #[doc = "      -ESP_INVALID_ARG, if partition or cfg;"]
    #[doc = "      -ESP_ERR_NVS_KEYS_NOT_INITIALIZED, if the partition is not yet written with keys."]
    #[doc = "      -ESP_ERR_NVS_CORRUPT_KEY_PART, if the partition containing keys is found to be corrupt"]
    #[doc = "      -or error codes from esp_partition_read API."]
    pub fn nvs_flash_read_security_cfg(
        partition: *const esp_partition_t,
        cfg: *mut nvs_sec_cfg_t,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rtc_cntl_dev_s {
    pub options0: rtc_cntl_dev_s__bindgen_ty_1,
    pub slp_timer0: u32,
    pub slp_timer1: rtc_cntl_dev_s__bindgen_ty_2,
    pub time_update: rtc_cntl_dev_s__bindgen_ty_3,
    pub time_low0: u32,
    pub time_high0: rtc_cntl_dev_s__bindgen_ty_4,
    pub state0: rtc_cntl_dev_s__bindgen_ty_5,
    pub timer1: rtc_cntl_dev_s__bindgen_ty_6,
    pub timer2: rtc_cntl_dev_s__bindgen_ty_7,
    pub timer3: rtc_cntl_dev_s__bindgen_ty_8,
    pub timer4: rtc_cntl_dev_s__bindgen_ty_9,
    pub timer5: rtc_cntl_dev_s__bindgen_ty_10,
    pub timer6: rtc_cntl_dev_s__bindgen_ty_11,
    pub ana_conf: rtc_cntl_dev_s__bindgen_ty_12,
    pub reset_state: rtc_cntl_dev_s__bindgen_ty_13,
    pub wakeup_state: rtc_cntl_dev_s__bindgen_ty_14,
    pub int_ena: rtc_cntl_dev_s__bindgen_ty_15,
    pub int_raw: rtc_cntl_dev_s__bindgen_ty_16,
    pub int_st: rtc_cntl_dev_s__bindgen_ty_17,
    pub int_clr: rtc_cntl_dev_s__bindgen_ty_18,
    pub store: [u32; 4usize],
    pub ext_xtl_conf: rtc_cntl_dev_s__bindgen_ty_19,
    pub ext_wakeup_conf: rtc_cntl_dev_s__bindgen_ty_20,
    pub slp_reject_conf: rtc_cntl_dev_s__bindgen_ty_21,
    pub cpu_period_conf: rtc_cntl_dev_s__bindgen_ty_22,
    pub clk_conf: rtc_cntl_dev_s__bindgen_ty_23,
    pub slow_clk_conf: rtc_cntl_dev_s__bindgen_ty_24,
    pub sdio_conf: rtc_cntl_dev_s__bindgen_ty_25,
    pub bias_conf: rtc_cntl_dev_s__bindgen_ty_26,
    pub rtc: rtc_cntl_dev_s__bindgen_ty_27,
    pub rtc_pwc: rtc_cntl_dev_s__bindgen_ty_28,
    pub dig_pwc: rtc_cntl_dev_s__bindgen_ty_29,
    pub dig_iso: rtc_cntl_dev_s__bindgen_ty_30,
    pub wdt_config0: rtc_cntl_dev_s__bindgen_ty_31,
    pub wdt_config1: u32,
    pub wdt_config2: u32,
    pub wdt_config3: u32,
    pub wdt_config4: u32,
    pub wdt_feed: rtc_cntl_dev_s__bindgen_ty_32,
    pub wdt_wprotect: u32,
    pub swd_conf: rtc_cntl_dev_s__bindgen_ty_33,
    pub swd_wprotect: u32,
    pub sw_cpu_stall: rtc_cntl_dev_s__bindgen_ty_34,
    pub store4: u32,
    pub store5: u32,
    pub store6: u32,
    pub store7: u32,
    pub low_power_st: rtc_cntl_dev_s__bindgen_ty_35,
    pub diag0: u32,
    pub pad_hold: rtc_cntl_dev_s__bindgen_ty_36,
    pub dig_pad_hold: u32,
    pub brown_out: rtc_cntl_dev_s__bindgen_ty_37,
    pub time_low1: u32,
    pub time_high1: rtc_cntl_dev_s__bindgen_ty_38,
    pub xtal32k_clk_factor: u32,
    pub xtal32k_conf: rtc_cntl_dev_s__bindgen_ty_39,
    pub usb_conf: rtc_cntl_dev_s__bindgen_ty_40,
    pub slp_reject_cause: rtc_cntl_dev_s__bindgen_ty_41,
    pub option1: rtc_cntl_dev_s__bindgen_ty_42,
    pub slp_wakeup_cause: rtc_cntl_dev_s__bindgen_ty_43,
    pub ulp_cp_timer_1: rtc_cntl_dev_s__bindgen_ty_44,
    pub int_ena_w1ts: rtc_cntl_dev_s__bindgen_ty_45,
    pub int_ena_w1tc: rtc_cntl_dev_s__bindgen_ty_46,
    pub retention_ctrl: rtc_cntl_dev_s__bindgen_ty_47,
    pub fib_sel: rtc_cntl_dev_s__bindgen_ty_48,
    pub gpio_wakeup: rtc_cntl_dev_s__bindgen_ty_49,
    pub dbg_sel: rtc_cntl_dev_s__bindgen_ty_50,
    pub dbg_map: rtc_cntl_dev_s__bindgen_ty_51,
    pub sensor_ctrl: rtc_cntl_dev_s__bindgen_ty_52,
    pub dbg_sar_sel: rtc_cntl_dev_s__bindgen_ty_53,
    pub pg_ctrl: rtc_cntl_dev_s__bindgen_ty_54,
    pub reserved_128: u32,
    pub reserved_12c: u32,
    pub reserved_130: u32,
    pub reserved_134: u32,
    pub reserved_138: u32,
    pub reserved_13c: u32,
    pub reserved_140: u32,
    pub reserved_144: u32,
    pub reserved_148: u32,
    pub reserved_14c: u32,
    pub reserved_150: u32,
    pub reserved_154: u32,
    pub reserved_158: u32,
    pub reserved_15c: u32,
    pub reserved_160: u32,
    pub reserved_164: u32,
    pub reserved_168: u32,
    pub reserved_16c: u32,
    pub reserved_170: u32,
    pub reserved_174: u32,
    pub reserved_178: u32,
    pub reserved_17c: u32,
    pub reserved_180: u32,
    pub reserved_184: u32,
    pub reserved_188: u32,
    pub reserved_18c: u32,
    pub reserved_190: u32,
    pub reserved_194: u32,
    pub reserved_198: u32,
    pub reserved_19c: u32,
    pub reserved_1a0: u32,
    pub reserved_1a4: u32,
    pub reserved_1a8: u32,
    pub reserved_1ac: u32,
    pub reserved_1b0: u32,
    pub reserved_1b4: u32,
    pub reserved_1b8: u32,
    pub reserved_1bc: u32,
    pub reserved_1c0: u32,
    pub reserved_1c4: u32,
    pub reserved_1c8: u32,
    pub reserved_1cc: u32,
    pub reserved_1d0: u32,
    pub reserved_1d4: u32,
    pub reserved_1d8: u32,
    pub reserved_1dc: u32,
    pub reserved_1e0: u32,
    pub reserved_1e4: u32,
    pub reserved_1e8: u32,
    pub reserved_1ec: u32,
    pub reserved_1f0: u32,
    pub reserved_1f4: u32,
    pub reserved_1f8: u32,
    pub date: rtc_cntl_dev_s__bindgen_ty_55,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn sw_stall_appcpu_c0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sw_stall_appcpu_c0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_stall_procpu_c0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sw_stall_procpu_c0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_appcpu_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sw_appcpu_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_procpu_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sw_procpu_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bb_i2c_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bb_i2c_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bb_i2c_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bb_i2c_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_i2c_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_i2c_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_i2c_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_i2c_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_en_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_en_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ctr_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ctr_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pll_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pll_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn analog_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_analog_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pll_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pll_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn analog_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_analog_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_norst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_norst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sw_sys_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sw_sys_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sw_stall_appcpu_c0: u32,
        sw_stall_procpu_c0: u32,
        sw_appcpu_rst: u32,
        sw_procpu_rst: u32,
        bb_i2c_force_pd: u32,
        bb_i2c_force_pu: u32,
        bbpll_i2c_force_pd: u32,
        bbpll_i2c_force_pu: u32,
        bbpll_force_pd: u32,
        bbpll_force_pu: u32,
        xtl_force_pd: u32,
        xtl_force_pu: u32,
        xtl_en_wait: u32,
        reserved18: u32,
        ctr_sel: u32,
        xtl_force_iso: u32,
        pll_force_iso: u32,
        analog_force_iso: u32,
        xtl_force_noiso: u32,
        pll_force_noiso: u32,
        analog_force_noiso: u32,
        dg_wrap_force_rst: u32,
        dg_wrap_force_norst: u32,
        sw_sys_rst: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let sw_stall_appcpu_c0: u32 = unsafe { ::core::mem::transmute(sw_stall_appcpu_c0) };
            sw_stall_appcpu_c0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let sw_stall_procpu_c0: u32 = unsafe { ::core::mem::transmute(sw_stall_procpu_c0) };
            sw_stall_procpu_c0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sw_appcpu_rst: u32 = unsafe { ::core::mem::transmute(sw_appcpu_rst) };
            sw_appcpu_rst as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sw_procpu_rst: u32 = unsafe { ::core::mem::transmute(sw_procpu_rst) };
            sw_procpu_rst as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bb_i2c_force_pd: u32 = unsafe { ::core::mem::transmute(bb_i2c_force_pd) };
            bb_i2c_force_pd as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bb_i2c_force_pu: u32 = unsafe { ::core::mem::transmute(bb_i2c_force_pu) };
            bb_i2c_force_pu as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bbpll_i2c_force_pd: u32 = unsafe { ::core::mem::transmute(bbpll_i2c_force_pd) };
            bbpll_i2c_force_pd as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bbpll_i2c_force_pu: u32 = unsafe { ::core::mem::transmute(bbpll_i2c_force_pu) };
            bbpll_i2c_force_pu as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bbpll_force_pd: u32 = unsafe { ::core::mem::transmute(bbpll_force_pd) };
            bbpll_force_pd as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bbpll_force_pu: u32 = unsafe { ::core::mem::transmute(bbpll_force_pu) };
            bbpll_force_pu as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let xtl_force_pd: u32 = unsafe { ::core::mem::transmute(xtl_force_pd) };
            xtl_force_pd as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let xtl_force_pu: u32 = unsafe { ::core::mem::transmute(xtl_force_pu) };
            xtl_force_pu as u64
        });
        __bindgen_bitfield_unit.set(14usize, 4u8, {
            let xtl_en_wait: u32 = unsafe { ::core::mem::transmute(xtl_en_wait) };
            xtl_en_wait as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let ctr_sel: u32 = unsafe { ::core::mem::transmute(ctr_sel) };
            ctr_sel as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let xtl_force_iso: u32 = unsafe { ::core::mem::transmute(xtl_force_iso) };
            xtl_force_iso as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let pll_force_iso: u32 = unsafe { ::core::mem::transmute(pll_force_iso) };
            pll_force_iso as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let analog_force_iso: u32 = unsafe { ::core::mem::transmute(analog_force_iso) };
            analog_force_iso as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let xtl_force_noiso: u32 = unsafe { ::core::mem::transmute(xtl_force_noiso) };
            xtl_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let pll_force_noiso: u32 = unsafe { ::core::mem::transmute(pll_force_noiso) };
            pll_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let analog_force_noiso: u32 = unsafe { ::core::mem::transmute(analog_force_noiso) };
            analog_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let dg_wrap_force_rst: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_rst) };
            dg_wrap_force_rst as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let dg_wrap_force_norst: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_norst) };
            dg_wrap_force_norst as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sw_sys_rst: u32 = unsafe { ::core::mem::transmute(sw_sys_rst) };
            sw_sys_rst as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn slp_val_hi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_slp_val_hi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn main_timer_alarm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_main_timer_alarm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_val_hi: u32,
        main_timer_alarm_en: u32,
        reserved17: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let slp_val_hi: u32 = unsafe { ::core::mem::transmute(slp_val_hi) };
            slp_val_hi as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let main_timer_alarm_en: u32 = unsafe { ::core::mem::transmute(main_timer_alarm_en) };
            main_timer_alarm_en as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_sys_stall(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_sys_stall(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_xtl_off(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_xtl_off(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_sys_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_sys_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        timer_sys_stall: u32,
        timer_xtl_off: u32,
        timer_sys_rst: u32,
        reserved30: u32,
        update: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 27u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let timer_sys_stall: u32 = unsafe { ::core::mem::transmute(timer_sys_stall) };
            timer_sys_stall as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let timer_xtl_off: u32 = unsafe { ::core::mem::transmute(timer_xtl_off) };
            timer_xtl_off as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let timer_sys_rst: u32 = unsafe { ::core::mem::transmute(timer_sys_rst) };
            timer_sys_rst as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let update: u32 = unsafe { ::core::mem::transmute(update) };
            update as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn rtc_timer_value0_high(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_timer_value0_high(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_timer_value0_high: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let rtc_timer_value0_high: u32 =
                unsafe { ::core::mem::transmute(rtc_timer_value0_high) };
            rtc_timer_value0_high as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn rtc_sw_cpu_int(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_sw_cpu_int(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_slp_reject_cause_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_slp_reject_cause_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn apb2rtc_bridge_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_apb2rtc_bridge_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved23(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved23(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_active_ind(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_active_ind(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sleep_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sleep_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_sw_cpu_int: u32,
        rtc_slp_reject_cause_clr: u32,
        reserved2: u32,
        apb2rtc_bridge_sel: u32,
        reserved23: u32,
        sdio_active_ind: u32,
        slp_wakeup: u32,
        slp_reject: u32,
        sleep_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rtc_sw_cpu_int: u32 = unsafe { ::core::mem::transmute(rtc_sw_cpu_int) };
            rtc_sw_cpu_int as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtc_slp_reject_cause_clr: u32 =
                unsafe { ::core::mem::transmute(rtc_slp_reject_cause_clr) };
            rtc_slp_reject_cause_clr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 20u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let apb2rtc_bridge_sel: u32 = unsafe { ::core::mem::transmute(apb2rtc_bridge_sel) };
            apb2rtc_bridge_sel as u64
        });
        __bindgen_bitfield_unit.set(23usize, 5u8, {
            let reserved23: u32 = unsafe { ::core::mem::transmute(reserved23) };
            reserved23 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sdio_active_ind: u32 = unsafe { ::core::mem::transmute(sdio_active_ind) };
            sdio_active_ind as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let slp_wakeup: u32 = unsafe { ::core::mem::transmute(slp_wakeup) };
            slp_wakeup as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let slp_reject: u32 = unsafe { ::core::mem::transmute(slp_reject) };
            slp_reject as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sleep_en: u32 = unsafe { ::core::mem::transmute(sleep_en) };
            sleep_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn cpu_stall_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_stall_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_stall_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_stall_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn xtl_buf_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_xtl_buf_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn pll_buf_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pll_buf_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cpu_stall_en: u32,
        cpu_stall_wait: u32,
        ck8m_wait: u32,
        xtl_buf_wait: u32,
        pll_buf_wait: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cpu_stall_en: u32 = unsafe { ::core::mem::transmute(cpu_stall_en) };
            cpu_stall_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 5u8, {
            let cpu_stall_wait: u32 = unsafe { ::core::mem::transmute(cpu_stall_wait) };
            cpu_stall_wait as u64
        });
        __bindgen_bitfield_unit.set(6usize, 8u8, {
            let ck8m_wait: u32 = unsafe { ::core::mem::transmute(ck8m_wait) };
            ck8m_wait as u64
        });
        __bindgen_bitfield_unit.set(14usize, 10u8, {
            let xtl_buf_wait: u32 = unsafe { ::core::mem::transmute(xtl_buf_wait) };
            xtl_buf_wait as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let pll_buf_wait: u32 = unsafe { ::core::mem::transmute(pll_buf_wait) };
            pll_buf_wait as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn min_time_ck8m_off(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_min_time_ck8m_off(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        min_time_ck8m_off: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let min_time_ck8m_off: u32 = unsafe { ::core::mem::transmute(min_time_ck8m_off) };
            min_time_ck8m_off as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn wifi_wait_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_wait_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_powerup_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_powerup_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_wait_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_bt_wait_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_powerup_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_bt_powerup_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wifi_wait_timer: u32,
        wifi_powerup_timer: u32,
        bt_wait_timer: u32,
        bt_powerup_timer: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let wifi_wait_timer: u32 = unsafe { ::core::mem::transmute(wifi_wait_timer) };
            wifi_wait_timer as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let wifi_powerup_timer: u32 = unsafe { ::core::mem::transmute(wifi_powerup_timer) };
            wifi_powerup_timer as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let bt_wait_timer: u32 = unsafe { ::core::mem::transmute(bt_wait_timer) };
            bt_wait_timer as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let bt_powerup_timer: u32 = unsafe { ::core::mem::transmute(bt_powerup_timer) };
            bt_powerup_timer as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn cpu_top_wait_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_wait_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_powerup_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_powerup_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_wait_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_wait_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_powerup_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_powerup_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cpu_top_wait_timer: u32,
        cpu_top_powerup_timer: u32,
        dg_wrap_wait_timer: u32,
        dg_wrap_powerup_timer: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let cpu_top_wait_timer: u32 = unsafe { ::core::mem::transmute(cpu_top_wait_timer) };
            cpu_top_wait_timer as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let cpu_top_powerup_timer: u32 =
                unsafe { ::core::mem::transmute(cpu_top_powerup_timer) };
            cpu_top_powerup_timer as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let dg_wrap_wait_timer: u32 = unsafe { ::core::mem::transmute(dg_wrap_wait_timer) };
            dg_wrap_wait_timer as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let dg_wrap_powerup_timer: u32 =
                unsafe { ::core::mem::transmute(dg_wrap_powerup_timer) };
            dg_wrap_powerup_timer as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn min_slp_val(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_min_slp_val(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        min_slp_val: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let min_slp_val: u32 = unsafe { ::core::mem::transmute(min_slp_val) };
            min_slp_val as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_wait_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_wait_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_powerup_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_powerup_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        dg_peri_wait_timer: u32,
        dg_peri_powerup_timer: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let dg_peri_wait_timer: u32 = unsafe { ::core::mem::transmute(dg_peri_wait_timer) };
            dg_peri_wait_timer as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let dg_peri_powerup_timer: u32 =
                unsafe { ::core::mem::transmute(dg_peri_powerup_timer) };
            dg_peri_powerup_timer as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn i2c_reset_por_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_i2c_reset_por_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn i2c_reset_por_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_i2c_reset_por_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn glitch_rst_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_glitch_rst_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sar_i2c_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sar_i2c_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn plla_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_plla_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn plla_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_plla_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bbpll_cal_slp_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bbpll_cal_slp_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pvtmon_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pvtmon_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn txrf_i2c_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_txrf_i2c_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rfrx_pbus_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rfrx_pbus_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved29(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved29(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ckgen_i2c_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ckgen_i2c_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pll_i2c_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pll_i2c_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        i2c_reset_por_force_pd: u32,
        i2c_reset_por_force_pu: u32,
        glitch_rst_en: u32,
        reserved21: u32,
        sar_i2c_pu: u32,
        plla_force_pd: u32,
        plla_force_pu: u32,
        bbpll_cal_slp_start: u32,
        pvtmon_pu: u32,
        txrf_i2c_pu: u32,
        rfrx_pbus_pu: u32,
        reserved29: u32,
        ckgen_i2c_pu: u32,
        pll_i2c_pu: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let i2c_reset_por_force_pd: u32 =
                unsafe { ::core::mem::transmute(i2c_reset_por_force_pd) };
            i2c_reset_por_force_pd as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let i2c_reset_por_force_pu: u32 =
                unsafe { ::core::mem::transmute(i2c_reset_por_force_pu) };
            i2c_reset_por_force_pu as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let glitch_rst_en: u32 = unsafe { ::core::mem::transmute(glitch_rst_en) };
            glitch_rst_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let sar_i2c_pu: u32 = unsafe { ::core::mem::transmute(sar_i2c_pu) };
            sar_i2c_pu as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let plla_force_pd: u32 = unsafe { ::core::mem::transmute(plla_force_pd) };
            plla_force_pd as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let plla_force_pu: u32 = unsafe { ::core::mem::transmute(plla_force_pu) };
            plla_force_pu as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let bbpll_cal_slp_start: u32 = unsafe { ::core::mem::transmute(bbpll_cal_slp_start) };
            bbpll_cal_slp_start as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let pvtmon_pu: u32 = unsafe { ::core::mem::transmute(pvtmon_pu) };
            pvtmon_pu as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let txrf_i2c_pu: u32 = unsafe { ::core::mem::transmute(txrf_i2c_pu) };
            txrf_i2c_pu as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let rfrx_pbus_pu: u32 = unsafe { ::core::mem::transmute(rfrx_pbus_pu) };
            rfrx_pbus_pu as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let reserved29: u32 = unsafe { ::core::mem::transmute(reserved29) };
            reserved29 as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let ckgen_i2c_pu: u32 = unsafe { ::core::mem::transmute(ckgen_i2c_pu) };
            ckgen_i2c_pu as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pll_i2c_pu: u32 = unsafe { ::core::mem::transmute(pll_i2c_pu) };
            pll_i2c_pu as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn reset_cause_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reset_cause_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn reset_cause_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reset_cause_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_vector_sel_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_vector_sel_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stat_vector_sel_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_stat_vector_sel_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn all_reset_flag_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_all_reset_flag_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn all_reset_flag_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_all_reset_flag_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn all_reset_flag_clr_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_all_reset_flag_clr_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn all_reset_flag_clr_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_all_reset_flag_clr_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ocd_halt_on_reset_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ocd_halt_on_reset_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ocd_halt_on_reset_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ocd_halt_on_reset_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn jtag_reset_flag_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_jtag_reset_flag_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn jtag_reset_flag_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_jtag_reset_flag_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn jtag_reset_flag_clr_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_jtag_reset_flag_clr_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn jtag_reset_flag_clr_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_jtag_reset_flag_clr_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dreset_mask_appcpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dreset_mask_appcpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dreset_mask_procpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dreset_mask_procpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reset_cause_procpu: u32,
        reset_cause_appcpu: u32,
        stat_vector_sel_appcpu: u32,
        stat_vector_sel_procpu: u32,
        all_reset_flag_procpu: u32,
        all_reset_flag_appcpu: u32,
        all_reset_flag_clr_procpu: u32,
        all_reset_flag_clr_appcpu: u32,
        ocd_halt_on_reset_appcpu: u32,
        ocd_halt_on_reset_procpu: u32,
        jtag_reset_flag_procpu: u32,
        jtag_reset_flag_appcpu: u32,
        jtag_reset_flag_clr_procpu: u32,
        jtag_reset_flag_clr_appcpu: u32,
        rtc_dreset_mask_appcpu: u32,
        rtc_dreset_mask_procpu: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let reset_cause_procpu: u32 = unsafe { ::core::mem::transmute(reset_cause_procpu) };
            reset_cause_procpu as u64
        });
        __bindgen_bitfield_unit.set(6usize, 6u8, {
            let reset_cause_appcpu: u32 = unsafe { ::core::mem::transmute(reset_cause_appcpu) };
            reset_cause_appcpu as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let stat_vector_sel_appcpu: u32 =
                unsafe { ::core::mem::transmute(stat_vector_sel_appcpu) };
            stat_vector_sel_appcpu as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let stat_vector_sel_procpu: u32 =
                unsafe { ::core::mem::transmute(stat_vector_sel_procpu) };
            stat_vector_sel_procpu as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let all_reset_flag_procpu: u32 =
                unsafe { ::core::mem::transmute(all_reset_flag_procpu) };
            all_reset_flag_procpu as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let all_reset_flag_appcpu: u32 =
                unsafe { ::core::mem::transmute(all_reset_flag_appcpu) };
            all_reset_flag_appcpu as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let all_reset_flag_clr_procpu: u32 =
                unsafe { ::core::mem::transmute(all_reset_flag_clr_procpu) };
            all_reset_flag_clr_procpu as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let all_reset_flag_clr_appcpu: u32 =
                unsafe { ::core::mem::transmute(all_reset_flag_clr_appcpu) };
            all_reset_flag_clr_appcpu as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let ocd_halt_on_reset_appcpu: u32 =
                unsafe { ::core::mem::transmute(ocd_halt_on_reset_appcpu) };
            ocd_halt_on_reset_appcpu as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let ocd_halt_on_reset_procpu: u32 =
                unsafe { ::core::mem::transmute(ocd_halt_on_reset_procpu) };
            ocd_halt_on_reset_procpu as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let jtag_reset_flag_procpu: u32 =
                unsafe { ::core::mem::transmute(jtag_reset_flag_procpu) };
            jtag_reset_flag_procpu as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let jtag_reset_flag_appcpu: u32 =
                unsafe { ::core::mem::transmute(jtag_reset_flag_appcpu) };
            jtag_reset_flag_appcpu as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let jtag_reset_flag_clr_procpu: u32 =
                unsafe { ::core::mem::transmute(jtag_reset_flag_clr_procpu) };
            jtag_reset_flag_clr_procpu as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let jtag_reset_flag_clr_appcpu: u32 =
                unsafe { ::core::mem::transmute(jtag_reset_flag_clr_appcpu) };
            jtag_reset_flag_clr_appcpu as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let rtc_dreset_mask_appcpu: u32 =
                unsafe { ::core::mem::transmute(rtc_dreset_mask_appcpu) };
            rtc_dreset_mask_appcpu as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let rtc_dreset_mask_procpu: u32 =
                unsafe { ::core::mem::transmute(rtc_dreset_mask_procpu) };
            rtc_dreset_mask_procpu as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wakeup_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wakeup_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_wakeup_ena: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let rtc_wakeup_ena: u32 = unsafe { ::core::mem::transmute(rtc_wakeup_ena) };
            rtc_wakeup_ena as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_brown_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_brown_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup: u32,
        slp_reject: u32,
        reserved2: u32,
        rtc_wdt: u32,
        reserved4: u32,
        rtc_brown_out: u32,
        rtc_main_timer: u32,
        reserved11: u32,
        rtc_swd: u32,
        rtc_xtal32k_dead: u32,
        reserved17: u32,
        rtc_glitch_det: u32,
        rtc_bbpll_cal: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup: u32 = unsafe { ::core::mem::transmute(slp_wakeup) };
            slp_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject: u32 = unsafe { ::core::mem::transmute(slp_reject) };
            slp_reject as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt: u32 = unsafe { ::core::mem::transmute(rtc_wdt) };
            rtc_wdt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rtc_brown_out: u32 = unsafe { ::core::mem::transmute(rtc_brown_out) };
            rtc_brown_out as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer: u32 = unsafe { ::core::mem::transmute(rtc_main_timer) };
            rtc_main_timer as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd: u32 = unsafe { ::core::mem::transmute(rtc_swd) };
            rtc_swd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead: u32 = unsafe { ::core::mem::transmute(rtc_xtal32k_dead) };
            rtc_xtal32k_dead as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det) };
            rtc_glitch_det as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal) };
            rtc_bbpll_cal as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_brown_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_brown_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup: u32,
        slp_reject: u32,
        reserved2: u32,
        rtc_wdt: u32,
        reserved4: u32,
        rtc_brown_out: u32,
        rtc_main_timer: u32,
        reserved11: u32,
        rtc_swd: u32,
        rtc_xtal32k_dead: u32,
        reserved17: u32,
        rtc_glitch_det: u32,
        rtc_bbpll_cal: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup: u32 = unsafe { ::core::mem::transmute(slp_wakeup) };
            slp_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject: u32 = unsafe { ::core::mem::transmute(slp_reject) };
            slp_reject as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt: u32 = unsafe { ::core::mem::transmute(rtc_wdt) };
            rtc_wdt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rtc_brown_out: u32 = unsafe { ::core::mem::transmute(rtc_brown_out) };
            rtc_brown_out as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer: u32 = unsafe { ::core::mem::transmute(rtc_main_timer) };
            rtc_main_timer as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd: u32 = unsafe { ::core::mem::transmute(rtc_swd) };
            rtc_swd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead: u32 = unsafe { ::core::mem::transmute(rtc_xtal32k_dead) };
            rtc_xtal32k_dead as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det) };
            rtc_glitch_det as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal) };
            rtc_bbpll_cal as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_17 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_17__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_17__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_17__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_brown_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_brown_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup: u32,
        slp_reject: u32,
        reserved2: u32,
        rtc_wdt: u32,
        reserved4: u32,
        rtc_brown_out: u32,
        rtc_main_timer: u32,
        reserved11: u32,
        rtc_swd: u32,
        rtc_xtal32k_dead: u32,
        reserved17: u32,
        rtc_glitch_det: u32,
        rtc_bbpll_cal: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup: u32 = unsafe { ::core::mem::transmute(slp_wakeup) };
            slp_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject: u32 = unsafe { ::core::mem::transmute(slp_reject) };
            slp_reject as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt: u32 = unsafe { ::core::mem::transmute(rtc_wdt) };
            rtc_wdt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rtc_brown_out: u32 = unsafe { ::core::mem::transmute(rtc_brown_out) };
            rtc_brown_out as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer: u32 = unsafe { ::core::mem::transmute(rtc_main_timer) };
            rtc_main_timer as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd: u32 = unsafe { ::core::mem::transmute(rtc_swd) };
            rtc_swd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead: u32 = unsafe { ::core::mem::transmute(rtc_xtal32k_dead) };
            rtc_xtal32k_dead as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det) };
            rtc_glitch_det as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal) };
            rtc_bbpll_cal as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_18 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_18__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_18__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_18__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_brown_out(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_brown_out(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup: u32,
        slp_reject: u32,
        reserved2: u32,
        rtc_wdt: u32,
        reserved4: u32,
        rtc_brown_out: u32,
        rtc_main_timer: u32,
        reserved11: u32,
        rtc_swd: u32,
        rtc_xtal32k_dead: u32,
        reserved17: u32,
        rtc_glitch_det: u32,
        rtc_bbpll_cal: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup: u32 = unsafe { ::core::mem::transmute(slp_wakeup) };
            slp_wakeup as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject: u32 = unsafe { ::core::mem::transmute(slp_reject) };
            slp_reject as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt: u32 = unsafe { ::core::mem::transmute(rtc_wdt) };
            rtc_wdt as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rtc_brown_out: u32 = unsafe { ::core::mem::transmute(rtc_brown_out) };
            rtc_brown_out as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer: u32 = unsafe { ::core::mem::transmute(rtc_main_timer) };
            rtc_main_timer as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd: u32 = unsafe { ::core::mem::transmute(rtc_swd) };
            rtc_swd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead: u32 = unsafe { ::core::mem::transmute(rtc_xtal32k_dead) };
            rtc_xtal32k_dead as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det) };
            rtc_glitch_det as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal) };
            rtc_bbpll_cal as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_19 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_19__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_19__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_19__bindgen_ty_1 {
    #[inline]
    pub fn xtal32k_wdt_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_wdt_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_wdt_clk_fo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_wdt_clk_fo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_wdt_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_wdt_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_ext_clk_fo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_ext_clk_fo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_auto_backup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_auto_backup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_auto_restart(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_auto_restart(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_auto_return(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_auto_return(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_xpd_force(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_xpd_force(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enckinit_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enckinit_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dbuf_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dbuf_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dgm_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_dgm_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dres_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_dres_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dac_xtal_32k(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_dac_xtal_32k(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt_state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_gpio_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_gpio_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved24(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved24(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn ctr_lv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ctr_lv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ctr_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ctr_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xtal32k_wdt_en: u32,
        xtal32k_wdt_clk_fo: u32,
        xtal32k_wdt_reset: u32,
        xtal32k_ext_clk_fo: u32,
        xtal32k_auto_backup: u32,
        xtal32k_auto_restart: u32,
        xtal32k_auto_return: u32,
        xtal32k_xpd_force: u32,
        enckinit_xtal_32k: u32,
        dbuf_xtal_32k: u32,
        dgm_xtal_32k: u32,
        dres_xtal_32k: u32,
        xpd_xtal_32k: u32,
        dac_xtal_32k: u32,
        rtc_wdt_state: u32,
        rtc_xtal32k_gpio_sel: u32,
        reserved24: u32,
        ctr_lv: u32,
        ctr_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xtal32k_wdt_en: u32 = unsafe { ::core::mem::transmute(xtal32k_wdt_en) };
            xtal32k_wdt_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let xtal32k_wdt_clk_fo: u32 = unsafe { ::core::mem::transmute(xtal32k_wdt_clk_fo) };
            xtal32k_wdt_clk_fo as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xtal32k_wdt_reset: u32 = unsafe { ::core::mem::transmute(xtal32k_wdt_reset) };
            xtal32k_wdt_reset as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let xtal32k_ext_clk_fo: u32 = unsafe { ::core::mem::transmute(xtal32k_ext_clk_fo) };
            xtal32k_ext_clk_fo as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let xtal32k_auto_backup: u32 = unsafe { ::core::mem::transmute(xtal32k_auto_backup) };
            xtal32k_auto_backup as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let xtal32k_auto_restart: u32 = unsafe { ::core::mem::transmute(xtal32k_auto_restart) };
            xtal32k_auto_restart as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let xtal32k_auto_return: u32 = unsafe { ::core::mem::transmute(xtal32k_auto_return) };
            xtal32k_auto_return as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let xtal32k_xpd_force: u32 = unsafe { ::core::mem::transmute(xtal32k_xpd_force) };
            xtal32k_xpd_force as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enckinit_xtal_32k: u32 = unsafe { ::core::mem::transmute(enckinit_xtal_32k) };
            enckinit_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let dbuf_xtal_32k: u32 = unsafe { ::core::mem::transmute(dbuf_xtal_32k) };
            dbuf_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(10usize, 3u8, {
            let dgm_xtal_32k: u32 = unsafe { ::core::mem::transmute(dgm_xtal_32k) };
            dgm_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let dres_xtal_32k: u32 = unsafe { ::core::mem::transmute(dres_xtal_32k) };
            dres_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let xpd_xtal_32k: u32 = unsafe { ::core::mem::transmute(xpd_xtal_32k) };
            xpd_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(17usize, 3u8, {
            let dac_xtal_32k: u32 = unsafe { ::core::mem::transmute(dac_xtal_32k) };
            dac_xtal_32k as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let rtc_wdt_state: u32 = unsafe { ::core::mem::transmute(rtc_wdt_state) };
            rtc_wdt_state as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let rtc_xtal32k_gpio_sel: u32 = unsafe { ::core::mem::transmute(rtc_xtal32k_gpio_sel) };
            rtc_xtal32k_gpio_sel as u64
        });
        __bindgen_bitfield_unit.set(24usize, 6u8, {
            let reserved24: u32 = unsafe { ::core::mem::transmute(reserved24) };
            reserved24 as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let ctr_lv: u32 = unsafe { ::core::mem::transmute(ctr_lv) };
            ctr_lv as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let ctr_en: u32 = unsafe { ::core::mem::transmute(ctr_en) };
            ctr_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_20 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_20__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_20__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_20__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn gpio_wakeup_filter(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gpio_wakeup_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        gpio_wakeup_filter: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let gpio_wakeup_filter: u32 = unsafe { ::core::mem::transmute(gpio_wakeup_filter) };
            gpio_wakeup_filter as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_21 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_21__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_21__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_21__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_sleep_reject_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_sleep_reject_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn light_slp_reject_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_light_slp_reject_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deep_slp_reject_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deep_slp_reject_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_sleep_reject_ena: u32,
        light_slp_reject_en: u32,
        deep_slp_reject_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 18u8, {
            let rtc_sleep_reject_ena: u32 = unsafe { ::core::mem::transmute(rtc_sleep_reject_ena) };
            rtc_sleep_reject_ena as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let light_slp_reject_en: u32 = unsafe { ::core::mem::transmute(light_slp_reject_en) };
            light_slp_reject_en as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let deep_slp_reject_en: u32 = unsafe { ::core::mem::transmute(deep_slp_reject_en) };
            deep_slp_reject_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_22 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_22__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_22__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_22__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn cpusel_conf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpusel_conf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpuperiod_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_cpuperiod_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        cpusel_conf: u32,
        cpuperiod_sel: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 29u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let cpusel_conf: u32 = unsafe { ::core::mem::transmute(cpusel_conf) };
            cpusel_conf as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let cpuperiod_sel: u32 = unsafe { ::core::mem::transmute(cpuperiod_sel) };
            cpuperiod_sel as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_23 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_23__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_23__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_23__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn efuse_clk_force_gating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_efuse_clk_force_gating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn efuse_clk_force_nogating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_efuse_clk_force_nogating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_div_sel_vld(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_div_sel_vld(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_div(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_div(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn enb_ck8m(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enb_ck8m(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enb_ck8m_div(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enb_ck8m_div(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_xtal32k_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_xtal32k_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_clk8m_d256_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_clk8m_d256_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_clk8m_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_clk8m_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_div_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_div_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_force_nogating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_force_nogating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_force_nogating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_force_nogating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_dfreq(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_dfreq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ck8m_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ck8m_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_global_force_gating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_global_force_gating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal_global_force_nogating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xtal_global_force_nogating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fast_clk_rtc_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fast_clk_rtc_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ana_clk_rtc_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ana_clk_rtc_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        efuse_clk_force_gating: u32,
        efuse_clk_force_nogating: u32,
        ck8m_div_sel_vld: u32,
        ck8m_div: u32,
        enb_ck8m: u32,
        enb_ck8m_div: u32,
        dig_xtal32k_en: u32,
        dig_clk8m_d256_en: u32,
        dig_clk8m_en: u32,
        reserved11: u32,
        ck8m_div_sel: u32,
        xtal_force_nogating: u32,
        ck8m_force_nogating: u32,
        ck8m_dfreq: u32,
        ck8m_force_pd: u32,
        ck8m_force_pu: u32,
        xtal_global_force_gating: u32,
        xtal_global_force_nogating: u32,
        fast_clk_rtc_sel: u32,
        ana_clk_rtc_sel: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let efuse_clk_force_gating: u32 =
                unsafe { ::core::mem::transmute(efuse_clk_force_gating) };
            efuse_clk_force_gating as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let efuse_clk_force_nogating: u32 =
                unsafe { ::core::mem::transmute(efuse_clk_force_nogating) };
            efuse_clk_force_nogating as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ck8m_div_sel_vld: u32 = unsafe { ::core::mem::transmute(ck8m_div_sel_vld) };
            ck8m_div_sel_vld as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let ck8m_div: u32 = unsafe { ::core::mem::transmute(ck8m_div) };
            ck8m_div as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let enb_ck8m: u32 = unsafe { ::core::mem::transmute(enb_ck8m) };
            enb_ck8m as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enb_ck8m_div: u32 = unsafe { ::core::mem::transmute(enb_ck8m_div) };
            enb_ck8m_div as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let dig_xtal32k_en: u32 = unsafe { ::core::mem::transmute(dig_xtal32k_en) };
            dig_xtal32k_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let dig_clk8m_d256_en: u32 = unsafe { ::core::mem::transmute(dig_clk8m_d256_en) };
            dig_clk8m_d256_en as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let dig_clk8m_en: u32 = unsafe { ::core::mem::transmute(dig_clk8m_en) };
            dig_clk8m_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 3u8, {
            let ck8m_div_sel: u32 = unsafe { ::core::mem::transmute(ck8m_div_sel) };
            ck8m_div_sel as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let xtal_force_nogating: u32 = unsafe { ::core::mem::transmute(xtal_force_nogating) };
            xtal_force_nogating as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let ck8m_force_nogating: u32 = unsafe { ::core::mem::transmute(ck8m_force_nogating) };
            ck8m_force_nogating as u64
        });
        __bindgen_bitfield_unit.set(17usize, 8u8, {
            let ck8m_dfreq: u32 = unsafe { ::core::mem::transmute(ck8m_dfreq) };
            ck8m_dfreq as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let ck8m_force_pd: u32 = unsafe { ::core::mem::transmute(ck8m_force_pd) };
            ck8m_force_pd as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let ck8m_force_pu: u32 = unsafe { ::core::mem::transmute(ck8m_force_pu) };
            ck8m_force_pu as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let xtal_global_force_gating: u32 =
                unsafe { ::core::mem::transmute(xtal_global_force_gating) };
            xtal_global_force_gating as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let xtal_global_force_nogating: u32 =
                unsafe { ::core::mem::transmute(xtal_global_force_nogating) };
            xtal_global_force_nogating as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let fast_clk_rtc_sel: u32 = unsafe { ::core::mem::transmute(fast_clk_rtc_sel) };
            fast_clk_rtc_sel as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let ana_clk_rtc_sel: u32 = unsafe { ::core::mem::transmute(ana_clk_rtc_sel) };
            ana_clk_rtc_sel as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_23 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_24 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_24__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_24__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_24__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_ana_clk_div_vld(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_ana_clk_div_vld(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_ana_clk_div(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_ana_clk_div(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn slow_clk_next_edge(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slow_clk_next_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_ana_clk_div_vld: u32,
        rtc_ana_clk_div: u32,
        slow_clk_next_edge: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let rtc_ana_clk_div_vld: u32 = unsafe { ::core::mem::transmute(rtc_ana_clk_div_vld) };
            rtc_ana_clk_div_vld as u64
        });
        __bindgen_bitfield_unit.set(23usize, 8u8, {
            let rtc_ana_clk_div: u32 = unsafe { ::core::mem::transmute(rtc_ana_clk_div) };
            rtc_ana_clk_div as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let slow_clk_next_edge: u32 = unsafe { ::core::mem::transmute(slow_clk_next_edge) };
            slow_clk_next_edge as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_24 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_25 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_25__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_25__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_25__bindgen_ty_1 {
    #[inline]
    pub fn sdio_timer_target(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_timer_target(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_dthdrv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_dthdrv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_dcap(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_dcap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_initi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_initi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_en_initi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_en_initi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_dcurlim(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_dcurlim(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_modecurlim(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_modecurlim(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_encurlim(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_encurlim(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_force(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_force(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sdio_tieh(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sdio_tieh(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reg1p8_ready(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reg1p8_ready(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn drefl_sdio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefl_sdio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn drefm_sdio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefm_sdio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn drefh_sdio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_drefh_sdio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_sdio(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_sdio(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sdio_timer_target: u32,
        reserved8: u32,
        sdio_dthdrv: u32,
        sdio_dcap: u32,
        sdio_initi: u32,
        sdio_en_initi: u32,
        sdio_dcurlim: u32,
        sdio_modecurlim: u32,
        sdio_encurlim: u32,
        sdio_pd_en: u32,
        sdio_force: u32,
        sdio_tieh: u32,
        reg1p8_ready: u32,
        drefl_sdio: u32,
        drefm_sdio: u32,
        drefh_sdio: u32,
        xpd_sdio: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let sdio_timer_target: u32 = unsafe { ::core::mem::transmute(sdio_timer_target) };
            sdio_timer_target as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let sdio_dthdrv: u32 = unsafe { ::core::mem::transmute(sdio_dthdrv) };
            sdio_dthdrv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let sdio_dcap: u32 = unsafe { ::core::mem::transmute(sdio_dcap) };
            sdio_dcap as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let sdio_initi: u32 = unsafe { ::core::mem::transmute(sdio_initi) };
            sdio_initi as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sdio_en_initi: u32 = unsafe { ::core::mem::transmute(sdio_en_initi) };
            sdio_en_initi as u64
        });
        __bindgen_bitfield_unit.set(16usize, 3u8, {
            let sdio_dcurlim: u32 = unsafe { ::core::mem::transmute(sdio_dcurlim) };
            sdio_dcurlim as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let sdio_modecurlim: u32 = unsafe { ::core::mem::transmute(sdio_modecurlim) };
            sdio_modecurlim as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let sdio_encurlim: u32 = unsafe { ::core::mem::transmute(sdio_encurlim) };
            sdio_encurlim as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let sdio_pd_en: u32 = unsafe { ::core::mem::transmute(sdio_pd_en) };
            sdio_pd_en as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let sdio_force: u32 = unsafe { ::core::mem::transmute(sdio_force) };
            sdio_force as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let sdio_tieh: u32 = unsafe { ::core::mem::transmute(sdio_tieh) };
            sdio_tieh as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let reg1p8_ready: u32 = unsafe { ::core::mem::transmute(reg1p8_ready) };
            reg1p8_ready as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let drefl_sdio: u32 = unsafe { ::core::mem::transmute(drefl_sdio) };
            drefl_sdio as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let drefm_sdio: u32 = unsafe { ::core::mem::transmute(drefm_sdio) };
            drefm_sdio as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let drefh_sdio: u32 = unsafe { ::core::mem::transmute(drefh_sdio) };
            drefh_sdio as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let xpd_sdio: u32 = unsafe { ::core::mem::transmute(xpd_sdio) };
            xpd_sdio as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_25 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_26 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_26__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_26__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_26__bindgen_ty_1 {
    #[inline]
    pub fn dg_vdd_drv_b_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_dg_vdd_drv_b_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_vdd_drv_b_slp_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_vdd_drv_b_slp_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_buf_idle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_buf_idle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_buf_wake(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_buf_wake(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_buf_deep_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_buf_deep_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_buf_monitor(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_buf_monitor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pd_cur_deep_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pd_cur_deep_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pd_cur_monitor(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pd_cur_monitor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_sleep_deep_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_sleep_deep_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bias_sleep_monitor(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bias_sleep_monitor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dbg_atten_deep_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_dbg_atten_deep_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn dbg_atten_monitor(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_dbg_atten_monitor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dg_vdd_drv_b_slp: u32,
        dg_vdd_drv_b_slp_en: u32,
        reserved9: u32,
        bias_buf_idle: u32,
        bias_buf_wake: u32,
        bias_buf_deep_slp: u32,
        bias_buf_monitor: u32,
        pd_cur_deep_slp: u32,
        pd_cur_monitor: u32,
        bias_sleep_deep_slp: u32,
        bias_sleep_monitor: u32,
        dbg_atten_deep_slp: u32,
        dbg_atten_monitor: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let dg_vdd_drv_b_slp: u32 = unsafe { ::core::mem::transmute(dg_vdd_drv_b_slp) };
            dg_vdd_drv_b_slp as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let dg_vdd_drv_b_slp_en: u32 = unsafe { ::core::mem::transmute(dg_vdd_drv_b_slp_en) };
            dg_vdd_drv_b_slp_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let reserved9: u32 = unsafe { ::core::mem::transmute(reserved9) };
            reserved9 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bias_buf_idle: u32 = unsafe { ::core::mem::transmute(bias_buf_idle) };
            bias_buf_idle as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bias_buf_wake: u32 = unsafe { ::core::mem::transmute(bias_buf_wake) };
            bias_buf_wake as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bias_buf_deep_slp: u32 = unsafe { ::core::mem::transmute(bias_buf_deep_slp) };
            bias_buf_deep_slp as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bias_buf_monitor: u32 = unsafe { ::core::mem::transmute(bias_buf_monitor) };
            bias_buf_monitor as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let pd_cur_deep_slp: u32 = unsafe { ::core::mem::transmute(pd_cur_deep_slp) };
            pd_cur_deep_slp as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let pd_cur_monitor: u32 = unsafe { ::core::mem::transmute(pd_cur_monitor) };
            pd_cur_monitor as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let bias_sleep_deep_slp: u32 = unsafe { ::core::mem::transmute(bias_sleep_deep_slp) };
            bias_sleep_deep_slp as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let bias_sleep_monitor: u32 = unsafe { ::core::mem::transmute(bias_sleep_monitor) };
            bias_sleep_monitor as u64
        });
        __bindgen_bitfield_unit.set(18usize, 4u8, {
            let dbg_atten_deep_slp: u32 = unsafe { ::core::mem::transmute(dbg_atten_deep_slp) };
            dbg_atten_deep_slp as u64
        });
        __bindgen_bitfield_unit.set(22usize, 4u8, {
            let dbg_atten_monitor: u32 = unsafe { ::core::mem::transmute(dbg_atten_monitor) };
            dbg_atten_monitor as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_26 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_27 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_27__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_27__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_27__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_cal_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_cal_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn sck_dcap(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sck_dcap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dboost_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dboost_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_dboost_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_dboost_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtculator_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtculator_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtculator_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtculator_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        dig_cal_en: u32,
        reserved8: u32,
        sck_dcap: u32,
        reserved22: u32,
        rtc_dboost_force_pd: u32,
        rtc_dboost_force_pu: u32,
        rtculator_force_pd: u32,
        rtculator_force_pu: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let dig_cal_en: u32 = unsafe { ::core::mem::transmute(dig_cal_en) };
            dig_cal_en as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 8u8, {
            let sck_dcap: u32 = unsafe { ::core::mem::transmute(sck_dcap) };
            sck_dcap as u64
        });
        __bindgen_bitfield_unit.set(22usize, 6u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let rtc_dboost_force_pd: u32 = unsafe { ::core::mem::transmute(rtc_dboost_force_pd) };
            rtc_dboost_force_pd as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let rtc_dboost_force_pu: u32 = unsafe { ::core::mem::transmute(rtc_dboost_force_pu) };
            rtc_dboost_force_pu as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let rtculator_force_pd: u32 = unsafe { ::core::mem::transmute(rtculator_force_pd) };
            rtculator_force_pd as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let rtculator_force_pu: u32 = unsafe { ::core::mem::transmute(rtculator_force_pu) };
            rtculator_force_pu as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_27 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_28 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_28__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_28__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_28__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_pad_force_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_pad_force_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_pad_force_hold: u32,
        reserved22: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 21u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let rtc_pad_force_hold: u32 = unsafe { ::core::mem::transmute(rtc_pad_force_hold) };
            rtc_pad_force_hold as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_28 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_29 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_29__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_29__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_29__bindgen_ty_1 {
    #[inline]
    pub fn vdd_spi_pwr_drv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_vdd_spi_pwr_drv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vdd_spi_pwr_force(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vdd_spi_pwr_force(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lslp_mem_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lslp_mem_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lslp_mem_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lslp_mem_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fastmem_force_lpd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fastmem_force_lpd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fastmem_force_lpu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fastmem_force_lpu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved23(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved23(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_pd_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_pd_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vdd_spi_pwr_drv: u32,
        vdd_spi_pwr_force: u32,
        lslp_mem_force_pd: u32,
        lslp_mem_force_pu: u32,
        reserved5: u32,
        bt_force_pd: u32,
        bt_force_pu: u32,
        dg_peri_force_pd: u32,
        dg_peri_force_pu: u32,
        fastmem_force_lpd: u32,
        fastmem_force_lpu: u32,
        wifi_force_pd: u32,
        wifi_force_pu: u32,
        dg_wrap_force_pd: u32,
        dg_wrap_force_pu: u32,
        cpu_top_force_pd: u32,
        cpu_top_force_pu: u32,
        reserved23: u32,
        bt_pd_en: u32,
        dg_peri_pd_en: u32,
        cpu_top_pd_en: u32,
        wifi_pd_en: u32,
        dg_wrap_pd_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let vdd_spi_pwr_drv: u32 = unsafe { ::core::mem::transmute(vdd_spi_pwr_drv) };
            vdd_spi_pwr_drv as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let vdd_spi_pwr_force: u32 = unsafe { ::core::mem::transmute(vdd_spi_pwr_force) };
            vdd_spi_pwr_force as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let lslp_mem_force_pd: u32 = unsafe { ::core::mem::transmute(lslp_mem_force_pd) };
            lslp_mem_force_pd as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let lslp_mem_force_pu: u32 = unsafe { ::core::mem::transmute(lslp_mem_force_pu) };
            lslp_mem_force_pu as u64
        });
        __bindgen_bitfield_unit.set(5usize, 6u8, {
            let reserved5: u32 = unsafe { ::core::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bt_force_pd: u32 = unsafe { ::core::mem::transmute(bt_force_pd) };
            bt_force_pd as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bt_force_pu: u32 = unsafe { ::core::mem::transmute(bt_force_pu) };
            bt_force_pu as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dg_peri_force_pd: u32 = unsafe { ::core::mem::transmute(dg_peri_force_pd) };
            dg_peri_force_pd as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let dg_peri_force_pu: u32 = unsafe { ::core::mem::transmute(dg_peri_force_pu) };
            dg_peri_force_pu as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let fastmem_force_lpd: u32 = unsafe { ::core::mem::transmute(fastmem_force_lpd) };
            fastmem_force_lpd as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let fastmem_force_lpu: u32 = unsafe { ::core::mem::transmute(fastmem_force_lpu) };
            fastmem_force_lpu as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let wifi_force_pd: u32 = unsafe { ::core::mem::transmute(wifi_force_pd) };
            wifi_force_pd as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let wifi_force_pu: u32 = unsafe { ::core::mem::transmute(wifi_force_pu) };
            wifi_force_pu as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let dg_wrap_force_pd: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_pd) };
            dg_wrap_force_pd as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let dg_wrap_force_pu: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_pu) };
            dg_wrap_force_pu as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let cpu_top_force_pd: u32 = unsafe { ::core::mem::transmute(cpu_top_force_pd) };
            cpu_top_force_pd as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let cpu_top_force_pu: u32 = unsafe { ::core::mem::transmute(cpu_top_force_pu) };
            cpu_top_force_pu as u64
        });
        __bindgen_bitfield_unit.set(23usize, 4u8, {
            let reserved23: u32 = unsafe { ::core::mem::transmute(reserved23) };
            reserved23 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let bt_pd_en: u32 = unsafe { ::core::mem::transmute(bt_pd_en) };
            bt_pd_en as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let dg_peri_pd_en: u32 = unsafe { ::core::mem::transmute(dg_peri_pd_en) };
            dg_peri_pd_en as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let cpu_top_pd_en: u32 = unsafe { ::core::mem::transmute(cpu_top_pd_en) };
            cpu_top_pd_en as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let wifi_pd_en: u32 = unsafe { ::core::mem::transmute(wifi_pd_en) };
            wifi_pd_en as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let dg_wrap_pd_en: u32 = unsafe { ::core::mem::transmute(dg_wrap_pd_en) };
            dg_wrap_pd_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_29 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_30 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_30__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_30__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_30__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_iso_force_off(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_iso_force_off(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_iso_force_on(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_iso_force_on(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_autohold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_autohold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn clr_dg_pad_autohold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clr_dg_pad_autohold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_autohold_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_autohold_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_force_unhold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_force_unhold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_pad_force_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_pad_force_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bt_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bt_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_peri_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_peri_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_top_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_top_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dg_wrap_force_noiso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dg_wrap_force_noiso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        dig_iso_force_off: u32,
        dig_iso_force_on: u32,
        dg_pad_autohold: u32,
        clr_dg_pad_autohold: u32,
        dg_pad_autohold_en: u32,
        dg_pad_force_noiso: u32,
        dg_pad_force_iso: u32,
        dg_pad_force_unhold: u32,
        dg_pad_force_hold: u32,
        reserved16: u32,
        bt_force_iso: u32,
        bt_force_noiso: u32,
        dg_peri_force_iso: u32,
        dg_peri_force_noiso: u32,
        cpu_top_force_iso: u32,
        cpu_top_force_noiso: u32,
        wifi_force_iso: u32,
        wifi_force_noiso: u32,
        dg_wrap_force_iso: u32,
        dg_wrap_force_noiso: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let dig_iso_force_off: u32 = unsafe { ::core::mem::transmute(dig_iso_force_off) };
            dig_iso_force_off as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let dig_iso_force_on: u32 = unsafe { ::core::mem::transmute(dig_iso_force_on) };
            dig_iso_force_on as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let dg_pad_autohold: u32 = unsafe { ::core::mem::transmute(dg_pad_autohold) };
            dg_pad_autohold as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let clr_dg_pad_autohold: u32 = unsafe { ::core::mem::transmute(clr_dg_pad_autohold) };
            clr_dg_pad_autohold as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let dg_pad_autohold_en: u32 = unsafe { ::core::mem::transmute(dg_pad_autohold_en) };
            dg_pad_autohold_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let dg_pad_force_noiso: u32 = unsafe { ::core::mem::transmute(dg_pad_force_noiso) };
            dg_pad_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let dg_pad_force_iso: u32 = unsafe { ::core::mem::transmute(dg_pad_force_iso) };
            dg_pad_force_iso as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let dg_pad_force_unhold: u32 = unsafe { ::core::mem::transmute(dg_pad_force_unhold) };
            dg_pad_force_unhold as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let dg_pad_force_hold: u32 = unsafe { ::core::mem::transmute(dg_pad_force_hold) };
            dg_pad_force_hold as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let bt_force_iso: u32 = unsafe { ::core::mem::transmute(bt_force_iso) };
            bt_force_iso as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let bt_force_noiso: u32 = unsafe { ::core::mem::transmute(bt_force_noiso) };
            bt_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let dg_peri_force_iso: u32 = unsafe { ::core::mem::transmute(dg_peri_force_iso) };
            dg_peri_force_iso as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let dg_peri_force_noiso: u32 = unsafe { ::core::mem::transmute(dg_peri_force_noiso) };
            dg_peri_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let cpu_top_force_iso: u32 = unsafe { ::core::mem::transmute(cpu_top_force_iso) };
            cpu_top_force_iso as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let cpu_top_force_noiso: u32 = unsafe { ::core::mem::transmute(cpu_top_force_noiso) };
            cpu_top_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let wifi_force_iso: u32 = unsafe { ::core::mem::transmute(wifi_force_iso) };
            wifi_force_iso as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let wifi_force_noiso: u32 = unsafe { ::core::mem::transmute(wifi_force_noiso) };
            wifi_force_noiso as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let dg_wrap_force_iso: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_iso) };
            dg_wrap_force_iso as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let dg_wrap_force_noiso: u32 = unsafe { ::core::mem::transmute(dg_wrap_force_noiso) };
            dg_wrap_force_noiso as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_30 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_31 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_31__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_31__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_31__bindgen_ty_1 {
    #[inline]
    pub fn chip_reset_width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_chip_reset_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn chip_reset_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chip_reset_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pause_in_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pause_in_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn appcpu_reset_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_appcpu_reset_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn procpu_reset_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_procpu_reset_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flashboot_mod_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flashboot_mod_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sys_reset_length(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_sys_reset_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cpu_reset_length(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_cpu_reset_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stg3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stg3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stg2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stg2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stg1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stg1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stg0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stg0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chip_reset_width: u32,
        chip_reset_en: u32,
        pause_in_slp: u32,
        appcpu_reset_en: u32,
        procpu_reset_en: u32,
        flashboot_mod_en: u32,
        sys_reset_length: u32,
        cpu_reset_length: u32,
        stg3: u32,
        stg2: u32,
        stg1: u32,
        stg0: u32,
        en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let chip_reset_width: u32 = unsafe { ::core::mem::transmute(chip_reset_width) };
            chip_reset_width as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let chip_reset_en: u32 = unsafe { ::core::mem::transmute(chip_reset_en) };
            chip_reset_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pause_in_slp: u32 = unsafe { ::core::mem::transmute(pause_in_slp) };
            pause_in_slp as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let appcpu_reset_en: u32 = unsafe { ::core::mem::transmute(appcpu_reset_en) };
            appcpu_reset_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let procpu_reset_en: u32 = unsafe { ::core::mem::transmute(procpu_reset_en) };
            procpu_reset_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let flashboot_mod_en: u32 = unsafe { ::core::mem::transmute(flashboot_mod_en) };
            flashboot_mod_en as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let sys_reset_length: u32 = unsafe { ::core::mem::transmute(sys_reset_length) };
            sys_reset_length as u64
        });
        __bindgen_bitfield_unit.set(16usize, 3u8, {
            let cpu_reset_length: u32 = unsafe { ::core::mem::transmute(cpu_reset_length) };
            cpu_reset_length as u64
        });
        __bindgen_bitfield_unit.set(19usize, 3u8, {
            let stg3: u32 = unsafe { ::core::mem::transmute(stg3) };
            stg3 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 3u8, {
            let stg2: u32 = unsafe { ::core::mem::transmute(stg2) };
            stg2 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 3u8, {
            let stg1: u32 = unsafe { ::core::mem::transmute(stg1) };
            stg1 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 3u8, {
            let stg0: u32 = unsafe { ::core::mem::transmute(stg0) };
            stg0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let en: u32 = unsafe { ::core::mem::transmute(en) };
            en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_31 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_32 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_32__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_32__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_32__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn feed(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_feed(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(reserved0: u32, feed: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let feed: u32 = unsafe { ::core::mem::transmute(feed) };
            feed as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_32 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_33 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_33__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_33__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_33__bindgen_ty_1 {
    #[inline]
    pub fn swd_reset_flag(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_reset_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_feed_int(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_feed_int(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_bypass_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_bypass_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_signal_width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_swd_signal_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_rst_flag_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_rst_flag_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_feed(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_feed(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_disable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn swd_auto_feed_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_swd_auto_feed_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        swd_reset_flag: u32,
        swd_feed_int: u32,
        reserved2: u32,
        swd_bypass_rst: u32,
        swd_signal_width: u32,
        swd_rst_flag_clr: u32,
        swd_feed: u32,
        swd_disable: u32,
        swd_auto_feed_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let swd_reset_flag: u32 = unsafe { ::core::mem::transmute(swd_reset_flag) };
            swd_reset_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let swd_feed_int: u32 = unsafe { ::core::mem::transmute(swd_feed_int) };
            swd_feed_int as u64
        });
        __bindgen_bitfield_unit.set(2usize, 15u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let swd_bypass_rst: u32 = unsafe { ::core::mem::transmute(swd_bypass_rst) };
            swd_bypass_rst as u64
        });
        __bindgen_bitfield_unit.set(18usize, 10u8, {
            let swd_signal_width: u32 = unsafe { ::core::mem::transmute(swd_signal_width) };
            swd_signal_width as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let swd_rst_flag_clr: u32 = unsafe { ::core::mem::transmute(swd_rst_flag_clr) };
            swd_rst_flag_clr as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let swd_feed: u32 = unsafe { ::core::mem::transmute(swd_feed) };
            swd_feed as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let swd_disable: u32 = unsafe { ::core::mem::transmute(swd_disable) };
            swd_disable as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let swd_auto_feed_en: u32 = unsafe { ::core::mem::transmute(swd_auto_feed_en) };
            swd_auto_feed_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_33 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_34 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_34__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_34__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_34__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn appcpu_c1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_appcpu_c1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn procpu_c1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_procpu_c1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        appcpu_c1: u32,
        procpu_c1: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 6u8, {
            let appcpu_c1: u32 = unsafe { ::core::mem::transmute(appcpu_c1) };
            appcpu_c1 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let procpu_c1: u32 = unsafe { ::core::mem::transmute(procpu_c1) };
            procpu_c1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_34 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_35 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_35__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_35__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_35__bindgen_ty_1 {
    #[inline]
    pub fn xpd_rom0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_rom0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_dig_dcdc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_dig_dcdc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_peri_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_peri_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_rtc_peri(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_rtc_peri(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wifi_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wifi_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_wifi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_wifi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dig_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dig_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xpd_dig(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xpd_dig(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_touch_state_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_touch_state_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_touch_state_switch(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_touch_state_switch(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_touch_state_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_touch_state_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_touch_state_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_touch_state_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cocpu_state_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cocpu_state_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cocpu_state_switch(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cocpu_state_switch(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cocpu_state_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cocpu_state_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cocpu_state_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cocpu_state_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_xtal_iso(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_xtal_iso(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_pll_on(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_pll_on(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_rdy_for_wakeup(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_rdy_for_wakeup(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_wait_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_wait_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_in_wakeup_state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_in_wakeup_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_in_low_power_state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_in_low_power_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_in_wait_8m(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_in_wait_8m(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_in_wait_pll(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_in_wait_pll(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_in_wait_xtl(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_in_wait_xtl(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_in_slp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_in_slp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state_in_idle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state_in_idle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xpd_rom0: u32,
        reserved1: u32,
        xpd_dig_dcdc: u32,
        rtc_peri_iso: u32,
        xpd_rtc_peri: u32,
        wifi_iso: u32,
        xpd_wifi: u32,
        dig_iso: u32,
        xpd_dig: u32,
        rtc_touch_state_start: u32,
        rtc_touch_state_switch: u32,
        rtc_touch_state_slp: u32,
        rtc_touch_state_done: u32,
        rtc_cocpu_state_start: u32,
        rtc_cocpu_state_switch: u32,
        rtc_cocpu_state_slp: u32,
        rtc_cocpu_state_done: u32,
        rtc_main_state_xtal_iso: u32,
        rtc_main_state_pll_on: u32,
        rtc_rdy_for_wakeup: u32,
        rtc_main_state_wait_end: u32,
        rtc_in_wakeup_state: u32,
        rtc_in_low_power_state: u32,
        rtc_main_state_in_wait_8m: u32,
        rtc_main_state_in_wait_pll: u32,
        rtc_main_state_in_wait_xtl: u32,
        rtc_main_state_in_slp: u32,
        rtc_main_state_in_idle: u32,
        rtc_main_state: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let xpd_rom0: u32 = unsafe { ::core::mem::transmute(xpd_rom0) };
            xpd_rom0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let xpd_dig_dcdc: u32 = unsafe { ::core::mem::transmute(xpd_dig_dcdc) };
            xpd_dig_dcdc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_peri_iso: u32 = unsafe { ::core::mem::transmute(rtc_peri_iso) };
            rtc_peri_iso as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let xpd_rtc_peri: u32 = unsafe { ::core::mem::transmute(xpd_rtc_peri) };
            xpd_rtc_peri as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let wifi_iso: u32 = unsafe { ::core::mem::transmute(wifi_iso) };
            wifi_iso as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let xpd_wifi: u32 = unsafe { ::core::mem::transmute(xpd_wifi) };
            xpd_wifi as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let dig_iso: u32 = unsafe { ::core::mem::transmute(dig_iso) };
            dig_iso as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xpd_dig: u32 = unsafe { ::core::mem::transmute(xpd_dig) };
            xpd_dig as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rtc_touch_state_start: u32 =
                unsafe { ::core::mem::transmute(rtc_touch_state_start) };
            rtc_touch_state_start as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_touch_state_switch: u32 =
                unsafe { ::core::mem::transmute(rtc_touch_state_switch) };
            rtc_touch_state_switch as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let rtc_touch_state_slp: u32 = unsafe { ::core::mem::transmute(rtc_touch_state_slp) };
            rtc_touch_state_slp as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let rtc_touch_state_done: u32 = unsafe { ::core::mem::transmute(rtc_touch_state_done) };
            rtc_touch_state_done as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let rtc_cocpu_state_start: u32 =
                unsafe { ::core::mem::transmute(rtc_cocpu_state_start) };
            rtc_cocpu_state_start as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let rtc_cocpu_state_switch: u32 =
                unsafe { ::core::mem::transmute(rtc_cocpu_state_switch) };
            rtc_cocpu_state_switch as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_cocpu_state_slp: u32 = unsafe { ::core::mem::transmute(rtc_cocpu_state_slp) };
            rtc_cocpu_state_slp as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_cocpu_state_done: u32 = unsafe { ::core::mem::transmute(rtc_cocpu_state_done) };
            rtc_cocpu_state_done as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let rtc_main_state_xtal_iso: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_xtal_iso) };
            rtc_main_state_xtal_iso as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let rtc_main_state_pll_on: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_pll_on) };
            rtc_main_state_pll_on as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_rdy_for_wakeup: u32 = unsafe { ::core::mem::transmute(rtc_rdy_for_wakeup) };
            rtc_rdy_for_wakeup as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_main_state_wait_end: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_wait_end) };
            rtc_main_state_wait_end as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let rtc_in_wakeup_state: u32 = unsafe { ::core::mem::transmute(rtc_in_wakeup_state) };
            rtc_in_wakeup_state as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let rtc_in_low_power_state: u32 =
                unsafe { ::core::mem::transmute(rtc_in_low_power_state) };
            rtc_in_low_power_state as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let rtc_main_state_in_wait_8m: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_in_wait_8m) };
            rtc_main_state_in_wait_8m as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let rtc_main_state_in_wait_pll: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_in_wait_pll) };
            rtc_main_state_in_wait_pll as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let rtc_main_state_in_wait_xtl: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_in_wait_xtl) };
            rtc_main_state_in_wait_xtl as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let rtc_main_state_in_slp: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_in_slp) };
            rtc_main_state_in_slp as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let rtc_main_state_in_idle: u32 =
                unsafe { ::core::mem::transmute(rtc_main_state_in_idle) };
            rtc_main_state_in_idle as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let rtc_main_state: u32 = unsafe { ::core::mem::transmute(rtc_main_state) };
            rtc_main_state as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_35 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_36 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_36__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_36__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_36__bindgen_ty_1 {
    #[inline]
    pub fn rtc_gpio_pin0_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin0_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin1_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin1_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin2_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin2_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin3_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin3_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin4_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin4_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin5_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin5_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_gpio_pin0_hold: u32,
        rtc_gpio_pin1_hold: u32,
        rtc_gpio_pin2_hold: u32,
        rtc_gpio_pin3_hold: u32,
        rtc_gpio_pin4_hold: u32,
        rtc_gpio_pin5_hold: u32,
        reserved6: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rtc_gpio_pin0_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin0_hold) };
            rtc_gpio_pin0_hold as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtc_gpio_pin1_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin1_hold) };
            rtc_gpio_pin1_hold as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rtc_gpio_pin2_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin2_hold) };
            rtc_gpio_pin2_hold as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_gpio_pin3_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin3_hold) };
            rtc_gpio_pin3_hold as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let rtc_gpio_pin4_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin4_hold) };
            rtc_gpio_pin4_hold as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rtc_gpio_pin5_hold: u32 = unsafe { ::core::mem::transmute(rtc_gpio_pin5_hold) };
            rtc_gpio_pin5_hold as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved6: u32 = unsafe { ::core::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_36 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_37 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_37__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_37__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_37__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn int_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_int_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn close_flash_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_close_flash_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pd_rf_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pd_rf_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rst_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_rst_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn rst_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rst_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rst_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rst_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ana_rst_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ana_rst_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cnt_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cnt_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn det(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_det(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        int_wait: u32,
        close_flash_ena: u32,
        pd_rf_ena: u32,
        rst_wait: u32,
        rst_ena: u32,
        rst_sel: u32,
        ana_rst_en: u32,
        cnt_clr: u32,
        ena: u32,
        det: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 10u8, {
            let int_wait: u32 = unsafe { ::core::mem::transmute(int_wait) };
            int_wait as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let close_flash_ena: u32 = unsafe { ::core::mem::transmute(close_flash_ena) };
            close_flash_ena as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let pd_rf_ena: u32 = unsafe { ::core::mem::transmute(pd_rf_ena) };
            pd_rf_ena as u64
        });
        __bindgen_bitfield_unit.set(16usize, 10u8, {
            let rst_wait: u32 = unsafe { ::core::mem::transmute(rst_wait) };
            rst_wait as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let rst_ena: u32 = unsafe { ::core::mem::transmute(rst_ena) };
            rst_ena as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let rst_sel: u32 = unsafe { ::core::mem::transmute(rst_sel) };
            rst_sel as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let ana_rst_en: u32 = unsafe { ::core::mem::transmute(ana_rst_en) };
            ana_rst_en as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let cnt_clr: u32 = unsafe { ::core::mem::transmute(cnt_clr) };
            cnt_clr as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let ena: u32 = unsafe { ::core::mem::transmute(ena) };
            ena as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let det: u32 = unsafe { ::core::mem::transmute(det) };
            det as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_37 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_38 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_38__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_38__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_38__bindgen_ty_1 {
    #[inline]
    pub fn rtc_timer_value1_high(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_timer_value1_high(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_timer_value1_high: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let rtc_timer_value1_high: u32 =
                unsafe { ::core::mem::transmute(rtc_timer_value1_high) };
            rtc_timer_value1_high as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_38 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_39 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_39__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_39__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_39__bindgen_ty_1 {
    #[inline]
    pub fn xtal32k_return_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_return_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_restart_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_restart_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_wdt_timeout(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_wdt_timeout(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn xtal32k_stable_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_xtal32k_stable_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        xtal32k_return_wait: u32,
        xtal32k_restart_wait: u32,
        xtal32k_wdt_timeout: u32,
        xtal32k_stable_thres: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let xtal32k_return_wait: u32 = unsafe { ::core::mem::transmute(xtal32k_return_wait) };
            xtal32k_return_wait as u64
        });
        __bindgen_bitfield_unit.set(4usize, 16u8, {
            let xtal32k_restart_wait: u32 = unsafe { ::core::mem::transmute(xtal32k_restart_wait) };
            xtal32k_restart_wait as u64
        });
        __bindgen_bitfield_unit.set(20usize, 8u8, {
            let xtal32k_wdt_timeout: u32 = unsafe { ::core::mem::transmute(xtal32k_wdt_timeout) };
            xtal32k_wdt_timeout as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let xtal32k_stable_thres: u32 = unsafe { ::core::mem::transmute(xtal32k_stable_thres) };
            xtal32k_stable_thres as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_39 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_40 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_40__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_40__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_40__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn io_mux_reset_disable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_io_mux_reset_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved19(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set_reserved19(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        io_mux_reset_disable: u32,
        reserved19: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let io_mux_reset_disable: u32 = unsafe { ::core::mem::transmute(io_mux_reset_disable) };
            io_mux_reset_disable as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let reserved19: u32 = unsafe { ::core::mem::transmute(reserved19) };
            reserved19 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_40 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_41 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_41__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_41__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_41__bindgen_ty_1 {
    #[inline]
    pub fn reject_cause(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reject_cause(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reject_cause: u32,
        reserved18: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let reject_cause: u32 = unsafe { ::core::mem::transmute(reject_cause) };
            reject_cause as u64
        });
        __bindgen_bitfield_unit.set(18usize, 14u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_41 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_42 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_42__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_42__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_42__bindgen_ty_1 {
    #[inline]
    pub fn force_download_boot(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_download_boot(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_download_boot: u32,
        reserved1: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_download_boot: u32 = unsafe { ::core::mem::transmute(force_download_boot) };
            force_download_boot as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_42 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_43 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_43__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_43__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_43__bindgen_ty_1 {
    #[inline]
    pub fn wakeup_cause(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_wakeup_cause(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wakeup_cause: u32,
        reserved17: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 17u8, {
            let wakeup_cause: u32 = unsafe { ::core::mem::transmute(wakeup_cause) };
            wakeup_cause as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_43 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_44 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_44__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_44__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_44__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ulp_cp_timer_slp_cycle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_ulp_cp_timer_slp_cycle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        ulp_cp_timer_slp_cycle: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let ulp_cp_timer_slp_cycle: u32 =
                unsafe { ::core::mem::transmute(ulp_cp_timer_slp_cycle) };
            ulp_cp_timer_slp_cycle as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_44 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_45 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_45__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_45__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_45__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal_w1ts(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal_w1ts(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup_w1ts: u32,
        slp_reject_w1ts: u32,
        reserved2: u32,
        rtc_wdt_w1ts: u32,
        reserved4: u32,
        w1ts: u32,
        rtc_main_timer_w1ts: u32,
        reserved11: u32,
        rtc_swd_w1ts: u32,
        rtc_xtal32k_dead_w1ts: u32,
        reserved17: u32,
        rtc_glitch_det_w1ts: u32,
        rtc_bbpll_cal_w1ts: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup_w1ts: u32 = unsafe { ::core::mem::transmute(slp_wakeup_w1ts) };
            slp_wakeup_w1ts as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject_w1ts: u32 = unsafe { ::core::mem::transmute(slp_reject_w1ts) };
            slp_reject_w1ts as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt_w1ts: u32 = unsafe { ::core::mem::transmute(rtc_wdt_w1ts) };
            rtc_wdt_w1ts as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let w1ts: u32 = unsafe { ::core::mem::transmute(w1ts) };
            w1ts as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer_w1ts: u32 = unsafe { ::core::mem::transmute(rtc_main_timer_w1ts) };
            rtc_main_timer_w1ts as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd_w1ts: u32 = unsafe { ::core::mem::transmute(rtc_swd_w1ts) };
            rtc_swd_w1ts as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead_w1ts: u32 =
                unsafe { ::core::mem::transmute(rtc_xtal32k_dead_w1ts) };
            rtc_xtal32k_dead_w1ts as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det_w1ts: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det_w1ts) };
            rtc_glitch_det_w1ts as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal_w1ts: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal_w1ts) };
            rtc_bbpll_cal_w1ts as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_45 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_46 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_46__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_46__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_46__bindgen_ty_1 {
    #[inline]
    pub fn slp_wakeup_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_wakeup_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slp_reject_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slp_reject_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_wdt_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_wdt_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_main_timer_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_main_timer_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_swd_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_swd_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_xtal32k_dead_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_xtal32k_dead_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved17(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved17(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_glitch_det_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_glitch_det_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_bbpll_cal_w1tc(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_bbpll_cal_w1tc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        slp_wakeup_w1tc: u32,
        slp_reject_w1tc: u32,
        reserved2: u32,
        rtc_wdt_w1tc: u32,
        reserved4: u32,
        w1tc: u32,
        rtc_main_timer_w1tc: u32,
        reserved11: u32,
        rtc_swd_w1tc: u32,
        rtc_xtal32k_dead_w1tc: u32,
        reserved17: u32,
        rtc_glitch_det_w1tc: u32,
        rtc_bbpll_cal_w1tc: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let slp_wakeup_w1tc: u32 = unsafe { ::core::mem::transmute(slp_wakeup_w1tc) };
            slp_wakeup_w1tc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let slp_reject_w1tc: u32 = unsafe { ::core::mem::transmute(slp_reject_w1tc) };
            slp_reject_w1tc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_wdt_w1tc: u32 = unsafe { ::core::mem::transmute(rtc_wdt_w1tc) };
            rtc_wdt_w1tc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 5u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let w1tc: u32 = unsafe { ::core::mem::transmute(w1tc) };
            w1tc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rtc_main_timer_w1tc: u32 = unsafe { ::core::mem::transmute(rtc_main_timer_w1tc) };
            rtc_main_timer_w1tc as u64
        });
        __bindgen_bitfield_unit.set(11usize, 4u8, {
            let reserved11: u32 = unsafe { ::core::mem::transmute(reserved11) };
            reserved11 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_swd_w1tc: u32 = unsafe { ::core::mem::transmute(rtc_swd_w1tc) };
            rtc_swd_w1tc as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rtc_xtal32k_dead_w1tc: u32 =
                unsafe { ::core::mem::transmute(rtc_xtal32k_dead_w1tc) };
            rtc_xtal32k_dead_w1tc as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let reserved17: u32 = unsafe { ::core::mem::transmute(reserved17) };
            reserved17 as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rtc_glitch_det_w1tc: u32 = unsafe { ::core::mem::transmute(rtc_glitch_det_w1tc) };
            rtc_glitch_det_w1tc as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rtc_bbpll_cal_w1tc: u32 = unsafe { ::core::mem::transmute(rtc_bbpll_cal_w1tc) };
            rtc_bbpll_cal_w1tc as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_46 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_47 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_47__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_47__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_47__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn retention_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_retention_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn retention_done_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_retention_done_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn retention_clkoff_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_retention_clkoff_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn retention_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_retention_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn retention_wait(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_retention_wait(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        retention_clk_sel: u32,
        retention_done_wait: u32,
        retention_clkoff_wait: u32,
        retention_en: u32,
        retention_wait: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let retention_clk_sel: u32 = unsafe { ::core::mem::transmute(retention_clk_sel) };
            retention_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(19usize, 3u8, {
            let retention_done_wait: u32 = unsafe { ::core::mem::transmute(retention_done_wait) };
            retention_done_wait as u64
        });
        __bindgen_bitfield_unit.set(22usize, 4u8, {
            let retention_clkoff_wait: u32 =
                unsafe { ::core::mem::transmute(retention_clkoff_wait) };
            retention_clkoff_wait as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let retention_en: u32 = unsafe { ::core::mem::transmute(retention_en) };
            retention_en as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let retention_wait: u32 = unsafe { ::core::mem::transmute(retention_wait) };
            retention_wait as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_47 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_48 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_48__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_48__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_48__bindgen_ty_1 {
    #[inline]
    pub fn rtc_fib_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_fib_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rtc_fib_sel: u32, reserved3: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let rtc_fib_sel: u32 = unsafe { ::core::mem::transmute(rtc_fib_sel) };
            rtc_fib_sel as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved3: u32 = unsafe { ::core::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_48 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_49 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_49__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_49__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_49__bindgen_ty_1 {
    #[inline]
    pub fn rtc_gpio_wakeup_status(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_wakeup_status(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_wakeup_status_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_wakeup_status_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin_clk_gate(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin_clk_gate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin5_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin5_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin4_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin4_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin3_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin3_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin2_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin2_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin1_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin1_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin0_int_type(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin0_int_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin5_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin5_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin4_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin4_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin3_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin3_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin2_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin2_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin1_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin1_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin0_wakeup_enable(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin0_wakeup_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_gpio_wakeup_status: u32,
        rtc_gpio_wakeup_status_clr: u32,
        rtc_gpio_pin_clk_gate: u32,
        rtc_gpio_pin5_int_type: u32,
        rtc_gpio_pin4_int_type: u32,
        rtc_gpio_pin3_int_type: u32,
        rtc_gpio_pin2_int_type: u32,
        rtc_gpio_pin1_int_type: u32,
        rtc_gpio_pin0_int_type: u32,
        rtc_gpio_pin5_wakeup_enable: u32,
        rtc_gpio_pin4_wakeup_enable: u32,
        rtc_gpio_pin3_wakeup_enable: u32,
        rtc_gpio_pin2_wakeup_enable: u32,
        rtc_gpio_pin1_wakeup_enable: u32,
        rtc_gpio_pin0_wakeup_enable: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let rtc_gpio_wakeup_status: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_wakeup_status) };
            rtc_gpio_wakeup_status as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let rtc_gpio_wakeup_status_clr: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_wakeup_status_clr) };
            rtc_gpio_wakeup_status_clr as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rtc_gpio_pin_clk_gate: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin_clk_gate) };
            rtc_gpio_pin_clk_gate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let rtc_gpio_pin5_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin5_int_type) };
            rtc_gpio_pin5_int_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let rtc_gpio_pin4_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin4_int_type) };
            rtc_gpio_pin4_int_type as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let rtc_gpio_pin3_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin3_int_type) };
            rtc_gpio_pin3_int_type as u64
        });
        __bindgen_bitfield_unit.set(17usize, 3u8, {
            let rtc_gpio_pin2_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin2_int_type) };
            rtc_gpio_pin2_int_type as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let rtc_gpio_pin1_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin1_int_type) };
            rtc_gpio_pin1_int_type as u64
        });
        __bindgen_bitfield_unit.set(23usize, 3u8, {
            let rtc_gpio_pin0_int_type: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin0_int_type) };
            rtc_gpio_pin0_int_type as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let rtc_gpio_pin5_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin5_wakeup_enable) };
            rtc_gpio_pin5_wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let rtc_gpio_pin4_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin4_wakeup_enable) };
            rtc_gpio_pin4_wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let rtc_gpio_pin3_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin3_wakeup_enable) };
            rtc_gpio_pin3_wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let rtc_gpio_pin2_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin2_wakeup_enable) };
            rtc_gpio_pin2_wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let rtc_gpio_pin1_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin1_wakeup_enable) };
            rtc_gpio_pin1_wakeup_enable as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let rtc_gpio_pin0_wakeup_enable: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin0_wakeup_enable) };
            rtc_gpio_pin0_wakeup_enable as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_49 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_50 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_50__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_50__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_50__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_12m_no_gating(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_12m_no_gating(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_bit_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_bit_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_sel0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_sel0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_sel1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_sel1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_sel2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_sel2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_sel3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_sel3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_debug_sel4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_debug_sel4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_debug_12m_no_gating: u32,
        rtc_debug_bit_sel: u32,
        rtc_debug_sel0: u32,
        rtc_debug_sel1: u32,
        rtc_debug_sel2: u32,
        rtc_debug_sel3: u32,
        rtc_debug_sel4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtc_debug_12m_no_gating: u32 =
                unsafe { ::core::mem::transmute(rtc_debug_12m_no_gating) };
            rtc_debug_12m_no_gating as u64
        });
        __bindgen_bitfield_unit.set(2usize, 5u8, {
            let rtc_debug_bit_sel: u32 = unsafe { ::core::mem::transmute(rtc_debug_bit_sel) };
            rtc_debug_bit_sel as u64
        });
        __bindgen_bitfield_unit.set(7usize, 5u8, {
            let rtc_debug_sel0: u32 = unsafe { ::core::mem::transmute(rtc_debug_sel0) };
            rtc_debug_sel0 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 5u8, {
            let rtc_debug_sel1: u32 = unsafe { ::core::mem::transmute(rtc_debug_sel1) };
            rtc_debug_sel1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 5u8, {
            let rtc_debug_sel2: u32 = unsafe { ::core::mem::transmute(rtc_debug_sel2) };
            rtc_debug_sel2 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 5u8, {
            let rtc_debug_sel3: u32 = unsafe { ::core::mem::transmute(rtc_debug_sel3) };
            rtc_debug_sel3 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let rtc_debug_sel4: u32 = unsafe { ::core::mem::transmute(rtc_debug_sel4) };
            rtc_debug_sel4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_50 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_51 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_51__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_51__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_51__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin5_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin5_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin4_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin4_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin3_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin3_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin2_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin2_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin1_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin1_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin0_mux_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin0_mux_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin5_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin5_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin4_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin4_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin3_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin3_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin2_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin2_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin1_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin1_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_gpio_pin0_fun_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_gpio_pin0_fun_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        rtc_gpio_pin5_mux_sel: u32,
        rtc_gpio_pin4_mux_sel: u32,
        rtc_gpio_pin3_mux_sel: u32,
        rtc_gpio_pin2_mux_sel: u32,
        rtc_gpio_pin1_mux_sel: u32,
        rtc_gpio_pin0_mux_sel: u32,
        rtc_gpio_pin5_fun_sel: u32,
        rtc_gpio_pin4_fun_sel: u32,
        rtc_gpio_pin3_fun_sel: u32,
        rtc_gpio_pin2_fun_sel: u32,
        rtc_gpio_pin1_fun_sel: u32,
        rtc_gpio_pin0_fun_sel: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rtc_gpio_pin5_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin5_mux_sel) };
            rtc_gpio_pin5_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rtc_gpio_pin4_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin4_mux_sel) };
            rtc_gpio_pin4_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let rtc_gpio_pin3_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin3_mux_sel) };
            rtc_gpio_pin3_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rtc_gpio_pin2_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin2_mux_sel) };
            rtc_gpio_pin2_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let rtc_gpio_pin1_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin1_mux_sel) };
            rtc_gpio_pin1_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rtc_gpio_pin0_mux_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin0_mux_sel) };
            rtc_gpio_pin0_mux_sel as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let rtc_gpio_pin5_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin5_fun_sel) };
            rtc_gpio_pin5_fun_sel as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let rtc_gpio_pin4_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin4_fun_sel) };
            rtc_gpio_pin4_fun_sel as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let rtc_gpio_pin3_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin3_fun_sel) };
            rtc_gpio_pin3_fun_sel as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let rtc_gpio_pin2_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin2_fun_sel) };
            rtc_gpio_pin2_fun_sel as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let rtc_gpio_pin1_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin1_fun_sel) };
            rtc_gpio_pin1_fun_sel as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let rtc_gpio_pin0_fun_sel: u32 =
                unsafe { ::core::mem::transmute(rtc_gpio_pin0_fun_sel) };
            rtc_gpio_pin0_fun_sel as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_51 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_52 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_52__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_52__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_52__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn sar2_pwdet_cct(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_sar2_pwdet_cct(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn force_xpd_sar(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_force_xpd_sar(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        sar2_pwdet_cct: u32,
        force_xpd_sar: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 27u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 3u8, {
            let sar2_pwdet_cct: u32 = unsafe { ::core::mem::transmute(sar2_pwdet_cct) };
            sar2_pwdet_cct as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let force_xpd_sar: u32 = unsafe { ::core::mem::transmute(force_xpd_sar) };
            force_xpd_sar as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_52 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_53 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_53__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_53__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_53__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn sar_debug_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_sar_debug_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        sar_debug_sel: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 27u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let sar_debug_sel: u32 = unsafe { ::core::mem::transmute(sar_debug_sel) };
            sar_debug_sel as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_53 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_54 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_54__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_54__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_54__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn power_glitch_dsense(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_power_glitch_dsense(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn power_glitch_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_glitch_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_glitch_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_glitch_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_glitch_efuse_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_glitch_efuse_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_glitch_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_glitch_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        power_glitch_dsense: u32,
        power_glitch_force_pd: u32,
        power_glitch_force_pu: u32,
        power_glitch_efuse_sel: u32,
        power_glitch_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 26u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let power_glitch_dsense: u32 = unsafe { ::core::mem::transmute(power_glitch_dsense) };
            power_glitch_dsense as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let power_glitch_force_pd: u32 =
                unsafe { ::core::mem::transmute(power_glitch_force_pd) };
            power_glitch_force_pd as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let power_glitch_force_pu: u32 =
                unsafe { ::core::mem::transmute(power_glitch_force_pu) };
            power_glitch_force_pu as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let power_glitch_efuse_sel: u32 =
                unsafe { ::core::mem::transmute(power_glitch_efuse_sel) };
            power_glitch_efuse_sel as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let power_glitch_en: u32 = unsafe { ::core::mem::transmute(power_glitch_en) };
            power_glitch_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_54 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rtc_cntl_dev_s__bindgen_ty_55 {
    pub __bindgen_anon_1: rtc_cntl_dev_s__bindgen_ty_55__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rtc_cntl_dev_s__bindgen_ty_55__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rtc_cntl_dev_s__bindgen_ty_55__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rtc_cntl_dev_s__bindgen_ty_55 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rtc_cntl_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rtc_cntl_dev_t = rtc_cntl_dev_s;
extern "C" {
    pub static mut RTCCNTL: rtc_cntl_dev_t;
}
#[doc = "< Normal operating mode where TWAI controller can send/receive/acknowledge messages"]
pub const twai_mode_t_TWAI_MODE_NORMAL: twai_mode_t = 0;
#[doc = "< Transmission does not require acknowledgment. Use this mode for self testing"]
pub const twai_mode_t_TWAI_MODE_NO_ACK: twai_mode_t = 1;
#[doc = "< The TWAI controller will not influence the bus (No transmissions or acknowledgments) but can receive messages"]
pub const twai_mode_t_TWAI_MODE_LISTEN_ONLY: twai_mode_t = 2;
#[doc = " @brief   TWAI Controller operating modes"]
pub type twai_mode_t = c_types::c_uint;
#[doc = " @brief   Structure to store a TWAI message"]
#[doc = ""]
#[doc = " @note    The flags member is deprecated"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct twai_message_t {
    pub __bindgen_anon_1: twai_message_t__bindgen_ty_1,
    #[doc = "< 11 or 29 bit identifier"]
    pub identifier: u32,
    #[doc = "< Data length code"]
    pub data_length_code: u8,
    #[doc = "< Data bytes (not relevant in RTR frame)"]
    pub data: [u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union twai_message_t__bindgen_ty_1 {
    pub __bindgen_anon_1: twai_message_t__bindgen_ty_1__bindgen_ty_1,
    #[doc = "< Deprecated: Alternate way to set bits using message flags"]
    pub flags: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct twai_message_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl twai_message_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn extd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ss(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ss(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn self_(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_self(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dlc_non_comp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dlc_non_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        extd: u32,
        rtr: u32,
        ss: u32,
        self_: u32,
        dlc_non_comp: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let extd: u32 = unsafe { ::core::mem::transmute(extd) };
            extd as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rtr: u32 = unsafe { ::core::mem::transmute(rtr) };
            rtr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ss: u32 = unsafe { ::core::mem::transmute(ss) };
            ss as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let self_: u32 = unsafe { ::core::mem::transmute(self_) };
            self_ as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dlc_non_comp: u32 = unsafe { ::core::mem::transmute(dlc_non_comp) };
            dlc_non_comp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for twai_message_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for twai_message_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   Structure for bit timing configuration of the TWAI driver"]
#[doc = ""]
#[doc = " @note    Macro initializers are available for this structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct twai_timing_config_t {
    #[doc = "< Baudrate prescaler (i.e., APB clock divider). Any even number from 2 to 128 for ESP32, 2 to 32768 for ESP32S2."]
    #[doc = "For ESP32 Rev 2 or later, multiples of 4 from 132 to 256 are also supported"]
    pub brp: u32,
    #[doc = "< Timing segment 1 (Number of time quanta, between 1 to 16)"]
    pub tseg_1: u8,
    #[doc = "< Timing segment 2 (Number of time quanta, 1 to 8)"]
    pub tseg_2: u8,
    #[doc = "< Synchronization Jump Width (Max time quanta jump for synchronize from 1 to 4)"]
    pub sjw: u8,
    #[doc = "< Enables triple sampling when the TWAI controller samples a bit"]
    pub triple_sampling: bool,
}
#[doc = " @brief   Structure for acceptance filter configuration of the TWAI driver (see documentation)"]
#[doc = ""]
#[doc = " @note    Macro initializers are available for this structure"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct twai_filter_config_t {
    #[doc = "< 32-bit acceptance code"]
    pub acceptance_code: u32,
    #[doc = "< 32-bit acceptance mask"]
    pub acceptance_mask: u32,
    #[doc = "< Use Single Filter Mode (see documentation)"]
    pub single_filter: bool,
}
#[doc = "< Stopped state. The TWAI controller will not participate in any TWAI bus activities"]
pub const twai_state_t_TWAI_STATE_STOPPED: twai_state_t = 0;
#[doc = "< Running state. The TWAI controller can transmit and receive messages"]
pub const twai_state_t_TWAI_STATE_RUNNING: twai_state_t = 1;
#[doc = "< Bus-off state. The TWAI controller cannot participate in bus activities until it has recovered"]
pub const twai_state_t_TWAI_STATE_BUS_OFF: twai_state_t = 2;
#[doc = "< Recovering state. The TWAI controller is undergoing bus recovery"]
pub const twai_state_t_TWAI_STATE_RECOVERING: twai_state_t = 3;
#[doc = " @brief   TWAI driver states"]
pub type twai_state_t = c_types::c_uint;
#[doc = " @brief   Structure for general configuration of the TWAI driver"]
#[doc = ""]
#[doc = " @note    Macro initializers are available for this structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twai_general_config_t {
    #[doc = "< Mode of TWAI controller"]
    pub mode: twai_mode_t,
    #[doc = "< Transmit GPIO number"]
    pub tx_io: gpio_num_t,
    #[doc = "< Receive GPIO number"]
    pub rx_io: gpio_num_t,
    #[doc = "< CLKOUT GPIO number (optional, set to -1 if unused)"]
    pub clkout_io: gpio_num_t,
    #[doc = "< Bus off indicator GPIO number (optional, set to -1 if unused)"]
    pub bus_off_io: gpio_num_t,
    #[doc = "< Number of messages TX queue can hold (set to 0 to disable TX Queue)"]
    pub tx_queue_len: u32,
    #[doc = "< Number of messages RX queue can hold"]
    pub rx_queue_len: u32,
    #[doc = "< Bit field of alerts to enable (see documentation)"]
    pub alerts_enabled: u32,
    #[doc = "< CLKOUT divider. Can be 1 or any even number from 2 to 14 (optional, set to 0 if unused)"]
    pub clkout_divider: u32,
    #[doc = "< Interrupt flags to set the priority of the driver's ISR. Note that to use the ESP_INTR_FLAG_IRAM, the CONFIG_TWAI_ISR_IN_IRAM option should be enabled first."]
    pub intr_flags: c_types::c_int,
}
impl Default for twai_general_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief   Structure to store status information of TWAI driver"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twai_status_info_t {
    #[doc = "< Current state of TWAI controller (Stopped/Running/Bus-Off/Recovery)"]
    pub state: twai_state_t,
    #[doc = "< Number of messages queued for transmission or awaiting transmission completion"]
    pub msgs_to_tx: u32,
    #[doc = "< Number of messages in RX queue waiting to be read"]
    pub msgs_to_rx: u32,
    #[doc = "< Current value of Transmit Error Counter"]
    pub tx_error_counter: u32,
    #[doc = "< Current value of Receive Error Counter"]
    pub rx_error_counter: u32,
    #[doc = "< Number of messages that failed transmissions"]
    pub tx_failed_count: u32,
    #[doc = "< Number of messages that were lost due to a full RX queue (or errata workaround if enabled)"]
    pub rx_missed_count: u32,
    #[doc = "< Number of messages that were lost due to a RX FIFO overrun"]
    pub rx_overrun_count: u32,
    #[doc = "< Number of instances arbitration was lost"]
    pub arb_lost_count: u32,
    #[doc = "< Number of instances a bus error has occurred"]
    pub bus_error_count: u32,
}
impl Default for twai_status_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief   Install TWAI driver"]
    #[doc = ""]
    #[doc = " This function installs the TWAI driver using three configuration structures."]
    #[doc = " The required memory is allocated and the TWAI driver is placed in the stopped"]
    #[doc = " state after running this function."]
    #[doc = ""]
    #[doc = " @param[in]   g_config    General configuration structure"]
    #[doc = " @param[in]   t_config    Timing configuration structure"]
    #[doc = " @param[in]   f_config    Filter configuration structure"]
    #[doc = ""]
    #[doc = " @note    Macro initializers are available for the configuration structures (see documentation)"]
    #[doc = ""]
    #[doc = " @note    To reinstall the TWAI driver, call twai_driver_uninstall() first"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Successfully installed TWAI driver"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Arguments are invalid"]
    #[doc = "      - ESP_ERR_NO_MEM: Insufficient memory"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Driver is already installed"]
    pub fn twai_driver_install(
        g_config: *const twai_general_config_t,
        t_config: *const twai_timing_config_t,
        f_config: *const twai_filter_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Uninstall the TWAI driver"]
    #[doc = ""]
    #[doc = " This function uninstalls the TWAI driver, freeing the memory utilized by the"]
    #[doc = " driver. This function can only be called when the driver is in the stopped"]
    #[doc = " state or the bus-off state."]
    #[doc = ""]
    #[doc = " @warning The application must ensure that no tasks are blocked on TX/RX"]
    #[doc = "          queues or alerts when this function is called."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Successfully uninstalled TWAI driver"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Driver is not in stopped/bus-off state, or is not installed"]
    pub fn twai_driver_uninstall() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Start the TWAI driver"]
    #[doc = ""]
    #[doc = " This function starts the TWAI driver, putting the TWAI driver into the running"]
    #[doc = " state. This allows the TWAI driver to participate in TWAI bus activities such"]
    #[doc = " as transmitting/receiving messages. The TX and RX queue are reset in this function,"]
    #[doc = " clearing any messages that are unread or pending transmission. This function"]
    #[doc = " can only be called when the TWAI driver is in the stopped state."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: TWAI driver is now running"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Driver is not in stopped state, or is not installed"]
    pub fn twai_start() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Stop the TWAI driver"]
    #[doc = ""]
    #[doc = " This function stops the TWAI driver, preventing any further message from being"]
    #[doc = " transmitted or received until twai_start() is called. Any messages in the TX"]
    #[doc = " queue are cleared. Any messages in the RX queue should be read by the"]
    #[doc = " application after this function is called. This function can only be called"]
    #[doc = " when the TWAI driver is in the running state."]
    #[doc = ""]
    #[doc = " @warning A message currently being transmitted/received on the TWAI bus will"]
    #[doc = "          be ceased immediately. This may lead to other TWAI nodes interpreting"]
    #[doc = "          the unfinished message as an error."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: TWAI driver is now Stopped"]
    #[doc = "      - ESP_ERR_INVALID_STATE: Driver is not in running state, or is not installed"]
    pub fn twai_stop() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Transmit a TWAI message"]
    #[doc = ""]
    #[doc = " This function queues a TWAI message for transmission. Transmission will start"]
    #[doc = " immediately if no other messages are queued for transmission. If the TX queue"]
    #[doc = " is full, this function will block until more space becomes available or until"]
    #[doc = " it times out. If the TX queue is disabled (TX queue length = 0 in configuration),"]
    #[doc = " this function will return immediately if another message is undergoing"]
    #[doc = " transmission. This function can only be called when the TWAI driver is in the"]
    #[doc = " running state and cannot be called under Listen Only Mode."]
    #[doc = ""]
    #[doc = " @param[in]   message         Message to transmit"]
    #[doc = " @param[in]   ticks_to_wait   Number of FreeRTOS ticks to block on the TX queue"]
    #[doc = ""]
    #[doc = " @note    This function does not guarantee that the transmission is successful."]
    #[doc = "          The TX_SUCCESS/TX_FAILED alert can be enabled to alert the application"]
    #[doc = "          upon the success/failure of a transmission."]
    #[doc = ""]
    #[doc = " @note    The TX_IDLE alert can be used to alert the application when no other"]
    #[doc = "          messages are awaiting transmission."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Transmission successfully queued/initiated"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Arguments are invalid"]
    #[doc = "      - ESP_ERR_TIMEOUT: Timed out waiting for space on TX queue"]
    #[doc = "      - ESP_FAIL: TX queue is disabled and another message is currently transmitting"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not in running state, or is not installed"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: Listen Only Mode does not support transmissions"]
    pub fn twai_transmit(message: *const twai_message_t, ticks_to_wait: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Receive a TWAI message"]
    #[doc = ""]
    #[doc = " This function receives a message from the RX queue. The flags field of the"]
    #[doc = " message structure will indicate the type of message received. This function"]
    #[doc = " will block if there are no messages in the RX queue"]
    #[doc = ""]
    #[doc = " @param[out]  message         Received message"]
    #[doc = " @param[in]   ticks_to_wait   Number of FreeRTOS ticks to block on RX queue"]
    #[doc = ""]
    #[doc = " @warning The flags field of the received message should be checked to determine"]
    #[doc = "          if the received message contains any data bytes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Message successfully received from RX queue"]
    #[doc = "      - ESP_ERR_TIMEOUT: Timed out waiting for message"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Arguments are invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed"]
    pub fn twai_receive(message: *mut twai_message_t, ticks_to_wait: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Read TWAI driver alerts"]
    #[doc = ""]
    #[doc = " This function will read the alerts raised by the TWAI driver. If no alert has"]
    #[doc = " been issued when this function is called, this function will block until an alert"]
    #[doc = " occurs or until it timeouts."]
    #[doc = ""]
    #[doc = " @param[out]  alerts          Bit field of raised alerts (see documentation for alert flags)"]
    #[doc = " @param[in]   ticks_to_wait   Number of FreeRTOS ticks to block for alert"]
    #[doc = ""]
    #[doc = " @note    Multiple alerts can be raised simultaneously. The application should"]
    #[doc = "          check for all alerts that have been enabled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Alerts read"]
    #[doc = "      - ESP_ERR_TIMEOUT: Timed out waiting for alerts"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Arguments are invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed"]
    pub fn twai_read_alerts(alerts: *mut u32, ticks_to_wait: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Reconfigure which alerts are enabled"]
    #[doc = ""]
    #[doc = " This function reconfigures which alerts are enabled. If there are alerts"]
    #[doc = " which have not been read whilst reconfiguring, this function can read those"]
    #[doc = " alerts."]
    #[doc = ""]
    #[doc = " @param[in]   alerts_enabled  Bit field of alerts to enable (see documentation for alert flags)"]
    #[doc = " @param[out]  current_alerts  Bit field of currently raised alerts. Set to NULL if unused"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Alerts reconfigured"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed"]
    pub fn twai_reconfigure_alerts(alerts_enabled: u32, current_alerts: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Start the bus recovery process"]
    #[doc = ""]
    #[doc = " This function initiates the bus recovery process when the TWAI driver is in"]
    #[doc = " the bus-off state. Once initiated, the TWAI driver will enter the recovering"]
    #[doc = " state and wait for 128 occurrences of the bus-free signal on the TWAI bus"]
    #[doc = " before returning to the stopped state. This function will reset the TX queue,"]
    #[doc = " clearing any messages pending transmission."]
    #[doc = ""]
    #[doc = " @note    The BUS_RECOVERED alert can be enabled to alert the application when"]
    #[doc = "          the bus recovery process completes."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Bus recovery started"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not in the bus-off state, or is not installed"]
    pub fn twai_initiate_recovery() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Get current status information of the TWAI driver"]
    #[doc = ""]
    #[doc = " @param[out]  status_info     Status information"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Status information retrieved"]
    #[doc = "      - ESP_ERR_INVALID_ARG: Arguments are invalid"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed"]
    pub fn twai_get_status_info(status_info: *mut twai_status_info_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Clear the transmit queue"]
    #[doc = ""]
    #[doc = " This function will clear the transmit queue of all messages."]
    #[doc = ""]
    #[doc = " @note    The transmit queue is automatically cleared when twai_stop() or"]
    #[doc = "          twai_initiate_recovery() is called."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Transmit queue cleared"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed or TX queue is disabled"]
    pub fn twai_clear_transmit_queue() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Clear the receive queue"]
    #[doc = ""]
    #[doc = " This function will clear the receive queue of all messages."]
    #[doc = ""]
    #[doc = " @note    The receive queue is automatically cleared when twai_start() is"]
    #[doc = "          called."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK: Transmit queue cleared"]
    #[doc = "      - ESP_ERR_INVALID_STATE: TWAI driver is not installed"]
    pub fn twai_clear_receive_queue() -> esp_err_t;
}
#[doc = " Type by which ring buffers are referenced. For example, a call to xRingbufferCreate()"]
#[doc = " returns a RingbufHandle_t variable that can then be used as a parameter to"]
#[doc = " xRingbufferSend(), xRingbufferReceive(), etc."]
pub type RingbufHandle_t = *mut c_types::c_void;
#[doc = " No-split buffers will only store an item in contiguous memory and will"]
#[doc = " never split an item. Each item requires an 8 byte overhead for a header"]
#[doc = " and will always internally occupy a 32-bit aligned size of space."]
pub const RingbufferType_t_RINGBUF_TYPE_NOSPLIT: RingbufferType_t = 0;
#[doc = " Allow-split buffers will split an item into two parts if necessary in"]
#[doc = " order to store it. Each item requires an 8 byte overhead for a header,"]
#[doc = " splitting incurs an extra header. Each item will always internally occupy"]
#[doc = " a 32-bit aligned size of space."]
pub const RingbufferType_t_RINGBUF_TYPE_ALLOWSPLIT: RingbufferType_t = 1;
#[doc = " Byte buffers store data as a sequence of bytes and do not maintain separate"]
#[doc = " items, therefore byte buffers have no overhead. All data is stored as a"]
#[doc = " sequence of byte and any number of bytes can be sent or retrieved each"]
#[doc = " time."]
pub const RingbufferType_t_RINGBUF_TYPE_BYTEBUF: RingbufferType_t = 2;
#[doc = " Byte buffers store data as a sequence of bytes and do not maintain separate"]
#[doc = " items, therefore byte buffers have no overhead. All data is stored as a"]
#[doc = " sequence of byte and any number of bytes can be sent or retrieved each"]
#[doc = " time."]
pub const RingbufferType_t_RINGBUF_TYPE_MAX: RingbufferType_t = 3;
pub type RingbufferType_t = c_types::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xSTATIC_RINGBUFFER {
    #[doc = " @cond"]
    pub xDummy1: [size_t; 2usize],
    pub uxDummy2: UBaseType_t,
    pub xDummy3: BaseType_t,
    pub pvDummy4: [*mut c_types::c_void; 11usize],
    pub xDummy5: [StaticSemaphore_t; 2usize],
    pub muxDummy: portMUX_TYPE,
}
impl Default for xSTATIC_RINGBUFFER {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type StaticRingbuffer_t = xSTATIC_RINGBUFFER;
extern "C" {
    #[doc = " @brief       Create a ring buffer"]
    #[doc = ""]
    #[doc = " @param[in]   xBufferSize Size of the buffer in bytes. Note that items require"]
    #[doc = "              space for overhead in no-split/allow-split buffers"]
    #[doc = " @param[in]   xBufferType Type of ring buffer, see documentation."]
    #[doc = ""]
    #[doc = " @note    xBufferSize of no-split/allow-split buffers will be rounded up to the nearest 32-bit aligned size."]
    #[doc = ""]
    #[doc = " @return  A handle to the created ring buffer, or NULL in case of error."]
    pub fn xRingbufferCreate(xBufferSize: size_t, xBufferType: RingbufferType_t)
        -> RingbufHandle_t;
}
extern "C" {
    #[doc = " @brief Create a ring buffer of type RINGBUF_TYPE_NOSPLIT for a fixed item_size"]
    #[doc = ""]
    #[doc = " This API is similar to xRingbufferCreate(), but it will internally allocate"]
    #[doc = " additional space for the headers."]
    #[doc = ""]
    #[doc = " @param[in]   xItemSize   Size of each item to be put into the ring buffer"]
    #[doc = " @param[in]   xItemNum    Maximum number of items the buffer needs to hold simultaneously"]
    #[doc = ""]
    #[doc = " @return  A RingbufHandle_t handle to the created ring buffer, or NULL in case of error."]
    pub fn xRingbufferCreateNoSplit(xItemSize: size_t, xItemNum: size_t) -> RingbufHandle_t;
}
extern "C" {
    pub fn xRingbufferCreateStatic(
        xBufferSize: size_t,
        xBufferType: RingbufferType_t,
        pucRingbufferStorage: *mut u8,
        pxStaticRingbuffer: *mut StaticRingbuffer_t,
    ) -> RingbufHandle_t;
}
extern "C" {
    #[doc = " @brief       Insert an item into the ring buffer"]
    #[doc = ""]
    #[doc = " Attempt to insert an item into the ring buffer. This function will block until"]
    #[doc = " enough free space is available or until it times out."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to insert the item into"]
    #[doc = " @param[in]   pvItem          Pointer to data to insert. NULL is allowed if xItemSize is 0."]
    #[doc = " @param[in]   xItemSize       Size of data to insert."]
    #[doc = " @param[in]   xTicksToWait    Ticks to wait for room in the ring buffer."]
    #[doc = ""]
    #[doc = " @note    For no-split/allow-split ring buffers, the actual size of memory that"]
    #[doc = "          the item will occupy will be rounded up to the nearest 32-bit aligned"]
    #[doc = "          size. This is done to ensure all items are always stored in 32-bit"]
    #[doc = "          aligned fashion."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if succeeded"]
    #[doc = "      - pdFALSE on time-out or when the data is larger than the maximum permissible size of the buffer"]
    pub fn xRingbufferSend(
        xRingbuffer: RingbufHandle_t,
        pvItem: *const c_types::c_void,
        xItemSize: size_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief       Insert an item into the ring buffer in an ISR"]
    #[doc = ""]
    #[doc = " Attempt to insert an item into the ring buffer from an ISR. This function"]
    #[doc = " will return immediately if there is insufficient free space in the buffer."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer Ring buffer to insert the item into"]
    #[doc = " @param[in]   pvItem      Pointer to data to insert. NULL is allowed if xItemSize is 0."]
    #[doc = " @param[in]   xItemSize   Size of data to insert."]
    #[doc = " @param[out]  pxHigherPriorityTaskWoken   Value pointed to will be set to pdTRUE if the function woke up a higher priority task."]
    #[doc = ""]
    #[doc = " @note    For no-split/allow-split ring buffers, the actual size of memory that"]
    #[doc = "          the item will occupy will be rounded up to the nearest 32-bit aligned"]
    #[doc = "          size. This is done to ensure all items are always stored in 32-bit"]
    #[doc = "          aligned fashion."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if succeeded"]
    #[doc = "      - pdFALSE when the ring buffer does not have space."]
    pub fn xRingbufferSendFromISR(
        xRingbuffer: RingbufHandle_t,
        pvItem: *const c_types::c_void,
        xItemSize: size_t,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief Acquire memory from the ring buffer to be written to by an external"]
    #[doc = "        source and to be sent later."]
    #[doc = ""]
    #[doc = " Attempt to allocate buffer for an item to be sent into the ring buffer. This"]
    #[doc = " function will block until enough free space is available or until it"]
    #[doc = " timesout."]
    #[doc = ""]
    #[doc = " The item, as well as the following items ``SendAcquire`` or ``Send`` after it,"]
    #[doc = " will not be able to be read from the ring buffer until this item is actually"]
    #[doc = " sent into the ring buffer."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to allocate the memory"]
    #[doc = " @param[out]  ppvItem         Double pointer to memory acquired (set to NULL if no memory were retrieved)"]
    #[doc = " @param[in]   xItemSize       Size of item to acquire."]
    #[doc = " @param[in]   xTicksToWait    Ticks to wait for room in the ring buffer."]
    #[doc = ""]
    #[doc = " @note Only applicable for no-split ring buffers now, the actual size of"]
    #[doc = "       memory that the item will occupy will be rounded up to the nearest 32-bit"]
    #[doc = "       aligned size. This is done to ensure all items are always stored in 32-bit"]
    #[doc = "       aligned fashion."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if succeeded"]
    #[doc = "      - pdFALSE on time-out or when the data is larger than the maximum permissible size of the buffer"]
    pub fn xRingbufferSendAcquire(
        xRingbuffer: RingbufHandle_t,
        ppvItem: *mut *mut c_types::c_void,
        xItemSize: size_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief       Actually send an item into the ring buffer allocated before by"]
    #[doc = "              ``xRingbufferSendAcquire``."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to insert the item into"]
    #[doc = " @param[in]   pvItem          Pointer to item in allocated memory to insert."]
    #[doc = ""]
    #[doc = " @note Only applicable for no-split ring buffers. Only call for items"]
    #[doc = "       allocated by ``xRingbufferSendAcquire``."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if succeeded"]
    #[doc = "      - pdFALSE if fail for some reason."]
    pub fn xRingbufferSendComplete(
        xRingbuffer: RingbufHandle_t,
        pvItem: *mut c_types::c_void,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Retrieve an item from the ring buffer"]
    #[doc = ""]
    #[doc = " Attempt to retrieve an item from the ring buffer. This function will block"]
    #[doc = " until an item is available or until it times out."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  pxItemSize      Pointer to a variable to which the size of the retrieved item will be written."]
    #[doc = " @param[in]   xTicksToWait    Ticks to wait for items in the ring buffer."]
    #[doc = ""]
    #[doc = " @note    A call to vRingbufferReturnItem() is required after this to free the item retrieved."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - Pointer to the retrieved item on success; *pxItemSize filled with the length of the item."]
    #[doc = "      - NULL on timeout, *pxItemSize is untouched in that case."]
    pub fn xRingbufferReceive(
        xRingbuffer: RingbufHandle_t,
        pxItemSize: *mut size_t,
        xTicksToWait: TickType_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Retrieve an item from the ring buffer in an ISR"]
    #[doc = ""]
    #[doc = " Attempt to retrieve an item from the ring buffer. This function returns immediately"]
    #[doc = " if there are no items available for retrieval"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  pxItemSize      Pointer to a variable to which the size of the"]
    #[doc = "                              retrieved item will be written."]
    #[doc = ""]
    #[doc = " @note    A call to vRingbufferReturnItemFromISR() is required after this to free the item retrieved."]
    #[doc = " @note    Byte buffers do not allow multiple retrievals before returning an item"]
    #[doc = " @note    Two calls to RingbufferReceiveFromISR() are required if the bytes wrap around the end of the ring buffer."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - Pointer to the retrieved item on success; *pxItemSize filled with the length of the item."]
    #[doc = "      - NULL when the ring buffer is empty, *pxItemSize is untouched in that case."]
    pub fn xRingbufferReceiveFromISR(
        xRingbuffer: RingbufHandle_t,
        pxItemSize: *mut size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Retrieve a split item from an allow-split ring buffer"]
    #[doc = ""]
    #[doc = " Attempt to retrieve a split item from an allow-split ring buffer. If the item"]
    #[doc = " is not split, only a single item is retried. If the item is split, both parts"]
    #[doc = " will be retrieved. This function will block until an item is available or"]
    #[doc = " until it times out."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  ppvHeadItem     Double pointer to first part (set to NULL if no items were retrieved)"]
    #[doc = " @param[out]  ppvTailItem     Double pointer to second part (set to NULL if item is not split)"]
    #[doc = " @param[out]  pxHeadItemSize  Pointer to size of first part (unmodified if no items were retrieved)"]
    #[doc = " @param[out]  pxTailItemSize  Pointer to size of second part (unmodified if item is not split)"]
    #[doc = " @param[in]   xTicksToWait    Ticks to wait for items in the ring buffer."]
    #[doc = ""]
    #[doc = " @note    Call(s) to vRingbufferReturnItem() is required after this to free up the item(s) retrieved."]
    #[doc = " @note    This function should only be called on allow-split buffers"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if an item (split or unsplit) was retrieved"]
    #[doc = "      - pdFALSE when no item was retrieved"]
    pub fn xRingbufferReceiveSplit(
        xRingbuffer: RingbufHandle_t,
        ppvHeadItem: *mut *mut c_types::c_void,
        ppvTailItem: *mut *mut c_types::c_void,
        pxHeadItemSize: *mut size_t,
        pxTailItemSize: *mut size_t,
        xTicksToWait: TickType_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Retrieve a split item from an allow-split ring buffer in an ISR"]
    #[doc = ""]
    #[doc = " Attempt to retrieve a split item from an allow-split ring buffer. If the item"]
    #[doc = " is not split, only a single item is retried. If the item is split, both parts"]
    #[doc = " will be retrieved. This function returns immediately if there are no items"]
    #[doc = " available for retrieval"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  ppvHeadItem     Double pointer to first part (set to NULL if no items were retrieved)"]
    #[doc = " @param[out]  ppvTailItem     Double pointer to second part (set to NULL if item is not split)"]
    #[doc = " @param[out]  pxHeadItemSize  Pointer to size of first part (unmodified if no items were retrieved)"]
    #[doc = " @param[out]  pxTailItemSize  Pointer to size of second part (unmodified if item is not split)"]
    #[doc = ""]
    #[doc = " @note    Calls to vRingbufferReturnItemFromISR() is required after this to free up the item(s) retrieved."]
    #[doc = " @note    This function should only be called on allow-split buffers"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE if an item (split or unsplit) was retrieved"]
    #[doc = "      - pdFALSE when no item was retrieved"]
    pub fn xRingbufferReceiveSplitFromISR(
        xRingbuffer: RingbufHandle_t,
        ppvHeadItem: *mut *mut c_types::c_void,
        ppvTailItem: *mut *mut c_types::c_void,
        pxHeadItemSize: *mut size_t,
        pxTailItemSize: *mut size_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Retrieve bytes from a byte buffer, specifying the maximum amount of bytes to retrieve"]
    #[doc = ""]
    #[doc = " Attempt to retrieve data from a byte buffer whilst specifying a maximum number"]
    #[doc = " of bytes to retrieve. This function will block until there is data available"]
    #[doc = " for retrieval or until it times out."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  pxItemSize      Pointer to a variable to which the size of the retrieved item will be written."]
    #[doc = " @param[in]   xTicksToWait    Ticks to wait for items in the ring buffer."]
    #[doc = " @param[in]   xMaxSize        Maximum number of bytes to return."]
    #[doc = ""]
    #[doc = " @note    A call to vRingbufferReturnItem() is required after this to free up the data retrieved."]
    #[doc = " @note    This function should only be called on byte buffers"]
    #[doc = " @note    Byte buffers do not allow multiple retrievals before returning an item"]
    #[doc = " @note    Two calls to RingbufferReceiveUpTo() are required if the bytes wrap around the end of the ring buffer."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - Pointer to the retrieved item on success; *pxItemSize filled with"]
    #[doc = "        the length of the item."]
    #[doc = "      - NULL on timeout, *pxItemSize is untouched in that case."]
    pub fn xRingbufferReceiveUpTo(
        xRingbuffer: RingbufHandle_t,
        pxItemSize: *mut size_t,
        xTicksToWait: TickType_t,
        xMaxSize: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Retrieve bytes from a byte buffer, specifying the maximum amount of"]
    #[doc = "          bytes to retrieve. Call this from an ISR."]
    #[doc = ""]
    #[doc = " Attempt to retrieve bytes from a byte buffer whilst specifying a maximum number"]
    #[doc = " of bytes to retrieve. This function will return immediately if there is no data"]
    #[doc = " available for retrieval."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer Ring buffer to retrieve the item from"]
    #[doc = " @param[out]  pxItemSize  Pointer to a variable to which the size of the retrieved item will be written."]
    #[doc = " @param[in]   xMaxSize    Maximum number of bytes to return."]
    #[doc = ""]
    #[doc = " @note    A call to vRingbufferReturnItemFromISR() is required after this to free up the data received."]
    #[doc = " @note    This function should only be called on byte buffers"]
    #[doc = " @note    Byte buffers do not allow multiple retrievals before returning an item"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - Pointer to the retrieved item on success; *pxItemSize filled with"]
    #[doc = "        the length of the item."]
    #[doc = "      - NULL when the ring buffer is empty, *pxItemSize is untouched in that case."]
    pub fn xRingbufferReceiveUpToFromISR(
        xRingbuffer: RingbufHandle_t,
        pxItemSize: *mut size_t,
        xMaxSize: size_t,
    ) -> *mut c_types::c_void;
}
extern "C" {
    #[doc = " @brief   Return a previously-retrieved item to the ring buffer"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer Ring buffer the item was retrieved from"]
    #[doc = " @param[in]   pvItem      Item that was received earlier"]
    #[doc = ""]
    #[doc = " @note    If a split item is retrieved, both parts should be returned by calling this function twice"]
    pub fn vRingbufferReturnItem(xRingbuffer: RingbufHandle_t, pvItem: *mut c_types::c_void);
}
extern "C" {
    #[doc = " @brief   Return a previously-retrieved item to the ring buffer from an ISR"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer Ring buffer the item was retrieved from"]
    #[doc = " @param[in]   pvItem      Item that was received earlier"]
    #[doc = " @param[out]  pxHigherPriorityTaskWoken   Value pointed to will be set to pdTRUE"]
    #[doc = "                                          if the function woke up a higher priority task."]
    #[doc = ""]
    #[doc = " @note    If a split item is retrieved, both parts should be returned by calling this function twice"]
    pub fn vRingbufferReturnItemFromISR(
        xRingbuffer: RingbufHandle_t,
        pvItem: *mut c_types::c_void,
        pxHigherPriorityTaskWoken: *mut BaseType_t,
    );
}
extern "C" {
    #[doc = " @brief   Delete a ring buffer"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to delete"]
    #[doc = ""]
    #[doc = " @note    This function will not deallocate any memory if the ring buffer was"]
    #[doc = "          created using xRingbufferCreateStatic(). Deallocation must be done"]
    #[doc = "          manually be the user."]
    pub fn vRingbufferDelete(xRingbuffer: RingbufHandle_t);
}
extern "C" {
    #[doc = " @brief   Get maximum size of an item that can be placed in the ring buffer"]
    #[doc = ""]
    #[doc = " This function returns the maximum size an item can have if it was placed in"]
    #[doc = " an empty ring buffer."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to query"]
    #[doc = ""]
    #[doc = " @note    The max item size for a no-split buffer is limited to"]
    #[doc = "          ((buffer_size/2)-header_size). This limit is imposed so that an item"]
    #[doc = "          of max item size can always be sent to the an empty no-split buffer"]
    #[doc = "          regardless of the internal positions of the buffer's read/write/free"]
    #[doc = "          pointers."]
    #[doc = ""]
    #[doc = " @return  Maximum size, in bytes, of an item that can be placed in a ring buffer."]
    pub fn xRingbufferGetMaxItemSize(xRingbuffer: RingbufHandle_t) -> size_t;
}
extern "C" {
    #[doc = " @brief   Get current free size available for an item/data in the buffer"]
    #[doc = ""]
    #[doc = " This gives the real time free space available for an item/data in the ring"]
    #[doc = " buffer. This represents the maximum size an item/data can have if it was"]
    #[doc = " currently sent to the ring buffer."]
    #[doc = ""]
    #[doc = " @warning This API is not thread safe. So, if multiple threads are accessing"]
    #[doc = "          the same ring buffer, it is the application's responsibility to"]
    #[doc = "          ensure atomic access to this API and the subsequent Send"]
    #[doc = ""]
    #[doc = " @note    An empty no-split buffer has a max current free size for an item"]
    #[doc = "          that is limited to ((buffer_size/2)-header_size). See API reference"]
    #[doc = "          for xRingbufferGetMaxItemSize()."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to query"]
    #[doc = ""]
    #[doc = " @return  Current free size, in bytes, available for an entry"]
    pub fn xRingbufferGetCurFreeSize(xRingbuffer: RingbufHandle_t) -> size_t;
}
extern "C" {
    #[doc = " @brief   Add the ring buffer's read semaphore to a queue set."]
    #[doc = ""]
    #[doc = " The ring buffer's read semaphore indicates that data has been written"]
    #[doc = " to the ring buffer. This function adds the ring buffer's read semaphore to"]
    #[doc = " a queue set."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to add to the queue set"]
    #[doc = " @param[in]   xQueueSet       Queue set to add the ring buffer's read semaphore to"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE on success, pdFALSE otherwise"]
    pub fn xRingbufferAddToQueueSetRead(
        xRingbuffer: RingbufHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Check if the selected queue set member is the ring buffer's read semaphore"]
    #[doc = ""]
    #[doc = " This API checks if queue set member returned from xQueueSelectFromSet()"]
    #[doc = " is the read semaphore of this ring buffer. If so, this indicates the ring buffer"]
    #[doc = " has items waiting to be retrieved."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer which should be checked"]
    #[doc = " @param[in]   xMember         Member returned from xQueueSelectFromSet"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE when semaphore belongs to ring buffer"]
    #[doc = "      - pdFALSE otherwise."]
    pub fn xRingbufferCanRead(
        xRingbuffer: RingbufHandle_t,
        xMember: QueueSetMemberHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Remove the ring buffer's read semaphore from a queue set."]
    #[doc = ""]
    #[doc = " This specifically removes a ring buffer's read semaphore from a queue set. The"]
    #[doc = " read semaphore is used to indicate when data has been written to the ring buffer"]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to remove from the queue set"]
    #[doc = " @param[in]   xQueueSet       Queue set to remove the ring buffer's read semaphore from"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - pdTRUE on success"]
    #[doc = "      - pdFALSE otherwise"]
    pub fn xRingbufferRemoveFromQueueSetRead(
        xRingbuffer: RingbufHandle_t,
        xQueueSet: QueueSetHandle_t,
    ) -> BaseType_t;
}
extern "C" {
    #[doc = " @brief   Get information about ring buffer status"]
    #[doc = ""]
    #[doc = " Get information of the a ring buffer's current status such as"]
    #[doc = " free/read/write pointer positions, and number of items waiting to be retrieved."]
    #[doc = " Arguments can be set to NULL if they are not required."]
    #[doc = ""]
    #[doc = " @param[in]   xRingbuffer     Ring buffer to remove from the queue set"]
    #[doc = " @param[out]  uxFree          Pointer use to store free pointer position"]
    #[doc = " @param[out]  uxRead          Pointer use to store read pointer position"]
    #[doc = " @param[out]  uxWrite         Pointer use to store write pointer position"]
    #[doc = " @param[out]  uxAcquire       Pointer use to store acquire pointer position"]
    #[doc = " @param[out]  uxItemsWaiting  Pointer use to store number of items (bytes for byte buffer) waiting to be retrieved"]
    pub fn vRingbufferGetInfo(
        xRingbuffer: RingbufHandle_t,
        uxFree: *mut UBaseType_t,
        uxRead: *mut UBaseType_t,
        uxWrite: *mut UBaseType_t,
        uxAcquire: *mut UBaseType_t,
        uxItemsWaiting: *mut UBaseType_t,
    );
}
extern "C" {
    #[doc = " @brief   Debugging function to print the internal pointers in the ring buffer"]
    #[doc = ""]
    #[doc = " @param   xRingbuffer Ring buffer to show"]
    pub fn xRingbufferPrintInfo(xRingbuffer: RingbufHandle_t);
}
#[doc = " @brief I2C port number, can be I2C_NUM_0 ~ (I2C_NUM_MAX-1)."]
pub type i2c_port_t = c_types::c_int;
#[doc = "< I2C slave mode"]
pub const i2c_mode_t_I2C_MODE_SLAVE: i2c_mode_t = 0;
#[doc = "< I2C master mode"]
pub const i2c_mode_t_I2C_MODE_MASTER: i2c_mode_t = 1;
pub const i2c_mode_t_I2C_MODE_MAX: i2c_mode_t = 2;
pub type i2c_mode_t = c_types::c_uint;
#[doc = "< I2C write data"]
pub const i2c_rw_t_I2C_MASTER_WRITE: i2c_rw_t = 0;
#[doc = "< I2C read data"]
pub const i2c_rw_t_I2C_MASTER_READ: i2c_rw_t = 1;
pub type i2c_rw_t = c_types::c_uint;
#[doc = "< I2C data msb first"]
pub const i2c_trans_mode_t_I2C_DATA_MODE_MSB_FIRST: i2c_trans_mode_t = 0;
#[doc = "< I2C data lsb first"]
pub const i2c_trans_mode_t_I2C_DATA_MODE_LSB_FIRST: i2c_trans_mode_t = 1;
pub const i2c_trans_mode_t_I2C_DATA_MODE_MAX: i2c_trans_mode_t = 2;
pub type i2c_trans_mode_t = c_types::c_uint;
#[doc = "< I2C 7bit address for slave mode"]
pub const i2c_addr_mode_t_I2C_ADDR_BIT_7: i2c_addr_mode_t = 0;
#[doc = "< I2C 10bit address for slave mode"]
pub const i2c_addr_mode_t_I2C_ADDR_BIT_10: i2c_addr_mode_t = 1;
pub const i2c_addr_mode_t_I2C_ADDR_BIT_MAX: i2c_addr_mode_t = 2;
pub type i2c_addr_mode_t = c_types::c_uint;
#[doc = "< I2C ack for each byte read"]
pub const i2c_ack_type_t_I2C_MASTER_ACK: i2c_ack_type_t = 0;
#[doc = "< I2C nack for each byte read"]
pub const i2c_ack_type_t_I2C_MASTER_NACK: i2c_ack_type_t = 1;
#[doc = "< I2C nack for the last byte"]
pub const i2c_ack_type_t_I2C_MASTER_LAST_NACK: i2c_ack_type_t = 2;
pub const i2c_ack_type_t_I2C_MASTER_ACK_MAX: i2c_ack_type_t = 3;
pub type i2c_ack_type_t = c_types::c_uint;
#[doc = "< I2C source clock not selected"]
pub const i2c_sclk_t_I2C_SCLK_DEFAULT: i2c_sclk_t = 0;
#[doc = "< I2C source clock from XTAL, 40M"]
pub const i2c_sclk_t_I2C_SCLK_XTAL: i2c_sclk_t = 1;
#[doc = "< I2C source clock from 8M RTC, 8M"]
pub const i2c_sclk_t_I2C_SCLK_RTC: i2c_sclk_t = 2;
pub const i2c_sclk_t_I2C_SCLK_MAX: i2c_sclk_t = 3;
#[doc = " @brief I2C clock source, sorting from smallest to largest,"]
#[doc = "        place them in order."]
#[doc = "        This can be expanded in the future use."]
pub type i2c_sclk_t = c_types::c_uint;
#[doc = " @brief I2C initialization parameters"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct i2c_config_t {
    #[doc = "< I2C mode"]
    pub mode: i2c_mode_t,
    #[doc = "< GPIO number for I2C sda signal"]
    pub sda_io_num: c_types::c_int,
    #[doc = "< GPIO number for I2C scl signal"]
    pub scl_io_num: c_types::c_int,
    #[doc = "< Internal GPIO pull mode for I2C sda signal"]
    pub sda_pullup_en: bool,
    #[doc = "< Internal GPIO pull mode for I2C scl signal"]
    pub scl_pullup_en: bool,
    pub __bindgen_anon_1: i2c_config_t__bindgen_ty_1,
    #[doc = "< Bitwise of ``I2C_SCLK_SRC_FLAG_**FOR_DFS**`` for clk source choice"]
    pub clk_flags: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2c_config_t__bindgen_ty_1 {
    #[doc = "< I2C master config"]
    pub master: i2c_config_t__bindgen_ty_1__bindgen_ty_1,
    #[doc = "< I2C slave config"]
    pub slave: i2c_config_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2c_config_t__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< I2C clock frequency for master mode, (no higher than 1MHz for now)"]
    pub clk_speed: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2c_config_t__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< I2C 10bit address mode enable for slave mode"]
    pub addr_10bit_en: u8,
    #[doc = "< I2C address for slave mode"]
    pub slave_addr: u16,
    #[doc = "< I2C expected clock speed from SCL."]
    pub maximum_speed: u32,
}
impl Default for i2c_config_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for i2c_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type i2c_cmd_handle_t = *mut c_types::c_void;
extern "C" {
    #[doc = " @brief Install an I2C driver"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param mode I2C mode (either master or slave)"]
    #[doc = " @param slv_rx_buf_len Receiving buffer size. Only slave mode will use this value, it is ignored in master mode."]
    #[doc = " @param slv_tx_buf_len Sending buffer size. Only slave mode will use this value, it is ignored in master mode."]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG_* values."]
    #[doc = "                         See esp_intr_alloc.h for more info."]
    #[doc = "        @note"]
    #[doc = "        In master mode, if the cache is likely to be disabled(such as write flash) and the slave is time-sensitive,"]
    #[doc = "        `ESP_INTR_FLAG_IRAM` is suggested to be used. In this case, please use the memory allocated from internal RAM in i2c read and write function,"]
    #[doc = "        because we can not access the psram(if psram is enabled) in interrupt handle function when cache is disabled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Driver installation error"]
    pub fn i2c_driver_install(
        i2c_num: i2c_port_t,
        mode: i2c_mode_t,
        slv_rx_buf_len: size_t,
        slv_tx_buf_len: size_t,
        intr_alloc_flags: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete I2C driver"]
    #[doc = ""]
    #[doc = " @note This function does not guarantee thread safety."]
    #[doc = "       Please make sure that no thread will continuously hold semaphores before calling the delete function."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port to delete"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_driver_delete(i2c_num: i2c_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure an I2C bus with the given configuration."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port to configure"]
    #[doc = " @param i2c_conf Pointer to the I2C configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_param_config(i2c_num: i2c_port_t, i2c_conf: *const i2c_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief reset I2C tx hardware fifo"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_reset_tx_fifo(i2c_num: i2c_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief reset I2C rx fifo"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_reset_rx_fifo(i2c_num: i2c_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register an I2C ISR handler."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number to attach handler to"]
    #[doc = " @param fn ISR handler function"]
    #[doc = " @param arg Parameter for the ISR handler"]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "                         ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param handle Handle return from esp_intr_alloc."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_isr_register(
        i2c_num: i2c_port_t,
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut intr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Delete and free I2C ISR handle."]
    #[doc = ""]
    #[doc = " @param handle Handle of isr to delete."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_isr_free(handle: intr_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure GPIO pins for I2C SCK and SDA signals."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param sda_io_num GPIO number for I2C SDA signal"]
    #[doc = " @param scl_io_num GPIO number for I2C SCL signal"]
    #[doc = " @param sda_pullup_en Enable the internal pullup for SDA pin"]
    #[doc = " @param scl_pullup_en Enable the internal pullup for SCL pin"]
    #[doc = " @param mode I2C mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_pin(
        i2c_num: i2c_port_t,
        sda_io_num: c_types::c_int,
        scl_io_num: c_types::c_int,
        sda_pullup_en: bool,
        scl_pullup_en: bool,
        mode: i2c_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Perform a write to a device connected to a particular I2C port."]
    #[doc = "        This function is a wrapper to `i2c_master_start()`, `i2c_master_write()`, `i2c_master_read()`, etc..."]
    #[doc = "        It shall only be called in I2C master mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number to perform the transfer on"]
    #[doc = " @param device_address I2C device's 7-bit address"]
    #[doc = " @param write_buffer Bytes to send on the bus"]
    #[doc = " @param write_size Size, in bytes, of the write buffer"]
    #[doc = " @param ticks_to_wait Maximum ticks to wait before issuing a timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Sending command error, slave hasn't ACK the transfer."]
    #[doc = "     - ESP_ERR_INVALID_STATE I2C driver not installed or not in master mode."]
    #[doc = "     - ESP_ERR_TIMEOUT Operation timeout because the bus is busy."]
    pub fn i2c_master_write_to_device(
        i2c_num: i2c_port_t,
        device_address: u8,
        write_buffer: *const u8,
        write_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Perform a read to a device connected to a particular I2C port."]
    #[doc = "        This function is a wrapper to `i2c_master_start()`, `i2c_master_write()`, `i2c_master_read()`, etc..."]
    #[doc = "        It shall only be called in I2C master mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number to perform the transfer on"]
    #[doc = " @param device_address I2C device's 7-bit address"]
    #[doc = " @param read_buffer Buffer to store the bytes received on the bus"]
    #[doc = " @param read_size Size, in bytes, of the read buffer"]
    #[doc = " @param ticks_to_wait Maximum ticks to wait before issuing a timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Sending command error, slave hasn't ACK the transfer."]
    #[doc = "     - ESP_ERR_INVALID_STATE I2C driver not installed or not in master mode."]
    #[doc = "     - ESP_ERR_TIMEOUT Operation timeout because the bus is busy."]
    pub fn i2c_master_read_from_device(
        i2c_num: i2c_port_t,
        device_address: u8,
        read_buffer: *mut u8,
        read_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Perform a write followed by a read to a device on the I2C bus."]
    #[doc = "        A repeated start signal is used between the `write` and `read`, thus, the bus is"]
    #[doc = "        not released until the two transactions are finished."]
    #[doc = "        This function is a wrapper to `i2c_master_start()`, `i2c_master_write()`, `i2c_master_read()`, etc..."]
    #[doc = "        It shall only be called in I2C master mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number to perform the transfer on"]
    #[doc = " @param device_address I2C device's 7-bit address"]
    #[doc = " @param write_buffer Bytes to send on the bus"]
    #[doc = " @param write_size Size, in bytes, of the write buffer"]
    #[doc = " @param read_buffer Buffer to store the bytes received on the bus"]
    #[doc = " @param read_size Size, in bytes, of the read buffer"]
    #[doc = " @param ticks_to_wait Maximum ticks to wait before issuing a timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Sending command error, slave hasn't ACK the transfer."]
    #[doc = "     - ESP_ERR_INVALID_STATE I2C driver not installed or not in master mode."]
    #[doc = "     - ESP_ERR_TIMEOUT Operation timeout because the bus is busy."]
    pub fn i2c_master_write_read_device(
        i2c_num: i2c_port_t,
        device_address: u8,
        write_buffer: *const u8,
        write_size: size_t,
        read_buffer: *mut u8,
        read_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Create and initialize an I2C commands list with a given buffer."]
    #[doc = "        All the allocations for data or signals (START, STOP, ACK, ...) will be"]
    #[doc = "        performed within this buffer."]
    #[doc = "        This buffer must be valid during the whole transaction."]
    #[doc = "        After finishing the I2C transactions, it is required to call `i2c_cmd_link_delete_static()`."]
    #[doc = ""]
    #[doc = " @note It is **highly** advised to not allocate this buffer on the stack. The size of the data"]
    #[doc = "       used underneath may increase in the future, resulting in a possible stack overflow as the macro"]
    #[doc = "       `I2C_LINK_RECOMMENDED_SIZE` would also return a bigger value."]
    #[doc = "       A better option is to use a buffer allocated statically or dynamically (with `malloc`)."]
    #[doc = ""]
    #[doc = " @param buffer Buffer to use for commands allocations"]
    #[doc = " @param size Size in bytes of the buffer"]
    #[doc = ""]
    #[doc = " @return Handle to the I2C command link or NULL if the buffer provided is too small, please"]
    #[doc = "         use `I2C_LINK_RECOMMENDED_SIZE` macro to get the recommended size for the buffer."]
    pub fn i2c_cmd_link_create_static(buffer: *mut u8, size: u32) -> i2c_cmd_handle_t;
}
extern "C" {
    #[doc = " @brief Create and initialize an I2C commands list with a given buffer."]
    #[doc = "        After finishing the I2C transactions, it is required to call `i2c_cmd_link_delete()`"]
    #[doc = "        to release and return the resources."]
    #[doc = "        The required bytes will be dynamically allocated."]
    #[doc = ""]
    #[doc = " @return Handle to the I2C command link"]
    pub fn i2c_cmd_link_create() -> i2c_cmd_handle_t;
}
extern "C" {
    #[doc = " @brief Free the I2C commands list allocated statically with `i2c_cmd_link_create_static`."]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list allocated statically. This handle should be created thanks to"]
    #[doc = "                   `i2c_cmd_link_create_static()` function"]
    pub fn i2c_cmd_link_delete_static(cmd_handle: i2c_cmd_handle_t);
}
extern "C" {
    #[doc = " @brief Free the I2C commands list"]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list. This handle should be created thanks to"]
    #[doc = "                   `i2c_cmd_link_create()` function"]
    pub fn i2c_cmd_link_delete(cmd_handle: i2c_cmd_handle_t);
}
extern "C" {
    #[doc = " @brief Queue a \"START signal\" to the given commands list."]
    #[doc = "        This function shall only be called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all the queued commands."]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_start(cmd_handle: i2c_cmd_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a \"write byte\" command to the commands list."]
    #[doc = "        A single byte will be sent on the I2C port. This function shall only be"]
    #[doc = "        called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all queued commands"]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = " @param data Byte to send on the port"]
    #[doc = " @param ack_en Enable ACK signal"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_write_byte(cmd_handle: i2c_cmd_handle_t, data: u8, ack_en: bool)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a \"write (multiple) bytes\" command to the commands list."]
    #[doc = "        This function shall only be called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all queued commands"]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = " @param data Bytes to send. This buffer shall remain **valid** until the transaction is finished."]
    #[doc = "             If the PSRAM is enabled and `intr_flag` is set to `ESP_INTR_FLAG_IRAM`,"]
    #[doc = "             `data` should be allocated from internal RAM."]
    #[doc = " @param data_len Length, in bytes, of the data buffer"]
    #[doc = " @param ack_en Enable ACK signal"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_write(
        cmd_handle: i2c_cmd_handle_t,
        data: *const u8,
        data_len: size_t,
        ack_en: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a \"read byte\" command to the commands list."]
    #[doc = "        A single byte will be read on the I2C bus. This function shall only be"]
    #[doc = "        called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all queued commands"]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = " @param data Pointer where the received byte will the stored. This buffer shall remain **valid**"]
    #[doc = "             until the transaction is finished."]
    #[doc = " @param ack ACK signal"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_read_byte(
        cmd_handle: i2c_cmd_handle_t,
        data: *mut u8,
        ack: i2c_ack_type_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a \"read (multiple) bytes\" command to the commands list."]
    #[doc = "        Multiple bytes will be read on the I2C bus. This function shall only be"]
    #[doc = "        called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all queued commands"]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = " @param data Pointer where the received bytes will the stored. This buffer shall remain **valid**"]
    #[doc = "             until the transaction is finished."]
    #[doc = " @param data_len Size, in bytes, of the `data` buffer"]
    #[doc = " @param ack ACK signal"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_read(
        cmd_handle: i2c_cmd_handle_t,
        data: *mut u8,
        data_len: size_t,
        ack: i2c_ack_type_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a \"STOP signal\" to the given commands list."]
    #[doc = "        This function shall only be called in I2C master mode."]
    #[doc = "        Call `i2c_master_cmd_begin()` to send all the queued commands."]
    #[doc = ""]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM The static buffer used to create `cmd_handler` is too small"]
    #[doc = "     - ESP_FAIL No more memory left on the heap"]
    pub fn i2c_master_stop(cmd_handle: i2c_cmd_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Send all the queued commands on the I2C bus, in master mode."]
    #[doc = "        The task will be blocked until all the commands have been sent out."]
    #[doc = "        The I2C APIs are not thread-safe, if you want to use one I2C port in different tasks,"]
    #[doc = "        you need to take care of the multi-thread issue."]
    #[doc = "        This function shall only be called in I2C master mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param cmd_handle I2C commands list"]
    #[doc = " @param ticks_to_wait Maximum ticks to wait before issuing a timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Sending command error, slave hasn't ACK the transfer."]
    #[doc = "     - ESP_ERR_INVALID_STATE I2C driver not installed or not in master mode."]
    #[doc = "     - ESP_ERR_TIMEOUT Operation timeout because the bus is busy."]
    pub fn i2c_master_cmd_begin(
        i2c_num: i2c_port_t,
        cmd_handle: i2c_cmd_handle_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write bytes to internal ringbuffer of the I2C slave data. When the TX fifo empty, the ISR will"]
    #[doc = "        fill the hardware FIFO with the internal ringbuffer's data."]
    #[doc = "        @note This function shall only be called in I2C slave mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param data Bytes to write into internal buffer"]
    #[doc = " @param size Size, in bytes, of `data` buffer"]
    #[doc = " @param ticks_to_wait Maximum ticks to wait."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL (-1) Parameter error"]
    #[doc = "     - Other (>=0) The number of data bytes pushed to the I2C slave buffer."]
    pub fn i2c_slave_write_buffer(
        i2c_num: i2c_port_t,
        data: *const u8,
        size: c_types::c_int,
        ticks_to_wait: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Read bytes from I2C internal buffer. When the I2C bus receives data, the ISR will copy them"]
    #[doc = "        from the hardware RX FIFO to the internal ringbuffer."]
    #[doc = "        Calling this function will then copy bytes from the internal ringbuffer to the `data` user buffer."]
    #[doc = "        @note This function shall only be called in I2C slave mode."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param data Buffer to fill with ringbuffer's bytes"]
    #[doc = " @param max_size Maximum bytes to read"]
    #[doc = " @param ticks_to_wait Maximum waiting ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL(-1) Parameter error"]
    #[doc = "     - Others(>=0) The number of data bytes read from I2C slave buffer."]
    pub fn i2c_slave_read_buffer(
        i2c_num: i2c_port_t,
        data: *mut u8,
        max_size: size_t,
        ticks_to_wait: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Set I2C master clock period"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param high_period Clock cycle number during SCL is high level, high_period is a 14 bit value"]
    #[doc = " @param low_period Clock cycle number during SCL is low level, low_period is a 14 bit value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_period(
        i2c_num: i2c_port_t,
        high_period: c_types::c_int,
        low_period: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get I2C master clock period"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param high_period pointer to get clock cycle number during SCL is high level, will get a 14 bit value"]
    #[doc = " @param low_period pointer to get clock cycle number during SCL is low level, will get a 14 bit value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_period(
        i2c_num: i2c_port_t,
        high_period: *mut c_types::c_int,
        low_period: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable hardware filter on I2C bus"]
    #[doc = "        Sometimes the I2C bus is disturbed by high frequency noise(about 20ns), or the rising edge of"]
    #[doc = "        the SCL clock is very slow, these may cause the master state machine to break."]
    #[doc = "        Enable hardware filter can filter out high frequency interference and make the master more stable."]
    #[doc = "        @note Enable filter will slow down the SCL clock."]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number to filter"]
    #[doc = " @param cyc_num the APB cycles need to be filtered (0<= cyc_num <=7)."]
    #[doc = "        When the period of a pulse is less than cyc_num * APB_cycle, the I2C controller will ignore this pulse."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_filter_enable(i2c_num: i2c_port_t, cyc_num: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable filter on I2C bus"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_filter_disable(i2c_num: i2c_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief set I2C master start signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param setup_time clock number between the falling-edge of SDA and rising-edge of SCL for start mark, it's a 10-bit value."]
    #[doc = " @param hold_time clock num between the falling-edge of SDA and falling-edge of SCL for start mark, it's a 10-bit value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_start_timing(
        i2c_num: i2c_port_t,
        setup_time: c_types::c_int,
        hold_time: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get I2C master start signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param setup_time pointer to get setup time"]
    #[doc = " @param hold_time pointer to get hold time"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_start_timing(
        i2c_num: i2c_port_t,
        setup_time: *mut c_types::c_int,
        hold_time: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief set I2C master stop signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param setup_time clock num between the rising-edge of SCL and the rising-edge of SDA, it's a 10-bit value."]
    #[doc = " @param hold_time clock number after the STOP bit's rising-edge, it's a 14-bit value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_stop_timing(
        i2c_num: i2c_port_t,
        setup_time: c_types::c_int,
        hold_time: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get I2C master stop signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param setup_time pointer to get setup time."]
    #[doc = " @param hold_time pointer to get hold time."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_stop_timing(
        i2c_num: i2c_port_t,
        setup_time: *mut c_types::c_int,
        hold_time: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief set I2C data signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param sample_time clock number I2C used to sample data on SDA after the rising-edge of SCL, it's a 10-bit value"]
    #[doc = " @param hold_time clock number I2C used to hold the data after the falling-edge of SCL, it's a 10-bit value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_data_timing(
        i2c_num: i2c_port_t,
        sample_time: c_types::c_int,
        hold_time: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get I2C data signal timing"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param sample_time pointer to get sample time"]
    #[doc = " @param hold_time pointer to get hold time"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_data_timing(
        i2c_num: i2c_port_t,
        sample_time: *mut c_types::c_int,
        hold_time: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief set I2C timeout value"]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param timeout timeout value for I2C bus (unit: APB 80Mhz clock cycle)"]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_timeout(i2c_num: i2c_port_t, timeout: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get I2C timeout value"]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param timeout pointer to get timeout value"]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_timeout(i2c_num: i2c_port_t, timeout: *mut c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief set I2C data transfer mode"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param tx_trans_mode I2C sending data mode"]
    #[doc = " @param rx_trans_mode I2C receving data mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_set_data_mode(
        i2c_num: i2c_port_t,
        tx_trans_mode: i2c_trans_mode_t,
        rx_trans_mode: i2c_trans_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get I2C data transfer mode"]
    #[doc = ""]
    #[doc = " @param i2c_num I2C port number"]
    #[doc = " @param tx_trans_mode pointer to get I2C sending data mode"]
    #[doc = " @param rx_trans_mode pointer to get I2C receiving data mode"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2c_get_data_mode(
        i2c_num: i2c_port_t,
        tx_trans_mode: *mut i2c_trans_mode_t,
        rx_trans_mode: *mut i2c_trans_mode_t,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct i2s_dev_s {
    pub reserved_0: u32,
    pub reserved_4: u32,
    pub reserved_8: u32,
    pub int_raw: i2s_dev_s__bindgen_ty_1,
    pub int_st: i2s_dev_s__bindgen_ty_2,
    pub int_ena: i2s_dev_s__bindgen_ty_3,
    pub int_clr: i2s_dev_s__bindgen_ty_4,
    pub reserved_1c: u32,
    pub rx_conf: i2s_dev_s__bindgen_ty_5,
    pub tx_conf: i2s_dev_s__bindgen_ty_6,
    pub rx_conf1: i2s_dev_s__bindgen_ty_7,
    pub tx_conf1: i2s_dev_s__bindgen_ty_8,
    pub rx_clkm_conf: i2s_dev_s__bindgen_ty_9,
    pub tx_clkm_conf: i2s_dev_s__bindgen_ty_10,
    pub rx_clkm_div_conf: i2s_dev_s__bindgen_ty_11,
    pub tx_clkm_div_conf: i2s_dev_s__bindgen_ty_12,
    pub tx_pcm2pdm_conf: i2s_dev_s__bindgen_ty_13,
    pub tx_pcm2pdm_conf1: i2s_dev_s__bindgen_ty_14,
    pub reserved_48: u32,
    pub reserved_4c: u32,
    pub rx_tdm_ctrl: i2s_dev_s__bindgen_ty_15,
    pub tx_tdm_ctrl: i2s_dev_s__bindgen_ty_16,
    pub rx_timing: i2s_dev_s__bindgen_ty_17,
    pub tx_timing: i2s_dev_s__bindgen_ty_18,
    pub lc_hung_conf: i2s_dev_s__bindgen_ty_19,
    pub rx_eof_num: i2s_dev_s__bindgen_ty_20,
    pub conf_single_data: u32,
    pub state: i2s_dev_s__bindgen_ty_21,
    pub reserved_70: u32,
    pub reserved_74: u32,
    pub reserved_78: u32,
    pub reserved_7c: u32,
    pub date: i2s_dev_s__bindgen_ty_22,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn rx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_done: u32,
        tx_done: u32,
        rx_hung: u32,
        tx_hung: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_done: u32 = unsafe { ::core::mem::transmute(rx_done) };
            rx_done as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_done: u32 = unsafe { ::core::mem::transmute(tx_done) };
            tx_done as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_hung: u32 = unsafe { ::core::mem::transmute(rx_hung) };
            rx_hung as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_hung: u32 = unsafe { ::core::mem::transmute(tx_hung) };
            tx_hung as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn rx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_done: u32,
        tx_done: u32,
        rx_hung: u32,
        tx_hung: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_done: u32 = unsafe { ::core::mem::transmute(rx_done) };
            rx_done as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_done: u32 = unsafe { ::core::mem::transmute(tx_done) };
            tx_done as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_hung: u32 = unsafe { ::core::mem::transmute(rx_hung) };
            rx_hung as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_hung: u32 = unsafe { ::core::mem::transmute(tx_hung) };
            tx_hung as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn rx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_done: u32,
        tx_done: u32,
        rx_hung: u32,
        tx_hung: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_done: u32 = unsafe { ::core::mem::transmute(rx_done) };
            rx_done as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_done: u32 = unsafe { ::core::mem::transmute(tx_done) };
            tx_done as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_hung: u32 = unsafe { ::core::mem::transmute(rx_hung) };
            rx_hung as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_hung: u32 = unsafe { ::core::mem::transmute(tx_hung) };
            tx_hung as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn rx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_done(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_hung(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_hung(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_done: u32,
        tx_done: u32,
        rx_hung: u32,
        tx_hung: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_done: u32 = unsafe { ::core::mem::transmute(rx_done) };
            rx_done as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_done: u32 = unsafe { ::core::mem::transmute(tx_done) };
            tx_done as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_hung: u32 = unsafe { ::core::mem::transmute(rx_hung) };
            rx_hung as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_hung: u32 = unsafe { ::core::mem::transmute(tx_hung) };
            tx_hung as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn rx_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_fifo_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_fifo_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_slave_mod(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_slave_mod(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_mono(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_mono(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_big_endian(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_big_endian(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_mono_fst_vld(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_mono_fst_vld(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_pcm_conf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_pcm_conf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_pcm_bypass(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_pcm_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_stop_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_stop_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_left_align(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_left_align(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_24_fill_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_24_fill_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_ws_idle_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_ws_idle_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_bit_order(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_bit_order(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_pdm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_pdm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved23(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved23(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_reset: u32,
        rx_fifo_reset: u32,
        rx_start: u32,
        rx_slave_mod: u32,
        reserved4: u32,
        rx_mono: u32,
        reserved6: u32,
        rx_big_endian: u32,
        rx_update: u32,
        rx_mono_fst_vld: u32,
        rx_pcm_conf: u32,
        rx_pcm_bypass: u32,
        rx_stop_mode: u32,
        rx_left_align: u32,
        rx_24_fill_en: u32,
        rx_ws_idle_pol: u32,
        rx_bit_order: u32,
        rx_tdm_en: u32,
        rx_pdm_en: u32,
        reserved23: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_reset: u32 = unsafe { ::core::mem::transmute(rx_reset) };
            rx_reset as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rx_fifo_reset: u32 = unsafe { ::core::mem::transmute(rx_fifo_reset) };
            rx_fifo_reset as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_start: u32 = unsafe { ::core::mem::transmute(rx_start) };
            rx_start as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rx_slave_mod: u32 = unsafe { ::core::mem::transmute(rx_slave_mod) };
            rx_slave_mod as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rx_mono: u32 = unsafe { ::core::mem::transmute(rx_mono) };
            rx_mono as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let reserved6: u32 = unsafe { ::core::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rx_big_endian: u32 = unsafe { ::core::mem::transmute(rx_big_endian) };
            rx_big_endian as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rx_update: u32 = unsafe { ::core::mem::transmute(rx_update) };
            rx_update as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rx_mono_fst_vld: u32 = unsafe { ::core::mem::transmute(rx_mono_fst_vld) };
            rx_mono_fst_vld as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let rx_pcm_conf: u32 = unsafe { ::core::mem::transmute(rx_pcm_conf) };
            rx_pcm_conf as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let rx_pcm_bypass: u32 = unsafe { ::core::mem::transmute(rx_pcm_bypass) };
            rx_pcm_bypass as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let rx_stop_mode: u32 = unsafe { ::core::mem::transmute(rx_stop_mode) };
            rx_stop_mode as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rx_left_align: u32 = unsafe { ::core::mem::transmute(rx_left_align) };
            rx_left_align as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let rx_24_fill_en: u32 = unsafe { ::core::mem::transmute(rx_24_fill_en) };
            rx_24_fill_en as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let rx_ws_idle_pol: u32 = unsafe { ::core::mem::transmute(rx_ws_idle_pol) };
            rx_ws_idle_pol as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let rx_bit_order: u32 = unsafe { ::core::mem::transmute(rx_bit_order) };
            rx_bit_order as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let rx_tdm_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_en) };
            rx_tdm_en as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let rx_pdm_en: u32 = unsafe { ::core::mem::transmute(rx_pdm_en) };
            rx_pdm_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved23: u32 = unsafe { ::core::mem::transmute(reserved23) };
            reserved23 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn tx_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_fifo_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_fifo_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_slave_mod(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_slave_mod(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_mono(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mono(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_chan_equal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_chan_equal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_big_endian(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_big_endian(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_mono_fst_vld(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mono_fst_vld(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pcm_conf(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pcm_conf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pcm_bypass(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pcm_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_stop_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_stop_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_left_align(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_left_align(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_24_fill_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_24_fill_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_ws_idle_pol(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_ws_idle_pol(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bit_order(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bit_order(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_chan_mod(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_tx_chan_mod(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_loopback(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sig_loopback(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_reset: u32,
        tx_fifo_reset: u32,
        tx_start: u32,
        tx_slave_mod: u32,
        reserved4: u32,
        tx_mono: u32,
        tx_chan_equal: u32,
        tx_big_endian: u32,
        tx_update: u32,
        tx_mono_fst_vld: u32,
        tx_pcm_conf: u32,
        tx_pcm_bypass: u32,
        tx_stop_en: u32,
        reserved14: u32,
        tx_left_align: u32,
        tx_24_fill_en: u32,
        tx_ws_idle_pol: u32,
        tx_bit_order: u32,
        tx_tdm_en: u32,
        tx_pdm_en: u32,
        reserved21: u32,
        tx_chan_mod: u32,
        sig_loopback: u32,
        reserved28: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tx_reset: u32 = unsafe { ::core::mem::transmute(tx_reset) };
            tx_reset as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_fifo_reset: u32 = unsafe { ::core::mem::transmute(tx_fifo_reset) };
            tx_fifo_reset as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tx_start: u32 = unsafe { ::core::mem::transmute(tx_start) };
            tx_start as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_slave_mod: u32 = unsafe { ::core::mem::transmute(tx_slave_mod) };
            tx_slave_mod as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tx_mono: u32 = unsafe { ::core::mem::transmute(tx_mono) };
            tx_mono as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tx_chan_equal: u32 = unsafe { ::core::mem::transmute(tx_chan_equal) };
            tx_chan_equal as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tx_big_endian: u32 = unsafe { ::core::mem::transmute(tx_big_endian) };
            tx_big_endian as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tx_update: u32 = unsafe { ::core::mem::transmute(tx_update) };
            tx_update as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tx_mono_fst_vld: u32 = unsafe { ::core::mem::transmute(tx_mono_fst_vld) };
            tx_mono_fst_vld as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let tx_pcm_conf: u32 = unsafe { ::core::mem::transmute(tx_pcm_conf) };
            tx_pcm_conf as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tx_pcm_bypass: u32 = unsafe { ::core::mem::transmute(tx_pcm_bypass) };
            tx_pcm_bypass as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tx_stop_en: u32 = unsafe { ::core::mem::transmute(tx_stop_en) };
            tx_stop_en as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let tx_left_align: u32 = unsafe { ::core::mem::transmute(tx_left_align) };
            tx_left_align as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let tx_24_fill_en: u32 = unsafe { ::core::mem::transmute(tx_24_fill_en) };
            tx_24_fill_en as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let tx_ws_idle_pol: u32 = unsafe { ::core::mem::transmute(tx_ws_idle_pol) };
            tx_ws_idle_pol as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let tx_bit_order: u32 = unsafe { ::core::mem::transmute(tx_bit_order) };
            tx_bit_order as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let tx_tdm_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_en) };
            tx_tdm_en as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let tx_pdm_en: u32 = unsafe { ::core::mem::transmute(tx_pdm_en) };
            tx_pdm_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 3u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 3u8, {
            let tx_chan_mod: u32 = unsafe { ::core::mem::transmute(tx_chan_mod) };
            tx_chan_mod as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let sig_loopback: u32 = unsafe { ::core::mem::transmute(sig_loopback) };
            sig_loopback as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn rx_tdm_ws_width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_ws_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_bck_div_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_rx_bck_div_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_bits_mod(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rx_bits_mod(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_half_sample_bits(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_rx_half_sample_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan_bits(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_msb_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_msb_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_tdm_ws_width: u32,
        rx_bck_div_num: u32,
        rx_bits_mod: u32,
        rx_half_sample_bits: u32,
        rx_tdm_chan_bits: u32,
        rx_msb_shift: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let rx_tdm_ws_width: u32 = unsafe { ::core::mem::transmute(rx_tdm_ws_width) };
            rx_tdm_ws_width as u64
        });
        __bindgen_bitfield_unit.set(7usize, 6u8, {
            let rx_bck_div_num: u32 = unsafe { ::core::mem::transmute(rx_bck_div_num) };
            rx_bck_div_num as u64
        });
        __bindgen_bitfield_unit.set(13usize, 5u8, {
            let rx_bits_mod: u32 = unsafe { ::core::mem::transmute(rx_bits_mod) };
            rx_bits_mod as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let rx_half_sample_bits: u32 = unsafe { ::core::mem::transmute(rx_half_sample_bits) };
            rx_half_sample_bits as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let rx_tdm_chan_bits: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan_bits) };
            rx_tdm_chan_bits as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let rx_msb_shift: u32 = unsafe { ::core::mem::transmute(rx_msb_shift) };
            rx_msb_shift as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn tx_tdm_ws_width(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_ws_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bck_div_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bck_div_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bits_mod(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bits_mod(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_half_sample_bits(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_tx_half_sample_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan_bits(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_msb_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_msb_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bck_no_dly(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bck_no_dly(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved31(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved31(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_tdm_ws_width: u32,
        tx_bck_div_num: u32,
        tx_bits_mod: u32,
        tx_half_sample_bits: u32,
        tx_tdm_chan_bits: u32,
        tx_msb_shift: u32,
        tx_bck_no_dly: u32,
        reserved31: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let tx_tdm_ws_width: u32 = unsafe { ::core::mem::transmute(tx_tdm_ws_width) };
            tx_tdm_ws_width as u64
        });
        __bindgen_bitfield_unit.set(7usize, 6u8, {
            let tx_bck_div_num: u32 = unsafe { ::core::mem::transmute(tx_bck_div_num) };
            tx_bck_div_num as u64
        });
        __bindgen_bitfield_unit.set(13usize, 5u8, {
            let tx_bits_mod: u32 = unsafe { ::core::mem::transmute(tx_bits_mod) };
            tx_bits_mod as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let tx_half_sample_bits: u32 = unsafe { ::core::mem::transmute(tx_half_sample_bits) };
            tx_half_sample_bits as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let tx_tdm_chan_bits: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan_bits) };
            tx_tdm_chan_bits as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let tx_msb_shift: u32 = unsafe { ::core::mem::transmute(tx_msb_shift) };
            tx_msb_shift as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let tx_bck_no_dly: u32 = unsafe { ::core::mem::transmute(tx_bck_no_dly) };
            tx_bck_no_dly as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let reserved31: u32 = unsafe { ::core::mem::transmute(reserved31) };
            reserved31 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn rx_clkm_div_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clkm_div_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_clk_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clk_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mclk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mclk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_clkm_div_num: u32,
        reserved8: u32,
        rx_clk_active: u32,
        rx_clk_sel: u32,
        mclk_sel: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let rx_clkm_div_num: u32 = unsafe { ::core::mem::transmute(rx_clkm_div_num) };
            rx_clkm_div_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 18u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let rx_clk_active: u32 = unsafe { ::core::mem::transmute(rx_clk_active) };
            rx_clk_active as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let rx_clk_sel: u32 = unsafe { ::core::mem::transmute(rx_clk_sel) };
            rx_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let mclk_sel: u32 = unsafe { ::core::mem::transmute(mclk_sel) };
            mclk_sel as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn tx_clkm_div_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clkm_div_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_clk_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clk_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_clkm_div_num: u32,
        reserved8: u32,
        tx_clk_active: u32,
        tx_clk_sel: u32,
        clk_en: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let tx_clkm_div_num: u32 = unsafe { ::core::mem::transmute(tx_clkm_div_num) };
            tx_clkm_div_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 18u8, {
            let reserved8: u32 = unsafe { ::core::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let tx_clk_active: u32 = unsafe { ::core::mem::transmute(tx_clk_active) };
            tx_clk_active as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let tx_clk_sel: u32 = unsafe { ::core::mem::transmute(tx_clk_sel) };
            tx_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn rx_clkm_div_z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clkm_div_z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_clkm_div_y(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clkm_div_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_clkm_div_x(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clkm_div_x(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_clkm_div_yn1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_clkm_div_yn1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_clkm_div_z: u32,
        rx_clkm_div_y: u32,
        rx_clkm_div_x: u32,
        rx_clkm_div_yn1: u32,
        reserved28: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let rx_clkm_div_z: u32 = unsafe { ::core::mem::transmute(rx_clkm_div_z) };
            rx_clkm_div_z as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let rx_clkm_div_y: u32 = unsafe { ::core::mem::transmute(rx_clkm_div_y) };
            rx_clkm_div_y as u64
        });
        __bindgen_bitfield_unit.set(18usize, 9u8, {
            let rx_clkm_div_x: u32 = unsafe { ::core::mem::transmute(rx_clkm_div_x) };
            rx_clkm_div_x as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let rx_clkm_div_yn1: u32 = unsafe { ::core::mem::transmute(rx_clkm_div_yn1) };
            rx_clkm_div_yn1 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn tx_clkm_div_z(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clkm_div_z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_clkm_div_y(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clkm_div_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_clkm_div_x(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clkm_div_x(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_clkm_div_yn1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_clkm_div_yn1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_clkm_div_z: u32,
        tx_clkm_div_y: u32,
        tx_clkm_div_x: u32,
        tx_clkm_div_yn1: u32,
        reserved28: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let tx_clkm_div_z: u32 = unsafe { ::core::mem::transmute(tx_clkm_div_z) };
            tx_clkm_div_z as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let tx_clkm_div_y: u32 = unsafe { ::core::mem::transmute(tx_clkm_div_y) };
            tx_clkm_div_y as u64
        });
        __bindgen_bitfield_unit.set(18usize, 9u8, {
            let tx_clkm_div_x: u32 = unsafe { ::core::mem::transmute(tx_clkm_div_x) };
            tx_clkm_div_x as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let tx_clkm_div_yn1: u32 = unsafe { ::core::mem::transmute(tx_clkm_div_yn1) };
            tx_clkm_div_yn1 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn tx_pdm_hp_bypass(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_hp_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_sinc_osr2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_sinc_osr2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_prescale(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_prescale(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_hp_in_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_hp_in_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_lp_in_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_lp_in_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_sinc_in_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_sinc_in_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_sigmadelta_in_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_sigmadelta_in_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_sigmadelta_dither2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_sigmadelta_dither2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_sigmadelta_dither(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_sigmadelta_dither(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_dac_2out_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_dac_2out_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_dac_mode_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_dac_mode_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm2pdm_conv_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm2pdm_conv_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_pdm_hp_bypass: u32,
        tx_pdm_sinc_osr2: u32,
        tx_pdm_prescale: u32,
        tx_pdm_hp_in_shift: u32,
        tx_pdm_lp_in_shift: u32,
        tx_pdm_sinc_in_shift: u32,
        tx_pdm_sigmadelta_in_shift: u32,
        tx_pdm_sigmadelta_dither2: u32,
        tx_pdm_sigmadelta_dither: u32,
        tx_pdm_dac_2out_en: u32,
        tx_pdm_dac_mode_en: u32,
        pcm2pdm_conv_en: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tx_pdm_hp_bypass: u32 = unsafe { ::core::mem::transmute(tx_pdm_hp_bypass) };
            tx_pdm_hp_bypass as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let tx_pdm_sinc_osr2: u32 = unsafe { ::core::mem::transmute(tx_pdm_sinc_osr2) };
            tx_pdm_sinc_osr2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 8u8, {
            let tx_pdm_prescale: u32 = unsafe { ::core::mem::transmute(tx_pdm_prescale) };
            tx_pdm_prescale as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let tx_pdm_hp_in_shift: u32 = unsafe { ::core::mem::transmute(tx_pdm_hp_in_shift) };
            tx_pdm_hp_in_shift as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let tx_pdm_lp_in_shift: u32 = unsafe { ::core::mem::transmute(tx_pdm_lp_in_shift) };
            tx_pdm_lp_in_shift as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let tx_pdm_sinc_in_shift: u32 = unsafe { ::core::mem::transmute(tx_pdm_sinc_in_shift) };
            tx_pdm_sinc_in_shift as u64
        });
        __bindgen_bitfield_unit.set(19usize, 2u8, {
            let tx_pdm_sigmadelta_in_shift: u32 =
                unsafe { ::core::mem::transmute(tx_pdm_sigmadelta_in_shift) };
            tx_pdm_sigmadelta_in_shift as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let tx_pdm_sigmadelta_dither2: u32 =
                unsafe { ::core::mem::transmute(tx_pdm_sigmadelta_dither2) };
            tx_pdm_sigmadelta_dither2 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let tx_pdm_sigmadelta_dither: u32 =
                unsafe { ::core::mem::transmute(tx_pdm_sigmadelta_dither) };
            tx_pdm_sigmadelta_dither as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let tx_pdm_dac_2out_en: u32 = unsafe { ::core::mem::transmute(tx_pdm_dac_2out_en) };
            tx_pdm_dac_2out_en as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let tx_pdm_dac_mode_en: u32 = unsafe { ::core::mem::transmute(tx_pdm_dac_mode_en) };
            tx_pdm_dac_mode_en as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pcm2pdm_conv_en: u32 = unsafe { ::core::mem::transmute(pcm2pdm_conv_en) };
            pcm2pdm_conv_en as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn tx_pdm_fp(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_fp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_pdm_fs(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_tx_pdm_fs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_iir_hp_mult12_5(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_tx_iir_hp_mult12_5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_iir_hp_mult12_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_tx_iir_hp_mult12_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_pdm_fp: u32,
        tx_pdm_fs: u32,
        tx_iir_hp_mult12_5: u32,
        tx_iir_hp_mult12_0: u32,
        reserved26: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let tx_pdm_fp: u32 = unsafe { ::core::mem::transmute(tx_pdm_fp) };
            tx_pdm_fp as u64
        });
        __bindgen_bitfield_unit.set(10usize, 10u8, {
            let tx_pdm_fs: u32 = unsafe { ::core::mem::transmute(tx_pdm_fs) };
            tx_pdm_fs as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let tx_iir_hp_mult12_5: u32 = unsafe { ::core::mem::transmute(tx_iir_hp_mult12_5) };
            tx_iir_hp_mult12_5 as u64
        });
        __bindgen_bitfield_unit.set(23usize, 3u8, {
            let tx_iir_hp_mult12_0: u32 = unsafe { ::core::mem::transmute(tx_iir_hp_mult12_0) };
            tx_iir_hp_mult12_0 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 6u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn rx_tdm_pdm_chan0_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan0_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan1_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan1_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan2_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan2_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan3_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan3_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan4_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan4_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan5_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan5_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan6_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan6_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_pdm_chan7_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_pdm_chan7_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan8_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan8_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan9_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan9_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan10_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan10_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan11_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan11_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan12_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan12_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan13_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan13_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan14_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan14_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_chan15_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_chan15_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_tdm_tot_chan_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rx_tdm_tot_chan_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved20(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved20(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_tdm_pdm_chan0_en: u32,
        rx_tdm_pdm_chan1_en: u32,
        rx_tdm_pdm_chan2_en: u32,
        rx_tdm_pdm_chan3_en: u32,
        rx_tdm_pdm_chan4_en: u32,
        rx_tdm_pdm_chan5_en: u32,
        rx_tdm_pdm_chan6_en: u32,
        rx_tdm_pdm_chan7_en: u32,
        rx_tdm_chan8_en: u32,
        rx_tdm_chan9_en: u32,
        rx_tdm_chan10_en: u32,
        rx_tdm_chan11_en: u32,
        rx_tdm_chan12_en: u32,
        rx_tdm_chan13_en: u32,
        rx_tdm_chan14_en: u32,
        rx_tdm_chan15_en: u32,
        rx_tdm_tot_chan_num: u32,
        reserved20: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_tdm_pdm_chan0_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan0_en) };
            rx_tdm_pdm_chan0_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let rx_tdm_pdm_chan1_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan1_en) };
            rx_tdm_pdm_chan1_en as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rx_tdm_pdm_chan2_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan2_en) };
            rx_tdm_pdm_chan2_en as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rx_tdm_pdm_chan3_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan3_en) };
            rx_tdm_pdm_chan3_en as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let rx_tdm_pdm_chan4_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan4_en) };
            rx_tdm_pdm_chan4_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let rx_tdm_pdm_chan5_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan5_en) };
            rx_tdm_pdm_chan5_en as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let rx_tdm_pdm_chan6_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan6_en) };
            rx_tdm_pdm_chan6_en as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rx_tdm_pdm_chan7_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_pdm_chan7_en) };
            rx_tdm_pdm_chan7_en as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rx_tdm_chan8_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan8_en) };
            rx_tdm_chan8_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let rx_tdm_chan9_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan9_en) };
            rx_tdm_chan9_en as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rx_tdm_chan10_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan10_en) };
            rx_tdm_chan10_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let rx_tdm_chan11_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan11_en) };
            rx_tdm_chan11_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let rx_tdm_chan12_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan12_en) };
            rx_tdm_chan12_en as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let rx_tdm_chan13_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan13_en) };
            rx_tdm_chan13_en as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let rx_tdm_chan14_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan14_en) };
            rx_tdm_chan14_en as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rx_tdm_chan15_en: u32 = unsafe { ::core::mem::transmute(rx_tdm_chan15_en) };
            rx_tdm_chan15_en as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let rx_tdm_tot_chan_num: u32 = unsafe { ::core::mem::transmute(rx_tdm_tot_chan_num) };
            rx_tdm_tot_chan_num as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved20: u32 = unsafe { ::core::mem::transmute(reserved20) };
            reserved20 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn tx_tdm_chan0_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan0_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan1_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan1_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan2_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan2_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan3_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan3_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan4_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan4_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan5_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan5_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan6_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan6_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan7_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan7_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan8_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan8_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan9_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan9_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan10_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan10_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan11_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan11_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan12_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan12_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan13_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan13_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan14_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan14_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_chan15_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_chan15_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_tot_chan_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_tot_chan_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_tdm_skip_msk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_tdm_skip_msk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_tdm_chan0_en: u32,
        tx_tdm_chan1_en: u32,
        tx_tdm_chan2_en: u32,
        tx_tdm_chan3_en: u32,
        tx_tdm_chan4_en: u32,
        tx_tdm_chan5_en: u32,
        tx_tdm_chan6_en: u32,
        tx_tdm_chan7_en: u32,
        tx_tdm_chan8_en: u32,
        tx_tdm_chan9_en: u32,
        tx_tdm_chan10_en: u32,
        tx_tdm_chan11_en: u32,
        tx_tdm_chan12_en: u32,
        tx_tdm_chan13_en: u32,
        tx_tdm_chan14_en: u32,
        tx_tdm_chan15_en: u32,
        tx_tdm_tot_chan_num: u32,
        tx_tdm_skip_msk_en: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tx_tdm_chan0_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan0_en) };
            tx_tdm_chan0_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let tx_tdm_chan1_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan1_en) };
            tx_tdm_chan1_en as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tx_tdm_chan2_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan2_en) };
            tx_tdm_chan2_en as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_tdm_chan3_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan3_en) };
            tx_tdm_chan3_en as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let tx_tdm_chan4_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan4_en) };
            tx_tdm_chan4_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tx_tdm_chan5_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan5_en) };
            tx_tdm_chan5_en as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let tx_tdm_chan6_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan6_en) };
            tx_tdm_chan6_en as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tx_tdm_chan7_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan7_en) };
            tx_tdm_chan7_en as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let tx_tdm_chan8_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan8_en) };
            tx_tdm_chan8_en as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tx_tdm_chan9_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan9_en) };
            tx_tdm_chan9_en as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tx_tdm_chan10_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan10_en) };
            tx_tdm_chan10_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tx_tdm_chan11_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan11_en) };
            tx_tdm_chan11_en as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tx_tdm_chan12_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan12_en) };
            tx_tdm_chan12_en as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tx_tdm_chan13_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan13_en) };
            tx_tdm_chan13_en as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tx_tdm_chan14_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan14_en) };
            tx_tdm_chan14_en as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let tx_tdm_chan15_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_chan15_en) };
            tx_tdm_chan15_en as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let tx_tdm_tot_chan_num: u32 = unsafe { ::core::mem::transmute(tx_tdm_tot_chan_num) };
            tx_tdm_tot_chan_num as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let tx_tdm_skip_msk_en: u32 = unsafe { ::core::mem::transmute(tx_tdm_skip_msk_en) };
            tx_tdm_skip_msk_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_17 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_17__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_17__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_17__bindgen_ty_1 {
    #[inline]
    pub fn rx_sd_in_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_sd_in_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_ws_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_ws_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_bck_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_bck_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_ws_in_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_ws_in_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_bck_in_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rx_bck_in_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_sd_in_dm: u32,
        reserved2: u32,
        rx_ws_out_dm: u32,
        reserved18: u32,
        rx_bck_out_dm: u32,
        reserved22: u32,
        rx_ws_in_dm: u32,
        reserved26: u32,
        rx_bck_in_dm: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let rx_sd_in_dm: u32 = unsafe { ::core::mem::transmute(rx_sd_in_dm) };
            rx_sd_in_dm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 14u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let rx_ws_out_dm: u32 = unsafe { ::core::mem::transmute(rx_ws_out_dm) };
            rx_ws_out_dm as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let rx_bck_out_dm: u32 = unsafe { ::core::mem::transmute(rx_bck_out_dm) };
            rx_bck_out_dm as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let rx_ws_in_dm: u32 = unsafe { ::core::mem::transmute(rx_ws_in_dm) };
            rx_ws_in_dm as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 2u8, {
            let rx_bck_in_dm: u32 = unsafe { ::core::mem::transmute(rx_bck_in_dm) };
            rx_bck_in_dm as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_18 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_18__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_18__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_18__bindgen_ty_1 {
    #[inline]
    pub fn tx_sd_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_sd_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_sd1_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_sd1_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_ws_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_ws_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved18(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved18(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bck_out_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bck_out_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_ws_in_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_ws_in_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_bck_in_dm(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_bck_in_dm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_sd_out_dm: u32,
        reserved2: u32,
        tx_sd1_out_dm: u32,
        reserved6: u32,
        tx_ws_out_dm: u32,
        reserved18: u32,
        tx_bck_out_dm: u32,
        reserved22: u32,
        tx_ws_in_dm: u32,
        reserved26: u32,
        tx_bck_in_dm: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let tx_sd_out_dm: u32 = unsafe { ::core::mem::transmute(tx_sd_out_dm) };
            tx_sd_out_dm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let reserved2: u32 = unsafe { ::core::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let tx_sd1_out_dm: u32 = unsafe { ::core::mem::transmute(tx_sd1_out_dm) };
            tx_sd1_out_dm as u64
        });
        __bindgen_bitfield_unit.set(6usize, 10u8, {
            let reserved6: u32 = unsafe { ::core::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let tx_ws_out_dm: u32 = unsafe { ::core::mem::transmute(tx_ws_out_dm) };
            tx_ws_out_dm as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let reserved18: u32 = unsafe { ::core::mem::transmute(reserved18) };
            reserved18 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let tx_bck_out_dm: u32 = unsafe { ::core::mem::transmute(tx_bck_out_dm) };
            tx_bck_out_dm as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let reserved22: u32 = unsafe { ::core::mem::transmute(reserved22) };
            reserved22 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let tx_ws_in_dm: u32 = unsafe { ::core::mem::transmute(tx_ws_in_dm) };
            tx_ws_in_dm as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 2u8, {
            let tx_bck_in_dm: u32 = unsafe { ::core::mem::transmute(tx_bck_in_dm) };
            tx_bck_in_dm as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_19 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_19__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_19__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_19__bindgen_ty_1 {
    #[inline]
    pub fn fifo_timeout(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fifo_timeout(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fifo_timeout_shift(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_fifo_timeout_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fifo_timeout_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fifo_timeout_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fifo_timeout: u32,
        fifo_timeout_shift: u32,
        fifo_timeout_ena: u32,
        reserved12: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let fifo_timeout: u32 = unsafe { ::core::mem::transmute(fifo_timeout) };
            fifo_timeout as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let fifo_timeout_shift: u32 = unsafe { ::core::mem::transmute(fifo_timeout_shift) };
            fifo_timeout_shift as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fifo_timeout_ena: u32 = unsafe { ::core::mem::transmute(fifo_timeout_ena) };
            fifo_timeout_ena as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_19 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_20 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_20__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_20__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_20__bindgen_ty_1 {
    #[inline]
    pub fn rx_eof_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_rx_eof_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved12(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved12(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rx_eof_num: u32, reserved12: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let rx_eof_num: u32 = unsafe { ::core::mem::transmute(rx_eof_num) };
            rx_eof_num as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved12: u32 = unsafe { ::core::mem::transmute(reserved12) };
            reserved12 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_20 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_21 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_21__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_21__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_21__bindgen_ty_1 {
    #[inline]
    pub fn tx_idle(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_idle(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_idle: u32, reserved1: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tx_idle: u32 = unsafe { ::core::mem::transmute(tx_idle) };
            tx_idle as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::core::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_21 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union i2s_dev_s__bindgen_ty_22 {
    pub __bindgen_anon_1: i2s_dev_s__bindgen_ty_22__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_dev_s__bindgen_ty_22__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl i2s_dev_s__bindgen_ty_22__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for i2s_dev_s__bindgen_ty_22 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for i2s_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type i2s_dev_t = i2s_dev_s;
extern "C" {
    pub static mut I2S0: i2s_dev_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i2s_signal_conn_t {
    pub mck_out_sig: u8,
    pub m_tx_bck_sig: u8,
    pub m_rx_bck_sig: u8,
    pub m_tx_ws_sig: u8,
    pub m_rx_ws_sig: u8,
    pub s_tx_bck_sig: u8,
    pub s_rx_bck_sig: u8,
    pub s_tx_ws_sig: u8,
    pub s_rx_ws_sig: u8,
    pub data_out_sig: u8,
    pub data_in_sig: u8,
    pub irq: u8,
    pub module: periph_module_t,
}
impl Default for i2s_signal_conn_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static i2s_periph_signal: [i2s_signal_conn_t; 1usize];
}
#[doc = "< data bit-width: 8"]
pub const i2s_bits_per_sample_t_I2S_BITS_PER_SAMPLE_8BIT: i2s_bits_per_sample_t = 8;
#[doc = "< data bit-width: 16"]
pub const i2s_bits_per_sample_t_I2S_BITS_PER_SAMPLE_16BIT: i2s_bits_per_sample_t = 16;
#[doc = "< data bit-width: 24"]
pub const i2s_bits_per_sample_t_I2S_BITS_PER_SAMPLE_24BIT: i2s_bits_per_sample_t = 24;
#[doc = "< data bit-width: 32"]
pub const i2s_bits_per_sample_t_I2S_BITS_PER_SAMPLE_32BIT: i2s_bits_per_sample_t = 32;
#[doc = " @brief I2S bit width per sample."]
#[doc = ""]
pub type i2s_bits_per_sample_t = c_types::c_uint;
#[doc = "< channel bit-width equals to data bit-width"]
pub const i2s_bits_per_chan_t_I2S_BITS_PER_CHAN_DEFAULT: i2s_bits_per_chan_t = 0;
#[doc = "< channel bit-width: 8"]
pub const i2s_bits_per_chan_t_I2S_BITS_PER_CHAN_8BIT: i2s_bits_per_chan_t = 8;
#[doc = "< channel bit-width: 16"]
pub const i2s_bits_per_chan_t_I2S_BITS_PER_CHAN_16BIT: i2s_bits_per_chan_t = 16;
#[doc = "< channel bit-width: 24"]
pub const i2s_bits_per_chan_t_I2S_BITS_PER_CHAN_24BIT: i2s_bits_per_chan_t = 24;
#[doc = "< channel bit-width: 32"]
pub const i2s_bits_per_chan_t_I2S_BITS_PER_CHAN_32BIT: i2s_bits_per_chan_t = 32;
#[doc = " @brief I2S bit width per chan."]
#[doc = ""]
pub type i2s_bits_per_chan_t = c_types::c_uint;
#[doc = "< I2S channel (mono), one channel activated. In this mode, you only need to send one channel data but the fifo will copy same data for the other unactivated channels automatically, then both channels will transmit same data."]
pub const i2s_channel_t_I2S_CHANNEL_MONO: i2s_channel_t = 1;
#[doc = "< I2S channel (stereo), two (or more) channels activated. In this mode, these channels will transmit different data."]
pub const i2s_channel_t_I2S_CHANNEL_STEREO: i2s_channel_t = 2;
#[doc = "< I2S channel 0 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH0: i2s_channel_t = 65536;
#[doc = "< I2S channel 1 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH1: i2s_channel_t = 131072;
#[doc = "< I2S channel 2 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH2: i2s_channel_t = 262144;
#[doc = "< I2S channel 3 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH3: i2s_channel_t = 524288;
#[doc = "< I2S channel 4 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH4: i2s_channel_t = 1048576;
#[doc = "< I2S channel 5 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH5: i2s_channel_t = 2097152;
#[doc = "< I2S channel 6 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH6: i2s_channel_t = 4194304;
#[doc = "< I2S channel 7 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH7: i2s_channel_t = 8388608;
#[doc = "< I2S channel 8 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH8: i2s_channel_t = 16777216;
#[doc = "< I2S channel 9 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH9: i2s_channel_t = 33554432;
#[doc = "< I2S channel 10 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH10: i2s_channel_t = 67108864;
#[doc = "< I2S channel 11 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH11: i2s_channel_t = 134217728;
#[doc = "< I2S channel 12 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH12: i2s_channel_t = 268435456;
#[doc = "< I2S channel 13 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH13: i2s_channel_t = 536870912;
#[doc = "< I2S channel 14 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH14: i2s_channel_t = 1073741824;
#[doc = "< I2S channel 15 activated"]
pub const i2s_channel_t_I2S_TDM_ACTIVE_CH15: i2s_channel_t = -2147483648;
#[doc = " @brief I2S channel."]
#[doc = ""]
pub type i2s_channel_t = c_types::c_int;
#[doc = "< I2S communication I2S Philips standard, data launch at second BCK"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_STAND_I2S: i2s_comm_format_t = 1;
#[doc = "< I2S communication MSB alignment standard, data launch at first BCK"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_STAND_MSB: i2s_comm_format_t = 2;
#[doc = "< PCM Short standard, also known as DSP mode. The period of synchronization signal (WS) is 1 bck cycle."]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_STAND_PCM_SHORT: i2s_comm_format_t = 4;
#[doc = "< PCM Long standard. The period of synchronization signal (WS) is channel_bit*bck cycles."]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_STAND_PCM_LONG: i2s_comm_format_t = 12;
#[doc = "< standard max"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_STAND_MAX: i2s_comm_format_t = 13;
#[doc = "< I2S communication format I2S, correspond to `I2S_COMM_FORMAT_STAND_I2S`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_I2S: i2s_comm_format_t = 1;
#[doc = "< I2S format MSB, (I2S_COMM_FORMAT_I2S |I2S_COMM_FORMAT_I2S_MSB) correspond to `I2S_COMM_FORMAT_STAND_I2S`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_I2S_MSB: i2s_comm_format_t = 1;
#[doc = "< I2S format LSB, (I2S_COMM_FORMAT_I2S |I2S_COMM_FORMAT_I2S_LSB) correspond to `I2S_COMM_FORMAT_STAND_MSB`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_I2S_LSB: i2s_comm_format_t = 2;
#[doc = "< I2S communication format PCM, correspond to `I2S_COMM_FORMAT_STAND_PCM_SHORT`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_PCM: i2s_comm_format_t = 4;
#[doc = "< PCM Short, (I2S_COMM_FORMAT_PCM | I2S_COMM_FORMAT_PCM_SHORT) correspond to `I2S_COMM_FORMAT_STAND_PCM_SHORT`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_PCM_SHORT: i2s_comm_format_t = 4;
#[doc = "< PCM Long, (I2S_COMM_FORMAT_PCM | I2S_COMM_FORMAT_PCM_LONG) correspond to `I2S_COMM_FORMAT_STAND_PCM_LONG`"]
pub const i2s_comm_format_t_I2S_COMM_FORMAT_PCM_LONG: i2s_comm_format_t = 8;
#[doc = " @brief I2S communication standard format"]
#[doc = ""]
pub type i2s_comm_format_t = c_types::c_uint;
#[doc = "< Separated left and right channel"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_RIGHT_LEFT: i2s_channel_fmt_t = 0;
#[doc = "< Load right channel data in both two channels"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_ALL_RIGHT: i2s_channel_fmt_t = 1;
#[doc = "< Load left channel data in both two channels"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_ALL_LEFT: i2s_channel_fmt_t = 2;
#[doc = "< Only load data in right channel (mono mode)"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_ONLY_RIGHT: i2s_channel_fmt_t = 3;
#[doc = "< Only load data in left channel (mono mode)"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_ONLY_LEFT: i2s_channel_fmt_t = 4;
#[doc = "< More than two channels are used"]
pub const i2s_channel_fmt_t_I2S_CHANNEL_FMT_MULTIPLE: i2s_channel_fmt_t = 5;
#[doc = " @brief I2S channel format type"]
pub type i2s_channel_fmt_t = c_types::c_uint;
#[doc = "< Master mode"]
pub const i2s_mode_t_I2S_MODE_MASTER: i2s_mode_t = 1;
#[doc = "< Slave mode"]
pub const i2s_mode_t_I2S_MODE_SLAVE: i2s_mode_t = 2;
#[doc = "< TX mode"]
pub const i2s_mode_t_I2S_MODE_TX: i2s_mode_t = 4;
#[doc = "< RX mode"]
pub const i2s_mode_t_I2S_MODE_RX: i2s_mode_t = 8;
#[doc = "< I2S PDM mode"]
pub const i2s_mode_t_I2S_MODE_PDM: i2s_mode_t = 64;
#[doc = " @brief I2S Mode"]
pub type i2s_mode_t = c_types::c_uint;
#[doc = "< Clock from PLL_D2_CLK(160M)"]
pub const i2s_clock_src_t_I2S_CLK_D2CLK: i2s_clock_src_t = 0;
#[doc = " @brief I2S source clock"]
pub type i2s_clock_src_t = c_types::c_uint;
#[doc = "< Default value. mclk = sample_rate * 256"]
pub const i2s_mclk_multiple_t_I2S_MCLK_MULTIPLE_DEFAULT: i2s_mclk_multiple_t = 0;
#[doc = "< mclk = sample_rate * 128"]
pub const i2s_mclk_multiple_t_I2S_MCLK_MULTIPLE_128: i2s_mclk_multiple_t = 128;
#[doc = "< mclk = sample_rate * 256"]
pub const i2s_mclk_multiple_t_I2S_MCLK_MULTIPLE_256: i2s_mclk_multiple_t = 256;
#[doc = "< mclk = sample_rate * 384"]
pub const i2s_mclk_multiple_t_I2S_MCLK_MULTIPLE_384: i2s_mclk_multiple_t = 384;
#[doc = " @brief The multiple of mclk to sample rate"]
pub type i2s_mclk_multiple_t = c_types::c_uint;
#[doc = "< Disable A/U law decopress or compress"]
pub const i2s_pcm_compress_t_I2S_PCM_DISABLE: i2s_pcm_compress_t = 0;
#[doc = "< A-law decompress"]
pub const i2s_pcm_compress_t_I2S_PCM_A_DECOMPRESS: i2s_pcm_compress_t = 1;
#[doc = "< A-law compress"]
pub const i2s_pcm_compress_t_I2S_PCM_A_COMPRESS: i2s_pcm_compress_t = 2;
#[doc = "< U-law decompress"]
pub const i2s_pcm_compress_t_I2S_PCM_U_DECOMPRESS: i2s_pcm_compress_t = 3;
#[doc = "< U-law compress"]
pub const i2s_pcm_compress_t_I2S_PCM_U_COMPRESS: i2s_pcm_compress_t = 4;
#[doc = " @brief A/U-law decompress or compress configuration."]
#[doc = ""]
pub type i2s_pcm_compress_t = c_types::c_uint;
#[doc = "< I2S TX PDM sigmadelta signal scaling: /2"]
pub const i2s_pdm_sig_scale_t_I2S_PDM_SIG_SCALING_DIV_2: i2s_pdm_sig_scale_t = 0;
#[doc = "< I2S TX PDM sigmadelta signal scaling: x1"]
pub const i2s_pdm_sig_scale_t_I2S_PDM_SIG_SCALING_MUL_1: i2s_pdm_sig_scale_t = 1;
#[doc = "< I2S TX PDM sigmadelta signal scaling: x2"]
pub const i2s_pdm_sig_scale_t_I2S_PDM_SIG_SCALING_MUL_2: i2s_pdm_sig_scale_t = 2;
#[doc = "< I2S TX PDM sigmadelta signal scaling: x4"]
pub const i2s_pdm_sig_scale_t_I2S_PDM_SIG_SCALING_MUL_4: i2s_pdm_sig_scale_t = 3;
pub type i2s_pdm_sig_scale_t = c_types::c_uint;
extern "C" {
    #[doc = " @brief      enable peripheral module"]
    #[doc = ""]
    #[doc = " @param[in]  periph    :  Peripheral module name"]
    #[doc = ""]
    #[doc = " Clock for the module will be ungated, and reset de-asserted."]
    #[doc = ""]
    #[doc = " @note If periph_module_enable is called a number of times,"]
    #[doc = "       periph_module_disable has to be called the same number of times"]
    #[doc = "       in order to put the peripheral into disabled state."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn periph_module_enable(periph: periph_module_t);
}
extern "C" {
    #[doc = " @brief      disable peripheral module"]
    #[doc = ""]
    #[doc = " @param[in]  periph    :  Peripheral module name"]
    #[doc = ""]
    #[doc = " Clock for the module will be gated, reset asserted."]
    #[doc = ""]
    #[doc = " @note If periph_module_enable is called a number of times,"]
    #[doc = "       periph_module_disable has to be called the same number of times"]
    #[doc = "       in order to put the peripheral into disabled state."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn periph_module_disable(periph: periph_module_t);
}
extern "C" {
    #[doc = " @brief      reset peripheral module"]
    #[doc = ""]
    #[doc = " @param[in]  periph    :  Peripheral module name"]
    #[doc = ""]
    #[doc = " Reset will asserted then de-assrted for the peripheral."]
    #[doc = ""]
    #[doc = " Calling this function does not enable or disable the clock for the module."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn periph_module_reset(periph: periph_module_t);
}
extern "C" {
    #[doc = " @brief      enable wifi bt common module"]
    #[doc = ""]
    #[doc = " @note If wifi_bt_common_module_enable is called a number of times,"]
    #[doc = "       wifi_bt_common_module_disable has to be called the same number of times"]
    #[doc = "       in order to put the peripheral into disabled state."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn wifi_bt_common_module_enable();
}
extern "C" {
    #[doc = " @brief      disable wifi bt common module"]
    #[doc = ""]
    #[doc = " @note If wifi_bt_common_module_enable is called a number of times,"]
    #[doc = "       wifi_bt_common_module_disable has to be called the same number of times"]
    #[doc = "       in order to put the peripheral into disabled state."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn wifi_bt_common_module_disable();
}
extern "C" {
    #[doc = " @brief      enable wifi module"]
    #[doc = ""]
    #[doc = " @note Enable wifi module only."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn wifi_module_enable();
}
extern "C" {
    #[doc = " @brief      disable wifi module"]
    #[doc = ""]
    #[doc = " @note Disable wifi module only."]
    #[doc = ""]
    #[doc = " @return     NULL"]
    #[doc = ""]
    pub fn wifi_module_disable();
}
#[doc = "< I2S port 0"]
pub const i2s_port_t_I2S_NUM_0: i2s_port_t = 0;
#[doc = "< I2S port max"]
pub const i2s_port_t_I2S_NUM_MAX: i2s_port_t = 1;
#[doc = " @brief I2S port number, the max port number is (I2S_NUM_MAX -1)."]
pub type i2s_port_t = c_types::c_uint;
#[doc = " @brief I2S PCM configuration"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i2s_pcm_cfg_t {
    #[doc = "< I2S PCM a/u-law decompress or compress type"]
    pub pcm_type: i2s_pcm_compress_t,
}
impl Default for i2s_pcm_cfg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief I2S PDM up-sample rate configuration"]
#[doc = " @note  TX PDM can only be set to the following two upsampling rate configurations:"]
#[doc = "        1: fp = 960, fs = sample_rate / 100, in this case, Fpdm = 128*48000"]
#[doc = "        2: fp = 960, fs = 480, in this case, Fpdm = 128*Fpcm = 128*sample_rate"]
#[doc = "        If the pdm receiver do not care the pdm serial clock, it's recommended set Fpdm = 128*48000."]
#[doc = "        Otherwise, the second configuration should be applied."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_pdm_tx_upsample_cfg_t {
    #[doc = "< I2S PDM sample rate"]
    pub sample_rate: c_types::c_int,
    #[doc = "< I2S PDM TX upsampling paramater. Normally it should be set to 960"]
    pub fp: c_types::c_int,
    #[doc = "< I2S PDM TX upsampling paramater. When it is set to 480, the pdm clock frequency Fpdm = 128 * sample_rate, when it is set to sample_rate / 100， Fpdm will be fixed to 128*48000"]
    pub fs: c_types::c_int,
}
#[doc = " @brief I2S pin number for i2s_set_pin"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct i2s_pin_config_t {
    #[doc = "< MCK in out pin. Note that ESP32 supports setting MCK on GPIO0/GPIO1/GPIO3 only"]
    pub mck_io_num: c_types::c_int,
    #[doc = "< BCK in out pin"]
    pub bck_io_num: c_types::c_int,
    #[doc = "< WS in out pin"]
    pub ws_io_num: c_types::c_int,
    #[doc = "< DATA out pin"]
    pub data_out_num: c_types::c_int,
    #[doc = "< DATA in pin"]
    pub data_in_num: c_types::c_int,
}
#[doc = " @brief I2S driver configuration parameters"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i2s_driver_config_t {
    #[doc = "< I2S work mode"]
    pub mode: i2s_mode_t,
    #[doc = "< I2S sample rate"]
    pub sample_rate: u32,
    #[doc = "< I2S sample bits in one channel"]
    pub bits_per_sample: i2s_bits_per_sample_t,
    #[doc = "< I2S channel format."]
    pub channel_format: i2s_channel_fmt_t,
    #[doc = "< I2S communication format"]
    pub communication_format: i2s_comm_format_t,
    #[doc = "< Flags used to allocate the interrupt. One or multiple (ORred) ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info"]
    pub intr_alloc_flags: c_types::c_int,
    #[doc = "< The total number of DMA buffers to receive/transmit data."]
    #[doc = " A descriptor includes some information such as buffer address,"]
    #[doc = " the address of the next descriptor, and the buffer length."]
    #[doc = " Since one descriptor points to one buffer, therefore, 'dma_desc_num' can be interpreted as the total number of DMA buffers used to store data from DMA interrupt."]
    #[doc = " Notice that these buffers are internal to'i2s_read' and descriptors are created automatically inside of the I2S driver."]
    #[doc = " Users only need to set the buffer number while the length is derived from the parameter described below."]
    pub dma_buf_count: c_types::c_int,
    #[doc = "< Number of frames in a DMA buffer."]
    #[doc = "  A frame means the data of all channels in a WS cycle."]
    #[doc = "  The real_dma_buf_size = dma_buf_len * chan_num * bits_per_chan / 8."]
    #[doc = "  For example, if two channels in stereo mode (i.e., 'channel_format' is set to 'I2S_CHANNEL_FMT_RIGHT_LEFT') are active,"]
    #[doc = "  and each channel transfers 32 bits (i.e., 'bits_per_sample' is set to 'I2S_BITS_PER_CHAN_32BIT'),"]
    #[doc = "  then the total number of bytes of a frame is 'channel_format' * 'bits_per_sample' = 2 * 32 / 8 = 8 bytes."]
    #[doc = "  We assume that the current 'dma_buf_len' is 100, then the real length of the DMA buffer is 8 * 100 = 800 bytes."]
    #[doc = "  Note that the length of an internal real DMA buffer shouldn't be greater than 4092."]
    pub dma_buf_len: c_types::c_int,
    #[doc = "< I2S using APLL as main I2S clock, enable it to get accurate clock"]
    pub use_apll: bool,
    #[doc = "< I2S auto clear tx descriptor if there is underflow condition (helps in avoiding noise in case of data unavailability)"]
    pub tx_desc_auto_clear: bool,
    #[doc = "< I2S using fixed MCLK output. If use_apll = true and fixed_mclk > 0, then the clock output for i2s is fixed and equal to the fixed_mclk value. If fixed_mclk set, mclk_multiple won't take effect"]
    pub fixed_mclk: c_types::c_int,
    #[doc = "< The multiple of I2S master clock(MCLK) to sample rate"]
    pub mclk_multiple: i2s_mclk_multiple_t,
    #[doc = "< I2S total bits in one channel， only take effect when larger than 'bits_per_sample', default '0' means equal to 'bits_per_sample'"]
    pub bits_per_chan: i2s_bits_per_chan_t,
    #[doc = "< I2S active channel bit mask, set value in `i2s_channel_t` to enable specific channel, the bit map of active channel can not exceed (0x1<<total_chan)."]
    pub chan_mask: i2s_channel_t,
    #[doc = "< I2S Total number of channels. If it is smaller than the biggest active channel number, it will be set to this number automatically."]
    pub total_chan: u32,
    #[doc = "< Set to enable left alignment"]
    pub left_align: bool,
    #[doc = "< Set to enable big edin"]
    pub big_edin: bool,
    #[doc = "< Set to enable msb order"]
    pub bit_order_msb: bool,
    #[doc = "< Set to enable skip mask. If it is enabled, only the data of the enabled channels will be sent, otherwise all data stored in DMA TX buffer will be sent"]
    pub skip_msk: bool,
}
impl Default for i2s_driver_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief I2S driver configuration parameters"]
#[doc = ""]
pub type i2s_config_t = i2s_driver_config_t;
pub type i2s_isr_handle_t = intr_handle_t;
pub const i2s_event_type_t_I2S_EVENT_DMA_ERROR: i2s_event_type_t = 0;
#[doc = "< I2S DMA finish sent 1 buffer"]
pub const i2s_event_type_t_I2S_EVENT_TX_DONE: i2s_event_type_t = 1;
#[doc = "< I2S DMA finish received 1 buffer"]
pub const i2s_event_type_t_I2S_EVENT_RX_DONE: i2s_event_type_t = 2;
#[doc = "< I2S DMA sent queue overflow"]
pub const i2s_event_type_t_I2S_EVENT_TX_Q_OVF: i2s_event_type_t = 3;
#[doc = "< I2S DMA receive queue overflow"]
pub const i2s_event_type_t_I2S_EVENT_RX_Q_OVF: i2s_event_type_t = 4;
#[doc = "< I2S event max index"]
pub const i2s_event_type_t_I2S_EVENT_MAX: i2s_event_type_t = 5;
#[doc = " @brief I2S event queue types"]
#[doc = ""]
pub type i2s_event_type_t = c_types::c_uint;
#[doc = " @brief Event structure used in I2S event queue"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct i2s_event_t {
    #[doc = "< I2S event type"]
    pub type_: i2s_event_type_t,
    #[doc = "< I2S data size for I2S_DATA event"]
    pub size: size_t,
}
impl Default for i2s_event_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Set I2S pin number"]
    #[doc = ""]
    #[doc = " @note"]
    #[doc = " The I2S peripheral output signals can be connected to multiple GPIO pads."]
    #[doc = " However, the I2S peripheral input signal can only be connected to one GPIO pad."]
    #[doc = ""]
    #[doc = " @param   i2s_num     I2S port number"]
    #[doc = ""]
    #[doc = " @param   pin         I2S Pin structure, or NULL to set 2-channel 8-bit internal DAC pin configuration (GPIO25 & GPIO26)"]
    #[doc = ""]
    #[doc = " Inside the pin configuration structure, set I2S_PIN_NO_CHANGE for any pin where"]
    #[doc = " the current configuration should not be changed."]
    #[doc = ""]
    #[doc = " @note if *pin is set as NULL, this function will initialize both of the built-in DAC channels by default."]
    #[doc = "       if you don't want this to happen and you want to initialize only one of the DAC channels, you can call i2s_set_dac_mode instead."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL            IO error"]
    pub fn i2s_set_pin(i2s_num: i2s_port_t, pin: *const i2s_pin_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set TX PDM mode up-sample rate"]
    #[doc = " @note  If you have set PDM mode while calling 'i2s_driver_install',"]
    #[doc = "        default PDM TX upsample parameters have already been set,"]
    #[doc = "        no need to call this function again if you don't have to change the default configuration"]
    #[doc = ""]
    #[doc = " @param i2s_num I2S port number"]
    #[doc = " @param upsample_cfg Set I2S PDM up-sample rate configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM      Out of memory"]
    pub fn i2s_set_pdm_tx_up_sample(
        i2s_num: i2s_port_t,
        upsample_cfg: *const i2s_pdm_tx_upsample_cfg_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Install and start I2S driver."]
    #[doc = ""]
    #[doc = " @param i2s_num         I2S port number"]
    #[doc = ""]
    #[doc = " @param i2s_config      I2S configurations - see i2s_config_t struct"]
    #[doc = ""]
    #[doc = " @param queue_size      I2S event queue size/depth."]
    #[doc = ""]
    #[doc = " @param i2s_queue       I2S event queue handle, if set NULL, driver will not use an event queue."]
    #[doc = ""]
    #[doc = " This function must be called before any I2S driver read/write operations."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM      Out of memory"]
    #[doc = "     - ESP_ERR_INVALID_STATE  Current I2S port is in use"]
    pub fn i2s_driver_install(
        i2s_num: i2s_port_t,
        i2s_config: *const i2s_config_t,
        queue_size: c_types::c_int,
        i2s_queue: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall I2S driver."]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_INVALID_STATE I2S port has been uninstalled by others (e.g. LCD i80)"]
    pub fn i2s_driver_uninstall(i2s_num: i2s_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to I2S DMA transmit buffer."]
    #[doc = ""]
    #[doc = " @param i2s_num             I2S port number"]
    #[doc = ""]
    #[doc = " @param src                 Source address to write from"]
    #[doc = ""]
    #[doc = " @param size                Size of data in bytes"]
    #[doc = ""]
    #[doc = " @param[out] bytes_written  Number of bytes written, if timeout, the result will be less than the size passed in."]
    #[doc = ""]
    #[doc = " @param ticks_to_wait       TX buffer wait timeout in RTOS ticks. If this"]
    #[doc = " many ticks pass without space becoming available in the DMA"]
    #[doc = " transmit buffer, then the function will return (note that if the"]
    #[doc = " data is written to the DMA buffer in pieces, the overall operation"]
    #[doc = " may still take longer than this timeout.) Pass portMAX_DELAY for no"]
    #[doc = " timeout."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK               Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG  Parameter error"]
    pub fn i2s_write(
        i2s_num: i2s_port_t,
        src: *const c_types::c_void,
        size: size_t,
        bytes_written: *mut size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Write data to I2S DMA transmit buffer while expanding the number of bits per sample. For example, expanding 16-bit PCM to 32-bit PCM."]
    #[doc = ""]
    #[doc = " @param i2s_num             I2S port number"]
    #[doc = ""]
    #[doc = " @param src                 Source address to write from"]
    #[doc = ""]
    #[doc = " @param size                Size of data in bytes"]
    #[doc = ""]
    #[doc = " @param src_bits            Source audio bit"]
    #[doc = ""]
    #[doc = " @param aim_bits            Bit wanted, no more than 32, and must be greater than src_bits"]
    #[doc = ""]
    #[doc = " @param[out] bytes_written  Number of bytes written, if timeout, the result will be less than the size passed in."]
    #[doc = ""]
    #[doc = " @param ticks_to_wait       TX buffer wait timeout in RTOS ticks. If this"]
    #[doc = " many ticks pass without space becoming available in the DMA"]
    #[doc = " transmit buffer, then the function will return (note that if the"]
    #[doc = " data is written to the DMA buffer in pieces, the overall operation"]
    #[doc = " may still take longer than this timeout.) Pass portMAX_DELAY for no"]
    #[doc = " timeout."]
    #[doc = ""]
    #[doc = " Format of the data in source buffer is determined by the I2S"]
    #[doc = " configuration (see i2s_config_t)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2s_write_expand(
        i2s_num: i2s_port_t,
        src: *const c_types::c_void,
        size: size_t,
        src_bits: size_t,
        aim_bits: size_t,
        bytes_written: *mut size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read data from I2S DMA receive buffer"]
    #[doc = ""]
    #[doc = " @param i2s_num         I2S port number"]
    #[doc = ""]
    #[doc = " @param dest            Destination address to read into"]
    #[doc = ""]
    #[doc = " @param size            Size of data in bytes"]
    #[doc = ""]
    #[doc = " @param[out] bytes_read Number of bytes read, if timeout, bytes read will be less than the size passed in."]
    #[doc = ""]
    #[doc = " @param ticks_to_wait   RX buffer wait timeout in RTOS ticks. If this many ticks pass without bytes becoming available in the DMA receive buffer, then the function will return (note that if data is read from the DMA buffer in pieces, the overall operation may still take longer than this timeout.) Pass portMAX_DELAY for no timeout."]
    #[doc = ""]
    #[doc = " @note If the built-in ADC mode is enabled, we should call i2s_adc_enable and i2s_adc_disable around the whole reading process,"]
    #[doc = "       to prevent the data getting corrupted."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK               Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG  Parameter error"]
    pub fn i2s_read(
        i2s_num: i2s_port_t,
        dest: *mut c_types::c_void,
        size: size_t,
        bytes_read: *mut size_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set sample rate used for I2S RX and TX."]
    #[doc = ""]
    #[doc = " The bit clock rate is determined by the sample rate and i2s_config_t configuration parameters (number of channels, bits_per_sample)."]
    #[doc = ""]
    #[doc = " `bit_clock = rate * (number of channels) * bits_per_sample`"]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @param rate I2S sample rate (ex: 8000, 44100...)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM      Out of memory"]
    pub fn i2s_set_sample_rates(i2s_num: i2s_port_t, rate: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Stop I2S driver"]
    #[doc = ""]
    #[doc = " There is no need to call i2s_stop() before calling i2s_driver_uninstall()."]
    #[doc = ""]
    #[doc = " Disables I2S TX/RX, until i2s_start() is called."]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2s_stop(i2s_num: i2s_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start I2S driver"]
    #[doc = ""]
    #[doc = " It is not necessary to call this function after i2s_driver_install() (it is started automatically), however it is necessary to call it after i2s_stop()."]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2s_start(i2s_num: i2s_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Zero the contents of the TX DMA buffer."]
    #[doc = ""]
    #[doc = " Pushes zero-byte samples into the TX DMA buffer, until it is full."]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2s_zero_dma_buffer(i2s_num: i2s_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure I2S a/u-law decompress or compress"]
    #[doc = ""]
    #[doc = " @note  This function should be called after i2s driver installed"]
    #[doc = "        Only take effecttive when the i2s 'communication_format' is set to 'I2S_COMM_FORMAT_STAND_PCM_SHORT' or 'I2S_COMM_FORMAT_STAND_PCM_LONG'"]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @param pcm_cfg  including mode selection and a/u-law decompress or compress configuration paramater"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn i2s_pcm_config(i2s_num: i2s_port_t, pcm_cfg: *const i2s_pcm_cfg_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set clock & bit width used for I2S RX and TX."]
    #[doc = ""]
    #[doc = " Similar to i2s_set_sample_rates(), but also sets bit width."]
    #[doc = ""]
    #[doc = " 1. stop i2s;"]
    #[doc = " 2. calculate mclk, bck, bck_factor"]
    #[doc = " 3. malloc dma buffer;"]
    #[doc = " 4. start i2s"]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @param rate I2S sample rate (ex: 8000, 44100...)"]
    #[doc = ""]
    #[doc = " @param bits_cfg I2S bits configuration"]
    #[doc = "             the low 16 bits is for data bits per sample in one channel (see 'i2s_bits_per_sample_t')"]
    #[doc = "             the high 16 bits is for total bits in one channel (see 'i2s_bits_per_chan_t')"]
    #[doc = "             high 16bits =0 means same as the bits per sample."]
    #[doc = ""]
    #[doc = " @param ch I2S channel, (I2S_CHANNEL_MONO, I2S_CHANNEL_STEREO or specific channel in TDM mode)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK              Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_NO_MEM      Out of memory"]
    pub fn i2s_set_clk(
        i2s_num: i2s_port_t,
        rate: u32,
        bits_cfg: u32,
        ch: i2s_channel_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief get clock set on particular port number."]
    #[doc = ""]
    #[doc = " @param i2s_num  I2S port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - actual clock set by i2s driver"]
    pub fn i2s_get_clk(i2s_num: i2s_port_t) -> f32;
}
#[doc = "< LEDC low speed speed_mode"]
pub const ledc_mode_t_LEDC_LOW_SPEED_MODE: ledc_mode_t = 0;
#[doc = "< LEDC speed limit"]
pub const ledc_mode_t_LEDC_SPEED_MODE_MAX: ledc_mode_t = 1;
pub type ledc_mode_t = c_types::c_uint;
#[doc = "< Disable LEDC interrupt"]
pub const ledc_intr_type_t_LEDC_INTR_DISABLE: ledc_intr_type_t = 0;
#[doc = "< Enable LEDC interrupt"]
pub const ledc_intr_type_t_LEDC_INTR_FADE_END: ledc_intr_type_t = 1;
pub const ledc_intr_type_t_LEDC_INTR_MAX: ledc_intr_type_t = 2;
pub type ledc_intr_type_t = c_types::c_uint;
#[doc = "< LEDC duty decrease direction"]
pub const ledc_duty_direction_t_LEDC_DUTY_DIR_DECREASE: ledc_duty_direction_t = 0;
#[doc = "< LEDC duty increase direction"]
pub const ledc_duty_direction_t_LEDC_DUTY_DIR_INCREASE: ledc_duty_direction_t = 1;
pub const ledc_duty_direction_t_LEDC_DUTY_DIR_MAX: ledc_duty_direction_t = 2;
pub type ledc_duty_direction_t = c_types::c_uint;
#[doc = "< LEDC low speed timer clock source is 8MHz RTC clock"]
pub const ledc_slow_clk_sel_t_LEDC_SLOW_CLK_RTC8M: ledc_slow_clk_sel_t = 0;
#[doc = "< LEDC low speed timer clock source is 80MHz APB clock"]
pub const ledc_slow_clk_sel_t_LEDC_SLOW_CLK_APB: ledc_slow_clk_sel_t = 1;
#[doc = "< LEDC low speed timer clock source XTAL clock"]
pub const ledc_slow_clk_sel_t_LEDC_SLOW_CLK_XTAL: ledc_slow_clk_sel_t = 2;
pub type ledc_slow_clk_sel_t = c_types::c_uint;
#[doc = "< The driver will automatically select the source clock(REF_TICK or APB) based on the giving resolution and duty parameter when init the timer"]
pub const ledc_clk_cfg_t_LEDC_AUTO_CLK: ledc_clk_cfg_t = 0;
#[doc = "< LEDC timer select REF_TICK clock as source clock"]
pub const ledc_clk_cfg_t_LEDC_USE_REF_TICK: ledc_clk_cfg_t = 1;
#[doc = "< LEDC timer select APB clock as source clock"]
pub const ledc_clk_cfg_t_LEDC_USE_APB_CLK: ledc_clk_cfg_t = 2;
#[doc = "< LEDC timer select RTC8M_CLK as source clock. Only for low speed channels and this parameter must be the same for all low speed channels"]
pub const ledc_clk_cfg_t_LEDC_USE_RTC8M_CLK: ledc_clk_cfg_t = 3;
#[doc = "< LEDC timer select XTAL clock as source clock"]
pub const ledc_clk_cfg_t_LEDC_USE_XTAL_CLK: ledc_clk_cfg_t = 4;
pub type ledc_clk_cfg_t = c_types::c_uint;
#[doc = "< LEDC timer clock divided from reference tick (1Mhz)"]
pub const ledc_clk_src_t_LEDC_REF_TICK: ledc_clk_src_t = 1;
#[doc = "< LEDC timer clock divided from APB clock (80Mhz)"]
pub const ledc_clk_src_t_LEDC_APB_CLK: ledc_clk_src_t = 2;
pub type ledc_clk_src_t = c_types::c_uint;
#[doc = "< LEDC timer 0"]
pub const ledc_timer_t_LEDC_TIMER_0: ledc_timer_t = 0;
#[doc = "< LEDC timer 1"]
pub const ledc_timer_t_LEDC_TIMER_1: ledc_timer_t = 1;
#[doc = "< LEDC timer 2"]
pub const ledc_timer_t_LEDC_TIMER_2: ledc_timer_t = 2;
#[doc = "< LEDC timer 3"]
pub const ledc_timer_t_LEDC_TIMER_3: ledc_timer_t = 3;
pub const ledc_timer_t_LEDC_TIMER_MAX: ledc_timer_t = 4;
pub type ledc_timer_t = c_types::c_uint;
#[doc = "< LEDC channel 0"]
pub const ledc_channel_t_LEDC_CHANNEL_0: ledc_channel_t = 0;
#[doc = "< LEDC channel 1"]
pub const ledc_channel_t_LEDC_CHANNEL_1: ledc_channel_t = 1;
#[doc = "< LEDC channel 2"]
pub const ledc_channel_t_LEDC_CHANNEL_2: ledc_channel_t = 2;
#[doc = "< LEDC channel 3"]
pub const ledc_channel_t_LEDC_CHANNEL_3: ledc_channel_t = 3;
#[doc = "< LEDC channel 4"]
pub const ledc_channel_t_LEDC_CHANNEL_4: ledc_channel_t = 4;
#[doc = "< LEDC channel 5"]
pub const ledc_channel_t_LEDC_CHANNEL_5: ledc_channel_t = 5;
pub const ledc_channel_t_LEDC_CHANNEL_MAX: ledc_channel_t = 6;
pub type ledc_channel_t = c_types::c_uint;
#[doc = "< LEDC PWM duty resolution of  1 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_1_BIT: ledc_timer_bit_t = 1;
#[doc = "< LEDC PWM duty resolution of  2 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_2_BIT: ledc_timer_bit_t = 2;
#[doc = "< LEDC PWM duty resolution of  3 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_3_BIT: ledc_timer_bit_t = 3;
#[doc = "< LEDC PWM duty resolution of  4 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_4_BIT: ledc_timer_bit_t = 4;
#[doc = "< LEDC PWM duty resolution of  5 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_5_BIT: ledc_timer_bit_t = 5;
#[doc = "< LEDC PWM duty resolution of  6 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_6_BIT: ledc_timer_bit_t = 6;
#[doc = "< LEDC PWM duty resolution of  7 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_7_BIT: ledc_timer_bit_t = 7;
#[doc = "< LEDC PWM duty resolution of  8 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_8_BIT: ledc_timer_bit_t = 8;
#[doc = "< LEDC PWM duty resolution of  9 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_9_BIT: ledc_timer_bit_t = 9;
#[doc = "< LEDC PWM duty resolution of 10 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_10_BIT: ledc_timer_bit_t = 10;
#[doc = "< LEDC PWM duty resolution of 11 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_11_BIT: ledc_timer_bit_t = 11;
#[doc = "< LEDC PWM duty resolution of 12 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_12_BIT: ledc_timer_bit_t = 12;
#[doc = "< LEDC PWM duty resolution of 13 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_13_BIT: ledc_timer_bit_t = 13;
#[doc = "< LEDC PWM duty resolution of 14 bits"]
pub const ledc_timer_bit_t_LEDC_TIMER_14_BIT: ledc_timer_bit_t = 14;
pub const ledc_timer_bit_t_LEDC_TIMER_BIT_MAX: ledc_timer_bit_t = 15;
pub type ledc_timer_bit_t = c_types::c_uint;
#[doc = "< LEDC fade function will return immediately"]
pub const ledc_fade_mode_t_LEDC_FADE_NO_WAIT: ledc_fade_mode_t = 0;
#[doc = "< LEDC fade function will block until fading to the target duty"]
pub const ledc_fade_mode_t_LEDC_FADE_WAIT_DONE: ledc_fade_mode_t = 1;
pub const ledc_fade_mode_t_LEDC_FADE_MAX: ledc_fade_mode_t = 2;
pub type ledc_fade_mode_t = c_types::c_uint;
#[doc = " @brief Configuration parameters of LEDC channel for ledc_channel_config function"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ledc_channel_config_t {
    #[doc = "< the LEDC output gpio_num, if you want to use gpio16, gpio_num = 16"]
    pub gpio_num: c_types::c_int,
    #[doc = "< LEDC speed speed_mode, high-speed mode or low-speed mode"]
    pub speed_mode: ledc_mode_t,
    #[doc = "< LEDC channel (0 - 7)"]
    pub channel: ledc_channel_t,
    #[doc = "< configure interrupt, Fade interrupt enable  or Fade interrupt disable"]
    pub intr_type: ledc_intr_type_t,
    #[doc = "< Select the timer source of channel (0 - 3)"]
    pub timer_sel: ledc_timer_t,
    #[doc = "< LEDC channel duty, the range of duty setting is [0, (2**duty_resolution)]"]
    pub duty: u32,
    #[doc = "< LEDC channel hpoint value, the max value is 0xfffff"]
    pub hpoint: c_types::c_int,
    #[doc = "< LEDC flags"]
    pub flags: ledc_channel_config_t__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct ledc_channel_config_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl ledc_channel_config_t__bindgen_ty_1 {
    #[inline]
    pub fn output_invert(&self) -> c_types::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_invert(&mut self, val: c_types::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(output_invert: c_types::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let output_invert: u32 = unsafe { ::core::mem::transmute(output_invert) };
            output_invert as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for ledc_channel_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Configuration parameters of LEDC Timer timer for ledc_timer_config function"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ledc_timer_config_t {
    #[doc = "< LEDC speed speed_mode, high-speed mode or low-speed mode"]
    pub speed_mode: ledc_mode_t,
    pub __bindgen_anon_1: ledc_timer_config_t__bindgen_ty_1,
    #[doc = "< The timer source of channel (0 - 3)"]
    pub timer_num: ledc_timer_t,
    #[doc = "< LEDC timer frequency (Hz)"]
    pub freq_hz: u32,
    #[doc = "< Configure LEDC source clock."]
    #[doc = "For low speed channels and high speed channels, you can specify the source clock using LEDC_USE_REF_TICK, LEDC_USE_APB_CLK or LEDC_AUTO_CLK."]
    #[doc = "For low speed channels, you can also specify the source clock using LEDC_USE_RTC8M_CLK, in this case, all low speed channel's source clock must be RTC8M_CLK"]
    pub clk_cfg: ledc_clk_cfg_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ledc_timer_config_t__bindgen_ty_1 {
    #[doc = "< LEDC channel duty resolution"]
    pub duty_resolution: ledc_timer_bit_t,
    #[doc = "< Deprecated in ESP-IDF 3.0. This is an alias to 'duty_resolution' for backward compatibility with ESP-IDF 2.1"]
    pub bit_num: ledc_timer_bit_t,
}
impl Default for ledc_timer_config_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for ledc_timer_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ledc_isr_handle_t = intr_handle_t;
#[doc = "< LEDC fade end event"]
pub const ledc_cb_event_t_LEDC_FADE_END_EVT: ledc_cb_event_t = 0;
#[doc = " @brief LEDC callback event type"]
pub type ledc_cb_event_t = c_types::c_uint;
#[doc = " @brief LEDC callback parameter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ledc_cb_param_t {
    #[doc = "< Event name"]
    pub event: ledc_cb_event_t,
    #[doc = "< Speed mode of the LEDC channel group"]
    pub speed_mode: u32,
    #[doc = "< LEDC channel (0 - LEDC_CHANNEL_MAX-1)"]
    pub channel: u32,
    #[doc = "< LEDC current duty of the channel, the range of duty is [0, (2**duty_resolution) - 1]"]
    pub duty: u32,
}
impl Default for ledc_cb_param_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Type of LEDC event callback"]
#[doc = " @param param LEDC callback parameter"]
#[doc = " @param user_arg User registered data"]
pub type ledc_cb_t = ::core::option::Option<
    unsafe extern "C" fn(param: *const ledc_cb_param_t, user_arg: *mut c_types::c_void) -> bool,
>;
#[doc = " @brief Group of supported LEDC callbacks"]
#[doc = " @note The callbacks are all running under ISR environment"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ledc_cbs_t {
    #[doc = "< LEDC fade_end callback function"]
    pub fade_cb: ledc_cb_t,
}
extern "C" {
    #[doc = " @brief LEDC channel configuration"]
    #[doc = "        Configure LEDC channel with the given channel/output gpio_num/interrupt/source timer/frequency(Hz)/LEDC duty resolution"]
    #[doc = ""]
    #[doc = " @param ledc_conf Pointer of LEDC channel configure struct"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_channel_config(ledc_conf: *const ledc_channel_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC timer configuration"]
    #[doc = "        Configure LEDC timer with the given source timer/frequency(Hz)/duty_resolution"]
    #[doc = ""]
    #[doc = " @param  timer_conf Pointer of LEDC timer configure struct"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Can not find a proper pre-divider number base on the given frequency and the current duty_resolution."]
    pub fn ledc_timer_config(timer_conf: *const ledc_timer_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC update channel parameters"]
    #[doc = " @note  Call this function to activate the LEDC updated parameters."]
    #[doc = "        After ledc_set_duty, we need to call this function to update the settings."]
    #[doc = "        And the new LEDC parameters don't take effect until the next PWM cycle."]
    #[doc = " @note  ledc_set_duty, ledc_set_duty_with_hpoint and ledc_update_duty are not thread-safe, do not call these functions to"]
    #[doc = "        control one LEDC channel in different tasks at the same time."]
    #[doc = "        A thread-safe version of API is ledc_set_duty_and_update"]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = ""]
    pub fn ledc_update_duty(speed_mode: ledc_mode_t, channel: ledc_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set LEDC output gpio."]
    #[doc = " @deprecated This function is redundant, please use ledc_channel_config to set gpio pins."]
    #[doc = ""]
    #[doc = " @param  gpio_num The LEDC output gpio"]
    #[doc = " @param  speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param  ledc_channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_set_pin(
        gpio_num: c_types::c_int,
        speed_mode: ledc_mode_t,
        ledc_channel: ledc_channel_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC stop."]
    #[doc = "        Disable LEDC output, and set idle level"]
    #[doc = ""]
    #[doc = " @param  speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param  channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param  idle_level Set output idle level after LEDC stops."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_stop(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        idle_level: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC set channel frequency (Hz)"]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param  timer_num LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = " @param  freq_hz Set the LEDC frequency"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Can not find a proper pre-divider number base on the given frequency and the current duty_resolution."]
    pub fn ledc_set_freq(
        speed_mode: ledc_mode_t,
        timer_num: ledc_timer_t,
        freq_hz: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief      LEDC get channel frequency (Hz)"]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param timer_num LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - 0  error"]
    #[doc = "     - Others Current LEDC frequency"]
    pub fn ledc_get_freq(speed_mode: ledc_mode_t, timer_num: ledc_timer_t) -> u32;
}
extern "C" {
    #[doc = " @brief LEDC set duty and hpoint value"]
    #[doc = "        Only after calling ledc_update_duty will the duty update."]
    #[doc = " @note  ledc_set_duty, ledc_set_duty_with_hpoint and ledc_update_duty are not thread-safe, do not call these functions to"]
    #[doc = "        control one LEDC channel in different tasks at the same time."]
    #[doc = "        A thread-safe version of API is ledc_set_duty_and_update"]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param duty Set the LEDC duty, the range of duty setting is [0, (2**duty_resolution) - 1]"]
    #[doc = " @param hpoint Set the LEDC hpoint value(max: 0xfffff)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_set_duty_with_hpoint(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        duty: u32,
        hpoint: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC get hpoint value, the counter value when the output is set high level."]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @return"]
    #[doc = "     - LEDC_ERR_VAL if parameter error"]
    #[doc = "     - Others Current hpoint value of LEDC channel"]
    pub fn ledc_get_hpoint(speed_mode: ledc_mode_t, channel: ledc_channel_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief LEDC set duty"]
    #[doc = "        This function do not change the hpoint value of this channel. if needed, please call ledc_set_duty_with_hpoint."]
    #[doc = "        only after calling ledc_update_duty will the duty update."]
    #[doc = " @note  ledc_set_duty, ledc_set_duty_with_hpoint and ledc_update_duty are not thread-safe, do not call these functions to"]
    #[doc = "        control one LEDC channel in different tasks at the same time."]
    #[doc = "        A thread-safe version of API is ledc_set_duty_and_update."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param duty Set the LEDC duty, the range of duty setting is [0, (2**duty_resolution) - 1]"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_set_duty(speed_mode: ledc_mode_t, channel: ledc_channel_t, duty: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC get duty"]
    #[doc = "        This function returns the duty at the present PWM cycle."]
    #[doc = "        You shouldn't expect the function to return the new duty in the same cycle of calling ledc_update_duty,"]
    #[doc = "        because duty update doesn't take effect until the next cycle."]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - LEDC_ERR_DUTY if parameter error"]
    #[doc = "     - Others Current LEDC duty"]
    pub fn ledc_get_duty(speed_mode: ledc_mode_t, channel: ledc_channel_t) -> u32;
}
extern "C" {
    #[doc = " @brief LEDC set gradient"]
    #[doc = "        Set LEDC gradient, After the function calls the ledc_update_duty function, the function can take effect."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param duty Set the start of the gradient duty, the range of duty setting is [0, (2**duty_resolution) - 1]"]
    #[doc = " @param fade_direction Set the direction of the gradient"]
    #[doc = " @param step_num Set the number of the gradient"]
    #[doc = " @param duty_cycle_num Set how many LEDC tick each time the gradient lasts"]
    #[doc = " @param duty_scale Set gradient change amplitude"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn ledc_set_fade(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        duty: u32,
        fade_direction: ledc_duty_direction_t,
        step_num: u32,
        duty_cycle_num: u32,
        duty_scale: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register LEDC interrupt handler, the handler is an ISR."]
    #[doc = "        The handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " @param fn Interrupt handler function."]
    #[doc = " @param arg User-supplied argument passed to the handler function."]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param handle Pointer to return handle. If non-NULL, a handle for the interrupt will"]
    #[doc = "        be returned here."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Function pointer error."]
    pub fn ledc_isr_register(
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut ledc_isr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure LEDC settings"]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param timer_sel  Timer index (0-3), there are 4 timers in LEDC module"]
    #[doc = " @param clock_divider Timer clock divide value, the timer clock is divided from the selected clock source"]
    #[doc = " @param duty_resolution Resolution of duty setting in number of bits. The range of duty values is [0, (2**duty_resolution)]"]
    #[doc = " @param clk_src Select LEDC source clock."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) Parameter error"]
    #[doc = "     - Other Current LEDC duty"]
    pub fn ledc_timer_set(
        speed_mode: ledc_mode_t,
        timer_sel: ledc_timer_t,
        clock_divider: u32,
        duty_resolution: u32,
        clk_src: ledc_clk_src_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset LEDC timer"]
    #[doc = ""]
    #[doc = " @param  speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param  timer_sel LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn ledc_timer_rst(speed_mode: ledc_mode_t, timer_sel: ledc_timer_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Pause LEDC timer counter"]
    #[doc = ""]
    #[doc = " @param  speed_mode  Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param  timer_sel LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = ""]
    pub fn ledc_timer_pause(speed_mode: ledc_mode_t, timer_sel: ledc_timer_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Resume LEDC timer"]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param timer_sel LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn ledc_timer_resume(speed_mode: ledc_mode_t, timer_sel: ledc_timer_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Bind LEDC channel with the selected timer"]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param timer_sel LEDC timer index (0-3), select from ledc_timer_t"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn ledc_bind_channel_timer(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        timer_sel: ledc_timer_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set LEDC fade function."]
    #[doc = " @note  Call ledc_fade_func_install() once before calling this function."]
    #[doc = "        Call ledc_fade_start() after this to start fading."]
    #[doc = " @note  ledc_set_fade_with_step, ledc_set_fade_with_time and ledc_fade_start are not thread-safe, do not call these functions to"]
    #[doc = "        control one LEDC channel in different tasks at the same time."]
    #[doc = "        A thread-safe version of API is ledc_set_fade_step_and_start"]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode. ,"]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param target_duty Target duty of fading [0, (2**duty_resolution) - 1]"]
    #[doc = " @param scale Controls the increase or decrease step scale."]
    #[doc = " @param cycle_num increase or decrease the duty every cycle_num cycles"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_FAIL Fade function init error"]
    pub fn ledc_set_fade_with_step(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        target_duty: u32,
        scale: u32,
        cycle_num: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set LEDC fade function, with a limited time."]
    #[doc = " @note  Call ledc_fade_func_install() once before calling this function."]
    #[doc = "        Call ledc_fade_start() after this to start fading."]
    #[doc = " @note  ledc_set_fade_with_step, ledc_set_fade_with_time and ledc_fade_start are not thread-safe, do not call these functions to"]
    #[doc = "        control one LEDC channel in different tasks at the same time."]
    #[doc = "        A thread-safe version of API is ledc_set_fade_step_and_start"]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode. ,"]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param target_duty Target duty of fading [0, (2**duty_resolution) - 1]"]
    #[doc = " @param max_fade_time_ms The maximum time of the fading ( ms )."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_FAIL Fade function init error"]
    pub fn ledc_set_fade_with_time(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        target_duty: u32,
        max_fade_time_ms: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Install LEDC fade function. This function will occupy interrupt of LEDC module."]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function already installed."]
    pub fn ledc_fade_func_install(intr_alloc_flags: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall LEDC fade function."]
    #[doc = ""]
    pub fn ledc_fade_func_uninstall();
}
extern "C" {
    #[doc = " @brief Start LEDC fading."]
    #[doc = " @note  Call ledc_fade_func_install() once before calling this function."]
    #[doc = "        Call this API right after ledc_set_fade_with_time or ledc_set_fade_with_step before to start fading."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel number"]
    #[doc = " @param fade_mode Whether to block until fading done. See ledc_types.h ledc_fade_mode_t for more info."]
    #[doc = "        Note that this function will not return until fading to the target duty if LEDC_FADE_WAIT_DONE mode is selected."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error."]
    pub fn ledc_fade_start(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        fade_mode: ledc_fade_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief A thread-safe API to set duty for LEDC channel and return when duty updated."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = ""]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param duty Set the LEDC duty, the range of duty setting is [0, (2**duty_resolution) - 1]"]
    #[doc = " @param hpoint Set the LEDC hpoint value(max: 0xfffff)"]
    #[doc = ""]
    pub fn ledc_set_duty_and_update(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        duty: u32,
        hpoint: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief A thread-safe API to set and start LEDC fade function, with a limited time."]
    #[doc = " @note  Call ledc_fade_func_install() once, before calling this function."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param target_duty Target duty of fading [0, (2**duty_resolution) - 1]"]
    #[doc = " @param max_fade_time_ms The maximum time of the fading ( ms )."]
    #[doc = " @param fade_mode choose blocking or non-blocking mode"]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_FAIL Fade function init error"]
    pub fn ledc_set_fade_time_and_start(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        target_duty: u32,
        max_fade_time_ms: u32,
        fade_mode: ledc_fade_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief A thread-safe API to set and start LEDC fade function."]
    #[doc = " @note  Call ledc_fade_func_install() once before calling this function."]
    #[doc = " @note  If a fade operation is running in progress on that channel, the driver would not allow it to be stopped."]
    #[doc = "        Other duty operations will have to wait until the fade operation has finished."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param target_duty Target duty of fading [0, (2**duty_resolution) - 1]"]
    #[doc = " @param scale Controls the increase or decrease step scale."]
    #[doc = " @param cycle_num increase or decrease the duty every cycle_num cycles"]
    #[doc = " @param fade_mode choose blocking or non-blocking mode"]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_FAIL Fade function init error"]
    pub fn ledc_set_fade_step_and_start(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        target_duty: u32,
        scale: u32,
        cycle_num: u32,
        fade_mode: ledc_fade_mode_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief LEDC callback registration function"]
    #[doc = " @note  The callback is called from an ISR, it must never attempt to block, and any FreeRTOS API called must be ISR capable."]
    #[doc = " @param speed_mode Select the LEDC channel group with specified speed mode. Note that not all targets support high speed mode."]
    #[doc = " @param channel LEDC channel index (0 - LEDC_CHANNEL_MAX-1), select from ledc_channel_t"]
    #[doc = " @param cbs Group of LEDC callback functions"]
    #[doc = " @param user_arg user registered data for the callback function"]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE Fade function not installed."]
    #[doc = "     - ESP_FAIL Fade function init error"]
    pub fn ledc_cb_register(
        speed_mode: ledc_mode_t,
        channel: ledc_channel_t,
        cbs: *mut ledc_cbs_t,
        user_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_dev_s {
    pub data_ch: [u32; 4usize],
    pub tx_conf: [rmt_dev_s__bindgen_ty_1; 2usize],
    pub rx_conf: [rmt_dev_s__bindgen_ty_2; 2usize],
    pub tx_status: [rmt_dev_s__bindgen_ty_3; 2usize],
    pub rx_status: [rmt_dev_s__bindgen_ty_4; 2usize],
    pub int_raw: rmt_dev_s__bindgen_ty_5,
    pub int_st: rmt_dev_s__bindgen_ty_6,
    pub int_ena: rmt_dev_s__bindgen_ty_7,
    pub int_clr: rmt_dev_s__bindgen_ty_8,
    pub tx_carrier: [rmt_dev_s__bindgen_ty_9; 2usize],
    pub rx_carrier: [rmt_dev_s__bindgen_ty_10; 2usize],
    pub tx_lim: [rmt_dev_s__bindgen_ty_11; 2usize],
    pub rx_lim: [rmt_dev_s__bindgen_ty_12; 2usize],
    pub sys_conf: rmt_dev_s__bindgen_ty_13,
    pub tx_sim: rmt_dev_s__bindgen_ty_14,
    pub ref_cnt_rst: rmt_dev_s__bindgen_ty_15,
    pub reserved_74: u32,
    pub reserved_78: u32,
    pub reserved_7c: u32,
    pub reserved_80: u32,
    pub reserved_84: u32,
    pub reserved_88: u32,
    pub reserved_8c: u32,
    pub reserved_90: u32,
    pub reserved_94: u32,
    pub reserved_98: u32,
    pub reserved_9c: u32,
    pub reserved_a0: u32,
    pub reserved_a4: u32,
    pub reserved_a8: u32,
    pub reserved_ac: u32,
    pub reserved_b0: u32,
    pub reserved_b4: u32,
    pub reserved_b8: u32,
    pub reserved_bc: u32,
    pub reserved_c0: u32,
    pub reserved_c4: u32,
    pub reserved_c8: u32,
    pub date: rmt_dev_s__bindgen_ty_16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn tx_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rd_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rd_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_conti_mode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_conti_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_tx_wrap_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_tx_wrap_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_out_lv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idle_out_lv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_out_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idle_out_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_stop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_stop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn div_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_div_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_size(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mem_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved19(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved19(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn carrier_eff_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carrier_eff_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn carrier_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carrier_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn carrier_out_lv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carrier_out_lv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn afifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_afifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved25(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved25(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_start: u32,
        mem_rd_rst: u32,
        mem_rst: u32,
        tx_conti_mode: u32,
        mem_tx_wrap_en: u32,
        idle_out_lv: u32,
        idle_out_en: u32,
        tx_stop: u32,
        div_cnt: u32,
        mem_size: u32,
        reserved19: u32,
        carrier_eff_en: u32,
        carrier_en: u32,
        carrier_out_lv: u32,
        afifo_rst: u32,
        conf_update: u32,
        reserved25: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let tx_start: u32 = unsafe { ::core::mem::transmute(tx_start) };
            tx_start as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mem_rd_rst: u32 = unsafe { ::core::mem::transmute(mem_rd_rst) };
            mem_rd_rst as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mem_rst: u32 = unsafe { ::core::mem::transmute(mem_rst) };
            mem_rst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let tx_conti_mode: u32 = unsafe { ::core::mem::transmute(tx_conti_mode) };
            tx_conti_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mem_tx_wrap_en: u32 = unsafe { ::core::mem::transmute(mem_tx_wrap_en) };
            mem_tx_wrap_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let idle_out_lv: u32 = unsafe { ::core::mem::transmute(idle_out_lv) };
            idle_out_lv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let idle_out_en: u32 = unsafe { ::core::mem::transmute(idle_out_en) };
            idle_out_en as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let tx_stop: u32 = unsafe { ::core::mem::transmute(tx_stop) };
            tx_stop as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let div_cnt: u32 = unsafe { ::core::mem::transmute(div_cnt) };
            div_cnt as u64
        });
        __bindgen_bitfield_unit.set(16usize, 3u8, {
            let mem_size: u32 = unsafe { ::core::mem::transmute(mem_size) };
            mem_size as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let reserved19: u32 = unsafe { ::core::mem::transmute(reserved19) };
            reserved19 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let carrier_eff_en: u32 = unsafe { ::core::mem::transmute(carrier_eff_en) };
            carrier_eff_en as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let carrier_en: u32 = unsafe { ::core::mem::transmute(carrier_en) };
            carrier_en as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let carrier_out_lv: u32 = unsafe { ::core::mem::transmute(carrier_out_lv) };
            carrier_out_lv as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let afifo_rst: u32 = unsafe { ::core::mem::transmute(afifo_rst) };
            afifo_rst as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let conf_update: u32 = unsafe { ::core::mem::transmute(conf_update) };
            conf_update as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let reserved25: u32 = unsafe { ::core::mem::transmute(reserved25) };
            reserved25 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_2 {
    pub conf0: rmt_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub conf1: rmt_dev_s__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn div_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_div_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn idle_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_idle_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_size(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mem_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved26(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved26(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn carrier_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carrier_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn carrier_out_lv(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_carrier_out_lv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved30(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved30(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        div_cnt: u32,
        idle_thres: u32,
        mem_size: u32,
        reserved26: u32,
        carrier_en: u32,
        carrier_out_lv: u32,
        reserved30: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let div_cnt: u32 = unsafe { ::core::mem::transmute(div_cnt) };
            div_cnt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 15u8, {
            let idle_thres: u32 = unsafe { ::core::mem::transmute(idle_thres) };
            idle_thres as u64
        });
        __bindgen_bitfield_unit.set(23usize, 3u8, {
            let mem_size: u32 = unsafe { ::core::mem::transmute(mem_size) };
            mem_size as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let reserved26: u32 = unsafe { ::core::mem::transmute(reserved26) };
            reserved26 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let carrier_en: u32 = unsafe { ::core::mem::transmute(carrier_en) };
            carrier_en as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let carrier_out_lv: u32 = unsafe { ::core::mem::transmute(carrier_out_lv) };
            carrier_out_lv as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved30: u32 = unsafe { ::core::mem::transmute(reserved30) };
            reserved30 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_2__bindgen_ty_2 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn rx_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_wr_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_wr_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_owner(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_owner(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_filter_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rx_filter_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rx_filter_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_rx_filter_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rx_wrap_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rx_wrap_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn afifo_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_afifo_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conf_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rx_en: u32,
        mem_wr_rst: u32,
        mem_rst: u32,
        mem_owner: u32,
        rx_filter_en: u32,
        rx_filter_thres: u32,
        mem_rx_wrap_en: u32,
        afifo_rst: u32,
        conf_update: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rx_en: u32 = unsafe { ::core::mem::transmute(rx_en) };
            rx_en as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mem_wr_rst: u32 = unsafe { ::core::mem::transmute(mem_wr_rst) };
            mem_wr_rst as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mem_rst: u32 = unsafe { ::core::mem::transmute(mem_rst) };
            mem_rst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mem_owner: u32 = unsafe { ::core::mem::transmute(mem_owner) };
            mem_owner as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let rx_filter_en: u32 = unsafe { ::core::mem::transmute(rx_filter_en) };
            rx_filter_en as u64
        });
        __bindgen_bitfield_unit.set(5usize, 8u8, {
            let rx_filter_thres: u32 = unsafe { ::core::mem::transmute(rx_filter_thres) };
            rx_filter_thres as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let mem_rx_wrap_en: u32 = unsafe { ::core::mem::transmute(mem_rx_wrap_en) };
            mem_rx_wrap_en as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let afifo_rst: u32 = unsafe { ::core::mem::transmute(afifo_rst) };
            afifo_rst as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let conf_update: u32 = unsafe { ::core::mem::transmute(conf_update) };
            conf_update as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rmt_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn mem_raddr_ex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_mem_raddr_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn waddr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_waddr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_empty(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_empty(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_wr_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_wr_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn raddr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_raddr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mem_raddr_ex: u32,
        state: u32,
        waddr: u32,
        mem_rd_err: u32,
        mem_empty: u32,
        mem_wr_err: u32,
        raddr: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let mem_raddr_ex: u32 = unsafe { ::core::mem::transmute(mem_raddr_ex) };
            mem_raddr_ex as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let state: u32 = unsafe { ::core::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(12usize, 9u8, {
            let waddr: u32 = unsafe { ::core::mem::transmute(waddr) };
            waddr as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let mem_rd_err: u32 = unsafe { ::core::mem::transmute(mem_rd_err) };
            mem_rd_err as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let mem_empty: u32 = unsafe { ::core::mem::transmute(mem_empty) };
            mem_empty as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let mem_wr_err: u32 = unsafe { ::core::mem::transmute(mem_wr_err) };
            mem_wr_err as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let raddr: u32 = unsafe { ::core::mem::transmute(raddr) };
            raddr as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn mem_waddr_ex(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_mem_waddr_ex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_raddr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_mem_raddr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_owner_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_owner_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_full(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_full(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_rd_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_rd_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mem_waddr_ex: u32,
        reserved9: u32,
        mem_raddr: u32,
        reserved21: u32,
        state: u32,
        mem_owner_err: u32,
        mem_full: u32,
        mem_rd_err: u32,
        reserved28: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let mem_waddr_ex: u32 = unsafe { ::core::mem::transmute(mem_waddr_ex) };
            mem_waddr_ex as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let reserved9: u32 = unsafe { ::core::mem::transmute(reserved9) };
            reserved9 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 9u8, {
            let mem_raddr: u32 = unsafe { ::core::mem::transmute(mem_raddr) };
            mem_raddr as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 3u8, {
            let state: u32 = unsafe { ::core::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let mem_owner_err: u32 = unsafe { ::core::mem::transmute(mem_owner_err) };
            mem_owner_err as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let mem_full: u32 = unsafe { ::core::mem::transmute(mem_full) };
            mem_full as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let mem_rd_err: u32 = unsafe { ::core::mem::transmute(mem_rd_err) };
            mem_rd_err as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_5 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_5__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn ch0_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0_tx_end: u32,
        ch1_tx_end: u32,
        ch2_rx_end: u32,
        ch3_rx_end: u32,
        ch0_err: u32,
        ch1_err: u32,
        ch2_err: u32,
        ch3_err: u32,
        ch0_tx_thr_event: u32,
        ch1_tx_thr_event: u32,
        ch2_rx_thr_event: u32,
        ch3_rx_thr_event: u32,
        ch0_tx_loop: u32,
        ch1_tx_loop: u32,
        reserved14: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0_tx_end: u32 = unsafe { ::core::mem::transmute(ch0_tx_end) };
            ch0_tx_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1_tx_end: u32 = unsafe { ::core::mem::transmute(ch1_tx_end) };
            ch1_tx_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ch2_rx_end: u32 = unsafe { ::core::mem::transmute(ch2_rx_end) };
            ch2_rx_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ch3_rx_end: u32 = unsafe { ::core::mem::transmute(ch3_rx_end) };
            ch3_rx_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ch0_err: u32 = unsafe { ::core::mem::transmute(ch0_err) };
            ch0_err as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ch1_err: u32 = unsafe { ::core::mem::transmute(ch1_err) };
            ch1_err as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ch2_err: u32 = unsafe { ::core::mem::transmute(ch2_err) };
            ch2_err as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ch3_err: u32 = unsafe { ::core::mem::transmute(ch3_err) };
            ch3_err as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ch0_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch0_tx_thr_event) };
            ch0_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ch1_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch1_tx_thr_event) };
            ch1_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ch2_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch2_rx_thr_event) };
            ch2_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ch3_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch3_rx_thr_event) };
            ch3_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ch0_tx_loop: u32 = unsafe { ::core::mem::transmute(ch0_tx_loop) };
            ch0_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let ch1_tx_loop: u32 = unsafe { ::core::mem::transmute(ch1_tx_loop) };
            ch1_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_6 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_6__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn ch0_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0_tx_end: u32,
        ch1_tx_end: u32,
        ch2_rx_end: u32,
        ch3_rx_end: u32,
        ch0_err: u32,
        ch1_err: u32,
        ch2_err: u32,
        ch3_err: u32,
        ch0_tx_thr_event: u32,
        ch1_tx_thr_event: u32,
        ch2_rx_thr_event: u32,
        ch3_rx_thr_event: u32,
        ch0_tx_loop: u32,
        ch1_tx_loop: u32,
        reserved14: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0_tx_end: u32 = unsafe { ::core::mem::transmute(ch0_tx_end) };
            ch0_tx_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1_tx_end: u32 = unsafe { ::core::mem::transmute(ch1_tx_end) };
            ch1_tx_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ch2_rx_end: u32 = unsafe { ::core::mem::transmute(ch2_rx_end) };
            ch2_rx_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ch3_rx_end: u32 = unsafe { ::core::mem::transmute(ch3_rx_end) };
            ch3_rx_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ch0_err: u32 = unsafe { ::core::mem::transmute(ch0_err) };
            ch0_err as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ch1_err: u32 = unsafe { ::core::mem::transmute(ch1_err) };
            ch1_err as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ch2_err: u32 = unsafe { ::core::mem::transmute(ch2_err) };
            ch2_err as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ch3_err: u32 = unsafe { ::core::mem::transmute(ch3_err) };
            ch3_err as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ch0_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch0_tx_thr_event) };
            ch0_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ch1_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch1_tx_thr_event) };
            ch1_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ch2_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch2_rx_thr_event) };
            ch2_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ch3_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch3_rx_thr_event) };
            ch3_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ch0_tx_loop: u32 = unsafe { ::core::mem::transmute(ch0_tx_loop) };
            ch0_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let ch1_tx_loop: u32 = unsafe { ::core::mem::transmute(ch1_tx_loop) };
            ch1_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_7 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_7__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn ch0_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0_tx_end: u32,
        ch1_tx_end: u32,
        ch2_rx_end: u32,
        ch3_rx_end: u32,
        ch0_err: u32,
        ch1_err: u32,
        ch2_err: u32,
        ch3_err: u32,
        ch0_tx_thr_event: u32,
        ch1_tx_thr_event: u32,
        ch2_rx_thr_event: u32,
        ch3_rx_thr_event: u32,
        ch0_tx_loop: u32,
        ch1_tx_loop: u32,
        reserved14: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0_tx_end: u32 = unsafe { ::core::mem::transmute(ch0_tx_end) };
            ch0_tx_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1_tx_end: u32 = unsafe { ::core::mem::transmute(ch1_tx_end) };
            ch1_tx_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ch2_rx_end: u32 = unsafe { ::core::mem::transmute(ch2_rx_end) };
            ch2_rx_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ch3_rx_end: u32 = unsafe { ::core::mem::transmute(ch3_rx_end) };
            ch3_rx_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ch0_err: u32 = unsafe { ::core::mem::transmute(ch0_err) };
            ch0_err as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ch1_err: u32 = unsafe { ::core::mem::transmute(ch1_err) };
            ch1_err as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ch2_err: u32 = unsafe { ::core::mem::transmute(ch2_err) };
            ch2_err as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ch3_err: u32 = unsafe { ::core::mem::transmute(ch3_err) };
            ch3_err as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ch0_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch0_tx_thr_event) };
            ch0_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ch1_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch1_tx_thr_event) };
            ch1_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ch2_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch2_rx_thr_event) };
            ch2_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ch3_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch3_rx_thr_event) };
            ch3_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ch0_tx_loop: u32 = unsafe { ::core::mem::transmute(ch0_tx_loop) };
            ch0_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let ch1_tx_loop: u32 = unsafe { ::core::mem::transmute(ch1_tx_loop) };
            ch1_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_8 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_8__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn ch0_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_end(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_end(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_err(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_err(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3_rx_thr_event(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3_rx_thr_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch0_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1_tx_loop(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1_tx_loop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved14(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved14(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0_tx_end: u32,
        ch1_tx_end: u32,
        ch2_rx_end: u32,
        ch3_rx_end: u32,
        ch0_err: u32,
        ch1_err: u32,
        ch2_err: u32,
        ch3_err: u32,
        ch0_tx_thr_event: u32,
        ch1_tx_thr_event: u32,
        ch2_rx_thr_event: u32,
        ch3_rx_thr_event: u32,
        ch0_tx_loop: u32,
        ch1_tx_loop: u32,
        reserved14: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0_tx_end: u32 = unsafe { ::core::mem::transmute(ch0_tx_end) };
            ch0_tx_end as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1_tx_end: u32 = unsafe { ::core::mem::transmute(ch1_tx_end) };
            ch1_tx_end as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ch2_rx_end: u32 = unsafe { ::core::mem::transmute(ch2_rx_end) };
            ch2_rx_end as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ch3_rx_end: u32 = unsafe { ::core::mem::transmute(ch3_rx_end) };
            ch3_rx_end as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ch0_err: u32 = unsafe { ::core::mem::transmute(ch0_err) };
            ch0_err as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ch1_err: u32 = unsafe { ::core::mem::transmute(ch1_err) };
            ch1_err as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ch2_err: u32 = unsafe { ::core::mem::transmute(ch2_err) };
            ch2_err as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ch3_err: u32 = unsafe { ::core::mem::transmute(ch3_err) };
            ch3_err as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ch0_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch0_tx_thr_event) };
            ch0_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ch1_tx_thr_event: u32 = unsafe { ::core::mem::transmute(ch1_tx_thr_event) };
            ch1_tx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ch2_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch2_rx_thr_event) };
            ch2_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ch3_rx_thr_event: u32 = unsafe { ::core::mem::transmute(ch3_rx_thr_event) };
            ch3_rx_thr_event as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ch0_tx_loop: u32 = unsafe { ::core::mem::transmute(ch0_tx_loop) };
            ch0_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let ch1_tx_loop: u32 = unsafe { ::core::mem::transmute(ch1_tx_loop) };
            ch1_tx_loop as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved14: u32 = unsafe { ::core::mem::transmute(reserved14) };
            reserved14 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_9 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_9__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn low(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_low(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn high(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_high(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(low: u32, high: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let low: u32 = unsafe { ::core::mem::transmute(low) };
            low as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let high: u32 = unsafe { ::core::mem::transmute(high) };
            high as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_10 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_10__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn low_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_low_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn high_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_high_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(low_thres: u32, high_thres: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let low_thres: u32 = unsafe { ::core::mem::transmute(low_thres) };
            low_thres as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let high_thres: u32 = unsafe { ::core::mem::transmute(high_thres) };
            high_thres as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_11 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_11__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_11__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_11__bindgen_ty_1 {
    #[inline]
    pub fn limit(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_limit(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_loop_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_tx_loop_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_loop_cnt_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_loop_cnt_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_count_reset(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_count_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved21(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved21(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        limit: u32,
        tx_loop_num: u32,
        tx_loop_cnt_en: u32,
        loop_count_reset: u32,
        reserved21: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let limit: u32 = unsafe { ::core::mem::transmute(limit) };
            limit as u64
        });
        __bindgen_bitfield_unit.set(9usize, 10u8, {
            let tx_loop_num: u32 = unsafe { ::core::mem::transmute(tx_loop_num) };
            tx_loop_num as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let tx_loop_cnt_en: u32 = unsafe { ::core::mem::transmute(tx_loop_cnt_en) };
            tx_loop_cnt_en as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let loop_count_reset: u32 = unsafe { ::core::mem::transmute(loop_count_reset) };
            loop_count_reset as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved21: u32 = unsafe { ::core::mem::transmute(reserved21) };
            reserved21 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_12 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_12__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_12__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_12__bindgen_ty_1 {
    #[inline]
    pub fn rx_lim(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_rx_lim(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved9(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved9(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(rx_lim: u32, reserved9: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let rx_lim: u32 = unsafe { ::core::mem::transmute(rx_lim) };
            rx_lim as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved9: u32 = unsafe { ::core::mem::transmute(reserved9) };
            reserved9 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_13 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_13__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_13__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_13__bindgen_ty_1 {
    #[inline]
    pub fn fifo_mask(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fifo_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_clk_force_on(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_clk_force_on(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_force_pd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_force_pd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mem_force_pu(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mem_force_pu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sclk_div_num(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sclk_div_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sclk_div_a(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_sclk_div_a(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn sclk_div_b(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_sclk_div_b(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn sclk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sclk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sclk_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sclk_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved27(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved27(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fifo_mask: u32,
        mem_clk_force_on: u32,
        mem_force_pd: u32,
        mem_force_pu: u32,
        sclk_div_num: u32,
        sclk_div_a: u32,
        sclk_div_b: u32,
        sclk_sel: u32,
        sclk_active: u32,
        reserved27: u32,
        clk_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fifo_mask: u32 = unsafe { ::core::mem::transmute(fifo_mask) };
            fifo_mask as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mem_clk_force_on: u32 = unsafe { ::core::mem::transmute(mem_clk_force_on) };
            mem_clk_force_on as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mem_force_pd: u32 = unsafe { ::core::mem::transmute(mem_force_pd) };
            mem_force_pd as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mem_force_pu: u32 = unsafe { ::core::mem::transmute(mem_force_pu) };
            mem_force_pu as u64
        });
        __bindgen_bitfield_unit.set(4usize, 8u8, {
            let sclk_div_num: u32 = unsafe { ::core::mem::transmute(sclk_div_num) };
            sclk_div_num as u64
        });
        __bindgen_bitfield_unit.set(12usize, 6u8, {
            let sclk_div_a: u32 = unsafe { ::core::mem::transmute(sclk_div_a) };
            sclk_div_a as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let sclk_div_b: u32 = unsafe { ::core::mem::transmute(sclk_div_b) };
            sclk_div_b as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let sclk_sel: u32 = unsafe { ::core::mem::transmute(sclk_sel) };
            sclk_sel as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sclk_active: u32 = unsafe { ::core::mem::transmute(sclk_active) };
            sclk_active as u64
        });
        __bindgen_bitfield_unit.set(27usize, 4u8, {
            let reserved27: u32 = unsafe { ::core::mem::transmute(reserved27) };
            reserved27 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_14 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_14__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_14__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_14__bindgen_ty_1 {
    #[inline]
    pub fn ch0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0: u32,
        ch1: u32,
        en: u32,
        reserved3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0: u32 = unsafe { ::core::mem::transmute(ch0) };
            ch0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1: u32 = unsafe { ::core::mem::transmute(ch1) };
            ch1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let en: u32 = unsafe { ::core::mem::transmute(en) };
            en as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved3: u32 = unsafe { ::core::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_15 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_15__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_15__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_15__bindgen_ty_1 {
    #[inline]
    pub fn ch0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ch3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ch3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ch0: u32,
        ch1: u32,
        ch2: u32,
        ch3: u32,
        reserved4: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ch0: u32 = unsafe { ::core::mem::transmute(ch0) };
            ch0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ch1: u32 = unsafe { ::core::mem::transmute(ch1) };
            ch1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ch2: u32 = unsafe { ::core::mem::transmute(ch2) };
            ch2 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ch3: u32 = unsafe { ::core::mem::transmute(ch3) };
            ch3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved4: u32 = unsafe { ::core::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_dev_s__bindgen_ty_16 {
    pub __bindgen_anon_1: rmt_dev_s__bindgen_ty_16__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_dev_s__bindgen_ty_16__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_dev_s__bindgen_ty_16__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_dev_s__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rmt_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rmt_dev_t = rmt_dev_s;
extern "C" {
    pub static mut RMT: rmt_dev_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_item32_t {
    pub __bindgen_anon_1: rmt_item32_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_item32_t__bindgen_ty_1 {
    pub __bindgen_anon_1: rmt_item32_t__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rmt_item32_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl rmt_item32_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn duration0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_duration0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn level0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_level0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn duration1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_duration1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn level1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_level1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        duration0: u32,
        level0: u32,
        duration1: u32,
        level1: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let duration0: u32 = unsafe { ::core::mem::transmute(duration0) };
            duration0 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let level0: u32 = unsafe { ::core::mem::transmute(level0) };
            level0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 15u8, {
            let duration1: u32 = unsafe { ::core::mem::transmute(duration1) };
            duration1 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let level1: u32 = unsafe { ::core::mem::transmute(level1) };
            level1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for rmt_item32_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rmt_item32_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_mem_s {
    pub chan: [rmt_mem_s__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_mem_s__bindgen_ty_1 {
    pub data32: [rmt_item32_t; 48usize],
}
impl Default for rmt_mem_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rmt_mem_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type rmt_mem_t = rmt_mem_s;
extern "C" {
    pub static mut RMTMEM: rmt_mem_t;
}
#[doc = "< RMT channel number 0"]
pub const rmt_channel_t_RMT_CHANNEL_0: rmt_channel_t = 0;
#[doc = "< RMT channel number 1"]
pub const rmt_channel_t_RMT_CHANNEL_1: rmt_channel_t = 1;
#[doc = "< RMT channel number 2"]
pub const rmt_channel_t_RMT_CHANNEL_2: rmt_channel_t = 2;
#[doc = "< RMT channel number 3"]
pub const rmt_channel_t_RMT_CHANNEL_3: rmt_channel_t = 3;
#[doc = "< Number of RMT channels"]
pub const rmt_channel_t_RMT_CHANNEL_MAX: rmt_channel_t = 4;
#[doc = " @brief RMT channel ID"]
pub type rmt_channel_t = c_types::c_uint;
#[doc = "< RMT RX mode, RMT transmitter owns the memory block"]
pub const rmt_mem_owner_t_RMT_MEM_OWNER_TX: rmt_mem_owner_t = 0;
#[doc = "< RMT RX mode, RMT receiver owns the memory block"]
pub const rmt_mem_owner_t_RMT_MEM_OWNER_RX: rmt_mem_owner_t = 1;
pub const rmt_mem_owner_t_RMT_MEM_OWNER_MAX: rmt_mem_owner_t = 2;
#[doc = " @brief RMT Internal Memory Owner"]
#[doc = ""]
pub type rmt_mem_owner_t = c_types::c_uint;
#[doc = "< RMT source clock is APB CLK, 80Mhz by default"]
pub const rmt_source_clk_t_RMT_BASECLK_APB: rmt_source_clk_t = 1;
#[doc = "< RMT source clock is XTAL clock, 40Mhz by default"]
pub const rmt_source_clk_t_RMT_BASECLK_XTAL: rmt_source_clk_t = 3;
pub const rmt_source_clk_t_RMT_BASECLK_MAX: rmt_source_clk_t = 4;
#[doc = " @brief Clock Source of RMT Channel"]
#[doc = ""]
pub type rmt_source_clk_t = c_types::c_uint;
pub const rmt_data_mode_t_RMT_DATA_MODE_FIFO: rmt_data_mode_t = 0;
pub const rmt_data_mode_t_RMT_DATA_MODE_MEM: rmt_data_mode_t = 1;
pub const rmt_data_mode_t_RMT_DATA_MODE_MAX: rmt_data_mode_t = 2;
#[doc = " @brief RMT Data Mode"]
#[doc = ""]
#[doc = " @note We highly recommended to use MEM mode not FIFO mode since there will be some gotcha in FIFO mode."]
#[doc = ""]
pub type rmt_data_mode_t = c_types::c_uint;
#[doc = "< RMT TX mode"]
pub const rmt_mode_t_RMT_MODE_TX: rmt_mode_t = 0;
#[doc = "< RMT RX mode"]
pub const rmt_mode_t_RMT_MODE_RX: rmt_mode_t = 1;
pub const rmt_mode_t_RMT_MODE_MAX: rmt_mode_t = 2;
#[doc = " @brief RMT Channel Working Mode (TX or RX)"]
#[doc = ""]
pub type rmt_mode_t = c_types::c_uint;
#[doc = "< RMT TX idle level: low Level"]
pub const rmt_idle_level_t_RMT_IDLE_LEVEL_LOW: rmt_idle_level_t = 0;
#[doc = "< RMT TX idle level: high Level"]
pub const rmt_idle_level_t_RMT_IDLE_LEVEL_HIGH: rmt_idle_level_t = 1;
pub const rmt_idle_level_t_RMT_IDLE_LEVEL_MAX: rmt_idle_level_t = 2;
#[doc = " @brief RMT Idle Level"]
#[doc = ""]
pub type rmt_idle_level_t = c_types::c_uint;
#[doc = "< RMT carrier wave is modulated for low Level output"]
pub const rmt_carrier_level_t_RMT_CARRIER_LEVEL_LOW: rmt_carrier_level_t = 0;
#[doc = "< RMT carrier wave is modulated for high Level output"]
pub const rmt_carrier_level_t_RMT_CARRIER_LEVEL_HIGH: rmt_carrier_level_t = 1;
pub const rmt_carrier_level_t_RMT_CARRIER_LEVEL_MAX: rmt_carrier_level_t = 2;
#[doc = " @brief RMT Carrier Level"]
#[doc = ""]
pub type rmt_carrier_level_t = c_types::c_uint;
#[doc = "< RMT channel uninitialized"]
pub const rmt_channel_status_t_RMT_CHANNEL_UNINIT: rmt_channel_status_t = 0;
#[doc = "< RMT channel status idle"]
pub const rmt_channel_status_t_RMT_CHANNEL_IDLE: rmt_channel_status_t = 1;
#[doc = "< RMT channel status busy"]
pub const rmt_channel_status_t_RMT_CHANNEL_BUSY: rmt_channel_status_t = 2;
#[doc = " @brief RMT Channel Status"]
#[doc = ""]
pub type rmt_channel_status_t = c_types::c_uint;
#[doc = " @brief Data struct of RMT channel status"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmt_channel_status_result_t {
    #[doc = "< Store the current status of each channel"]
    pub status: [rmt_channel_status_t; 4usize],
}
impl Default for rmt_channel_status_result_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Data struct of RMT TX configure parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmt_tx_config_t {
    #[doc = "< RMT carrier frequency"]
    pub carrier_freq_hz: u32,
    #[doc = "< Level of the RMT output, when the carrier is applied"]
    pub carrier_level: rmt_carrier_level_t,
    #[doc = "< RMT idle level"]
    pub idle_level: rmt_idle_level_t,
    #[doc = "< RMT carrier duty (%)"]
    pub carrier_duty_percent: u8,
    #[doc = "< Maximum loop count"]
    pub loop_count: u32,
    #[doc = "< RMT carrier enable"]
    pub carrier_en: bool,
    #[doc = "< Enable sending RMT items in a loop"]
    pub loop_en: bool,
    #[doc = "< RMT idle level output enable"]
    pub idle_output_en: bool,
}
impl Default for rmt_tx_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Data struct of RMT RX configure parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmt_rx_config_t {
    #[doc = "< RMT RX idle threshold"]
    pub idle_threshold: u16,
    #[doc = "< RMT filter tick number"]
    pub filter_ticks_thresh: u8,
    #[doc = "< RMT receiver filter enable"]
    pub filter_en: bool,
    #[doc = "< RMT receiver remove carrier enable"]
    pub rm_carrier: bool,
    #[doc = "< RMT carrier frequency"]
    pub carrier_freq_hz: u32,
    #[doc = "< RMT carrier duty (%)"]
    pub carrier_duty_percent: u8,
    #[doc = "< The level to remove the carrier"]
    pub carrier_level: rmt_carrier_level_t,
}
impl Default for rmt_rx_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Data struct of RMT configure parameters"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rmt_config_t {
    #[doc = "< RMT mode: transmitter or receiver"]
    pub rmt_mode: rmt_mode_t,
    #[doc = "< RMT channel"]
    pub channel: rmt_channel_t,
    #[doc = "< RMT GPIO number"]
    pub gpio_num: gpio_num_t,
    #[doc = "< RMT channel counter divider"]
    pub clk_div: u8,
    #[doc = "< RMT memory block number"]
    pub mem_block_num: u8,
    #[doc = "< RMT channel extra configurations, OR'd with RMT_CHANNEL_FLAGS_[*]"]
    pub flags: u32,
    pub __bindgen_anon_1: rmt_config_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rmt_config_t__bindgen_ty_1 {
    #[doc = "< RMT TX parameter"]
    pub tx_config: rmt_tx_config_t,
    #[doc = "< RMT RX parameter"]
    pub rx_config: rmt_rx_config_t,
}
impl Default for rmt_config_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for rmt_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief RMT interrupt handle"]
pub type rmt_isr_handle_t = intr_handle_t;
#[doc = " @brief Type of RMT Tx End callback function"]
pub type rmt_tx_end_fn_t =
    ::core::option::Option<unsafe extern "C" fn(channel: rmt_channel_t, arg: *mut c_types::c_void)>;
#[doc = " @brief Structure encapsulating a RMT TX end callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmt_tx_end_callback_t {
    #[doc = "< Function which is called on RMT TX end"]
    pub function: rmt_tx_end_fn_t,
    #[doc = "< Optional argument passed to function"]
    pub arg: *mut c_types::c_void,
}
impl Default for rmt_tx_end_callback_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief User callback function to convert uint8_t type data to rmt format(rmt_item32_t)."]
#[doc = ""]
#[doc = "        This function may be called from an ISR, so, the code should be short and efficient."]
#[doc = ""]
#[doc = " @param  src Pointer to the buffer storing the raw data that needs to be converted to rmt format."]
#[doc = " @param[out] dest Pointer to the buffer storing the rmt format data."]
#[doc = " @param  src_size The raw data size."]
#[doc = " @param  wanted_num The number of rmt format data that wanted to get."]
#[doc = " @param[out] translated_size The size of the raw data that has been converted to rmt format,"]
#[doc = "             it should return 0 if no data is converted in user callback."]
#[doc = " @param[out] item_num The number of the rmt format data that actually converted to,"]
#[doc = "             it can be less than wanted_num if there is not enough raw data, but cannot exceed wanted_num."]
#[doc = "             it should return 0 if no data was converted."]
#[doc = ""]
#[doc = " @note"]
#[doc = "       In fact, item_num should be a multiple of translated_size, e.g. :"]
#[doc = "       When we convert each byte of uint8_t type data to rmt format data,"]
#[doc = "       the relation between item_num and translated_size should be `item_num = translated_size*8`."]
pub type sample_to_rmt_t = ::core::option::Option<
    unsafe extern "C" fn(
        src: *const c_types::c_void,
        dest: *mut rmt_item32_t,
        src_size: size_t,
        wanted_num: size_t,
        translated_size: *mut size_t,
        item_num: *mut size_t,
    ),
>;
extern "C" {
    #[doc = " @brief Set RMT clock divider, channel clock is divided from source clock."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param div_cnt RMT counter clock divider"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_clk_div(channel: rmt_channel_t, div_cnt: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT clock divider, channel clock is divided from source clock."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param div_cnt pointer to accept RMT counter divider"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_clk_div(channel: rmt_channel_t, div_cnt: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT RX idle threshold value"]
    #[doc = ""]
    #[doc = "        In receive mode, when no edge is detected on the input signal"]
    #[doc = "        for longer than idle_thres channel clock cycles,"]
    #[doc = "        the receive process is finished."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param thresh RMT RX idle threshold"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_rx_idle_thresh(channel: rmt_channel_t, thresh: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT idle threshold value."]
    #[doc = ""]
    #[doc = "        In receive mode, when no edge is detected on the input signal"]
    #[doc = "        for longer than idle_thres channel clock cycles,"]
    #[doc = "        the receive process is finished."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param thresh pointer to accept RMT RX idle threshold value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_rx_idle_thresh(channel: rmt_channel_t, thresh: *mut u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT memory block number for RMT channel"]
    #[doc = ""]
    #[doc = "        This function is used to configure the amount of memory blocks allocated to channel n"]
    #[doc = "        The 8 channels share a 512x32-bit RAM block which can be read and written"]
    #[doc = "        by the processor cores over the APB bus, as well as read by the transmitters"]
    #[doc = "        and written by the receivers."]
    #[doc = ""]
    #[doc = "        The RAM address range for channel n is start_addr_CHn to end_addr_CHn, which are defined by:"]
    #[doc = "        Memory block start address is RMT_CHANNEL_MEM(n) (in soc/rmt_reg.h),"]
    #[doc = "        that is, start_addr_chn = RMT base address + 0x800 + 64 ∗ 4 ∗ n, and"]
    #[doc = "        end_addr_chn = RMT base address + 0x800 +  64 ∗ 4 ∗ n + 64 ∗ 4 ∗ RMT_MEM_SIZE_CHn mod 512 ∗ 4"]
    #[doc = ""]
    #[doc = "        @note"]
    #[doc = "        If memory block number of one channel is set to a value greater than 1, this channel will occupy the memory"]
    #[doc = "        block of the next channel."]
    #[doc = "        Channel 0 can use at most 8 blocks of memory, accordingly channel 7 can only use one memory block."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rmt_mem_num RMT RX memory block number, one block has 64 * 32 bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_mem_block_num(channel: rmt_channel_t, rmt_mem_num: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT memory block number"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rmt_mem_num Pointer to accept RMT RX memory block number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_mem_block_num(channel: rmt_channel_t, rmt_mem_num: *mut u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure RMT carrier for TX signal."]
    #[doc = ""]
    #[doc = "        Set different values for carrier_high and carrier_low to set different frequency of carrier."]
    #[doc = "        The unit of carrier_high/low is the source clock tick, not the divided channel counter clock."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param carrier_en Whether to enable output carrier."]
    #[doc = " @param high_level High level duration of carrier"]
    #[doc = " @param low_level Low level duration of carrier."]
    #[doc = " @param carrier_level Configure the way carrier wave is modulated for channel."]
    #[doc = "     - 1'b1:transmit on low output level"]
    #[doc = "     - 1'b0:transmit on high output level"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_tx_carrier(
        channel: rmt_channel_t,
        carrier_en: bool,
        high_level: u16,
        low_level: u16,
        carrier_level: rmt_carrier_level_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT memory in low power mode."]
    #[doc = ""]
    #[doc = "        Reduce power consumed by memory. 1:memory is in low power state."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param pd_en RMT memory low power enable."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_mem_pd(channel: rmt_channel_t, pd_en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT memory low power mode."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param pd_en Pointer to accept RMT memory low power mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_mem_pd(channel: rmt_channel_t, pd_en: *mut bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT start sending data from memory."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param tx_idx_rst Set true to reset memory index for TX."]
    #[doc = "                   Otherwise, transmitter will continue sending from the last index in memory."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_tx_start(channel: rmt_channel_t, tx_idx_rst: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT stop sending."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_tx_stop(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT start receiving data."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rx_idx_rst Set true to reset memory index for receiver."]
    #[doc = "                   Otherwise, receiver will continue receiving data to the last index in memory."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_rx_start(channel: rmt_channel_t, rx_idx_rst: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT stop receiving data."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_rx_stop(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset RMT TX memory"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_tx_memory_reset(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset RMT RX memory"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_rx_memory_reset(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT memory owner."]
    #[doc = " @note Setting memroy is only valid for RX channel."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param owner To set when the transmitter or receiver can process the memory of channel."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_memory_owner(channel: rmt_channel_t, owner: rmt_mem_owner_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT memory owner."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param owner Pointer to get memory owner."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_memory_owner(channel: rmt_channel_t, owner: *mut rmt_mem_owner_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT tx loop mode."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param loop_en Enable RMT transmitter loop sending mode."]
    #[doc = "                If set true, transmitter will continue sending from the first data"]
    #[doc = "                to the last data in channel over and over again in a loop."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_tx_loop_mode(channel: rmt_channel_t, loop_en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT tx loop mode."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param loop_en Pointer to accept RMT transmitter loop sending mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_tx_loop_mode(channel: rmt_channel_t, loop_en: *mut bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT RX filter."]
    #[doc = ""]
    #[doc = "        In receive mode, channel will ignore input pulse when the pulse width is smaller than threshold."]
    #[doc = "        Counted in source clock, not divided counter clock."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rx_filter_en To enable RMT receiver filter."]
    #[doc = " @param thresh Threshold of pulse width for receiver."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_rx_filter(channel: rmt_channel_t, rx_filter_en: bool, thresh: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT source clock"]
    #[doc = ""]
    #[doc = "        RMT module has two clock sources:"]
    #[doc = "        1. APB clock which is 80Mhz"]
    #[doc = "        2. REF tick clock, which would be 1Mhz (not supported in this version)."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param base_clk To choose source clock for RMT module."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_source_clk(channel: rmt_channel_t, base_clk: rmt_source_clk_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT source clock"]
    #[doc = ""]
    #[doc = "        RMT module has two clock sources:"]
    #[doc = "        1. APB clock which is 80Mhz"]
    #[doc = "        2. REF tick clock, which would be 1Mhz (not supported in this version)."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param src_clk Pointer to accept source clock for RMT module."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_source_clk(channel: rmt_channel_t, src_clk: *mut rmt_source_clk_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT idle output level for transmitter"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param idle_out_en To enable idle level output."]
    #[doc = " @param level To set the output signal's level for channel in idle state."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_idle_level(
        channel: rmt_channel_t,
        idle_out_en: bool,
        level: rmt_idle_level_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT idle output level for transmitter"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param idle_out_en Pointer to accept value of enable idle."]
    #[doc = " @param level Pointer to accept value of output signal's level in idle state for specified channel."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_idle_level(
        channel: rmt_channel_t,
        idle_out_en: *mut bool,
        level: *mut rmt_idle_level_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get RMT status"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param status Pointer to accept channel status."]
    #[doc = "        Please refer to RMT_CHnSTATUS_REG(n=0~7) in `rmt_reg.h` for more details of each field."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_status(channel: rmt_channel_t, status: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT RX interrupt enable"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable or disable RX interrupt."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_rx_intr_en(channel: rmt_channel_t, en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT RX error interrupt enable"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable or disable RX err interrupt."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_err_intr_en(channel: rmt_channel_t, en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT TX interrupt enable"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable or disable TX interrupt."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_tx_intr_en(channel: rmt_channel_t, en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set RMT TX threshold event interrupt enable"]
    #[doc = ""]
    #[doc = " An interrupt will be triggered when the number of transmitted items reaches the threshold value"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable or disable TX event interrupt."]
    #[doc = " @param evt_thresh RMT event interrupt threshold value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_tx_thr_intr_en(channel: rmt_channel_t, en: bool, evt_thresh: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure the GPIO used by RMT channel"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param mode RMT mode, either RMT_MODE_TX or RMT_MODE_RX"]
    #[doc = " @param gpio_num GPIO number, which is connected with certain RMT signal"]
    #[doc = " @param invert_signal Invert RMT signal physically by GPIO matrix"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Configure RMT GPIO failed because of wrong parameter"]
    #[doc = "     - ESP_OK Configure RMT GPIO successfully"]
    pub fn rmt_set_gpio(
        channel: rmt_channel_t,
        mode: rmt_mode_t,
        gpio_num: gpio_num_t,
        invert_signal: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure RMT parameters"]
    #[doc = ""]
    #[doc = " @param rmt_param RMT parameter struct"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_config(rmt_param: *const rmt_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register RMT interrupt handler, the handler is an ISR."]
    #[doc = ""]
    #[doc = "        The handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " @note  If you already called rmt_driver_install to use system RMT driver,"]
    #[doc = "        please do not register ISR handler again."]
    #[doc = ""]
    #[doc = " @param fn Interrupt handler function."]
    #[doc = " @param arg Parameter for the handler function"]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param handle If non-zero, a handle to later clean up the ISR gets stored here."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Function pointer error."]
    #[doc = "     - ESP_FAIL System driver installed, can not register ISR handler for RMT"]
    pub fn rmt_isr_register(
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut rmt_isr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   Deregister previously registered RMT interrupt handler"]
    #[doc = ""]
    #[doc = " @param handle Handle obtained from rmt_isr_register"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Handle invalid"]
    pub fn rmt_isr_deregister(handle: rmt_isr_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Fill memory data of channel with given RMT items."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param item Pointer of items."]
    #[doc = " @param item_num RMT sending items number."]
    #[doc = " @param mem_offset Index offset of memory."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_fill_tx_items(
        channel: rmt_channel_t,
        item: *const rmt_item32_t,
        item_num: u16,
        mem_offset: u16,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize RMT driver"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rx_buf_size Size of RMT RX ringbuffer. Can be 0 if the RX ringbuffer is not used."]
    #[doc = " @param intr_alloc_flags Flags for the RMT driver interrupt handler. Pass 0 for default flags. See esp_intr_alloc.h for details."]
    #[doc = "        If ESP_INTR_FLAG_IRAM is used, please do not use the memory allocated from psram when calling rmt_write_items."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_STATE Driver is already installed, call rmt_driver_uninstall first."]
    #[doc = "     - ESP_ERR_NO_MEM Memory allocation failure"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_driver_install(
        channel: rmt_channel_t,
        rx_buf_size: size_t,
        intr_alloc_flags: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall RMT driver."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_driver_uninstall(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the current status of eight channels."]
    #[doc = ""]
    #[doc = " @note Do not call this function if it is possible that `rmt_driver_uninstall` will be called at the same time."]
    #[doc = ""]
    #[doc = " @param[out] channel_status store the current status of each channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter is NULL"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_channel_status(channel_status: *mut rmt_channel_status_result_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get speed of channel's internal counter clock."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param[out] clock_hz counter clock speed, in hz"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter is NULL"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_counter_clock(channel: rmt_channel_t, clock_hz: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief RMT send waveform from rmt_item array."]
    #[doc = ""]
    #[doc = "        This API allows user to send waveform with any length."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param rmt_item head point of RMT items array."]
    #[doc = "        If ESP_INTR_FLAG_IRAM is used, please do not use the memory allocated from psram when calling rmt_write_items."]
    #[doc = " @param item_num RMT data item number."]
    #[doc = " @param wait_tx_done"]
    #[doc = "        - If set 1, it will block the task and wait for sending done."]
    #[doc = "        - If set 0, it will not wait and return immediately."]
    #[doc = ""]
    #[doc = "         @note"]
    #[doc = "         This function will not copy data, instead, it will point to the original items,"]
    #[doc = "         and send the waveform items."]
    #[doc = "         If wait_tx_done is set to true, this function will block and will not return until"]
    #[doc = "         all items have been sent out."]
    #[doc = "         If wait_tx_done is set to false, this function will return immediately, and the driver"]
    #[doc = "         interrupt will continue sending the items. We must make sure the item data will not be"]
    #[doc = "         damaged when the driver is still sending items in driver interrupt."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_write_items(
        channel: rmt_channel_t,
        rmt_item: *const rmt_item32_t,
        item_num: c_types::c_int,
        wait_tx_done: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Wait RMT TX finished."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param wait_time Maximum time in ticks to wait for transmission to be complete.  If set 0, return immediately with ESP_ERR_TIMEOUT if TX is busy (polling)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK RMT Tx done successfully"]
    #[doc = "     - ESP_ERR_TIMEOUT Exceeded the 'wait_time' given"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_FAIL Driver not installed"]
    pub fn rmt_wait_tx_done(channel: rmt_channel_t, wait_time: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get ringbuffer from RMT."]
    #[doc = ""]
    #[doc = "        Users can get the RMT RX ringbuffer handle, and process the RX data."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param buf_handle Pointer to buffer handle to accept RX ringbuffer handle."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_get_ringbuf_handle(
        channel: rmt_channel_t,
        buf_handle: *mut RingbufHandle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Init rmt translator and register user callback."]
    #[doc = "        The callback will convert the raw data that needs to be sent to rmt format."]
    #[doc = "        If a channel is initialized more than once, tha user callback will be replaced by the later."]
    #[doc = ""]
    #[doc = " @param channel RMT channel ."]
    #[doc = " @param fn Point to the data conversion function."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Init fail."]
    #[doc = "     - ESP_OK Init success."]
    pub fn rmt_translator_init(channel: rmt_channel_t, fn_: sample_to_rmt_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set user context for the translator of specific channel"]
    #[doc = ""]
    #[doc = " @param channel RMT channel number"]
    #[doc = " @param context User context"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Set context fail"]
    #[doc = "     - ESP_OK Set context success"]
    pub fn rmt_translator_set_context(
        channel: rmt_channel_t,
        context: *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the user context set by 'rmt_translator_set_context'"]
    #[doc = ""]
    #[doc = " @note This API must be invoked in the RMT translator callback function,"]
    #[doc = "       and the first argument must be the actual parameter 'item_num' you got in that callback function."]
    #[doc = ""]
    #[doc = " @param item_num Address of the memory which contains the number of translated items (It's from driver's internal memroy)"]
    #[doc = " @param context Returned User context"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Get context fail"]
    #[doc = "     - ESP_OK Get context success"]
    pub fn rmt_translator_get_context(
        item_num: *const size_t,
        context: *mut *mut c_types::c_void,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Translate uint8_t type of data into rmt format and send it out."]
    #[doc = "        Requires rmt_translator_init to init the translator first."]
    #[doc = ""]
    #[doc = " @param channel RMT channel ."]
    #[doc = " @param src Pointer to the raw data."]
    #[doc = " @param src_size The size of the raw data."]
    #[doc = " @param wait_tx_done Set true to wait all data send done."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Send fail"]
    #[doc = "     - ESP_OK Send success"]
    pub fn rmt_write_sample(
        channel: rmt_channel_t,
        src: *const u8,
        src_size: size_t,
        wait_tx_done: bool,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Registers a callback that will be called when transmission ends."]
    #[doc = ""]
    #[doc = "        Called by rmt_driver_isr_default in interrupt context."]
    #[doc = ""]
    #[doc = " @note Requires rmt_driver_install to install the default ISR handler."]
    #[doc = ""]
    #[doc = " @param function Function to be called from the default interrupt handler or NULL."]
    #[doc = " @param arg Argument which will be provided to the callback when it is called."]
    #[doc = ""]
    #[doc = " @return the previous callback settings (members will be set to NULL if there was none)"]
    pub fn rmt_register_tx_end_callback(
        function: rmt_tx_end_fn_t,
        arg: *mut c_types::c_void,
    ) -> rmt_tx_end_callback_t;
}
extern "C" {
    #[doc = " @brief Set RMT RX threshold event interrupt enable"]
    #[doc = ""]
    #[doc = " An interrupt will be triggered when the number of received items reaches the threshold value"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable or disable RX event interrupt."]
    #[doc = " @param evt_thresh RMT event interrupt threshold value"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_rx_thr_intr_en(channel: rmt_channel_t, en: bool, evt_thresh: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Add channel into a synchronous group (channels in the same group can start transaction simultaneously)"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_add_channel_to_group(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Remove channel out of a group"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_remove_channel_from_group(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set loop count threshold value for RMT TX channel"]
    #[doc = ""]
    #[doc = " When tx loop count reaches this value, an ISR callback will notify user"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param count loop count, 1 ~ 1023"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "      - ESP_OK Success"]
    pub fn rmt_set_tx_loop_count(channel: rmt_channel_t, count: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable or disable the feature that when loop count reaches the threshold, RMT will stop transmitting."]
    #[doc = ""]
    #[doc = " - When the loop auto-stop feature is enabled will halt RMT transmission after the loop count reaches a certain threshold"]
    #[doc = " - When disabled, the RMT transmission continue indefinitely until halted by the users"]
    #[doc = ""]
    #[doc = " @note The auto-stop feature is implemented in hardware on particular targets (i.e. those with SOC_RMT_SUPPORT_TX_LOOP_AUTOSTOP defined)."]
    #[doc = "       Otherwise, the auto-stop feature is implemented in software via the interrupt."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param en enable bit"]
    #[doc = " @return"]
    #[doc = "      - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "      - ESP_OK Success"]
    pub fn rmt_enable_tx_loop_autostop(channel: rmt_channel_t, en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset RMT TX/RX memory index."]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_memory_rw_rst(channel: rmt_channel_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set mask value to RMT interrupt enable register."]
    #[doc = ""]
    #[doc = " @param mask Bit mask to set to the register"]
    pub fn rmt_set_intr_enable_mask(mask: u32);
}
extern "C" {
    #[doc = " @brief Clear mask value to RMT interrupt enable register."]
    #[doc = ""]
    #[doc = " @param mask Bit mask to clear the register"]
    pub fn rmt_clr_intr_enable_mask(mask: u32);
}
extern "C" {
    #[doc = " @brief Set RMT pin"]
    #[doc = ""]
    #[doc = " @param channel RMT channel"]
    #[doc = " @param mode TX or RX mode for RMT"]
    #[doc = " @param gpio_num GPIO number to transmit or receive the signal."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn rmt_set_pin(channel: rmt_channel_t, mode: rmt_mode_t, gpio_num: gpio_num_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register a handler for specific RTC_CNTL interrupts"]
    #[doc = ""]
    #[doc = " Multiple handlers can be registered using this function. Whenever an"]
    #[doc = " RTC interrupt happens, all handlers with matching rtc_intr_mask values"]
    #[doc = " will be called."]
    #[doc = ""]
    #[doc = " @param handler  handler function to call"]
    #[doc = " @param handler_arg  argument to be passed to the handler"]
    #[doc = " @param rtc_intr_mask  combination of RTC_CNTL_*_INT_ENA bits indicating the"]
    #[doc = "                       sources to call the handler for"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_NO_MEM not enough memory to allocate handler structure"]
    #[doc = "      - other errors returned by esp_intr_alloc"]
    pub fn rtc_isr_register(
        handler: intr_handler_t,
        handler_arg: *mut c_types::c_void,
        rtc_intr_mask: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deregister the handler previously registered using rtc_isr_register"]
    #[doc = " @param handler  handler function to call (as passed to rtc_isr_register)"]
    #[doc = " @param handler_arg  argument of the handler (as passed to rtc_isr_register)"]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_STATE if a handler matching both handler and"]
    #[doc = "        handler_arg isn't registered"]
    pub fn rtc_isr_deregister(
        handler: intr_handler_t,
        handler_arg: *mut c_types::c_void,
    ) -> esp_err_t;
}
#[doc = "< Pad input"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_INPUT_ONLY: rtc_gpio_mode_t = 0;
#[doc = "< Pad output"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_OUTPUT_ONLY: rtc_gpio_mode_t = 1;
#[doc = "< Pad input + output"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_INPUT_OUTPUT: rtc_gpio_mode_t = 2;
#[doc = "< Pad (output + input) disable"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_DISABLED: rtc_gpio_mode_t = 3;
#[doc = "< Pad open-drain output"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_OUTPUT_OD: rtc_gpio_mode_t = 4;
#[doc = "< Pad input + open-drain output"]
pub const rtc_gpio_mode_t_RTC_GPIO_MODE_INPUT_OUTPUT_OD: rtc_gpio_mode_t = 5;
#[doc = " RTCIO output/input mode type."]
pub type rtc_gpio_mode_t = c_types::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gpio_sd_dev_s {
    pub channel: [gpio_sd_dev_s__bindgen_ty_1; 4usize],
    pub reserved_10: u32,
    pub reserved_14: u32,
    pub reserved_18: u32,
    pub reserved_1c: u32,
    pub cg: gpio_sd_dev_s__bindgen_ty_2,
    pub misc: gpio_sd_dev_s__bindgen_ty_3,
    pub version: gpio_sd_dev_s__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_sd_dev_s__bindgen_ty_1 {
    pub __bindgen_anon_1: gpio_sd_dev_s__bindgen_ty_1__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_sd_dev_s__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_sd_dev_s__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn duty(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_duty(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn prescale(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_prescale(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved16(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved16(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        duty: u32,
        prescale: u32,
        reserved16: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let duty: u32 = unsafe { ::core::mem::transmute(duty) };
            duty as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let prescale: u32 = unsafe { ::core::mem::transmute(prescale) };
            prescale as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved16: u32 = unsafe { ::core::mem::transmute(reserved16) };
            reserved16 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_sd_dev_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_sd_dev_s__bindgen_ty_2 {
    pub __bindgen_anon_1: gpio_sd_dev_s__bindgen_ty_2__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_sd_dev_s__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_sd_dev_s__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(reserved0: u32, clk_en: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_sd_dev_s__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_sd_dev_s__bindgen_ty_3 {
    pub __bindgen_anon_1: gpio_sd_dev_s__bindgen_ty_3__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_sd_dev_s__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_sd_dev_s__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn function_clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_function_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spi_swap(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_spi_swap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved0: u32,
        function_clk_en: u32,
        spi_swap: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let reserved0: u32 = unsafe { ::core::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let function_clk_en: u32 = unsafe { ::core::mem::transmute(function_clk_en) };
            function_clk_en as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let spi_swap: u32 = unsafe { ::core::mem::transmute(spi_swap) };
            spi_swap as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_sd_dev_s__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gpio_sd_dev_s__bindgen_ty_4 {
    pub __bindgen_anon_1: gpio_sd_dev_s__bindgen_ty_4__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct gpio_sd_dev_s__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl gpio_sd_dev_s__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(date: u32, reserved28: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let date: u32 = unsafe { ::core::mem::transmute(date) };
            date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved28: u32 = unsafe { ::core::mem::transmute(reserved28) };
            reserved28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for gpio_sd_dev_s__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gpio_sd_dev_s {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gpio_sd_dev_t = gpio_sd_dev_s;
extern "C" {
    pub static mut SIGMADELTA: gpio_sd_dev_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigma_delta_signal_conn_t {
    pub channels: [sigma_delta_signal_conn_t__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigma_delta_signal_conn_t__bindgen_ty_1 {
    pub sd_sig: u32,
}
extern "C" {
    pub static sigma_delta_periph_signals: sigma_delta_signal_conn_t;
}
#[doc = "< SIGMADELTA port 0"]
pub const sigmadelta_port_t_SIGMADELTA_PORT_0: sigmadelta_port_t = 0;
#[doc = "< SIGMADELTA port max"]
pub const sigmadelta_port_t_SIGMADELTA_PORT_MAX: sigmadelta_port_t = 1;
#[doc = " @brief SIGMADELTA port number, the max port number is (SIGMADELTA_NUM_MAX -1)."]
pub type sigmadelta_port_t = c_types::c_uint;
#[doc = "< Sigma-delta channel 0"]
pub const sigmadelta_channel_t_SIGMADELTA_CHANNEL_0: sigmadelta_channel_t = 0;
#[doc = "< Sigma-delta channel 1"]
pub const sigmadelta_channel_t_SIGMADELTA_CHANNEL_1: sigmadelta_channel_t = 1;
#[doc = "< Sigma-delta channel 2"]
pub const sigmadelta_channel_t_SIGMADELTA_CHANNEL_2: sigmadelta_channel_t = 2;
#[doc = "< Sigma-delta channel 3"]
pub const sigmadelta_channel_t_SIGMADELTA_CHANNEL_3: sigmadelta_channel_t = 3;
#[doc = "< Sigma-delta channel max"]
pub const sigmadelta_channel_t_SIGMADELTA_CHANNEL_MAX: sigmadelta_channel_t = 4;
#[doc = " @brief Sigma-delta channel list"]
pub type sigmadelta_channel_t = c_types::c_uint;
#[doc = " @brief Sigma-delta configure struct"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigmadelta_config_t {
    #[doc = "< Sigma-delta channel number"]
    pub channel: sigmadelta_channel_t,
    #[doc = "< Sigma-delta duty, duty ranges from -128 to 127."]
    pub sigmadelta_duty: i8,
    #[doc = "< Sigma-delta prescale, prescale ranges from 0 to 255."]
    pub sigmadelta_prescale: u8,
    #[doc = "< Sigma-delta output io number, refer to gpio.h for more details."]
    pub sigmadelta_gpio: u8,
}
impl Default for sigmadelta_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Configure Sigma-delta channel"]
    #[doc = ""]
    #[doc = " @param  config Pointer of Sigma-delta channel configuration struct"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE sigmadelta driver already initialized"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn sigmadelta_config(config: *const sigmadelta_config_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set Sigma-delta channel duty."]
    #[doc = ""]
    #[doc = "        This function is used to set Sigma-delta channel duty,"]
    #[doc = "        If you add a capacitor between the output pin and ground,"]
    #[doc = "        the average output voltage will be Vdc = VDDIO / 256 * duty + VDDIO/2,"]
    #[doc = "        where VDDIO is the power supply voltage."]
    #[doc = ""]
    #[doc = " @param channel Sigma-delta channel number"]
    #[doc = " @param duty Sigma-delta duty of one channel, the value ranges from -128 to 127, recommended range is -90 ~ 90."]
    #[doc = "             The waveform is more like a random one in this range."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE sigmadelta driver has not been initialized"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn sigmadelta_set_duty(channel: sigmadelta_channel_t, duty: i8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set Sigma-delta channel's clock pre-scale value."]
    #[doc = "        The source clock is APP_CLK, 80MHz. The clock frequency of the sigma-delta channel is APP_CLK / pre_scale"]
    #[doc = ""]
    #[doc = " @param channel Sigma-delta channel number"]
    #[doc = " @param prescale The divider of source clock, ranges from 0 to 255"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE sigmadelta driver has not been initialized"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn sigmadelta_set_prescale(channel: sigmadelta_channel_t, prescale: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set Sigma-delta signal output pin"]
    #[doc = ""]
    #[doc = " @param channel Sigma-delta channel number"]
    #[doc = " @param gpio_num GPIO number of output pin."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_STATE sigmadelta driver has not been initialized"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn sigmadelta_set_pin(channel: sigmadelta_channel_t, gpio_num: gpio_num_t) -> esp_err_t;
}
pub type slave_transaction_cb_t =
    ::core::option::Option<unsafe extern "C" fn(trans: *mut spi_slave_transaction_t)>;
#[doc = " @brief This is a configuration for a SPI host acting as a slave device."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_slave_interface_config_t {
    #[doc = "< CS GPIO pin for this device"]
    pub spics_io_num: c_types::c_int,
    #[doc = "< Bitwise OR of SPI_SLAVE_* flags"]
    pub flags: u32,
    #[doc = "< Transaction queue size. This sets how many transactions can be 'in the air' (queued using spi_slave_queue_trans but not yet finished using spi_slave_get_trans_result) at the same time"]
    pub queue_size: c_types::c_int,
    #[doc = "< SPI mode, representing a pair of (CPOL, CPHA) configuration:"]
    #[doc = "- 0: (0, 0)"]
    #[doc = "- 1: (0, 1)"]
    #[doc = "- 2: (1, 0)"]
    #[doc = "- 3: (1, 1)"]
    pub mode: u8,
    #[doc = "< Callback called after the SPI registers are loaded with new data."]
    #[doc = ""]
    #[doc = "  This callback is called within interrupt"]
    #[doc = "  context should be in IRAM for best"]
    #[doc = "  performance, see \"Transferring Speed\""]
    #[doc = "  section in the SPI Master documentation for"]
    #[doc = "  full details. If not, the callback may crash"]
    #[doc = "  during flash operation when the driver is"]
    #[doc = "  initialized with ESP_INTR_FLAG_IRAM."]
    pub post_setup_cb: slave_transaction_cb_t,
    #[doc = "< Callback called after a transaction is done."]
    #[doc = ""]
    #[doc = "  This callback is called within interrupt"]
    #[doc = "  context should be in IRAM for best"]
    #[doc = "  performance, see \"Transferring Speed\""]
    #[doc = "  section in the SPI Master documentation for"]
    #[doc = "  full details. If not, the callback may crash"]
    #[doc = "  during flash operation when the driver is"]
    #[doc = "  initialized with ESP_INTR_FLAG_IRAM."]
    pub post_trans_cb: slave_transaction_cb_t,
}
#[doc = " This structure describes one SPI transaction"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spi_slave_transaction_t {
    #[doc = "< Total data length, in bits"]
    pub length: size_t,
    #[doc = "< Transaction data length, in bits"]
    pub trans_len: size_t,
    #[doc = "< Pointer to transmit buffer, or NULL for no MOSI phase"]
    pub tx_buffer: *const c_types::c_void,
    #[doc = "< Pointer to receive buffer, or NULL for no MISO phase."]
    #[doc = " When the DMA is anabled, must start at WORD boundary (``rx_buffer%4==0``),"]
    #[doc = " and has length of a multiple of 4 bytes."]
    pub rx_buffer: *mut c_types::c_void,
    #[doc = "< User-defined variable. Can be used to store eg transaction ID."]
    pub user: *mut c_types::c_void,
}
impl Default for spi_slave_transaction_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize a SPI bus as a slave interface"]
    #[doc = ""]
    #[doc = " @warning SPI0/1 is not supported"]
    #[doc = ""]
    #[doc = " @param host          SPI peripheral to use as a SPI slave interface"]
    #[doc = " @param bus_config    Pointer to a spi_bus_config_t struct specifying how the host should be initialized"]
    #[doc = " @param slave_config  Pointer to a spi_slave_interface_config_t struct specifying the details for the slave interface"]
    #[doc = " @param dma_chan      - Selecting a DMA channel for an SPI bus allows transactions on the bus with size only limited by the amount of internal memory."]
    #[doc = "                      - Selecting SPI_DMA_DISABLED limits the size of transactions."]
    #[doc = "                      - Set to SPI_DMA_DISABLED if only the SPI flash uses this bus."]
    #[doc = "                      - Set to SPI_DMA_CH_AUTO to let the driver to allocate the DMA channel."]
    #[doc = ""]
    #[doc = " @warning If a DMA channel is selected, any transmit and receive buffer used should be allocated in"]
    #[doc = "          DMA-capable memory."]
    #[doc = ""]
    #[doc = " @warning The ISR of SPI is always executed on the core which calls this"]
    #[doc = "          function. Never starve the ISR on this core or the SPI transactions will not"]
    #[doc = "          be handled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if configuration is invalid"]
    #[doc = "         - ESP_ERR_INVALID_STATE if host already is in use"]
    #[doc = "         - ESP_ERR_NOT_FOUND     if there is no available DMA channel"]
    #[doc = "         - ESP_ERR_NO_MEM        if out of memory"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_slave_initialize(
        host: spi_host_device_t,
        bus_config: *const spi_bus_config_t,
        slave_config: *const spi_slave_interface_config_t,
        dma_chan: spi_dma_chan_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Free a SPI bus claimed as a SPI slave interface"]
    #[doc = ""]
    #[doc = " @param host SPI peripheral to free"]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_ERR_INVALID_STATE if not all devices on the bus are freed"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_slave_free(host: spi_host_device_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Queue a SPI transaction for execution"]
    #[doc = ""]
    #[doc = " Queues a SPI transaction to be executed by this slave device. (The transaction queue size was specified when the slave"]
    #[doc = " device was initialised via spi_slave_initialize.) This function may block if the queue is full (depending on the"]
    #[doc = " ticks_to_wait parameter). No SPI operation is directly initiated by this function, the next queued transaction"]
    #[doc = " will happen when the master initiates a SPI transaction by pulling down CS and sending out clock signals."]
    #[doc = ""]
    #[doc = " This function hands over ownership of the buffers in ``trans_desc`` to the SPI slave driver; the application is"]
    #[doc = " not to access this memory until ``spi_slave_queue_trans`` is called to hand ownership back to the application."]
    #[doc = ""]
    #[doc = " @param host SPI peripheral that is acting as a slave"]
    #[doc = " @param trans_desc Description of transaction to execute. Not const because we may want to write status back"]
    #[doc = "                   into the transaction description."]
    #[doc = " @param ticks_to_wait Ticks to wait until there's room in the queue; use portMAX_DELAY to"]
    #[doc = "                      never time out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_slave_queue_trans(
        host: spi_host_device_t,
        trans_desc: *const spi_slave_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the result of a SPI transaction queued earlier"]
    #[doc = ""]
    #[doc = " This routine will wait until a transaction to the given device (queued earlier with"]
    #[doc = " spi_slave_queue_trans) has succesfully completed. It will then return the description of the"]
    #[doc = " completed transaction so software can inspect the result and e.g. free the memory or"]
    #[doc = " re-use the buffers."]
    #[doc = ""]
    #[doc = " It is mandatory to eventually use this function for any transaction queued by ``spi_slave_queue_trans``."]
    #[doc = ""]
    #[doc = " @param host SPI peripheral to that is acting as a slave"]
    #[doc = " @param[out] trans_desc Pointer to variable able to contain a pointer to the description of the"]
    #[doc = "                   transaction that is executed"]
    #[doc = " @param ticks_to_wait Ticks to wait until there's a returned item; use portMAX_DELAY to never time"]
    #[doc = "                      out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_slave_get_trans_result(
        host: spi_host_device_t,
        trans_desc: *mut *mut spi_slave_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Do a SPI transaction"]
    #[doc = ""]
    #[doc = " Essentially does the same as spi_slave_queue_trans followed by spi_slave_get_trans_result. Do"]
    #[doc = " not use this when there is still a transaction queued that hasn't been finalized"]
    #[doc = " using spi_slave_get_trans_result."]
    #[doc = ""]
    #[doc = " @param host SPI peripheral to that is acting as a slave"]
    #[doc = " @param trans_desc Pointer to variable able to contain a pointer to the description of the"]
    #[doc = "                   transaction that is executed. Not const because we may want to write status back"]
    #[doc = "                   into the transaction description."]
    #[doc = " @param ticks_to_wait Ticks to wait until there's a returned item; use portMAX_DELAY to never time"]
    #[doc = "                      out."]
    #[doc = " @return"]
    #[doc = "         - ESP_ERR_INVALID_ARG   if parameter is invalid"]
    #[doc = "         - ESP_OK                on success"]
    pub fn spi_slave_transmit(
        host: spi_host_device_t,
        trans_desc: *mut spi_slave_transaction_t,
        ticks_to_wait: TickType_t,
    ) -> esp_err_t;
}
#[doc = " Group: T0 Control and configuration registers */"]
#[doc = "  Timer x configuration register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txconfig_reg_t {
    pub __bindgen_anon_1: timg_txconfig_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txconfig_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txconfig_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn reserved_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_use_xtal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_use_xtal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_alarm_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_alarm_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_11(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_11(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_divcnt_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_divcnt_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_divider(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_tx_divider(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_autoreload(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_autoreload(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_increase(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_increase(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved_0: u32,
        tx_use_xtal: u32,
        tx_alarm_en: u32,
        reserved_11: u32,
        tx_divcnt_rst: u32,
        tx_divider: u32,
        tx_autoreload: u32,
        tx_increase: u32,
        tx_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let reserved_0: u32 = unsafe { ::core::mem::transmute(reserved_0) };
            reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let tx_use_xtal: u32 = unsafe { ::core::mem::transmute(tx_use_xtal) };
            tx_use_xtal as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let tx_alarm_en: u32 = unsafe { ::core::mem::transmute(tx_alarm_en) };
            tx_alarm_en as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let reserved_11: u32 = unsafe { ::core::mem::transmute(reserved_11) };
            reserved_11 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tx_divcnt_rst: u32 = unsafe { ::core::mem::transmute(tx_divcnt_rst) };
            tx_divcnt_rst as u64
        });
        __bindgen_bitfield_unit.set(13usize, 16u8, {
            let tx_divider: u32 = unsafe { ::core::mem::transmute(tx_divider) };
            tx_divider as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let tx_autoreload: u32 = unsafe { ::core::mem::transmute(tx_autoreload) };
            tx_autoreload as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let tx_increase: u32 = unsafe { ::core::mem::transmute(tx_increase) };
            tx_increase as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let tx_en: u32 = unsafe { ::core::mem::transmute(tx_en) };
            tx_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txconfig_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txlo register"]
#[doc = "  Timer x current value, low 32 bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txlo_reg_t {
    pub __bindgen_anon_1: timg_txlo_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txlo_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txlo_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_lo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_tx_lo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_lo: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let tx_lo: u32 = unsafe { ::core::mem::transmute(tx_lo) };
            tx_lo as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txlo_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txhi register"]
#[doc = "  Timer $x current value, high 22 bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txhi_reg_t {
    pub __bindgen_anon_1: timg_txhi_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txhi_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txhi_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_hi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_tx_hi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_hi: u32, reserved_22: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let tx_hi: u32 = unsafe { ::core::mem::transmute(tx_hi) };
            tx_hi as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved_22: u32 = unsafe { ::core::mem::transmute(reserved_22) };
            reserved_22 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txhi_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txupdate register"]
#[doc = "  Write to copy current timer value to TIMGn_T$x_(LO/HI)_REG"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txupdate_reg_t {
    pub __bindgen_anon_1: timg_txupdate_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txupdate_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txupdate_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn reserved_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_update(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tx_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(reserved_0: u32, tx_update: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let reserved_0: u32 = unsafe { ::core::mem::transmute(reserved_0) };
            reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let tx_update: u32 = unsafe { ::core::mem::transmute(tx_update) };
            tx_update as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txupdate_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txalarmlo register"]
#[doc = "  Timer $x alarm value, low 32 bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txalarmlo_reg_t {
    pub __bindgen_anon_1: timg_txalarmlo_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txalarmlo_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txalarmlo_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_alarm_lo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_tx_alarm_lo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_alarm_lo: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let tx_alarm_lo: u32 = unsafe { ::core::mem::transmute(tx_alarm_lo) };
            tx_alarm_lo as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txalarmlo_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txalarmhi register"]
#[doc = "  Timer $x alarm value, high bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txalarmhi_reg_t {
    pub __bindgen_anon_1: timg_txalarmhi_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txalarmhi_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txalarmhi_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_alarm_hi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_tx_alarm_hi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_alarm_hi: u32,
        reserved_22: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let tx_alarm_hi: u32 = unsafe { ::core::mem::transmute(tx_alarm_hi) };
            tx_alarm_hi as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved_22: u32 = unsafe { ::core::mem::transmute(reserved_22) };
            reserved_22 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txalarmhi_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txloadlo register"]
#[doc = "  Timer $x reload value, low 32 bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txloadlo_reg_t {
    pub __bindgen_anon_1: timg_txloadlo_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txloadlo_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txloadlo_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_load_lo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_tx_load_lo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_load_lo: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let tx_load_lo: u32 = unsafe { ::core::mem::transmute(tx_load_lo) };
            tx_load_lo as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txloadlo_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txloadhi register"]
#[doc = "  Timer $x reload value, high 22 bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txloadhi_reg_t {
    pub __bindgen_anon_1: timg_txloadhi_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txloadhi_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txloadhi_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_load_hi(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_tx_load_hi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_22(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_22(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tx_load_hi: u32,
        reserved_22: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let tx_load_hi: u32 = unsafe { ::core::mem::transmute(tx_load_hi) };
            tx_load_hi as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved_22: u32 = unsafe { ::core::mem::transmute(reserved_22) };
            reserved_22 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txloadhi_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of txload register"]
#[doc = "  Write to reload timer from TIMG_T$x_(LOADLOLOADHI)_REG"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_txload_reg_t {
    pub __bindgen_anon_1: timg_txload_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_txload_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_txload_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn tx_load(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_tx_load(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(tx_load: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let tx_load: u32 = unsafe { ::core::mem::transmute(tx_load) };
            tx_load as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_txload_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Group: WDT Control and configuration registers */"]
#[doc = "  Watchdog timer configuration register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig0_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig0_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig0_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig0_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn reserved_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_appcpu_reset_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_appcpu_reset_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_procpu_reset_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_procpu_reset_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_flashboot_mod_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_flashboot_mod_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_sys_reset_length(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_sys_reset_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_cpu_reset_length(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_cpu_reset_length(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_use_xtal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_use_xtal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_conf_update_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_conf_update_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_stg3(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_stg2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_stg1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_stg0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved_0: u32,
        wdt_appcpu_reset_en: u32,
        wdt_procpu_reset_en: u32,
        wdt_flashboot_mod_en: u32,
        wdt_sys_reset_length: u32,
        wdt_cpu_reset_length: u32,
        wdt_use_xtal: u32,
        wdt_conf_update_en: u32,
        wdt_stg3: u32,
        wdt_stg2: u32,
        wdt_stg1: u32,
        wdt_stg0: u32,
        wdt_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let reserved_0: u32 = unsafe { ::core::mem::transmute(reserved_0) };
            reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let wdt_appcpu_reset_en: u32 = unsafe { ::core::mem::transmute(wdt_appcpu_reset_en) };
            wdt_appcpu_reset_en as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let wdt_procpu_reset_en: u32 = unsafe { ::core::mem::transmute(wdt_procpu_reset_en) };
            wdt_procpu_reset_en as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let wdt_flashboot_mod_en: u32 = unsafe { ::core::mem::transmute(wdt_flashboot_mod_en) };
            wdt_flashboot_mod_en as u64
        });
        __bindgen_bitfield_unit.set(15usize, 3u8, {
            let wdt_sys_reset_length: u32 = unsafe { ::core::mem::transmute(wdt_sys_reset_length) };
            wdt_sys_reset_length as u64
        });
        __bindgen_bitfield_unit.set(18usize, 3u8, {
            let wdt_cpu_reset_length: u32 = unsafe { ::core::mem::transmute(wdt_cpu_reset_length) };
            wdt_cpu_reset_length as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let wdt_use_xtal: u32 = unsafe { ::core::mem::transmute(wdt_use_xtal) };
            wdt_use_xtal as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let wdt_conf_update_en: u32 = unsafe { ::core::mem::transmute(wdt_conf_update_en) };
            wdt_conf_update_en as u64
        });
        __bindgen_bitfield_unit.set(23usize, 2u8, {
            let wdt_stg3: u32 = unsafe { ::core::mem::transmute(wdt_stg3) };
            wdt_stg3 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let wdt_stg2: u32 = unsafe { ::core::mem::transmute(wdt_stg2) };
            wdt_stg2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let wdt_stg1: u32 = unsafe { ::core::mem::transmute(wdt_stg1) };
            wdt_stg1 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let wdt_stg0: u32 = unsafe { ::core::mem::transmute(wdt_stg0) };
            wdt_stg0 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let wdt_en: u32 = unsafe { ::core::mem::transmute(wdt_en) };
            wdt_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig0_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtconfig1 register"]
#[doc = "  Watchdog timer prescaler register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig1_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig1_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig1_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig1_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_divcnt_rst(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_divcnt_rst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_clk_prescale(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_clk_prescale(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        wdt_divcnt_rst: u32,
        reserved_1: u32,
        wdt_clk_prescale: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let wdt_divcnt_rst: u32 = unsafe { ::core::mem::transmute(wdt_divcnt_rst) };
            wdt_divcnt_rst as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let reserved_1: u32 = unsafe { ::core::mem::transmute(reserved_1) };
            reserved_1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let wdt_clk_prescale: u32 = unsafe { ::core::mem::transmute(wdt_clk_prescale) };
            wdt_clk_prescale as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig1_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtconfig2 register"]
#[doc = "  Watchdog timer stage 0 timeout value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig2_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig2_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig2_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig2_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_stg0_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg0_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_stg0_hold: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_stg0_hold: u32 = unsafe { ::core::mem::transmute(wdt_stg0_hold) };
            wdt_stg0_hold as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig2_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtconfig3 register"]
#[doc = "  Watchdog timer stage 1 timeout value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig3_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig3_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig3_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig3_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_stg1_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg1_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_stg1_hold: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_stg1_hold: u32 = unsafe { ::core::mem::transmute(wdt_stg1_hold) };
            wdt_stg1_hold as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig3_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtconfig4 register"]
#[doc = "  Watchdog timer stage 2 timeout value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig4_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig4_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig4_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig4_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_stg2_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg2_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_stg2_hold: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_stg2_hold: u32 = unsafe { ::core::mem::transmute(wdt_stg2_hold) };
            wdt_stg2_hold as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig4_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtconfig5 register"]
#[doc = "  Watchdog timer stage 3 timeout value"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtconfig5_reg_t {
    pub __bindgen_anon_1: timg_wdtconfig5_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtconfig5_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtconfig5_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_stg3_hold(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_stg3_hold(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_stg3_hold: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_stg3_hold: u32 = unsafe { ::core::mem::transmute(wdt_stg3_hold) };
            wdt_stg3_hold as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtconfig5_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtfeed register"]
#[doc = "  Write to feed the watchdog timer"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtfeed_reg_t {
    pub __bindgen_anon_1: timg_wdtfeed_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtfeed_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtfeed_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_feed(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_feed(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_feed: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_feed: u32 = unsafe { ::core::mem::transmute(wdt_feed) };
            wdt_feed as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtfeed_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of wdtwprotect register"]
#[doc = "  Watchdog write protect register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_wdtwprotect_reg_t {
    pub __bindgen_anon_1: timg_wdtwprotect_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_wdtwprotect_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_wdtwprotect_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn wdt_wkey(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_wkey(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(wdt_wkey: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let wdt_wkey: u32 = unsafe { ::core::mem::transmute(wdt_wkey) };
            wdt_wkey as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_wdtwprotect_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Group: RTC CALI Control and configuration registers */"]
#[doc = "  RTC calibration configure register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_rtccalicfg_reg_t {
    pub __bindgen_anon_1: timg_rtccalicfg_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_rtccalicfg_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_rtccalicfg_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn reserved_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_start_cycling(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_start_cycling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_clk_sel(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_clk_sel(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_rdy(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_rdy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_max(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_max(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_start(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_start(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved_0: u32,
        rtc_cali_start_cycling: u32,
        rtc_cali_clk_sel: u32,
        rtc_cali_rdy: u32,
        rtc_cali_max: u32,
        rtc_cali_start: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let reserved_0: u32 = unsafe { ::core::mem::transmute(reserved_0) };
            reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let rtc_cali_start_cycling: u32 =
                unsafe { ::core::mem::transmute(rtc_cali_start_cycling) };
            rtc_cali_start_cycling as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let rtc_cali_clk_sel: u32 = unsafe { ::core::mem::transmute(rtc_cali_clk_sel) };
            rtc_cali_clk_sel as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let rtc_cali_rdy: u32 = unsafe { ::core::mem::transmute(rtc_cali_rdy) };
            rtc_cali_rdy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 15u8, {
            let rtc_cali_max: u32 = unsafe { ::core::mem::transmute(rtc_cali_max) };
            rtc_cali_max as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let rtc_cali_start: u32 = unsafe { ::core::mem::transmute(rtc_cali_start) };
            rtc_cali_start as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_rtccalicfg_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of rtccalicfg1 register"]
#[doc = "  RTC calibration configure1 register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_rtccalicfg1_reg_t {
    pub __bindgen_anon_1: timg_rtccalicfg1_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_rtccalicfg1_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_rtccalicfg1_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn rtc_cali_cycling_data_vld(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_cycling_data_vld(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_value(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_value(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_cali_cycling_data_vld: u32,
        reserved_1: u32,
        rtc_cali_value: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rtc_cali_cycling_data_vld: u32 =
                unsafe { ::core::mem::transmute(rtc_cali_cycling_data_vld) };
            rtc_cali_cycling_data_vld as u64
        });
        __bindgen_bitfield_unit.set(1usize, 6u8, {
            let reserved_1: u32 = unsafe { ::core::mem::transmute(reserved_1) };
            reserved_1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let rtc_cali_value: u32 = unsafe { ::core::mem::transmute(rtc_cali_value) };
            rtc_cali_value as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_rtccalicfg1_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of rtccalicfg2 register"]
#[doc = "  Timer group calibration register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_rtccalicfg2_reg_t {
    pub __bindgen_anon_1: timg_rtccalicfg2_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_rtccalicfg2_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_rtccalicfg2_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn rtc_cali_timeout(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_timeout(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_1(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_timeout_rst_cnt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_timeout_rst_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn rtc_cali_timeout_thres(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_rtc_cali_timeout_thres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rtc_cali_timeout: u32,
        reserved_1: u32,
        rtc_cali_timeout_rst_cnt: u32,
        rtc_cali_timeout_thres: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rtc_cali_timeout: u32 = unsafe { ::core::mem::transmute(rtc_cali_timeout) };
            rtc_cali_timeout as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let reserved_1: u32 = unsafe { ::core::mem::transmute(reserved_1) };
            reserved_1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 4u8, {
            let rtc_cali_timeout_rst_cnt: u32 =
                unsafe { ::core::mem::transmute(rtc_cali_timeout_rst_cnt) };
            rtc_cali_timeout_rst_cnt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let rtc_cali_timeout_thres: u32 =
                unsafe { ::core::mem::transmute(rtc_cali_timeout_thres) };
            rtc_cali_timeout_thres as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_rtccalicfg2_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Group: Interrupt registers */"]
#[doc = "  Interrupt enable bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_int_ena_timers_reg_t {
    pub __bindgen_anon_1: timg_int_ena_timers_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_int_ena_timers_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_int_ena_timers_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn t0_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_t0_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_int_ena(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_int_ena(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        t0_int_ena: u32,
        wdt_int_ena: u32,
        reserved_2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let t0_int_ena: u32 = unsafe { ::core::mem::transmute(t0_int_ena) };
            t0_int_ena as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wdt_int_ena: u32 = unsafe { ::core::mem::transmute(wdt_int_ena) };
            wdt_int_ena as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved_2: u32 = unsafe { ::core::mem::transmute(reserved_2) };
            reserved_2 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_int_ena_timers_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of int_raw_timers register"]
#[doc = "  Raw interrupt status"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_int_raw_timers_reg_t {
    pub __bindgen_anon_1: timg_int_raw_timers_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_int_raw_timers_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_int_raw_timers_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn t0_int_raw(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_t0_int_raw(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_int_raw(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_int_raw(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        t0_int_raw: u32,
        wdt_int_raw: u32,
        reserved_2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let t0_int_raw: u32 = unsafe { ::core::mem::transmute(t0_int_raw) };
            t0_int_raw as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wdt_int_raw: u32 = unsafe { ::core::mem::transmute(wdt_int_raw) };
            wdt_int_raw as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved_2: u32 = unsafe { ::core::mem::transmute(reserved_2) };
            reserved_2 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_int_raw_timers_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of int_st_timers register"]
#[doc = "  Masked interrupt status"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_int_st_timers_reg_t {
    pub __bindgen_anon_1: timg_int_st_timers_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_int_st_timers_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_int_st_timers_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn t0_int_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_t0_int_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_int_st(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_int_st(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        t0_int_st: u32,
        wdt_int_st: u32,
        reserved_2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let t0_int_st: u32 = unsafe { ::core::mem::transmute(t0_int_st) };
            t0_int_st as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wdt_int_st: u32 = unsafe { ::core::mem::transmute(wdt_int_st) };
            wdt_int_st as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved_2: u32 = unsafe { ::core::mem::transmute(reserved_2) };
            reserved_2 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_int_st_timers_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Type of int_clr_timers register"]
#[doc = "  Interrupt clear bits"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_int_clr_timers_reg_t {
    pub __bindgen_anon_1: timg_int_clr_timers_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_int_clr_timers_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_int_clr_timers_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn t0_int_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_t0_int_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_int_clr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_int_clr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_2(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        t0_int_clr: u32,
        wdt_int_clr: u32,
        reserved_2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let t0_int_clr: u32 = unsafe { ::core::mem::transmute(t0_int_clr) };
            t0_int_clr as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let wdt_int_clr: u32 = unsafe { ::core::mem::transmute(wdt_int_clr) };
            wdt_int_clr as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved_2: u32 = unsafe { ::core::mem::transmute(reserved_2) };
            reserved_2 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_int_clr_timers_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Group: Version register */"]
#[doc = "  Timer version control register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_ntimers_date_reg_t {
    pub __bindgen_anon_1: timg_ntimers_date_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_ntimers_date_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_ntimers_date_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn ntimgs_date(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_ntimgs_date(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_28(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_28(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ntimgs_date: u32,
        reserved_28: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let ntimgs_date: u32 = unsafe { ::core::mem::transmute(ntimgs_date) };
            ntimgs_date as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved_28: u32 = unsafe { ::core::mem::transmute(reserved_28) };
            reserved_28 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_ntimers_date_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Group: Clock configuration registers */"]
#[doc = "  Timer group clock gate register"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union timg_regclk_reg_t {
    pub __bindgen_anon_1: timg_regclk_reg_t__bindgen_ty_1,
    pub val: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct timg_regclk_reg_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl timg_regclk_reg_t__bindgen_ty_1 {
    #[inline]
    pub fn reserved_0(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn wdt_clk_is_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wdt_clk_is_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timer_clk_is_active(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timer_clk_is_active(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn clk_en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clk_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reserved_0: u32,
        wdt_clk_is_active: u32,
        timer_clk_is_active: u32,
        clk_en: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 29u8, {
            let reserved_0: u32 = unsafe { ::core::mem::transmute(reserved_0) };
            reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let wdt_clk_is_active: u32 = unsafe { ::core::mem::transmute(wdt_clk_is_active) };
            wdt_clk_is_active as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let timer_clk_is_active: u32 = unsafe { ::core::mem::transmute(timer_clk_is_active) };
            timer_clk_is_active as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let clk_en: u32 = unsafe { ::core::mem::transmute(clk_en) };
            clk_en as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for timg_regclk_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timg_hwtimer_reg_t {
    pub config: timg_txconfig_reg_t,
    pub lo: timg_txlo_reg_t,
    pub hi: timg_txhi_reg_t,
    pub update: timg_txupdate_reg_t,
    pub alarmlo: timg_txalarmlo_reg_t,
    pub alarmhi: timg_txalarmhi_reg_t,
    pub loadlo: timg_txloadlo_reg_t,
    pub loadhi: timg_txloadhi_reg_t,
    pub load: timg_txload_reg_t,
}
impl Default for timg_hwtimer_reg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct timg_dev_t {
    pub hw_timer: [timg_hwtimer_reg_t; 1usize],
    pub reserved_024: [u32; 9usize],
    pub wdtconfig0: timg_wdtconfig0_reg_t,
    pub wdtconfig1: timg_wdtconfig1_reg_t,
    pub wdtconfig2: timg_wdtconfig2_reg_t,
    pub wdtconfig3: timg_wdtconfig3_reg_t,
    pub wdtconfig4: timg_wdtconfig4_reg_t,
    pub wdtconfig5: timg_wdtconfig5_reg_t,
    pub wdtfeed: timg_wdtfeed_reg_t,
    pub wdtwprotect: timg_wdtwprotect_reg_t,
    pub rtccalicfg: timg_rtccalicfg_reg_t,
    pub rtccalicfg1: timg_rtccalicfg1_reg_t,
    pub int_ena_timers: timg_int_ena_timers_reg_t,
    pub int_raw_timers: timg_int_raw_timers_reg_t,
    pub int_st_timers: timg_int_st_timers_reg_t,
    pub int_clr_timers: timg_int_clr_timers_reg_t,
    pub rtccalicfg2: timg_rtccalicfg2_reg_t,
    pub reserved_084: [u32; 29usize],
    pub ntimers_date: timg_ntimers_date_reg_t,
    pub regclk: timg_regclk_reg_t,
}
impl Default for timg_dev_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut TIMERG0: timg_dev_t;
}
extern "C" {
    pub static mut TIMERG1: timg_dev_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_group_signal_conn_t {
    pub groups: [timer_group_signal_conn_t__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_group_signal_conn_t__bindgen_ty_1 {
    pub module: periph_module_t,
    pub t0_irq_id: c_types::c_int,
}
impl Default for timer_group_signal_conn_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for timer_group_signal_conn_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static timer_group_periph_signals: timer_group_signal_conn_t;
}
#[doc = "<Hw timer group 0"]
pub const timer_group_t_TIMER_GROUP_0: timer_group_t = 0;
#[doc = "<Hw timer group 1"]
pub const timer_group_t_TIMER_GROUP_1: timer_group_t = 1;
pub const timer_group_t_TIMER_GROUP_MAX: timer_group_t = 2;
#[doc = " @brief Selects a Timer-Group out of 2 available groups"]
pub type timer_group_t = c_types::c_uint;
#[doc = "<Select timer0 of GROUPx"]
pub const timer_idx_t_TIMER_0: timer_idx_t = 0;
pub const timer_idx_t_TIMER_MAX: timer_idx_t = 1;
#[doc = " @brief Select a hardware timer from timer groups"]
pub type timer_idx_t = c_types::c_uint;
#[doc = "< Descending Count from cnt.high|cnt.low"]
pub const timer_count_dir_t_TIMER_COUNT_DOWN: timer_count_dir_t = 0;
#[doc = "< Ascending Count from Zero"]
pub const timer_count_dir_t_TIMER_COUNT_UP: timer_count_dir_t = 1;
pub const timer_count_dir_t_TIMER_COUNT_MAX: timer_count_dir_t = 2;
#[doc = " @brief Decides the direction of counter"]
pub type timer_count_dir_t = c_types::c_uint;
#[doc = "<Pause timer counter"]
pub const timer_start_t_TIMER_PAUSE: timer_start_t = 0;
#[doc = "<Start timer counter"]
pub const timer_start_t_TIMER_START: timer_start_t = 1;
#[doc = " @brief Decides whether timer is on or paused"]
pub type timer_start_t = c_types::c_uint;
#[doc = "< interrupt of timer 0"]
pub const timer_intr_t_TIMER_INTR_T0: timer_intr_t = 1;
#[doc = "< interrupt of watchdog"]
pub const timer_intr_t_TIMER_INTR_WDT: timer_intr_t = 2;
pub const timer_intr_t_TIMER_INTR_NONE: timer_intr_t = 0;
#[doc = " @brief Interrupt types of the timer."]
pub type timer_intr_t = c_types::c_uint;
#[doc = "< Disable timer alarm"]
pub const timer_alarm_t_TIMER_ALARM_DIS: timer_alarm_t = 0;
#[doc = "< Enable timer alarm"]
pub const timer_alarm_t_TIMER_ALARM_EN: timer_alarm_t = 1;
pub const timer_alarm_t_TIMER_ALARM_MAX: timer_alarm_t = 2;
#[doc = " @brief Decides whether to enable alarm mode"]
pub type timer_alarm_t = c_types::c_uint;
#[doc = "< Interrupt mode: level mode"]
pub const timer_intr_mode_t_TIMER_INTR_LEVEL: timer_intr_mode_t = 0;
pub const timer_intr_mode_t_TIMER_INTR_MAX: timer_intr_mode_t = 1;
#[doc = " @brief Select interrupt type if running in alarm mode."]
pub type timer_intr_mode_t = c_types::c_uint;
#[doc = "< Disable auto-reload: hardware will not load counter value after an alarm event"]
pub const timer_autoreload_t_TIMER_AUTORELOAD_DIS: timer_autoreload_t = 0;
#[doc = "< Enable auto-reload: hardware will load counter value after an alarm event"]
pub const timer_autoreload_t_TIMER_AUTORELOAD_EN: timer_autoreload_t = 1;
pub const timer_autoreload_t_TIMER_AUTORELOAD_MAX: timer_autoreload_t = 2;
#[doc = " @brief Select if Alarm needs to be loaded by software or automatically reload by hardware."]
pub type timer_autoreload_t = c_types::c_uint;
#[doc = "< Select APB as the source clock"]
pub const timer_src_clk_t_TIMER_SRC_CLK_APB: timer_src_clk_t = 0;
#[doc = "< Select XTAL as the source clock"]
pub const timer_src_clk_t_TIMER_SRC_CLK_XTAL: timer_src_clk_t = 1;
#[doc = " @brief Select timer source clock."]
pub type timer_src_clk_t = c_types::c_uint;
#[doc = " @brief Data structure with timer's configuration settings"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_config_t {
    #[doc = "< Timer alarm enable"]
    pub alarm_en: timer_alarm_t,
    #[doc = "< Counter enable"]
    pub counter_en: timer_start_t,
    #[doc = "< Interrupt mode"]
    pub intr_type: timer_intr_mode_t,
    #[doc = "< Counter direction"]
    pub counter_dir: timer_count_dir_t,
    #[doc = "< Timer auto-reload"]
    pub auto_reload: timer_autoreload_t,
    #[doc = "< Counter clock divider. The divider's range is from from 2 to 65536."]
    pub divider: u32,
    #[doc = "< Use XTAL as source clock."]
    pub clk_src: timer_src_clk_t,
}
impl Default for timer_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief Interrupt handle callback function. User need to retrun a bool value"]
#[doc = "        in callback."]
#[doc = ""]
#[doc = " @return"]
#[doc = "     - True Do task yield at the end of ISR"]
#[doc = "     - False Not do task yield at the end of ISR"]
#[doc = ""]
#[doc = " @note If you called FreeRTOS functions in callback, you need to return true or false based on"]
#[doc = "       the retrun value of argument `pxHigherPriorityTaskWoken`."]
#[doc = "       For example, `xQueueSendFromISR` is called in callback, if the return value `pxHigherPriorityTaskWoken`"]
#[doc = "       of any FreeRTOS calls is pdTRUE, return true; otherwise return false."]
pub type timer_isr_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void) -> bool>;
#[doc = " @brief Interrupt handle, used in order to free the isr after use."]
#[doc = " Aliases to an int handle for now."]
pub type timer_isr_handle_t = intr_handle_t;
extern "C" {
    #[doc = " @brief Read the counter value of hardware timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param timer_val Pointer to accept timer counter value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_get_counter_value(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        timer_val: *mut u64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Read the counter value of hardware timer, in unit of a given scale."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param time Pointer, type of double*, to accept timer counter value, in seconds."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_get_counter_time_sec(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        time: *mut f64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set counter value to hardware timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param load_val Counter value to write to the hardware timer."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_counter_value(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        load_val: u64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Start the counter of hardware timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_start(group_num: timer_group_t, timer_num: timer_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Pause the counter of hardware timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_pause(group_num: timer_group_t, timer_num: timer_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set counting mode for hardware timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param counter_dir Counting direction of timer, count-up or count-down"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_counter_mode(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        counter_dir: timer_count_dir_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable or disable counter reload function when alarm event occurs."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param reload Counter reload mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_auto_reload(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        reload: timer_autoreload_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set hardware divider of the source clock to the timer group."]
    #[doc = " By default, the source clock is APB clock running at 80 MHz."]
    #[doc = " For more information, please check Chapter Reset and Clock in Chip Technical Reference Manual."]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param divider Timer clock divider value. The divider's range is from from 2 to 65536."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_divider(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        divider: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set timer alarm value."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param alarm_value A 64-bit value to set the alarm value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_alarm_value(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        alarm_value: u64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get timer alarm value."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param alarm_value Pointer of A 64-bit value to accept the alarm value."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_get_alarm_value(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        alarm_value: *mut u64,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable or disable generation of timer alarm events."]
    #[doc = ""]
    #[doc = " @param group_num Timer group, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param alarm_en To enable or disable timer alarm function."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_set_alarm(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        alarm_en: timer_alarm_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Add ISR handle callback for the corresponding timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number"]
    #[doc = " @param timer_num Timer index of timer group"]
    #[doc = " @param isr_handler Interrupt handler function, it is a callback function."]
    #[doc = " @param arg Parameter for handler function"]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = ""]
    #[doc = " @note This ISR handler will be called from an ISR."]
    #[doc = "       This ISR handler do not need to handle interrupt status, and should be kept short."]
    #[doc = "       If you want to realize some specific applications or write the whole ISR, you can"]
    #[doc = "       call timer_isr_register(...) to register ISR."]
    #[doc = ""]
    #[doc = "       The callback should return a bool value to determine whether need to do YIELD at"]
    #[doc = "       the end of the ISR."]
    #[doc = ""]
    #[doc = "       If the intr_alloc_flags value ESP_INTR_FLAG_IRAM is set,"]
    #[doc = "       the handler function must be declared with IRAM_ATTR attribute"]
    #[doc = "       and can only call functions in IRAM or ROM. It cannot call other timer APIs."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_isr_callback_add(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        isr_handler: timer_isr_t,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Remove ISR handle callback for the corresponding timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number"]
    #[doc = " @param timer_num Timer index of timer group"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_isr_callback_remove(group_num: timer_group_t, timer_num: timer_idx_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register Timer interrupt handler, the handler is an ISR."]
    #[doc = "        The handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number"]
    #[doc = " @param timer_num Timer index of timer group"]
    #[doc = " @param fn Interrupt handler function."]
    #[doc = " @param arg Parameter for handler function"]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param handle Pointer to return handle. If non-NULL, a handle for the interrupt will"]
    #[doc = "        be returned here."]
    #[doc = ""]
    #[doc = " @note If use this function to reigster ISR, you need to write the whole ISR."]
    #[doc = "       In the interrupt handler, you need to call timer_spinlock_take(..) before"]
    #[doc = "       your handling, and call timer_spinlock_give(...) after your handling."]
    #[doc = ""]
    #[doc = "       If the intr_alloc_flags value ESP_INTR_FLAG_IRAM is set,"]
    #[doc = "       the handler function must be declared with IRAM_ATTR attribute"]
    #[doc = "       and can only call functions in IRAM or ROM. It cannot call other timer APIs."]
    #[doc = "       Use direct register access to configure timers from inside the ISR in this case."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_isr_register(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut timer_isr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initializes and configure the timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param config Pointer to timer initialization parameters."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_init(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        config: *const timer_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deinitializes the timer."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_deinit(group_num: timer_group_t, timer_num: timer_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get timer configure value."]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index, 0 for hw_timer[0] & 1 for hw_timer[1]"]
    #[doc = " @param config Pointer of struct to accept timer parameters."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_get_config(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        config: *mut timer_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable timer group interrupt, by enable mask"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param intr_mask Timer interrupt enable mask."]
    #[doc = "          - TIMER_INTR_T0: t0 interrupt"]
    #[doc = "          - TIMER_INTR_T1: t1 interrupt"]
    #[doc = "          - TIMER_INTR_WDT: watchdog interrupt"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_group_intr_enable(group_num: timer_group_t, intr_mask: timer_intr_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable timer group interrupt, by disable mask"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param intr_mask Timer interrupt disable mask."]
    #[doc = "          - TIMER_INTR_T0: t0 interrupt"]
    #[doc = "          - TIMER_INTR_T1: t1 interrupt"]
    #[doc = "          - TIMER_INTR_WDT: watchdog interrupt"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_group_intr_disable(group_num: timer_group_t, intr_mask: timer_intr_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable timer interrupt"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_enable_intr(group_num: timer_group_t, timer_num: timer_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable timer interrupt"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_disable_intr(group_num: timer_group_t, timer_num: timer_idx_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clear timer interrupt status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    pub fn timer_group_intr_clr_in_isr(group_num: timer_group_t, timer_num: timer_idx_t);
}
extern "C" {
    #[doc = " @brief Clear timer interrupt status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    pub fn timer_group_clr_intr_status_in_isr(group_num: timer_group_t, timer_num: timer_idx_t);
}
extern "C" {
    #[doc = " @brief Enable alarm interrupt, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    pub fn timer_group_enable_alarm_in_isr(group_num: timer_group_t, timer_num: timer_idx_t);
}
extern "C" {
    #[doc = " @brief Get the current counter value, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Counter value"]
    pub fn timer_group_get_counter_value_in_isr(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
    ) -> u64;
}
extern "C" {
    #[doc = " @brief Set the alarm threshold for the timer, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = " @param alarm_val Alarm threshold."]
    #[doc = ""]
    pub fn timer_group_set_alarm_value_in_isr(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        alarm_val: u64,
    );
}
extern "C" {
    #[doc = " @brief Enable/disable a counter, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index."]
    #[doc = " @param counter_en Enable/disable."]
    #[doc = ""]
    pub fn timer_group_set_counter_enable_in_isr(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
        counter_en: timer_start_t,
    );
}
extern "C" {
    #[doc = " @brief Get the masked interrupt status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Interrupt status"]
    pub fn timer_group_intr_get_in_isr(group_num: timer_group_t) -> timer_intr_t;
}
extern "C" {
    #[doc = " @brief Get interrupt status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - Interrupt status"]
    pub fn timer_group_get_intr_status_in_isr(group_num: timer_group_t) -> u32;
}
extern "C" {
    #[doc = " @brief Clear the masked interrupt status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param intr_mask Masked interrupt."]
    #[doc = ""]
    pub fn timer_group_clr_intr_sta_in_isr(group_num: timer_group_t, intr_mask: timer_intr_t);
}
extern "C" {
    #[doc = " @brief Get auto reload enable status, just used in ISR"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = " @param timer_num Timer index"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - True Auto reload enabled"]
    #[doc = "     - False Auto reload disabled"]
    pub fn timer_group_get_auto_reload_in_isr(
        group_num: timer_group_t,
        timer_num: timer_idx_t,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Take timer spinlock to enter critical protect"]
    #[doc = ""]
    #[doc = "  @note Deprecated, the recommended way is to use ISR callbacks instead, see timer_group_example_main"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_spinlock_take(group_num: timer_group_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Give timer spinlock to exit critical protect"]
    #[doc = ""]
    #[doc = "  @note Deprecated, the recommended way is to use ISR callbacks instead, see timer_group_example_main"]
    #[doc = ""]
    #[doc = " @param group_num Timer group number, 0 for TIMERG0 or 1 for TIMERG1"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn timer_spinlock_give(group_num: timer_group_t) -> esp_err_t;
}
#[doc = " @brief UART port number, can be UART_NUM_0 ~ (UART_NUM_MAX -1)."]
pub type uart_port_t = c_types::c_int;
#[doc = "< mode: regular UART mode"]
pub const uart_mode_t_UART_MODE_UART: uart_mode_t = 0;
#[doc = "< mode: half duplex RS485 UART mode control by RTS pin"]
pub const uart_mode_t_UART_MODE_RS485_HALF_DUPLEX: uart_mode_t = 1;
#[doc = "< mode: IRDA  UART mode"]
pub const uart_mode_t_UART_MODE_IRDA: uart_mode_t = 2;
#[doc = "< mode: RS485 collision detection UART mode (used for test purposes)"]
pub const uart_mode_t_UART_MODE_RS485_COLLISION_DETECT: uart_mode_t = 3;
#[doc = "< mode: application control RS485 UART mode (used for test purposes)"]
pub const uart_mode_t_UART_MODE_RS485_APP_CTRL: uart_mode_t = 4;
#[doc = " @brief UART mode selection"]
pub type uart_mode_t = c_types::c_uint;
#[doc = "< word length: 5bits"]
pub const uart_word_length_t_UART_DATA_5_BITS: uart_word_length_t = 0;
#[doc = "< word length: 6bits"]
pub const uart_word_length_t_UART_DATA_6_BITS: uart_word_length_t = 1;
#[doc = "< word length: 7bits"]
pub const uart_word_length_t_UART_DATA_7_BITS: uart_word_length_t = 2;
#[doc = "< word length: 8bits"]
pub const uart_word_length_t_UART_DATA_8_BITS: uart_word_length_t = 3;
pub const uart_word_length_t_UART_DATA_BITS_MAX: uart_word_length_t = 4;
#[doc = " @brief UART word length constants"]
pub type uart_word_length_t = c_types::c_uint;
#[doc = "< stop bit: 1bit"]
pub const uart_stop_bits_t_UART_STOP_BITS_1: uart_stop_bits_t = 1;
#[doc = "< stop bit: 1.5bits"]
pub const uart_stop_bits_t_UART_STOP_BITS_1_5: uart_stop_bits_t = 2;
#[doc = "< stop bit: 2bits"]
pub const uart_stop_bits_t_UART_STOP_BITS_2: uart_stop_bits_t = 3;
pub const uart_stop_bits_t_UART_STOP_BITS_MAX: uart_stop_bits_t = 4;
#[doc = " @brief UART stop bits number"]
pub type uart_stop_bits_t = c_types::c_uint;
#[doc = "< Disable UART parity"]
pub const uart_parity_t_UART_PARITY_DISABLE: uart_parity_t = 0;
#[doc = "< Enable UART even parity"]
pub const uart_parity_t_UART_PARITY_EVEN: uart_parity_t = 2;
#[doc = "< Enable UART odd parity"]
pub const uart_parity_t_UART_PARITY_ODD: uart_parity_t = 3;
#[doc = " @brief UART parity constants"]
pub type uart_parity_t = c_types::c_uint;
#[doc = "< disable hardware flow control"]
pub const uart_hw_flowcontrol_t_UART_HW_FLOWCTRL_DISABLE: uart_hw_flowcontrol_t = 0;
#[doc = "< enable RX hardware flow control (rts)"]
pub const uart_hw_flowcontrol_t_UART_HW_FLOWCTRL_RTS: uart_hw_flowcontrol_t = 1;
#[doc = "< enable TX hardware flow control (cts)"]
pub const uart_hw_flowcontrol_t_UART_HW_FLOWCTRL_CTS: uart_hw_flowcontrol_t = 2;
#[doc = "< enable hardware flow control"]
pub const uart_hw_flowcontrol_t_UART_HW_FLOWCTRL_CTS_RTS: uart_hw_flowcontrol_t = 3;
pub const uart_hw_flowcontrol_t_UART_HW_FLOWCTRL_MAX: uart_hw_flowcontrol_t = 4;
#[doc = " @brief UART hardware flow control modes"]
pub type uart_hw_flowcontrol_t = c_types::c_uint;
#[doc = "< Disable UART signal inverse"]
pub const uart_signal_inv_t_UART_SIGNAL_INV_DISABLE: uart_signal_inv_t = 0;
#[doc = "< inverse the UART irda_tx signal"]
pub const uart_signal_inv_t_UART_SIGNAL_IRDA_TX_INV: uart_signal_inv_t = 1;
#[doc = "< inverse the UART irda_rx signal"]
pub const uart_signal_inv_t_UART_SIGNAL_IRDA_RX_INV: uart_signal_inv_t = 2;
#[doc = "< inverse the UART rxd signal"]
pub const uart_signal_inv_t_UART_SIGNAL_RXD_INV: uart_signal_inv_t = 4;
#[doc = "< inverse the UART cts signal"]
pub const uart_signal_inv_t_UART_SIGNAL_CTS_INV: uart_signal_inv_t = 8;
#[doc = "< inverse the UART dsr signal"]
pub const uart_signal_inv_t_UART_SIGNAL_DSR_INV: uart_signal_inv_t = 16;
#[doc = "< inverse the UART txd signal"]
pub const uart_signal_inv_t_UART_SIGNAL_TXD_INV: uart_signal_inv_t = 32;
#[doc = "< inverse the UART rts signal"]
pub const uart_signal_inv_t_UART_SIGNAL_RTS_INV: uart_signal_inv_t = 64;
#[doc = "< inverse the UART dtr signal"]
pub const uart_signal_inv_t_UART_SIGNAL_DTR_INV: uart_signal_inv_t = 128;
#[doc = " @brief UART signal bit map"]
pub type uart_signal_inv_t = c_types::c_uint;
#[doc = "< UART source clock from APB"]
pub const uart_sclk_t_UART_SCLK_APB: uart_sclk_t = 0;
#[doc = "< UART source clock from RTC"]
pub const uart_sclk_t_UART_SCLK_RTC: uart_sclk_t = 1;
#[doc = "< UART source clock from XTAL"]
pub const uart_sclk_t_UART_SCLK_XTAL: uart_sclk_t = 2;
#[doc = " @brief UART source clock"]
pub type uart_sclk_t = c_types::c_uint;
#[doc = " @brief UART AT cmd char configuration parameters"]
#[doc = "        Note that this function may different on different chip. Please refer to the TRM at confirguration."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uart_at_cmd_t {
    #[doc = "< UART AT cmd char"]
    pub cmd_char: u8,
    #[doc = "< AT cmd char repeat number"]
    pub char_num: u8,
    #[doc = "< gap time(in baud-rate) between AT cmd char"]
    pub gap_tout: u32,
    #[doc = "< the idle time(in baud-rate) between the non AT char and first AT char"]
    pub pre_idle: u32,
    #[doc = "< the idle time(in baud-rate) between the last AT char and the none AT char"]
    pub post_idle: u32,
}
#[doc = " @brief UART software flow control configuration parameters"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uart_sw_flowctrl_t {
    #[doc = "< Xon flow control char"]
    pub xon_char: u8,
    #[doc = "< Xoff flow control char"]
    pub xoff_char: u8,
    #[doc = "< If the software flow control is enabled and the data amount in rxfifo is less than xon_thrd, an xon_char will be sent"]
    pub xon_thrd: u8,
    #[doc = "< If the software flow control is enabled and the data amount in rxfifo is more than xoff_thrd, an xoff_char will be sent"]
    pub xoff_thrd: u8,
}
#[doc = " @brief UART configuration parameters for uart_param_config function"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uart_config_t {
    #[doc = "< UART baud rate"]
    pub baud_rate: c_types::c_int,
    #[doc = "< UART byte size"]
    pub data_bits: uart_word_length_t,
    #[doc = "< UART parity mode"]
    pub parity: uart_parity_t,
    #[doc = "< UART stop bits"]
    pub stop_bits: uart_stop_bits_t,
    #[doc = "< UART HW flow control mode (cts/rts)"]
    pub flow_ctrl: uart_hw_flowcontrol_t,
    #[doc = "< UART HW RTS threshold"]
    pub rx_flow_ctrl_thresh: u8,
    pub __bindgen_anon_1: uart_config_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uart_config_t__bindgen_ty_1 {
    #[doc = "< UART source clock selection"]
    pub source_clk: uart_sclk_t,
    #[doc = "< Deprecated method to select ref tick clock source, set source_clk field instead"]
    pub use_ref_tick: bool,
}
impl Default for uart_config_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for uart_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " @brief UART interrupt configuration parameters for uart_intr_config function"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uart_intr_config_t {
    #[doc = "< UART interrupt enable mask, choose from UART_XXXX_INT_ENA_M under UART_INT_ENA_REG(i), connect with bit-or operator"]
    pub intr_enable_mask: u32,
    #[doc = "< UART timeout interrupt threshold (unit: time of sending one byte)"]
    pub rx_timeout_thresh: u8,
    #[doc = "< UART TX empty interrupt threshold."]
    pub txfifo_empty_intr_thresh: u8,
    #[doc = "< UART RX full interrupt threshold."]
    pub rxfifo_full_thresh: u8,
}
#[doc = "< UART data event"]
pub const uart_event_type_t_UART_DATA: uart_event_type_t = 0;
#[doc = "< UART break event"]
pub const uart_event_type_t_UART_BREAK: uart_event_type_t = 1;
#[doc = "< UART RX buffer full event"]
pub const uart_event_type_t_UART_BUFFER_FULL: uart_event_type_t = 2;
#[doc = "< UART FIFO overflow event"]
pub const uart_event_type_t_UART_FIFO_OVF: uart_event_type_t = 3;
#[doc = "< UART RX frame error event"]
pub const uart_event_type_t_UART_FRAME_ERR: uart_event_type_t = 4;
#[doc = "< UART RX parity event"]
pub const uart_event_type_t_UART_PARITY_ERR: uart_event_type_t = 5;
#[doc = "< UART TX data and break event"]
pub const uart_event_type_t_UART_DATA_BREAK: uart_event_type_t = 6;
#[doc = "< UART pattern detected"]
pub const uart_event_type_t_UART_PATTERN_DET: uart_event_type_t = 7;
#[doc = "< UART event max index"]
pub const uart_event_type_t_UART_EVENT_MAX: uart_event_type_t = 8;
#[doc = " @brief UART event types used in the ring buffer"]
pub type uart_event_type_t = c_types::c_uint;
#[doc = " @brief Event structure used in UART event queue"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uart_event_t {
    #[doc = "< UART event type"]
    pub type_: uart_event_type_t,
    #[doc = "< UART data size for UART_DATA event"]
    pub size: size_t,
    #[doc = "< UART data read timeout flag for UART_DATA event (no new data received during configured RX TOUT)*/"]
    pub timeout_flag: bool,
}
impl Default for uart_event_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type uart_isr_handle_t = intr_handle_t;
extern "C" {
    #[doc = " @brief Install UART driver and set the UART to the default configuration."]
    #[doc = ""]
    #[doc = " UART ISR handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " @note  Rx_buffer_size should be greater than UART_FIFO_LEN. Tx_buffer_size should be either zero or greater than UART_FIFO_LEN."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param rx_buffer_size UART RX ring buffer size."]
    #[doc = " @param tx_buffer_size UART TX ring buffer size."]
    #[doc = "        If set to zero, driver will not use TX buffer, TX function will block task until all data have been sent out."]
    #[doc = " @param queue_size UART event queue size/depth."]
    #[doc = " @param uart_queue UART event queue handle (out param). On success, a new queue handle is written here to provide"]
    #[doc = "        access to UART events. If set to NULL, driver will not use an event queue."]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info. Do not set ESP_INTR_FLAG_IRAM here"]
    #[doc = "        (the driver's ISR handler is not located in IRAM)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_driver_install(
        uart_num: uart_port_t,
        rx_buffer_size: c_types::c_int,
        tx_buffer_size: c_types::c_int,
        queue_size: c_types::c_int,
        uart_queue: *mut QueueHandle_t,
        intr_alloc_flags: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Uninstall UART driver."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_driver_delete(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Checks whether the driver is installed or not"]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - true  driver is installed"]
    #[doc = "     - false driver is not installed"]
    pub fn uart_is_driver_installed(uart_num: uart_port_t) -> bool;
}
extern "C" {
    #[doc = " @brief Set UART data bits."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param data_bit UART data bits"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_word_length(uart_num: uart_port_t, data_bit: uart_word_length_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the UART data bit configuration."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param data_bit Pointer to accept value of UART data bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL  Parameter error"]
    #[doc = "     - ESP_OK    Success, result will be put in (*data_bit)"]
    pub fn uart_get_word_length(
        uart_num: uart_port_t,
        data_bit: *mut uart_word_length_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART stop bits."]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param stop_bits  UART stop bits"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Fail"]
    pub fn uart_set_stop_bits(uart_num: uart_port_t, stop_bits: uart_stop_bits_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the UART stop bit configuration."]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param stop_bits  Pointer to accept value of UART stop bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_OK   Success, result will be put in (*stop_bit)"]
    pub fn uart_get_stop_bits(uart_num: uart_port_t, stop_bits: *mut uart_stop_bits_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART parity mode."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param parity_mode the enum of uart parity configuration"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL  Parameter error"]
    #[doc = "     - ESP_OK    Success"]
    pub fn uart_set_parity(uart_num: uart_port_t, parity_mode: uart_parity_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the UART parity mode configuration."]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param parity_mode Pointer to accept value of UART parity mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL  Parameter error"]
    #[doc = "     - ESP_OK    Success, result will be put in (*parity_mode)"]
    #[doc = ""]
    pub fn uart_get_parity(uart_num: uart_port_t, parity_mode: *mut uart_parity_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART baud rate."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param baudrate UART baud rate."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_OK   Success"]
    pub fn uart_set_baudrate(uart_num: uart_port_t, baudrate: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the UART baud rate configuration."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param baudrate Pointer to accept value of UART baud rate"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_OK   Success, result will be put in (*baudrate)"]
    #[doc = ""]
    pub fn uart_get_baudrate(uart_num: uart_port_t, baudrate: *mut u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART line inverse mode"]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param inverse_mask Choose the wires that need to be inverted. Using the ORred mask of `uart_signal_inv_t`"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_line_inverse(uart_num: uart_port_t, inverse_mask: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set hardware flow control."]
    #[doc = ""]
    #[doc = " @param uart_num   UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param flow_ctrl Hardware flow control mode"]
    #[doc = " @param rx_thresh Threshold of Hardware RX flow control (0 ~ UART_FIFO_LEN)."]
    #[doc = "        Only when UART_HW_FLOWCTRL_RTS is set, will the rx_thresh value be set."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_hw_flow_ctrl(
        uart_num: uart_port_t,
        flow_ctrl: uart_hw_flowcontrol_t,
        rx_thresh: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set software flow control."]
    #[doc = ""]
    #[doc = " @param uart_num   UART_NUM_0, UART_NUM_1 or UART_NUM_2"]
    #[doc = " @param enable     switch on or off"]
    #[doc = " @param rx_thresh_xon  low water mark"]
    #[doc = " @param rx_thresh_xoff high water mark"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_sw_flow_ctrl(
        uart_num: uart_port_t,
        enable: bool,
        rx_thresh_xon: u8,
        rx_thresh_xoff: u8,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the UART hardware flow control configuration."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param flow_ctrl Option for different flow control mode."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_OK   Success, result will be put in (*flow_ctrl)"]
    pub fn uart_get_hw_flow_ctrl(
        uart_num: uart_port_t,
        flow_ctrl: *mut uart_hw_flowcontrol_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clear UART interrupt status"]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param clr_mask  Bit mask of the interrupt status to be cleared."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_clear_intr_status(uart_num: uart_port_t, clr_mask: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART interrupt enable"]
    #[doc = ""]
    #[doc = " @param uart_num     UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param enable_mask  Bit mask of the enable bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_enable_intr_mask(uart_num: uart_port_t, enable_mask: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clear UART interrupt enable bits"]
    #[doc = ""]
    #[doc = " @param uart_num      UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param disable_mask  Bit mask of the disable bits."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_disable_intr_mask(uart_num: uart_port_t, disable_mask: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable UART RX interrupt (RX_FULL & RX_TIMEOUT INTERRUPT)"]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_enable_rx_intr(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable UART RX interrupt (RX_FULL & RX_TIMEOUT INTERRUPT)"]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_disable_rx_intr(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Disable UART TX interrupt (TXFIFO_EMPTY INTERRUPT)"]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_disable_tx_intr(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Enable UART TX interrupt (TXFIFO_EMPTY INTERRUPT)"]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param enable  1: enable; 0: disable"]
    #[doc = " @param thresh  Threshold of TX interrupt, 0 ~ UART_FIFO_LEN"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_enable_tx_intr(
        uart_num: uart_port_t,
        enable: c_types::c_int,
        thresh: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Register UART interrupt handler (ISR)."]
    #[doc = ""]
    #[doc = " @note UART ISR handler will be attached to the same CPU core that this function is running on."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param fn  Interrupt handler function."]
    #[doc = " @param arg parameter for handler function"]
    #[doc = " @param intr_alloc_flags Flags used to allocate the interrupt. One or multiple (ORred)"]
    #[doc = "        ESP_INTR_FLAG_* values. See esp_intr_alloc.h for more info."]
    #[doc = " @param handle Pointer to return handle. If non-NULL, a handle for the interrupt will"]
    #[doc = "        be returned here."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_isr_register(
        uart_num: uart_port_t,
        fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        arg: *mut c_types::c_void,
        intr_alloc_flags: c_types::c_int,
        handle: *mut uart_isr_handle_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Free UART interrupt handler registered by uart_isr_register. Must be called on the same core as"]
    #[doc = " uart_isr_register was called."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_isr_free(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Assign signals of a UART peripheral to GPIO pins"]
    #[doc = ""]
    #[doc = " @note If the GPIO number configured for a UART signal matches one of the"]
    #[doc = "       IOMUX signals for that GPIO, the signal will be connected directly"]
    #[doc = "       via the IOMUX. Otherwise the GPIO and signal will be connected via"]
    #[doc = "       the GPIO Matrix. For example, if on an ESP32 the call"]
    #[doc = "       `uart_set_pin(0, 1, 3, -1, -1)` is performed, as GPIO1 is UART0's"]
    #[doc = "       default TX pin and GPIO3 is UART0's default RX pin, both will be"]
    #[doc = "       connected to respectively U0TXD and U0RXD through the IOMUX, totally"]
    #[doc = "       bypassing the GPIO matrix."]
    #[doc = "       The check is performed on a per-pin basis. Thus, it is possible to have"]
    #[doc = "       RX pin binded to a GPIO through the GPIO matrix, whereas TX is binded"]
    #[doc = "       to its GPIO through the IOMUX."]
    #[doc = ""]
    #[doc = " @note Internal signal can be output to multiple GPIO pads."]
    #[doc = "       Only one GPIO pad can connect with input signal."]
    #[doc = ""]
    #[doc = " @param uart_num   UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param tx_io_num  UART TX pin GPIO number."]
    #[doc = " @param rx_io_num  UART RX pin GPIO number."]
    #[doc = " @param rts_io_num UART RTS pin GPIO number."]
    #[doc = " @param cts_io_num UART CTS pin GPIO number."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_pin(
        uart_num: uart_port_t,
        tx_io_num: c_types::c_int,
        rx_io_num: c_types::c_int,
        rts_io_num: c_types::c_int,
        cts_io_num: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Manually set the UART RTS pin level."]
    #[doc = " @note  UART must be configured with hardware flow control disabled."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param level    1: RTS output low (active); 0: RTS output high (block)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_rts(uart_num: uart_port_t, level: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Manually set the UART DTR pin level."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param level    1: DTR output low; 0: DTR output high"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_dtr(uart_num: uart_port_t, level: c_types::c_int) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART idle interval after tx FIFO is empty"]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param idle_num idle interval after tx FIFO is empty(unit: the time it takes to send one bit"]
    #[doc = "        under current baudrate)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_set_tx_idle_num(uart_num: uart_port_t, idle_num: u16) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set UART configuration parameters."]
    #[doc = ""]
    #[doc = " @param uart_num    UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param uart_config UART parameter settings"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_param_config(uart_num: uart_port_t, uart_config: *const uart_config_t)
        -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure UART interrupts."]
    #[doc = ""]
    #[doc = " @param uart_num  UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param intr_conf UART interrupt settings"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_intr_config(
        uart_num: uart_port_t,
        intr_conf: *const uart_intr_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Wait until UART TX FIFO is empty."]
    #[doc = ""]
    #[doc = " @param uart_num      UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param ticks_to_wait Timeout, count in RTOS ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_ERR_TIMEOUT  Timeout"]
    pub fn uart_wait_tx_done(uart_num: uart_port_t, ticks_to_wait: TickType_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Send data to the UART port from a given buffer and length."]
    #[doc = ""]
    #[doc = " This function will not wait for enough space in TX FIFO. It will just fill the available TX FIFO and return when the FIFO is full."]
    #[doc = " @note This function should only be used when UART TX buffer is not enabled."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param buffer data buffer address"]
    #[doc = " @param len    data length to send"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1)  Parameter error"]
    #[doc = "     - OTHERS (>=0) The number of bytes pushed to the TX FIFO"]
    pub fn uart_tx_chars(
        uart_num: uart_port_t,
        buffer: *const c_types::c_char,
        len: u32,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Send data to the UART port from a given buffer and length,"]
    #[doc = ""]
    #[doc = " If the UART driver's parameter 'tx_buffer_size' is set to zero:"]
    #[doc = " This function will not return until all the data have been sent out, or at least pushed into TX FIFO."]
    #[doc = ""]
    #[doc = " Otherwise, if the 'tx_buffer_size' > 0, this function will return after copying all the data to tx ring buffer,"]
    #[doc = " UART ISR will then move data from the ring buffer to TX FIFO gradually."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param src   data buffer address"]
    #[doc = " @param size  data length to send"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) Parameter error"]
    #[doc = "     - OTHERS (>=0) The number of bytes pushed to the TX FIFO"]
    pub fn uart_write_bytes(
        uart_num: uart_port_t,
        src: *const c_types::c_void,
        size: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Send data to the UART port from a given buffer and length,"]
    #[doc = ""]
    #[doc = " If the UART driver's parameter 'tx_buffer_size' is set to zero:"]
    #[doc = " This function will not return until all the data and the break signal have been sent out."]
    #[doc = " After all data is sent out, send a break signal."]
    #[doc = ""]
    #[doc = " Otherwise, if the 'tx_buffer_size' > 0, this function will return after copying all the data to tx ring buffer,"]
    #[doc = " UART ISR will then move data from the ring buffer to TX FIFO gradually."]
    #[doc = " After all data sent out, send a break signal."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param src   data buffer address"]
    #[doc = " @param size  data length to send"]
    #[doc = " @param brk_len break signal duration(unit: the time it takes to send one bit at current baudrate)"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) Parameter error"]
    #[doc = "     - OTHERS (>=0) The number of bytes pushed to the TX FIFO"]
    pub fn uart_write_bytes_with_break(
        uart_num: uart_port_t,
        src: *const c_types::c_void,
        size: size_t,
        brk_len: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief UART read bytes from UART buffer"]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param buf     pointer to the buffer."]
    #[doc = " @param length  data length"]
    #[doc = " @param ticks_to_wait sTimeout, count in RTOS ticks"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - (-1) Error"]
    #[doc = "     - OTHERS (>=0) The number of bytes read from UART FIFO"]
    pub fn uart_read_bytes(
        uart_num: uart_port_t,
        buf: *mut c_types::c_void,
        length: u32,
        ticks_to_wait: TickType_t,
    ) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Alias of uart_flush_input."]
    #[doc = "        UART ring buffer flush. This will discard all data in the UART RX buffer."]
    #[doc = " @note  Instead of waiting the data sent out, this function will clear UART rx buffer."]
    #[doc = "        In order to send all the data in tx FIFO, we can use uart_wait_tx_done function."]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_flush(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Clear input buffer, discard all the data is in the ring-buffer."]
    #[doc = " @note  In order to send all the data in tx FIFO, we can use uart_wait_tx_done function."]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_flush_input(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   UART get RX ring buffer cached data length"]
    #[doc = ""]
    #[doc = " @param   uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param   size Pointer of size_t to accept cached data length"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_get_buffered_data_len(uart_num: uart_port_t, size: *mut size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief   UART disable pattern detect function."]
    #[doc = "          Designed for applications like 'AT commands'."]
    #[doc = "          When the hardware detects a series of one same character, the interrupt will be triggered."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_disable_pattern_det_intr(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief UART enable pattern detect function."]
    #[doc = "        Designed for applications like 'AT commands'."]
    #[doc = "        When the hardware detect a series of one same character, the interrupt will be triggered."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number."]
    #[doc = " @param pattern_chr character of the pattern."]
    #[doc = " @param chr_num number of the character, 8bit value."]
    #[doc = " @param chr_tout timeout of the interval between each pattern characters, 16bit value, unit is the baud-rate cycle you configured."]
    #[doc = "        When the duration is more than this value, it will not take this data as at_cmd char."]
    #[doc = " @param post_idle idle time after the last pattern character, 16bit value, unit is the baud-rate cycle you configured."]
    #[doc = "        When the duration is less than this value, it will not take the previous data as the last at_cmd char"]
    #[doc = " @param pre_idle idle time before the first pattern character, 16bit value, unit is the baud-rate cycle you configured."]
    #[doc = "        When the duration is less than this value, it will not take this data as the first at_cmd char."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_FAIL Parameter error"]
    pub fn uart_enable_pattern_det_baud_intr(
        uart_num: uart_port_t,
        pattern_chr: c_types::c_char,
        chr_num: u8,
        chr_tout: c_types::c_int,
        post_idle: c_types::c_int,
        pre_idle: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Return the nearest detected pattern position in buffer."]
    #[doc = "        The positions of the detected pattern are saved in a queue,"]
    #[doc = "        this function will dequeue the first pattern position and move the pointer to next pattern position."]
    #[doc = " @note  If the RX buffer is full and flow control is not enabled,"]
    #[doc = "        the detected pattern may not be found in the rx buffer due to overflow."]
    #[doc = ""]
    #[doc = "        The following APIs will modify the pattern position info:"]
    #[doc = "        uart_flush_input, uart_read_bytes, uart_driver_delete, uart_pop_pattern_pos"]
    #[doc = "        It is the application's responsibility to ensure atomic access to the pattern queue and the rx data buffer"]
    #[doc = "        when using pattern detect feature."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @return"]
    #[doc = "     - (-1) No pattern found for current index or parameter error"]
    #[doc = "     - others the pattern position in rx buffer."]
    pub fn uart_pattern_pop_pos(uart_num: uart_port_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Return the nearest detected pattern position in buffer."]
    #[doc = "        The positions of the detected pattern are saved in a queue,"]
    #[doc = "        This function do nothing to the queue."]
    #[doc = " @note  If the RX buffer is full and flow control is not enabled,"]
    #[doc = "        the detected pattern may not be found in the rx buffer due to overflow."]
    #[doc = ""]
    #[doc = "        The following APIs will modify the pattern position info:"]
    #[doc = "        uart_flush_input, uart_read_bytes, uart_driver_delete, uart_pop_pattern_pos"]
    #[doc = "        It is the application's responsibility to ensure atomic access to the pattern queue and the rx data buffer"]
    #[doc = "        when using pattern detect feature."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @return"]
    #[doc = "     - (-1) No pattern found for current index or parameter error"]
    #[doc = "     - others the pattern position in rx buffer."]
    pub fn uart_pattern_get_pos(uart_num: uart_port_t) -> c_types::c_int;
}
extern "C" {
    #[doc = " @brief Allocate a new memory with the given length to save record the detected pattern position in rx buffer."]
    #[doc = ""]
    #[doc = " @param uart_num UART port number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param queue_length Max queue length for the detected pattern."]
    #[doc = "        If the queue length is not large enough, some pattern positions might be lost."]
    #[doc = "        Set this value to the maximum number of patterns that could be saved in data buffer at the same time."]
    #[doc = " @return"]
    #[doc = "     - ESP_ERR_NO_MEM No enough memory"]
    #[doc = "     - ESP_ERR_INVALID_STATE Driver not installed"]
    #[doc = "     - ESP_FAIL Parameter error"]
    #[doc = "     - ESP_OK Success"]
    pub fn uart_pattern_queue_reset(
        uart_num: uart_port_t,
        queue_length: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief UART set communication mode"]
    #[doc = ""]
    #[doc = " @note  This function must be executed after uart_driver_install(), when the driver object is initialized."]
    #[doc = " @param uart_num     Uart number to configure, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param mode UART    UART mode to set"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn uart_set_mode(uart_num: uart_port_t, mode: uart_mode_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set uart threshold value for RX fifo full"]
    #[doc = " @note If application is using higher baudrate and it is observed that bytes"]
    #[doc = "       in hardware RX fifo are overwritten then this threshold can be reduced"]
    #[doc = ""]
    #[doc = " @param uart_num UART_NUM_0, UART_NUM_1 or UART_NUM_2"]
    #[doc = " @param threshold Threshold value above which RX fifo full interrupt is generated"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_INVALID_STATE Driver is not installed"]
    pub fn uart_set_rx_full_threshold(
        uart_num: uart_port_t,
        threshold: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set uart threshold values for TX fifo empty"]
    #[doc = ""]
    #[doc = " @param uart_num UART_NUM_0, UART_NUM_1 or UART_NUM_2"]
    #[doc = " @param threshold Threshold value below which TX fifo empty interrupt is generated"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK   Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_INVALID_STATE Driver is not installed"]
    pub fn uart_set_tx_empty_threshold(
        uart_num: uart_port_t,
        threshold: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief UART set threshold timeout for TOUT feature"]
    #[doc = ""]
    #[doc = " @param uart_num     Uart number to configure, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param tout_thresh  This parameter defines timeout threshold in uart symbol periods. The maximum value of threshold is 126."]
    #[doc = "        tout_thresh = 1, defines TOUT interrupt timeout equal to transmission time of one symbol (~11 bit) on current baudrate."]
    #[doc = "        If the time is expired the UART_RXFIFO_TOUT_INT interrupt is triggered. If tout_thresh == 0,"]
    #[doc = "        the TOUT feature is disabled."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "     - ESP_ERR_INVALID_STATE Driver is not installed"]
    pub fn uart_set_rx_timeout(uart_num: uart_port_t, tout_thresh: u8) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Returns collision detection flag for RS485 mode"]
    #[doc = "        Function returns the collision detection flag into variable pointed by collision_flag."]
    #[doc = "        *collision_flag = true, if collision detected else it is equal to false."]
    #[doc = "        This function should be executed when actual transmission is completed (after uart_write_bytes())."]
    #[doc = ""]
    #[doc = " @param uart_num  Uart number to configure the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param collision_flag Pointer to variable of type bool to return collision flag."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success"]
    #[doc = "     - ESP_ERR_INVALID_ARG Parameter error"]
    pub fn uart_get_collision_flag(uart_num: uart_port_t, collision_flag: *mut bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Set the number of RX pin signal edges for light sleep wakeup"]
    #[doc = ""]
    #[doc = " UART can be used to wake up the system from light sleep. This feature works"]
    #[doc = " by counting the number of positive edges on RX pin and comparing the count to"]
    #[doc = " the threshold. When the count exceeds the threshold, system is woken up from"]
    #[doc = " light sleep. This function allows setting the threshold value."]
    #[doc = ""]
    #[doc = " Stop bit and parity bits (if enabled) also contribute to the number of edges."]
    #[doc = " For example, letter 'a' with ASCII code 97 is encoded as 0100001101 on the wire"]
    #[doc = " (with 8n1 configuration), start and stop bits included. This sequence has 3"]
    #[doc = " positive edges (transitions from 0 to 1). Therefore, to wake up the system"]
    #[doc = " when 'a' is sent, set wakeup_threshold=3."]
    #[doc = ""]
    #[doc = " The character that triggers wakeup is not received by UART (i.e. it can not"]
    #[doc = " be obtained from UART FIFO). Depending on the baud rate, a few characters"]
    #[doc = " after that will also not be received. Note that when the chip enters and exits"]
    #[doc = " light sleep mode, APB frequency will be changing. To make sure that UART has"]
    #[doc = " correct baud rate all the time, select REF_TICK as UART clock source,"]
    #[doc = " by setting use_ref_tick field in uart_config_t to true."]
    #[doc = ""]
    #[doc = " @note in ESP32, the wakeup signal can only be input via IO_MUX (i.e."]
    #[doc = "       GPIO3 should be configured as function_1 to wake up UART0,"]
    #[doc = "       GPIO9 should be configured as function_5 to wake up UART1), UART2"]
    #[doc = "       does not support light sleep wakeup feature."]
    #[doc = ""]
    #[doc = " @param uart_num  UART number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param wakeup_threshold  number of RX edges for light sleep wakeup, value is 3 .. 0x3ff."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if uart_num is incorrect or wakeup_threshold is"]
    #[doc = "        outside of [3, 0x3ff] range."]
    pub fn uart_set_wakeup_threshold(
        uart_num: uart_port_t,
        wakeup_threshold: c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get the number of RX pin signal edges for light sleep wakeup."]
    #[doc = ""]
    #[doc = " See description of uart_set_wakeup_threshold for the explanation of UART"]
    #[doc = " wakeup feature."]
    #[doc = ""]
    #[doc = " @param uart_num  UART number, the max port number is (UART_NUM_MAX -1)."]
    #[doc = " @param[out] out_wakeup_threshold  output, set to the current value of wakeup"]
    #[doc = "                                   threshold for the given UART."]
    #[doc = " @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG if out_wakeup_threshold is NULL"]
    pub fn uart_get_wakeup_threshold(
        uart_num: uart_port_t,
        out_wakeup_threshold: *mut c_types::c_int,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Wait until UART tx memory empty and the last char send ok (polling mode)."]
    #[doc = ""]
    #[doc = " @param uart_num UART number"]
    #[doc = ""]
    #[doc = " * @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "      - ESP_FAIL Driver not installed"]
    pub fn uart_wait_tx_idle_polling(uart_num: uart_port_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure TX signal loop back to RX module, just for the test usage."]
    #[doc = ""]
    #[doc = " @param uart_num UART number"]
    #[doc = " @param loop_back_en Set ture to enable the loop back function, else set it false."]
    #[doc = ""]
    #[doc = " * @return"]
    #[doc = "      - ESP_OK on success"]
    #[doc = "      - ESP_ERR_INVALID_ARG Parameter error"]
    #[doc = "      - ESP_FAIL Driver not installed"]
    pub fn uart_set_loop_back(uart_num: uart_port_t, loop_back_en: bool) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Configure behavior of UART RX timeout interrupt."]
    #[doc = ""]
    #[doc = " When always_rx_timeout is true, timeout interrupt is triggered even if FIFO is full."]
    #[doc = " This function can cause extra timeout interrupts triggered only to send the timeout event."]
    #[doc = " Call this function only if you want to ensure timeout interrupt will always happen after a byte stream."]
    #[doc = ""]
    #[doc = " @param uart_num UART number"]
    #[doc = " @param always_rx_timeout_en Set to false enable the default behavior of timeout interrupt,"]
    #[doc = "                             set it to true to always trigger timeout interrupt."]
    #[doc = ""]
    pub fn uart_set_always_rx_timeout(uart_num: uart_port_t, always_rx_timeout_en: bool);
}
pub const uart_select_notif_t_UART_SELECT_READ_NOTIF: uart_select_notif_t = 0;
pub const uart_select_notif_t_UART_SELECT_WRITE_NOTIF: uart_select_notif_t = 1;
pub const uart_select_notif_t_UART_SELECT_ERROR_NOTIF: uart_select_notif_t = 2;
pub type uart_select_notif_t = c_types::c_uint;
pub type uart_select_notif_callback_t = ::core::option::Option<
    unsafe extern "C" fn(
        uart_num: uart_port_t,
        uart_select_notif: uart_select_notif_t,
        task_woken: *mut BaseType_t,
    ),
>;
extern "C" {
    #[doc = " @brief Set notification callback function for select() events"]
    #[doc = " @param uart_num UART port number"]
    #[doc = " @param uart_select_notif_callback callback function"]
    pub fn uart_set_select_notif_callback(
        uart_num: uart_port_t,
        uart_select_notif_callback: uart_select_notif_callback_t,
    );
}
extern "C" {
    #[doc = " @brief Get mutex guarding select() notifications"]
    pub fn uart_get_selectlock() -> *mut portMUX_TYPE;
}
extern "C" {
    pub static mut g_panic_abort: bool;
}
extern "C" {
    pub static mut g_exc_frames: [*mut c_types::c_void; 1usize];
}
pub type panic_info_dump_fn_t =
    ::core::option::Option<unsafe extern "C" fn(frame: *const c_types::c_void)>;
pub const panic_exception_t_PANIC_EXCEPTION_DEBUG: panic_exception_t = 0;
pub const panic_exception_t_PANIC_EXCEPTION_IWDT: panic_exception_t = 1;
pub const panic_exception_t_PANIC_EXCEPTION_TWDT: panic_exception_t = 2;
pub const panic_exception_t_PANIC_EXCEPTION_ABORT: panic_exception_t = 3;
pub const panic_exception_t_PANIC_EXCEPTION_FAULT: panic_exception_t = 4;
pub type panic_exception_t = c_types::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct panic_info_t {
    pub core: c_types::c_int,
    pub exception: panic_exception_t,
    pub reason: *const c_types::c_char,
    pub description: *const c_types::c_char,
    pub details: panic_info_dump_fn_t,
    pub state: panic_info_dump_fn_t,
    pub addr: *const c_types::c_void,
    pub frame: *const c_types::c_void,
    pub pseudo_excause: bool,
}
impl Default for panic_info_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn panic_print_char(c: c_types::c_char);
}
extern "C" {
    pub fn panic_print_str(str_: *const c_types::c_char);
}
extern "C" {
    pub fn panic_print_dec(d: c_types::c_int);
}
extern "C" {
    pub fn panic_print_hex(h: c_types::c_int);
}
extern "C" {
    pub fn panic_abort(details: *const c_types::c_char);
}
extern "C" {
    pub fn panic_arch_fill_info(frame: *mut c_types::c_void, info: *mut panic_info_t);
}
extern "C" {
    pub fn panic_soc_fill_info(frame: *mut c_types::c_void, info: *mut panic_info_t);
}
extern "C" {
    pub fn panic_print_registers(frame: *const c_types::c_void, core: c_types::c_int);
}
extern "C" {
    pub fn panic_print_backtrace(frame: *const c_types::c_void, core: c_types::c_int);
}
extern "C" {
    pub fn panic_get_address(frame: *const c_types::c_void) -> u32;
}
extern "C" {
    pub fn panic_set_address(frame: *mut c_types::c_void, addr: u32);
}
extern "C" {
    pub fn panic_get_cause(frame: *const c_types::c_void) -> u32;
}
extern "C" {
    #[doc = " @brief  Initializes core dump module internal data."]
    #[doc = ""]
    #[doc = " @note  Should be called at system startup."]
    pub fn esp_core_dump_init();
}
extern "C" {
    #[doc = " @brief  Saves core dump to flash."]
    #[doc = ""]
    #[doc = " The structure of data stored in flash is as follows:"]
    #[doc = ""]
    #[doc = " |  TOTAL_LEN |  VERSION    | TASKS_NUM   | TCB_SIZE |"]
    #[doc = " | TCB_ADDR_1 | STACK_TOP_1 | STACK_END_1 | TCB_1    | STACK_1 |"]
    #[doc = " .            .       .         ."]
    #[doc = " .            .       .         ."]
    #[doc = " | TCB_ADDR_N | STACK_TOP_N | STACK_END_N | TCB_N    | STACK_N |"]
    #[doc = " |  CHECKSUM  |"]
    #[doc = ""]
    #[doc = " Core dump in flash consists of header and data for every task in the system at the moment of crash."]
    #[doc = " For flash data integrity, a checksum is used at the end of core the dump data."]
    #[doc = " The structure of core dump data is described below in details."]
    #[doc = " 1) Core dump starts with header:"]
    #[doc = " 1.1) TOTAL_LEN is total length of core dump data in flash including the checksum. Size is 4 bytes."]
    #[doc = " 1.2) VERSION field keeps 4 byte version of core dump."]
    #[doc = " 1.2) TASKS_NUM is the number of tasks for which data are stored. Size is 4 bytes."]
    #[doc = " 1.3) TCB_SIZE is the size of task's TCB structure. Size is 4 bytes."]
    #[doc = " 2) Core dump header is followed by the data for every task in the system."]
    #[doc = "    Task data are started with task header:"]
    #[doc = " 2.1) TCB_ADDR is the address of TCB in memory. Size is 4 bytes."]
    #[doc = " 2.2) STACK_TOP is the top of task's stack (address of the topmost stack item). Size is 4 bytes."]
    #[doc = " 2.2) STACK_END is the end of task's stack (address from which task's stack starts). Size is 4 bytes."]
    #[doc = " 3) Task header is followed by TCB data. Size is TCB_SIZE bytes."]
    #[doc = " 4) Task's stack is placed after TCB data. Size is (STACK_END - STACK_TOP) bytes."]
    #[doc = " 5) The checksum is placed at the end of the data."]
    pub fn esp_core_dump_to_flash(info: *mut panic_info_t);
}
extern "C" {
    #[doc = " @brief  Print base64-encoded core dump to UART."]
    #[doc = ""]
    #[doc = " The structure of core dump data is the same as for data stored in flash (@see esp_core_dump_to_flash) with some notes:"]
    #[doc = " 1) The checksum is not present in core dump printed to UART."]
    #[doc = " 2) Since checksum is omitted TOTAL_LEN does not include its size."]
    #[doc = " 3) Printed base64 data are surrounded with special messages to help user recognize the start and end of actual data."]
    pub fn esp_core_dump_to_uart(info: *mut panic_info_t);
}
extern "C" {
    #[doc = " @brief  Check integrity of coredump data in flash."]
    #[doc = "         This function reads the coredump data while calculating their checksum. If it"]
    #[doc = "         doesn't match the checksum written on flash, it means data are corrupted,"]
    #[doc = "         an error will be returned. Else, ESP_OK is returned."]
    #[doc = ""]
    #[doc = " @return `ESP_OK` if core dump is present and valid, `ESP_ERR_NOT_FOUND` if no core dump"]
    #[doc = "         is stored in the partition, `ESP_ERR_INVALID_SIZE` or `ESP_ERR_INVALID_CRC`"]
    #[doc = "         if the core dump is corrupted, other errors when unable to access flash, in that"]
    #[doc = "         case please refer to \\see esp_err_t"]
    pub fn esp_core_dump_image_check() -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Retrieves address and size of coredump data in flash."]
    #[doc = "         This function is always available, even when core dump is disabled in menuconfig."]
    #[doc = ""]
    #[doc = " @param  out_addr   pointer to store image address in flash."]
    #[doc = " @param  out_size   pointer to store image size in flash (including checksum). In bytes."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, otherwise \\see esp_err_t"]
    pub fn esp_core_dump_image_get(out_addr: *mut size_t, out_size: *mut size_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief  Erases coredump data in flash. esp_core_dump_image_get() will then return"]
    #[doc = "         ESP_ERR_NOT_FOUND. Can be used after a coredump has been transmitted successfully."]
    #[doc = "         This function is always available, even when core dump is disabled in menuconfig."]
    #[doc = ""]
    #[doc = " @return ESP_OK on success, otherwise \\see esp_err_t"]
    pub fn esp_core_dump_image_erase() -> esp_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct essl_dev_t {
    _unused: [u8; 0],
}
#[doc = " Handle of an ESSL device"]
pub type essl_handle_t = *mut essl_dev_t;
extern "C" {
    #[doc = " @brief Initialize the slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                If success"]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - Other value returned from lower layer `init`."]
    pub fn essl_init(handle: essl_handle_t, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Wait for interrupt of an ESSL slave device."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK:                If success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_wait_for_ready(handle: essl_handle_t, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Get buffer num for the host to send data to the slave. The buffers are size of ``buffer_size``."]
    #[doc = ""]
    #[doc = " @param handle Handle of a ESSL device."]
    #[doc = " @param out_tx_num Output of buffer num that host can send data to ESSL slave."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK:                Success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: This API is not supported in this mode"]
    #[doc = "      - One of the error codes from SDMMC/SPI host controller"]
    pub fn essl_get_tx_buffer_num(
        handle: essl_handle_t,
        out_tx_num: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Get the size, in bytes, of the data that the ESSL slave is ready to send"]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param out_rx_size Output of data size to read from slave, in bytes"]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK:                Success"]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: This API is not supported in this mode"]
    #[doc = "      - One of the error codes from SDMMC/SPI host controller"]
    pub fn essl_get_rx_data_size(
        handle: essl_handle_t,
        out_rx_size: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Reset the counters of this component. Usually you don't need to do this unless you know the slave is reset."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                Success"]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: This API is not supported in this mode"]
    #[doc = "        - ESP_ERR_INVALID_ARG:   Invalid argument, handle is not init."]
    pub fn essl_reset_cnt(handle: essl_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " Send a packet to the ESSL Slave. The Slave receives the packet into buffers whose size is ``buffer_size`` (configured during initialization)."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param start Start address of the packet to send"]
    #[doc = " @param length Length of data to send, if the packet is over-size, the it will be divided into blocks and hold into different buffers automatically."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - ESP_ERR_INVALID_ARG:   Invalid argument, handle is not init or other argument is not valid."]
    #[doc = "      - ESP_ERR_TIMEOUT:       No buffer to use, or error ftrom SDMMC host controller."]
    #[doc = "      - ESP_ERR_NOT_FOUND:     Slave is not ready for receiving."]
    #[doc = "      - ESP_ERR_NOT_SUPPORTED: This API is not supported in this mode"]
    #[doc = "      - One of the error codes from SDMMC/SPI host controller."]
    pub fn essl_send_packet(
        handle: essl_handle_t,
        start: *const c_types::c_void,
        length: size_t,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Get a packet from ESSL slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param[out] out_data Data output address"]
    #[doc = " @param size The size of the output buffer, if the buffer is smaller than the size of data to receive from slave, the driver returns ``ESP_ERR_NOT_FINISHED``"]
    #[doc = " @param[out] out_length Output of length the data actually received from slave."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success:        All the data has been read from the slave."]
    #[doc = "     - ESP_ERR_INVALID_ARG:   Invalid argument, The handle is not initialized or the other arguments are invalid."]
    #[doc = "     - ESP_ERR_NOT_FINISHED:  Read was successful, but there is still data remaining."]
    #[doc = "     - ESP_ERR_NOT_FOUND:     Slave is not ready to send data."]
    #[doc = "     - ESP_ERR_NOT_SUPPORTED: This API is not supported in this mode"]
    #[doc = "     - One of the error codes from SDMMC/SPI host controller."]
    pub fn essl_get_packet(
        handle: essl_handle_t,
        out_data: *mut c_types::c_void,
        size: size_t,
        out_length: *mut size_t,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Write general purpose R/W registers (8-bit) of ESSL slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param addr Address of register to write. For SDIO, valid address: 0-59. For SPI, see ``essl_spi.h``"]
    #[doc = " @param value Value to write to the register."]
    #[doc = " @param value_o Output of the returned written value."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @note sdio 28-31 are reserved, the lower API helps to skip."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC/SPI host controller"]
    pub fn essl_write_reg(
        handle: essl_handle_t,
        addr: u8,
        value: u8,
        value_o: *mut u8,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read general purpose R/W registers (8-bit) of ESSL slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of a ``essl`` device."]
    #[doc = " @param add Address of register to read. For SDIO, Valid address: 0-27, 32-63 (28-31 reserved, return interrupt bits on read). For SPI, see ``essl_spi.h``"]
    #[doc = " @param value_o Output value read from the register."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC/SPI host controller"]
    pub fn essl_read_reg(
        handle: essl_handle_t,
        add: u8,
        value_o: *mut u8,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " wait for an interrupt of the slave"]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                If interrupt is triggered."]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - ESP_ERR_TIMEOUT:       No interrupts before timeout."]
    pub fn essl_wait_int(handle: essl_handle_t, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Clear interrupt bits of ESSL slave. All the bits set in the mask will be cleared, while other bits will stay the same."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param intr_mask Mask of interrupt bits to clear."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                Success"]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - One of the error codes from SDMMC host controller"]
    pub fn essl_clear_intr(handle: essl_handle_t, intr_mask: u32, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Get interrupt bits of ESSL slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param intr_raw Output of the raw interrupt bits. Set to NULL if only masked bits are read."]
    #[doc = " @param intr_st Output of the masked interrupt bits. set to NULL if only raw bits are read."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                Success"]
    #[doc = "        - ESP_INVALID_ARG:       If both ``intr_raw`` and ``intr_st`` are NULL."]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - One of the error codes from SDMMC host controller"]
    pub fn essl_get_intr(
        handle: essl_handle_t,
        intr_raw: *mut u32,
        intr_st: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Set interrupt enable bits of ESSL slave. The slave only sends interrupt on the line when there is a bit both the raw status and the enable are set."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param ena_mask Mask of the interrupt bits to enable."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                Success"]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - One of the error codes from SDMMC host controller"]
    pub fn essl_set_intr_ena(handle: essl_handle_t, ena_mask: u32, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Get interrupt enable bits of ESSL slave."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param ena_mask_o Output of interrupt bit enable mask."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_get_intr_ena(
        handle: essl_handle_t,
        ena_mask_o: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Send interrupts to slave. Each bit of the interrupt will be triggered."]
    #[doc = ""]
    #[doc = " @param handle Handle of an ESSL device."]
    #[doc = " @param intr_mask Mask of interrupt bits to send to slave."]
    #[doc = " @param wait_ms Millisecond to wait before timeout, will not wait at all if set to 0-9."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "        - ESP_OK:                Success"]
    #[doc = "        - ESP_ERR_NOT_SUPPORTED: Current device does not support this function."]
    #[doc = "        - One of the error codes from SDMMC host controller"]
    pub fn essl_send_slave_intr(handle: essl_handle_t, intr_mask: u32, wait_ms: u32) -> esp_err_t;
}
#[doc = " Configuration for the ESSL SDIO device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct essl_sdio_config_t {
    #[doc = "< The initialized sdmmc card pointer of the slave."]
    pub card: *mut sdmmc_card_t,
    #[doc = "< The pre-negotiated recv buffer size used by both the host and the slave."]
    pub recv_buffer_size: c_types::c_int,
}
impl Default for essl_sdio_config_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Initialize the ESSL SDIO device and get its handle."]
    #[doc = ""]
    #[doc = " @param out_handle Output of the handle."]
    #[doc = " @param config    Configuration for the ESSL SDIO device."]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: on success"]
    #[doc = "  - ESP_ERR_NO_MEM: memory exhausted."]
    pub fn essl_sdio_init_dev(
        out_handle: *mut essl_handle_t,
        config: *const essl_sdio_config_t,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Deinitialize and free the space used by the ESSL SDIO device."]
    #[doc = ""]
    #[doc = " @param handle Handle of the ESSL SDIO device to deinit."]
    #[doc = " @return"]
    #[doc = "  - ESP_OK: on success"]
    #[doc = "  - ESP_ERR_INVALID_ARG: wrong handle passed"]
    pub fn essl_sdio_deinit_dev(handle: essl_handle_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @cond */"]
    #[doc = " SDIO Initialize process of an ESSL SDIO slave device."]
    #[doc = ""]
    #[doc = " @param arg Context of the ``essl`` component. Send to other functions later."]
    #[doc = " @param wait_ms Time to wait before operation is done, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_init(arg: *mut c_types::c_void, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Wait for interrupt of an ESSL SDIO slave device."]
    #[doc = ""]
    #[doc = " @param arg Context of the ``essl`` component."]
    #[doc = " @param wait_ms Time to wait before operation is done, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_wait_for_ready(arg: *mut c_types::c_void, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Get buffer num for the host to send data to the slave. The buffers are size of ``buffer_size``."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_get_tx_buffer_num(arg: *mut c_types::c_void) -> u32;
}
extern "C" {
    #[doc = " Get amount of data the ESSL SDIO slave preparing to send to host."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_get_rx_data_size(arg: *mut c_types::c_void) -> u32;
}
extern "C" {
    #[doc = " Send a packet to the ESSL SDIO slave. The slave receive the packet into buffers whose size is ``buffer_size`` in the arg."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param start Start address of the packet to send"]
    #[doc = " @param length Length of data to send, if the packet is over-size, the it will be divided into blocks and hold into different buffers automatically."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - ESP_ERR_TIMEOUT No buffer to use, or error ftrom SDMMC host controller"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_send_packet(
        arg: *mut c_types::c_void,
        start: *const c_types::c_void,
        length: size_t,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Get a packet from an ESSL SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param[out] out_data Data output address"]
    #[doc = " @param size The size of the output buffer, if the buffer is smaller than the size of data to receive from slave, the driver returns ``ESP_ERR_NOT_FINISHED``"]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "     - ESP_OK Success, all the data are read from the slave."]
    #[doc = "     - ESP_ERR_NOT_FINISHED Read success, while there're data remaining."]
    #[doc = "     - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_get_packet(
        arg: *mut c_types::c_void,
        out_data: *mut c_types::c_void,
        size: size_t,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Wait for the interrupt from the SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = " @return"]
    #[doc = "  - ESP_ERR_NOT_SUPPORTED: if the interrupt line is not initialized properly."]
    #[doc = "  - ESP_OK: if interrupt happened"]
    #[doc = "  - ESP_ERR_TIMEOUT: if timeout before interrupt happened."]
    #[doc = "  - or other values returned from the `io_int_wait` member of the `card->host` structure."]
    pub fn essl_sdio_wait_int(arg: *mut c_types::c_void, wait_ms: u32) -> esp_err_t;
}
extern "C" {
    #[doc = " Clear interrupt bits of an ESSL SDIO slave. All the bits set in the mask will be cleared, while other bits will stay the same."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param intr_mask Mask of interrupt bits to clear."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_clear_intr(
        arg: *mut c_types::c_void,
        intr_mask: u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Get interrupt bits of an ESSL SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param intr_raw Output of the raw interrupt bits. Set to NULL if only masked bits are read."]
    #[doc = " @param intr_st Output of the masked interrupt bits. set to NULL if only raw bits are read."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - ESP_INVALID_ARG   if both ``intr_raw`` and ``intr_st`` are NULL."]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_get_intr(
        arg: *mut c_types::c_void,
        intr_raw: *mut u32,
        intr_st: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Set interrupt enable bits of an ESSL SDIO slave. The slave only sends interrupt on the line when there is a bit both the raw status and the enable are set."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param ena_mask Mask of the interrupt bits to enable."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_set_intr_ena(
        arg: *mut c_types::c_void,
        ena_mask: u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Get interrupt enable bits of an ESSL SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param ena_mask_o Output of interrupt bit enable mask."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_get_intr_ena(
        arg: *mut c_types::c_void,
        ena_mask_o: *mut u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Write general purpose R/W registers (8-bit) of an ESSL SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param addr Address of register to write. Valid address: 0-27, 32-63 (28-31 reserved)."]
    #[doc = " @param value Value to write to the register."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - ESP_ERR_INVALID_ARG Address not valid."]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_write_reg(
        arg: *mut c_types::c_void,
        addr: u8,
        value: u8,
        value_o: *mut u8,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Read general purpose R/W registers (8-bit) of an ESSL SDIO slave."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param add Address of register to read. Valid address: 0-27, 32-63 (28-31 reserved, return interrupt bits on read)."]
    #[doc = " @param value Output value read from the register."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - ESP_ERR_INVALID_ARG Address not valid."]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_read_reg(
        arg: *mut c_types::c_void,
        add: u8,
        value_o: *mut u8,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " Send interrupts to slave. Each bit of the interrupt will be triggered."]
    #[doc = ""]
    #[doc = " @param arg Context of the component."]
    #[doc = " @param intr_mask Mask of interrupt bits to send to slave."]
    #[doc = " @param wait_ms Time to wait before timeout, in ms."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK Success"]
    #[doc = "      - One of the error codes from SDMMC host controller"]
    pub fn essl_sdio_send_slave_intr(
        arg: *mut c_types::c_void,
        intr_mask: u32,
        wait_ms: u32,
    ) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Reset the counter on the host side."]
    #[doc = ""]
    #[doc = " @note Only call when you know the slave has reset its counter, or there will be inconsistent between the master and the slave."]
    #[doc = ""]
    #[doc = " @param arg  Context of the component."]
    pub fn essl_sdio_reset_cnt(arg: *mut c_types::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_context {
    pub _routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
    pub _arg: *mut c_types::c_void,
    pub _canceltype: c_types::c_int,
    pub _previous: *mut _pthread_cleanup_context,
}
impl Default for _pthread_cleanup_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __attr: *const pthread_mutexattr_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __timeout: *const timespec,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut clockid_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: clockid_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __attr: *const pthread_condattr_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__mutex: *mut pthread_cond_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        attr: *mut pthread_attr_t,
        __stackaddr: *mut c_types::c_void,
        __stacksize: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        attr: *const pthread_attr_t,
        __stackaddr: *mut *mut c_types::c_void,
        __stacksize: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: size_t,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_create(
        __pthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut c_types::c_void) -> *mut c_types::c_void,
        >,
        __arg: *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_join(
        __pthread: pthread_t,
        __value_ptr: *mut *mut c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_detach(__pthread: pthread_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_exit(__value_ptr: *mut c_types::c_void);
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__t1: pthread_t, __t2: pthread_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(thread: pthread_t, clock_id: *mut clockid_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(new_level: c_types::c_int) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> c_types::c_int;
}
extern "C" {
    pub fn pthread_yield();
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destructor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __value: *const c_types::c_void,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut c_types::c_void;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_cancel(__pthread: pthread_t) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: c_types::c_int,
        __oldstate: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: c_types::c_int,
        __oldtype: *mut c_types::c_int,
    ) -> c_types::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn _pthread_cleanup_push(
        _context: *mut _pthread_cleanup_context,
        _routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut c_types::c_void)>,
        _arg: *mut c_types::c_void,
    );
}
extern "C" {
    pub fn _pthread_cleanup_pop(_context: *mut _pthread_cleanup_context, _execute: c_types::c_int);
}
#[doc = " pthread configuration structure that influences pthread creation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esp_pthread_cfg_t {
    #[doc = "< The stack size of the pthread"]
    pub stack_size: size_t,
    #[doc = "< The thread's priority"]
    pub prio: size_t,
    #[doc = "< Inherit this configuration further"]
    pub inherit_cfg: bool,
    #[doc = "< The thread name."]
    pub thread_name: *const c_types::c_char,
    #[doc = "< The core id to pin the thread to. Has the same value range as xCoreId argument of xTaskCreatePinnedToCore."]
    pub pin_to_core: c_types::c_int,
}
impl Default for esp_pthread_cfg_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[doc = " @brief Creates a default pthread configuration based"]
    #[doc = " on the values set via menuconfig."]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      A default configuration structure."]
    pub fn esp_pthread_get_default_config() -> esp_pthread_cfg_t;
}
extern "C" {
    #[doc = " @brief Configure parameters for creating pthread"]
    #[doc = ""]
    #[doc = " This API allows you to configure how the subsequent"]
    #[doc = " pthread_create() call will behave. This call can be used to setup"]
    #[doc = " configuration parameters like stack size, priority, configuration"]
    #[doc = " inheritance etc."]
    #[doc = ""]
    #[doc = " If the 'inherit' flag in the configuration structure is enabled,"]
    #[doc = " then the same configuration is also inherited in the thread"]
    #[doc = " subtree."]
    #[doc = ""]
    #[doc = " @note Passing non-NULL attributes to pthread_create() will override"]
    #[doc = "       the stack_size parameter set using this API"]
    #[doc = ""]
    #[doc = " @param cfg The pthread config parameters"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if configuration was successfully set"]
    #[doc = "      - ESP_ERR_NO_MEM if out of memory"]
    #[doc = "      - ESP_ERR_INVALID_ARG if stack_size is less than PTHREAD_STACK_MIN"]
    pub fn esp_pthread_set_cfg(cfg: *const esp_pthread_cfg_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Get current pthread creation configuration"]
    #[doc = ""]
    #[doc = " This will retrieve the current configuration that will be used for"]
    #[doc = " creating threads."]
    #[doc = ""]
    #[doc = " @param p Pointer to the pthread config structure that will be"]
    #[doc = " updated with the currently configured parameters"]
    #[doc = ""]
    #[doc = " @return"]
    #[doc = "      - ESP_OK if the configuration was available"]
    #[doc = "      - ESP_ERR_NOT_FOUND if a configuration wasn't previously set"]
    pub fn esp_pthread_get_cfg(p: *mut esp_pthread_cfg_t) -> esp_err_t;
}
extern "C" {
    #[doc = " @brief Initialize pthread library"]
    pub fn esp_pthread_init() -> esp_err_t;
}
pub type __builtin_va_list = *mut c_types::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct udp_pcb {
    pub _address: u8,
}
